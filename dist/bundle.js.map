{"version":3,"file":"bundle.js","mappings":"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AKmB,MAAQ,EACbnB,KAAKiN,SAAW,GAChBjN,KAAK0f,eAAgB,CACvB,EARF,iBACS,EAAA5a,SAAW,e,6YCRpB,gBACA,SACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,SACA,UAEA,SAEA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,QACA,UACA,UAEA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,UACA,UACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WAEA,WACA,SACA,WACA,WACA,WACA,WACA,WAIA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WAEA,UACA,WACA,WACA,WACA,WAGA,WACA,WACA,WACA,WACA,WACA,WACA,WAEA,WACA,WACA,WACA,WACA,WACA,WACA,WAEA,MAAa+qG,GAKX,WAAArwG,CAAYswG,GACV9vG,KAAKL,EAAImwG,EAAGnwG,EACZK,KAAKJ,EAAIkwG,EAAGlwG,EACZI,KAAKqC,KAAOytG,EAAGztG,IACjB,EATF,qBAYA,IAAI0tG,GAAiB,CAACC,EAAsBtwG,KAC1C,IAAIowG,EAAK,IAAI,EAAA3lG,WAAWzK,EAAMswG,EAAIrwG,EAAGqwG,EAAIpwG,EAAGowG,EAAIrwG,EAAGqwG,EAAIpwG,GAEvD,OADAkwG,EAAGztG,KAAO2tG,EAAI3tG,KACPytG,GAGT,IAAYG,IAAZ,SAAYA,GACV,qBACA,sBACD,CAHD,CAAYA,GAAA,EAAAA,iBAAA,EAAAA,eAAc,KAK1B,MAAaC,GAcX,WAAA1wG,CAAY0V,EAAwBxV,GAClCM,KAAKL,EAAIuV,EAAWvV,EACpBK,KAAKJ,EAAIsV,EAAWtV,EACpBI,KAAKqC,KAAO6S,EAAW7S,KACnB6S,aAAsB,EAAAjL,sBACxBjK,KAAK+D,KAAOksG,GAAeE,MAC3BnwG,KAAKowG,OAAS1wG,EAAKuO,MAAM9G,QAAQ+N,EAAWzV,MAC5CO,KAAKonG,QAAUlyF,EAAWzV,MAAMoa,SAChC7Z,KAAKqwG,WAAa,IAAIC,GAAWp7F,EAAW9C,MAAO1S,IAEjDwV,aAAsB,EAAAR,iBACxB1U,KAAK+D,KAAOksG,GAAeM,OAC3BvwG,KAAKwwG,YAAct7F,EAAWhB,MAC9BlU,KAAKowG,OAAS1wG,EAAKuO,MAAM9G,QAAQ+N,EAAW8B,OAAOvX,MACnDO,KAAKonG,QAAUlyF,EAAW8B,OAAOvX,MAAMoa,SACvC7Z,KAAKywG,eAAiBv7F,EAAW8B,OAAOvX,KAAKuH,SAASG,QACpD+N,EAAW8B,QAEbhX,KAAK0wG,gBAAmBx7F,EAAW8B,OAAe6C,SAClD7Z,KAAKkU,MAAQgB,EAAWhB,MAE5B,EAnCF,qBAsCA,IAAIy8F,GAAiB,CAACC,EAAqBlxG,KACzC,GAAIkxG,EAAG7sG,OAASksG,GAAeE,MAAO,CACpC,IAAI1wG,EACDmxG,EAAGxJ,SAAW1nG,EAAK+8C,WAAW9tC,IAAIiiG,EAAGxJ,UAAa1nG,EAAKuO,MAAM2iG,EAAGR,QAC/Dh+F,EAAQy+F,GAAUD,EAAGP,WAAY3wG,GACjC2K,EAAI,IAAI,EAAAJ,oBAAoBxK,EAAM2S,EAAOw+F,EAAGjxG,EAAGixG,EAAGhxG,GAEtD,OADAyK,EAAEhI,KAAOuuG,EAAGvuG,KACLgI,C,CAET,GAAIumG,EAAG7sG,OAASksG,GAAeM,OAAQ,CACrC,MAAMO,EACHF,EAAGxJ,SAAW1nG,EAAK+8C,WAAW9tC,IAAIiiG,EAAGxJ,UAAa1nG,EAAKuO,MAAM2iG,EAAGR,QAGnE,IAAIW,EACJ,GAAIH,EAAGF,gBAAiB,CACtB,MAAMM,EAAQF,EAAW9pG,SAAS1G,KAC/B2G,GAAOA,EAAU4S,WAAa+2F,EAAGF,iBAEhCM,GAASA,aAAiB,EAAAz9F,cAAaw9F,EAAkBC,E,CAG/D,IAAKD,EAAiB,CACpB,MAAME,EAAUH,EAAW9pG,SAAS4pG,EAAGH,gBACnCQ,GAAWA,aAAmB,EAAA19F,cAChCw9F,EAAkBE,E,CAGtB,IAAKF,EAEH,OAGF,MAAM1mG,EAAI,IAAI,EAAAqK,eAAeq8F,EAAiBH,EAAGjxG,EAAGixG,EAAGhxG,GAEvD,OADAyK,EAAE6J,MAAQ08F,EAAGJ,YACNnmG,C,GAIX,IAAY4xE,IAAZ,SAAYA,GACV,uBACA,2BACA,uBACA,qBACA,mBACA,qBACA,yBACA,mBACA,mBACA,uBACA,sBACA,kBACA,sBACA,oBACA,0BACA,wCACA,wBACA,wBACA,oCACA,sCACA,8BACA,8BACA,wBACA,oCACA,gCACA,oBACA,0BACA,sBACA,8BACA,sBACA,oBACA,wBACA,oBACA,oCACA,0BACA,0BACA,wBACA,8BACA,gCACA,oBACA,kCACA,oBACA,sBACA,4CACA,oBACA,8BACA,wBACA,4BACA,0BACA,oBACA,0BACA,wBACA,0BACA,oBACA,wBACA,wBACA,sBACA,8BACA,gCACA,8BACA,sCACA,gCACA,kCACA,kCACA,qCACD,CAlED,CAAYA,GAAA,EAAAA,YAAA,EAAAA,UAAS,KAoErB,MAAaq0B,GA+CX,WAAA9wG,CAAY4S,EAAe1S,GACzBM,KAAKowG,OAAS1wG,EAAKuO,MAAM9G,QAAQiL,EAAM3S,MACvCO,KAAKonG,QAAUh1F,EAAM3S,MAAMoa,SAC3B7Z,KAAKL,EAAIyS,EAAMzS,EACfK,KAAKJ,EAAIwS,EAAMxS,EACfI,KAAKC,OAASmS,EAAMnS,OACpBD,KAAKyG,UAAY2L,EAAM3L,UACvBzG,KAAKkrB,SAAW9Y,EAAM8Y,SACtBlrB,KAAK8W,QAAU1E,EAAM0E,QAGrB,IACE9W,KAAKkxG,YAAyC,IAA3B9+F,EAAcgP,SACjCphB,KAAK+gB,aAAgB3O,EAAc8O,QAAQjhB,aAAU4X,C,CACrD,MAAM,CAER,IACE7X,KAAKwhB,QAAmC,IAAzBpP,EAAcoP,M,CAC7B,MAAM,CACR,IACExhB,KAAKyhB,cAA+C,IAA/BrP,EAAcqP,Y,CACnC,MAAM,CA6BR,GA3BAzhB,KAAKihB,eAAkB7O,EAAc6O,eACrCjhB,KAAK6sB,YAAeza,EAAgBya,YACpC7sB,KAAKyb,UAAYrJ,EAAMqJ,UACvBzb,KAAKqC,KAAO+P,EAAM/P,KAClBrC,KAAKyH,cAAgB2K,EAAM3K,cAC3BzH,KAAKgB,YAAcoR,EAAMpR,YACzBhB,KAAKmxG,SAAU,EACX/+F,EAAM7R,OACRP,KAAKmxG,SAAU,EACfnxG,KAAKO,KAAO,IAAI6wG,GAAUh/F,EAAM7R,KAAMb,IAExCM,KAAKsM,WAAa8F,EAAM9F,WAEpB8F,aAAiB,GAAA/L,QACnBrG,KAAK0H,MAAQ0K,EAAM1K,MACnB1H,KAAKoM,WAAagG,EAAMhG,WACpBgG,EAAMhG,aACRpM,KAAKqxG,eAAiB50F,OAAO+2C,KAAK9zD,EAAK+O,SAASnO,KAC7Ck1B,GAAQ91B,EAAK+O,QAAQ+mB,KAASpjB,EAAMmC,cAElCvU,KAAKqxG,iBACRrxG,KAAKqxG,eAAiB50F,OAAO+2C,KAAK9zD,EAAKid,gBAAgBrc,KACpDk1B,GAAQ91B,EAAKid,eAAe6Y,KAASpjB,EAAMmC,iBAIhDnC,aAAiB,EAAA62D,SAAQjpE,KAAK+D,KAAOk4E,GAAUq1B,QAC/Cl/F,aAAiB,EAAAnJ,cAAe,CAClCjJ,KAAK+D,KAAOk4E,GAAUs1B,SACtBvxG,KAAKo0B,mBAAqBhiB,EAAMgiB,mBAChCp0B,KAAKK,MAAQ,GACb,IAAK,MAAMM,KAAKyR,EAAM/R,MAChBM,GACFX,KAAKK,MAAM2J,KAAK,IAAIonG,GAAUzwG,EAAGjB,G,CAwCvC,GApCI0S,aAAiB,EAAAvJ,cACnB7I,KAAK+D,KAAOk4E,GAAUu1B,OACtBxxG,KAAKyxG,iBAAmBr/F,EAAM8B,MAC9BlU,KAAKme,OAAS/L,EAAM+L,OACpBne,KAAKoe,OAAShM,EAAMgM,OACpBpe,KAAKwlB,QAAUpT,EAAMoT,QACrBxlB,KAAKylB,QAAUrT,EAAMqT,QACrBzlB,KAAK0xG,cAAgBt/F,EAAMs/F,cAC3B1xG,KAAK2xG,cAAgBv/F,EAAMu/F,eAEzBv/F,aAAiB,GAAA9S,QAAOU,KAAK+D,KAAOk4E,GAAUh4E,OAE9CmO,aAAiB,GAAA9S,QACnBU,KAAK4xG,YAAcx/F,EAAMnS,QAAU,GAEjCmS,aAAiB,EAAAogC,eAAcxyC,KAAK+D,KAAOk4E,GAAU41B,MACrDz/F,aAAiB,EAAA86E,QAAOltF,KAAK+D,KAAOk4E,GAAU61B,OAC9C1/F,aAAiB,EAAAwgF,kBAAiB5yF,KAAK+D,KAAOk4E,GAAU81B,SACxD3/F,aAAiB,EAAAugF,eAAc3yF,KAAK+D,KAAOk4E,GAAU+1B,MACrD5/F,aAAiB,GAAA6/F,eAAcjyG,KAAK+D,KAAOk4E,GAAUi2B,MACrD9/F,aAAiB,EAAAhJ,cACnBpJ,KAAK+D,KAAOk4E,GAAUk2B,QAEpB//F,aAAiB,EAAAg7E,cAAaptF,KAAK+D,KAAOk4E,GAAUm2B,OACpDhgG,aAAiB,EAAAigG,MAAKryG,KAAK+D,KAAOk4E,GAAUq2B,KAC5ClgG,aAAiB,EAAAzJ,aACnB3I,KAAK+D,KAAOk4E,GAAUs2B,MACtBvyG,KAAKo0B,mBAAqBhiB,EAAMgiB,oBAE9BhiB,aAAiB,EAAA5J,YACnBxI,KAAK+D,KAAOk4E,GAAUu2B,MAEpBpgG,aAAiB,EAAAhM,UACnBpG,KAAK+D,KAAOk4E,GAAUlS,QACtB/pE,KAAK+H,eAAiBqK,EAAMrK,gBAE1BqK,aAAiB,EAAAguB,eAAgB,CACnCpgC,KAAK+D,KAAOk4E,GAAUw2B,eACtBzyG,KAAK0yG,gBAAiB,EAClBtgG,EAAM4uB,eACRhhC,KAAK0yG,gBAAiB,EACtB1yG,KAAK2yG,eAAiBl2F,OAAO+2C,KAAK9zD,EAAK+O,SAASnO,KAC7Ck1B,GAAQ91B,EAAK+O,QAAQ+mB,KAASpjB,EAAM4uB,cAElChhC,KAAK2yG,iBACR3yG,KAAK2yG,eAAiBl2F,OAAO+2C,KAAK9zD,EAAKid,gBAAgBrc,KACpDk1B,GAAQ91B,EAAKid,eAAe6Y,KAASpjB,EAAM4uB,gBAGlDhhC,KAAKG,KAAOiS,EAAMjS,KAClBH,KAAKygC,UAAY,GACjB,IAAK,MAAM9tB,KAAQP,EAAMquB,UACnB9tB,GACF3S,KAAKygC,UAAUz2B,KAAK,IAAIonG,GAAUz+F,EAAMjT,IAGxC0S,EAAMO,OACR3S,KAAK2S,KAAO,IAAIy+F,GAAUh/F,EAAMO,KAAMjT,IAExCM,KAAKqgC,MAAQjuB,EAAMiuB,MACnBrgC,KAAKsgC,SAAWluB,EAAMkuB,Q,CAEpBluB,aAAiB,EAAAmB,cACnBvT,KAAK+D,KAAOk4E,GAAUs0B,OACtBvwG,KAAKwwG,YAAcp+F,EAAM8B,OAEvB9B,aAAiB,EAAA1J,cACnB1I,KAAK+D,KAAOk4E,GAAU22B,QAEpBxgG,aAAiB,GAAA7I,oBAAmBvJ,KAAK+D,KAAOk4E,GAAU42B,cAC1DzgG,aAAiB,GAAApJ,qBACnBhJ,KAAK+D,KAAOk4E,GAAU62B,eACpB1gG,aAAiB,GAAA/I,iBAAgBrJ,KAAK+D,KAAOk4E,GAAU82B,WACvD3gG,aAAiB,GAAAqrE,iBAAgBz9E,KAAK+D,KAAOk4E,GAAU+2B,WACvD5gG,aAAiB,GAAArJ,cAAa/I,KAAK+D,KAAOk4E,GAAUg3B,QACpD7gG,aAAiB,EAAAxJ,oBAAmB5I,KAAK+D,KAAOk4E,GAAUi3B,cAC1D9gG,aAAiB,GAAA9I,kBAAiBtJ,KAAK+D,KAAOk4E,GAAUk3B,YACxD/gG,aAAiB,GAAA3J,YAAWzI,KAAK+D,KAAOk4E,GAAUm3B,MAClDhhG,aAAiB,GAAAurE,eAAc39E,KAAK+D,KAAOk4E,GAAUo3B,SACrDjhG,aAAiB,GAAA5I,aAAYxJ,KAAK+D,KAAOk4E,GAAUq3B,OACnDlhG,aAAiB,GAAA+K,iBACnBnd,KAAK+D,KAAOk4E,GAAUs3B,WAGpBnhG,aAAiB,GAAAjJ,aAAYnJ,KAAK+D,KAAOk4E,GAAUu3B,OACnDphG,aAAiB,GAAAtJ,YAAW9I,KAAK+D,KAAOk4E,GAAUw3B,MAClDrhG,aAAiB,GAAA3I,cAAazJ,KAAK+D,KAAOk4E,GAAUy3B,QACpDthG,aAAiB,GAAAuhG,OAAM3zG,KAAK+D,KAAOk4E,GAAU23B,MAC7CxhG,aAAiB,GAAA8iB,cAAal1B,KAAK+D,KAAOk4E,GAAU43B,cACpDzhG,aAAiB,GAAAS,UAAS7S,KAAK+D,KAAOk4E,GAAU63B,SAChD1hG,aAAiB,EAAAsoE,UAAS16E,KAAK+D,KAAOk4E,GAAU83B,SAChD3hG,aAAiB,GAAA4hG,SAAQh0G,KAAK+D,KAAOk4E,GAAUg4B,QAC/C7hG,aAAiB,GAAAq4B,YAAWzqC,KAAK+D,KAAOk4E,GAAUi4B,WAClD9hG,aAAiB,GAAA+hG,YAAWn0G,KAAK+D,KAAOk4E,GAAUm4B,YAClDhiG,aAAiB,GAAAyrE,OAAM79E,KAAK+D,KAAOk4E,GAAUo4B,MAC7CjiG,aAAiB,GAAAkiG,aAAYt0G,KAAK+D,KAAOk4E,GAAUs4B,aACnDniG,aAAiB,GAAAgrE,OAAMp9E,KAAK+D,KAAOk4E,GAAUu4B,MAC7CpiG,aAAiB,EAAA+6E,QAAOntF,KAAK+D,KAAOk4E,GAAUw4B,OAC9CriG,aAAiB,GAAA26F,kBACnB/sG,KAAK+D,KAAOk4E,GAAUy4B,kBACpBtiG,aAAiB,GAAA66E,OAAMjtF,KAAK+D,KAAOk4E,GAAU04B,MAC7CviG,aAAiB,EAAAwiG,YAAW50G,KAAK+D,KAAOk4E,GAAU44B,WAClDziG,aAAiB,GAAA4rE,cAAah+E,KAAK+D,KAAOk4E,GAAU64B,QACpD1iG,aAAiB,GAAA2iG,mBAAkB/0G,KAAK+D,KAAOk4E,GAAU+4B,UACzD5iG,aAAiB,GAAAyjD,eAAc71D,KAAK+D,KAAOk4E,GAAUg5B,SACrD7iG,aAAiB,GAAA7J,YAAWvI,KAAK+D,KAAOk4E,GAAUi5B,MAClD9iG,aAAiB,GAAAzI,cAAa3J,KAAK+D,KAAOk4E,GAAUk5B,QACpD/iG,aAAiB,GAAA1I,eAAc1J,KAAK+D,KAAOk4E,GAAUm5B,SACrDhjG,aAAiB,GAAAksE,eAAct+E,KAAK+D,KAAOk4E,GAAUo5B,SACrDjjG,aAAiB,GAAAxI,YAAW5J,KAAK+D,KAAOk4E,GAAUq5B,MAClDljG,aAAiB,GAAAmjG,iBAAgBv1G,KAAK+D,KAAOk4E,GAAUu5B,QACvDpjG,aAAiB,GAAAqjG,iBAAgBz1G,KAAK+D,KAAOk4E,GAAUy5B,QACvDtjG,aAAiB,GAAAqnE,gBAAez5E,KAAK+D,KAAOk4E,GAAU05B,OACtDvjG,aAAiB,GAAA+2D,gBAAenpE,KAAK+D,KAAOk4E,GAAU25B,WACtDxjG,aAAiB,GAAAyjG,YAAW71G,KAAK+D,KAAOk4E,GAAU65B,YAClD1jG,aAAiB,GAAAm4C,YAAWvqD,KAAK+D,KAAOk4E,GAAU85B,WAClD3jG,aAAiB,GAAAyD,eAAc7V,KAAK+D,KAAOk4E,GAAU+5B,eACrD5jG,aAAiB,GAAA6jG,aAAYj2G,KAAK+D,KAAOk4E,GAAUi6B,YACnD9jG,aAAiB,GAAAyzD,aAAY7lE,KAAK+D,KAAOk4E,GAAUk6B,aACnD/jG,aAAiB,GAAAmgC,aAAYvyC,KAAK+D,KAAOk4E,GAAUm6B,aACnDhkG,aAAiB,GAAAs7F,eAAc1tG,KAAK+D,KAAOk4E,GAAUo6B,cAC3D,EApOF,gBAuOA,IAAIxF,GAAY,CAACyF,EAAgB52G,KAC/B,IAAI0S,EACA3S,EACD62G,EAAGlP,SAAW1nG,EAAK+8C,WAAW9tC,IAAI2nG,EAAGlP,UAAa1nG,EAAKuO,MAAMqoG,EAAGlG,QAGnE,GADIkG,EAAGvyG,OAASk4E,GAAUq1B,SAAQl/F,EAAQ,IAAI,EAAA62D,OAAOxpE,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACtE02G,EAAGvyG,OAASk4E,GAAUs1B,SAAU,CAClCn/F,EAAQ,IAAI,EAAAnJ,cAAcxJ,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,GAC/CwS,EAAMgiB,mBAAqBkiF,EAAGliF,mBAC9BhiB,EAAM/R,MAAQ,GACd,IAAK,MAAMM,KAAK21G,EAAGj2G,MACbM,GACFyR,EAAM/R,MAAM2J,KAAKusG,GAAS51G,EAAGjB,G,CAkDnC,GA9CI42G,EAAGvyG,OAASk4E,GAAUu1B,SACxBp/F,EAAQ,IAAI,EAAAvJ,YAAYpJ,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,GAC7CwS,EAAM8B,MAAQoiG,EAAG7E,iBACjBr/F,EAAM+L,OAASm4F,EAAGn4F,OAClB/L,EAAMgM,OAASk4F,EAAGl4F,OAClBhM,EAAMoT,QAAU8wF,EAAG9wF,QACnBpT,EAAMqT,QAAU6wF,EAAG7wF,QACnBrT,EAAMs/F,cAAgB4E,EAAG5E,cACzBt/F,EAAMu/F,cAAgB2E,EAAG3E,eAEvB2E,EAAGvyG,OAASk4E,GAAUh4E,QAAOmO,EAAQ,IAAI,GAAA9S,MAAMG,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAEpEwS,aAAiB,GAAA9S,OACEg3G,EAAGr2G,QAAU,IAE/BmS,EAAclR,MAAQ,EACtBkR,EAAcjR,MAAQ,EACtBiR,EAAclS,SAAU,GAGzBo2G,EAAGvyG,OAASk4E,GAAU41B,OACxBz/F,EAAQ,IAAI,EAAAogC,aAAa/yC,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC5C02G,EAAGvyG,OAASk4E,GAAU61B,QAAO1/F,EAAQ,IAAI,EAAA86E,MAAMztF,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACpE02G,EAAGvyG,OAASk4E,GAAU81B,UACxB3/F,EAAQ,IAAI,EAAAwgF,gBAAgBnzF,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC/C02G,EAAGvyG,OAASk4E,GAAU+1B,OACxB5/F,EAAQ,IAAI,EAAAugF,aAAalzF,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC5C02G,EAAGvyG,OAASk4E,GAAUi2B,OACxB9/F,EAAQ,IAAI,GAAA6/F,aAAaxyG,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC5C02G,EAAGvyG,OAASk4E,GAAUk2B,SACxB//F,EAAQ,IAAI,EAAAhJ,YAAY3J,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAE3C02G,EAAGvyG,OAASk4E,GAAUm2B,QACxBhgG,EAAQ,IAAI,EAAAg7E,YAAY3tF,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC3C02G,EAAGvyG,OAASk4E,GAAUq2B,MAAKlgG,EAAQ,IAAI,EAAAigG,IAAI5yG,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAChE02G,EAAGvyG,OAASk4E,GAAUs2B,QACxBngG,EAAQ,IAAI,EAAAzJ,WAAWlJ,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,GAC5CwS,EAAMgiB,mBAAqBkiF,EAAGliF,oBAE5BkiF,EAAGvyG,OAASk4E,GAAUu2B,OACxBpgG,EAAQ,IAAI,EAAA5J,UAAU/I,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAEzC02G,EAAGvyG,OAASk4E,GAAUlS,UACxB33D,EAAQ,IAAI,EAAAhM,QAAQ3G,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,EAAG,CAAC02G,EAAGvuG,iBAChDqK,EAAMrK,eAAiBuuG,EAAGvuG,gBAExBuuG,EAAGvyG,OAASk4E,GAAUw2B,eAAgB,CACxC,IAAI9/F,EAAO4jG,GAASD,EAAG3jG,KAAMjT,GAC7B0S,EAAQ,IAAI,EAAAguB,eAAe3gC,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,EAAG+S,GAC/C2jG,EAAG5D,iBACLtgG,EAAM4uB,aAAethC,EAAK+O,QAAQ6nG,EAAG3D,gBAChCvgG,EAAM4uB,eACT5uB,EAAM4uB,aAAethC,EAAKid,eAAe25F,EAAG3D,kBAEhDvgG,EAAMjS,KAAOm2G,EAAGn2G,KAChBiS,EAAMquB,UAAY,GAClB,IAAK,MAAM9tB,KAAQ2jG,EAAG71E,UAChB9tB,GACFP,EAAMquB,UAAUz2B,KAAKusG,GAAS5jG,EAAMjT,IAGxC0S,EAAMiuB,MAAQi2E,EAAGj2E,MACjBjuB,EAAMkuB,SAAWg2E,EAAGh2E,Q,CAGlBg2E,EAAGvyG,OAASk4E,GAAU22B,SACxBxgG,EAAQ,IAAI,EAAA1J,YAAYjJ,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAE3C02G,EAAGvyG,OAASk4E,GAAU42B,eACxBzgG,EAAQ,IAAI,GAAA7I,kBAAkB9J,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACjD02G,EAAGvyG,OAASk4E,GAAU62B,gBACxB1gG,EAAQ,IAAI,GAAApJ,mBAAmBvJ,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAClD02G,EAAGvyG,OAASk4E,GAAU82B,YACxB3gG,EAAQ,IAAI,GAAA/I,eAAe5J,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC9C02G,EAAGvyG,OAASk4E,GAAU+2B,YACxB5gG,EAAQ,IAAI,GAAAqrE,eAAeh+E,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC9C02G,EAAGvyG,OAASk4E,GAAUg3B,SACxB7gG,EAAQ,IAAI,GAAArJ,YAAYtJ,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC3C02G,EAAGvyG,OAASk4E,GAAUi3B,eACxB9gG,EAAQ,IAAI,EAAAxJ,kBAAkBnJ,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACjD02G,EAAGvyG,OAASk4E,GAAUk3B,aACxB/gG,EAAQ,IAAI,GAAA9I,gBAAgB7J,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC/C02G,EAAGvyG,OAASk4E,GAAUm3B,OAAMhhG,EAAQ,IAAI,GAAA3J,UAAUhJ,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACvE02G,EAAGvyG,OAASk4E,GAAUo3B,UACxBjhG,EAAQ,IAAI,GAAAurE,aAAal+E,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC5C02G,EAAGvyG,OAASk4E,GAAUq3B,QACxBlhG,EAAQ,IAAI,GAAA5I,WAAW/J,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC1C02G,EAAGvyG,OAASk4E,GAAUs3B,YACxBnhG,EAAQ,IAAI,GAAA+K,eAAe1d,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC9C02G,EAAGvyG,OAASk4E,GAAU64B,SACxB1iG,EAAQ,IAAI,GAAA4rE,YAAYv+E,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC3C02G,EAAGvyG,OAASk4E,GAAUg5B,UACxB7iG,EAAQ,IAAI,GAAAyjD,aAAap2D,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC5C02G,EAAGvyG,OAASk4E,GAAUu3B,QACxBphG,EAAQ,IAAI,GAAAjJ,WAAW1J,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC1C02G,EAAGvyG,OAASk4E,GAAUw3B,OAAMrhG,EAAQ,IAAI,GAAAtJ,UAAUrJ,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACvE02G,EAAGvyG,OAASk4E,GAAUy3B,SACxBthG,EAAQ,IAAI,GAAA3I,YAAYhK,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC3C02G,EAAGvyG,OAASk4E,GAAU23B,OAAMxhG,EAAQ,IAAI,GAAAuhG,KAAKl0G,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAClE02G,EAAGvyG,OAASk4E,GAAU43B,eACxBzhG,EAAQ,IAAI,GAAA8iB,YAAYz1B,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC3C02G,EAAGvyG,OAASk4E,GAAU63B,UACxB1hG,EAAQ,IAAI,GAAAS,QAAQpT,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACvC02G,EAAGvyG,OAASk4E,GAAU83B,UACxB3hG,EAAQ,IAAI,EAAAsoE,QAAQj7E,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACvC02G,EAAGvyG,OAASk4E,GAAUg4B,SAAQ7hG,EAAQ,IAAI,GAAA4hG,OAAOv0G,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACtE02G,EAAGvyG,OAASk4E,GAAUi4B,YACxB9hG,EAAQ,IAAI,GAAAq4B,UAAUhrC,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACzC02G,EAAGvyG,OAASk4E,GAAUm4B,aACxBhiG,EAAQ,IAAI,GAAA+hG,UAAU10G,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACzC02G,EAAGvyG,OAASk4E,GAAUo4B,OAAMjiG,EAAQ,IAAI,GAAAyrE,KAAKp+E,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAClE02G,EAAGvyG,OAASk4E,GAAUs4B,cACxBniG,EAAQ,IAAI,GAAAkiG,WAAW70G,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC1C02G,EAAGvyG,OAASk4E,GAAUu4B,OAAMpiG,EAAQ,IAAI,GAAAgrE,KAAK39E,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAClE02G,EAAGvyG,OAASk4E,GAAUw4B,QAAOriG,EAAQ,IAAI,EAAA+6E,MAAM1tF,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACpE02G,EAAGvyG,OAASk4E,GAAUy4B,mBACxBtiG,EAAQ,IAAI,GAAA26F,gBAAgBttG,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC/C02G,EAAGvyG,OAASk4E,GAAU04B,OAAMviG,EAAQ,IAAI,GAAA66E,KAAKxtF,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAClE02G,EAAGvyG,OAASk4E,GAAU44B,YACxBziG,EAAQ,IAAI,EAAAwiG,UAAUn1G,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACzC02G,EAAGvyG,OAASk4E,GAAU+4B,WACxB5iG,EAAQ,IAAI,GAAA2iG,iBAAiBt1G,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAChD02G,EAAGvyG,OAASk4E,GAAUi5B,OAAM9iG,EAAQ,IAAI,GAAA7J,UAAU9I,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACvE02G,EAAGvyG,OAASk4E,GAAUm5B,UACxBhjG,EAAQ,IAAI,GAAA1I,aAAajK,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC5C02G,EAAGvyG,OAASk4E,GAAUk5B,SACxB/iG,EAAQ,IAAI,GAAAzI,YAAYlK,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC3C02G,EAAGvyG,OAASk4E,GAAUo5B,UACxBjjG,EAAQ,IAAI,GAAAksE,aAAa7+E,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC5C02G,EAAGvyG,OAASk4E,GAAUq5B,OAAMljG,EAAQ,IAAI,GAAAxI,UAAUnK,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACvE02G,EAAGvyG,OAASk4E,GAAUu5B,SACxBpjG,EAAQ,IAAI,GAAAmjG,eAAe91G,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC9C02G,EAAGvyG,OAASk4E,GAAUy5B,SACxBtjG,EAAQ,IAAI,GAAAqjG,eAAeh2G,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC9C02G,EAAGvyG,OAASk4E,GAAU05B,QACxBvjG,EAAQ,IAAI,GAAAqnE,cAAch6E,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC7C02G,EAAGvyG,OAASk4E,GAAU25B,YACxBxjG,EAAQ,IAAI,GAAA+2D,cAAc1pE,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC7C02G,EAAGvyG,OAASk4E,GAAU65B,aACxB1jG,EAAQ,IAAI,GAAAyjG,UAAUp2G,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACzC02G,EAAGvyG,OAASk4E,GAAU85B,YACxB3jG,EAAQ,IAAI,GAAAm4C,UAAU9qD,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IACzC02G,EAAGvyG,OAASk4E,GAAU+5B,gBACxB5jG,EAAQ,IAAI,GAAAyD,aAAapW,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC5C02G,EAAGvyG,OAASk4E,GAAUi6B,aACxB9jG,EAAQ,IAAI,GAAA6jG,WAAWx2G,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC1C02G,EAAGvyG,OAASk4E,GAAUk6B,cACxB/jG,EAAQ,IAAI,GAAAyzD,WAAWpmE,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC1C02G,EAAGvyG,OAASk4E,GAAUm6B,cACxBhkG,EAAQ,IAAI,GAAAmgC,WAAW9yC,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAC1C02G,EAAGvyG,OAASk4E,GAAUo6B,gBACxBjkG,EAAQ,IAAI,GAAAs7F,aAAajuG,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAE5C02G,EAAGx/F,UACL1E,EAAM1K,MAAQ4uG,EAAG5uG,MACjB0K,EAAMhG,WAAakqG,EAAGlqG,WAClBkqG,EAAGlqG,aACLgG,EAAMmC,aAAe7U,EAAK+O,QAAQ6nG,EAAGjF,gBAChCj/F,EAAMmC,eACTnC,EAAMmC,aAAe7U,EAAKid,eAAe25F,EAAGjF,mBAI7Cj/F,IACHvI,QAAQsmB,MACN,sBACAmmF,EAAGvyG,KACH,wBACAk4E,GAAUq6B,EAAGvyG,MACb,0BAEFqO,EAAQ,IAAI,EAAA62D,OAAOxpE,EAAMC,EAAM42G,EAAG32G,EAAG22G,EAAG12G,IAG1CwS,EAAMzS,EAAI22G,EAAG32G,EACbyS,EAAMxS,EAAI02G,EAAG12G,EACbwS,EAAMnS,OAASq2G,EAAGr2G,OAClBmS,EAAM3L,UAAY6vG,EAAG7vG,UACpB2L,EAAc6O,eAAiBq1F,EAAGr1F,eAClC7O,EAAcoP,OAAS80F,EAAG90F,OAC1BpP,EAAcqP,aAAe60F,EAAG70F,aACjC,IACO60F,EAAWE,UACbpkG,EAAcmP,W,CAEjB,MAAM,CAGR,IACE,GAAK+0F,EAAWpF,WAAY,CAC1B,MAAMuF,EAAMH,EAAWv1F,cAAgB,EACjC3O,EAAcgP,UACjBhP,EAAc0O,YAAY21F,GAAI,E,EAGnC,MAAM,CACPrkG,EAAgBya,YAAcypF,EAAGzpF,YAClCza,EAAMqJ,UAAY66F,EAAG76F,UACrBrJ,EAAM/P,KAAOi0G,EAAGj0G,KAChB+P,EAAM3K,cAAgB6uG,EAAG7uG,cACzB2K,EAAM8Y,SAAWorF,EAAGprF,SAEmB,kBAA3BorF,EAAWt1G,cACrBoR,EAAMpR,YAAes1G,EAAWt1G,aAE9Bs1G,EAAGnF,UAAS/+F,EAAM7R,KAAOg2G,GAASD,EAAG/1G,KAAMb,IAC/C0S,EAAM9F,WAAagqG,EAAGhqG,WAEtB,IACM8F,aAAiB,EAAAmB,cAClBnB,EAAsB1K,MAAS4uG,EAAW5uG,OAAS,EACnD0K,EAAsB8B,MACpBoiG,EAAW9F,aAAgBp+F,EAAsB8B,MACnD9B,EAAsBhG,WAAckqG,EAAWlqG,aAAc,E,CAEhE,MAAM,CAER,OAAOgG,GAGT,MAAaskG,GAiBX,WAAAl3G,CAAYC,EAAYC,GACtBM,KAAKowG,OAAS1wG,EAAKuO,MAAM9G,QAAQ1H,GACjCO,KAAKonG,QAAU3nG,EAAKoa,SACpB7Z,KAAK6Y,OAAUpZ,EAAaoZ,QAAU,OACtC7Y,KAAKkO,QAAUzO,EAAKyO,QACpBlO,KAAKwZ,QAAU/Z,EAAK+Z,QACpBxZ,KAAKi1B,KAAOx1B,EAAKw1B,KACjBj1B,KAAKi3D,OAASx3D,EAAKw3D,OACnBj3D,KAAK4kF,SAAWnlF,EAAKmlF,SACrB5kF,KAAK6N,SAAWpO,EAAKoO,SACrB7N,KAAKi1C,QAAU,GACfj1C,KAAKwO,MAAQ,GACbxO,KAAK+J,YAAc,GACnB/J,KAAKkK,YAAc,GAGnBlK,KAAKoK,MAAQ,GACb,IAAK,IAAIzK,EAAIF,EAAKkL,MAAQ,EAAGhL,EAAIF,EAAKkL,MAAQlL,EAAKoL,MAAQ,EAAGlL,IAAK,CACjEK,KAAKoK,MAAMzK,GAAK,GAChB,IAAK,IAAIC,EAAIH,EAAKsL,MAAQ,EAAGnL,EAAIH,EAAKsL,MAAQtL,EAAKwL,OAAS,EAAGrL,IAAK,CAClE,MAAMkM,EAAOrM,EAAK6K,UAAU3K,KAAKC,GAC7BkM,GAAQ9L,KAAK22G,eAAe7qG,GAC9B9L,KAAKoK,MAAMzK,GAAGC,GAAK,IAAIg3G,GAAU9qG,EAAMpM,GAEvCM,KAAKoK,MAAMzK,GAAGC,GAAK,I,EAKzB,IAAK,MAAMwS,KAAS3S,EAAKuH,SACvBhH,KAAKi1C,QAAQjrC,KAAK,IAAIsmG,GAAWl+F,EAAO1S,IAC1C,IAAK,MAAMiT,KAAQlT,EAAK+O,MAClBmE,GACF3S,KAAKwO,MAAMxE,KAAK,IAAIonG,GAAUz+F,EAAMjT,IAGxC,IAAK,MAAMwV,KAAczV,EAAKsK,YACxBmL,aAAsB,GAAAiM,aAC1BnhB,KAAK+J,YAAYC,KAAK,IAAIkmG,GAAgBh7F,EAAYxV,IAExD,IAAK,MAAMowG,KAAMrwG,EAAKyK,YACpBlK,KAAKkK,YAAYF,KAAK,IAAI6lG,GAAgBC,GAC9C,CAGQ,cAAA6G,CAAe7qG,GACrB,OACEA,aAAgB,GAAAigD,OAChBjgD,aAAgB,GAAA8oB,MAChB9oB,aAAgB,GAAA+qG,WAChB/qG,aAAgB,GAAAvB,MAChBuB,aAAgB,GAAAqhG,QAChBrhG,aAAgB,GAAAgY,YAChBhY,aAAgB,GAAAyO,UAChBzO,aAAgB,GAAAE,OAChBF,aAAgB,GAAA+7E,WAChB/7E,aAAgB,GAAAu0E,YAChBv0E,aAAgB,GAAA+X,MAChB/X,aAAgB,GAAAgrG,iBAChBhrG,aAAgB,GAAAirG,QAChBjrG,aAAgB,GAAA4sB,cAChB5sB,aAAgB,GAAAkrG,YAChBlrG,aAAgB,GAAAoP,SAEpB,EAjFF,eAoFA,IAAI+7F,GAAW,CAACx3G,EAAYy3G,EAAsBx3G,KAYhD,GAXIw3G,EAAUr+F,SAASpZ,EAAaoZ,OAASq+F,EAAUr+F,QACvDpZ,EAAKyO,QAAUgpG,EAAUhpG,aACC2J,IAAtBq/F,EAAU19F,UACZ/Z,EAAK+Z,QAAU09F,EAAU19F,QACzB/Z,EAAKw1B,KAAOx1B,EAAK+Z,SAEnB/Z,EAAKw3D,OAASigD,EAAUjgD,OACxBx3D,EAAKmlF,SAAWsyB,EAAUtyB,SAC1BnlF,EAAKw1B,KAAOiiF,EAAUjiF,KAGlBiiF,EAAU9sG,MAAO,CAEnB,IACG3K,EAAamU,aAAe,E,CAC7B,MAAM,CACR,IAAK,IAAIjU,EAAIF,EAAKkL,MAAQ,EAAGhL,EAAIF,EAAKkL,MAAQlL,EAAKoL,MAAQ,EAAGlL,IAC5D,IAAK,IAAIC,EAAIH,EAAKsL,MAAQ,EAAGnL,EAAIH,EAAKsL,MAAQtL,EAAKwL,OAAS,EAAGrL,IAAK,CAClE,MAAMu3G,EAAYD,EAAU9sG,MAAMzK,KAAKC,GACvC,GAAIu3G,EAAW,CAEb,MAAMC,EAAaC,GAASF,EAAW13G,EAAMC,GAC7CD,EAAK6K,UAAU3K,GAAGC,GAAKw3G,C,EAO7B,IACE,MAAME,EAAY,IAAIhqG,IAChBiqG,EAAkB,IAAIjqG,IAC5B,IAAK,IAAI3N,EAAIF,EAAKkL,MAAQ,EAAGhL,EAAIF,EAAKkL,MAAQlL,EAAKoL,MAAQ,EAAGlL,IAC5D,IAAK,IAAIC,EAAIH,EAAKsL,MAAQ,EAAGnL,EAAIH,EAAKsL,MAAQtL,EAAKwL,OAAS,EAAGrL,IAAK,CAClE,MAAMosD,EAAKkrD,EAAU9sG,MAAMzK,KAAKC,GAC1B0F,EAAI7F,EAAK6K,UAAU3K,KAAKC,GAC9B,GAAIosD,GAAMA,EAAGjoD,OAASyzG,GAASv3B,MAAQ36E,aAAa,GAAAue,KAAM,CACxD,MAAM2nE,EAAMx/B,EAAGyrD,WAAW59F,SACtB2xE,GAAK8rB,EAAUlnG,IAAIo7E,EAAKlmF,E,CAE9B,GACE0mD,GACAA,EAAGjoD,OAASyzG,GAASE,mBACrBpyG,aAAa,GAAAwxG,gBACb,CACA,MAAMtrB,EAAMx/B,EAAGyrD,WAAW59F,SACtB2xE,GAAK+rB,EAAgBnnG,IAAIo7E,EAAKlmF,E,CAIlCA,GACCA,EAAU6N,cACT1T,EAAamU,cAAc+hB,SAAUrwB,EAAU6N,cAEhD1T,EAAamU,aAAa5J,KAAM1E,EAAU6N,Y,CAIjD,IAAK,IAAIxT,EAAIF,EAAKkL,MAAQ,EAAGhL,EAAIF,EAAKkL,MAAQlL,EAAKoL,MAAQ,EAAGlL,IAC5D,IAAK,IAAIC,EAAIH,EAAKsL,MAAQ,EAAGnL,EAAIH,EAAKsL,MAAQtL,EAAKwL,OAAS,EAAGrL,IAAK,CAClE,MAAMosD,EAAKkrD,EAAU9sG,MAAMzK,KAAKC,GAC1B0F,EAAI7F,EAAK6K,UAAU3K,KAAKC,GAC9B,GAAIosD,GAAMA,EAAGjoD,OAASyzG,GAASv3B,MAAQ36E,aAAa,GAAAue,KAAM,CACxD,MAAM8zF,EAAY3rD,EAAGyrD,WAAWG,cAC5BD,GAAaL,EAAUnnG,IAAIwnG,IAC7BryG,EAAEwoG,KAAKwJ,EAAU3oG,IAAIgpG,G,CAGzB,GAAI3rD,GAAMA,EAAGjoD,OAASyzG,GAASK,QAAUvyG,aAAa,GAAAyxG,OAAQ,CAC5D,MAAMY,EAAY3rD,EAAGyrD,WAAWG,cAC5BD,GAAaJ,EAAgBpnG,IAAIwnG,KAClCryG,EAAUu7E,WAAa02B,EAAgB5oG,IAAIgpG,G,GAKpD,MAAM,CAGR,IACE,MAAMG,EAAsB,GAC5B,IAAK,IAAIn4G,EAAIF,EAAKkL,MAAQ,EAAGhL,EAAIF,EAAKkL,MAAQlL,EAAKoL,MAAQ,EAAGlL,IAC5D,IAAK,IAAIC,EAAIH,EAAKsL,MAAQ,EAAGnL,EAAIH,EAAKsL,MAAQtL,EAAKwL,OAAS,EAAGrL,IAAK,CAClE,MAAM0F,EAAI7F,EAAK6K,UAAU3K,KAAKC,GAC1B0F,aAAa,GAAAue,MAAMi0F,EAAY9tG,KAAK1E,E,CAG3C7F,EAAa8O,MAAQupG,C,CACtB,MAAM,C,CAGVr4G,EAAKuH,SAAW,GAChBvH,EAAK+O,MAAQ,GACb/O,EAAKsK,YAAc,GACnBtK,EAAKyK,YAAc,GAEnB,MAAM6tG,EAAgBb,EAAUjiE,QAAQv0C,OACrC41G,GAAOA,EAAGvyG,OAASk4E,GAAUs3B,WAE1ByE,EAAad,EAAUjiE,QAAQv0C,OAClC41G,GAAOA,EAAGvyG,OAASk4E,GAAUs3B,WAEhC,IAAK,MAAMnhG,KAAS2lG,EAAet4G,EAAKuH,SAASgD,KAAK6mG,GAAUz+F,EAAO1S,IACvE,IAAK,MAAM0S,KAAS4lG,EAAYv4G,EAAKuH,SAASgD,KAAK6mG,GAAUz+F,EAAO1S,IACpE,IAAK,MAAMiT,KAAQukG,EAAU1oG,MACvBmE,GACFlT,EAAK+O,MAAMxE,KAAKusG,GAAS5jG,EAAMjT,OAAMmY,EAAWpY,IAIpD,IAEE,MAAMw4G,EAAa,IAAI3qG,IACvB,IAAK,MAAM4qG,KAAMz4G,EAAK+O,MAAO,CAC3B,MAAMy6E,EAAMivB,GAAYC,aAClBjvB,EAAMgvB,GAAYE,aACxB,QAAWvgG,IAAPoxE,QAA2BpxE,IAAPqxE,EAAkB,CACxC,MAAM1zD,EAAM,GAAGyzD,KAAMC,IACftmC,EAAMq1D,EAAWtpG,IAAI6mB,IAAQ,GACnCotB,EAAI54C,KAAKkuG,GACTD,EAAW7nG,IAAIolB,EAAKotB,E,EAGxB,IAAK,MAAM37C,KAAKxH,EAAKuH,SACnB,GAAIC,aAAa,GAAA3H,OAAS2H,EAAEhH,QAAU,EAAG,CACvC,MAAMu1B,EAAM,GAAGvuB,EAAEtH,KAAKsH,EAAErH,IAClBy4G,EAASJ,EAAWtpG,IAAI6mB,GAC9B,GAAI6iF,GAAUA,EAAOt3G,OAAQ,CAC1BkG,EAAU5G,MAAQg4G,EAAOvwF,QAC1B,Q,CAGD7gB,EAAU5G,MAAQZ,EAAK+O,MAAM9N,OAC3Bw3G,GAAOA,GAAMA,EAAGv4G,IAAMsH,EAAEtH,GAAKu4G,EAAGt4G,IAAMqH,EAAErH,E,EAI/C,MAAM,CACR,IAAK,MAAMsV,KAAcgiG,EAAUntG,YAAa,CAC9C,MAAMuuG,EAAS3H,GAAez7F,EAAYxV,GACtC44G,IAAYA,EAAej2G,MAC7B5C,EAAKsK,YAAYC,KAAKsuG,E,CAG1B,IAAK,MAAMxI,KAAMoH,EAAUhtG,YACzBzK,EAAKyK,YAAYF,KAAK+lG,GAAeD,EAAIpwG,IAE3C,IACE,MAAM64G,EAAW94G,EAAKuH,SAAStG,OAC5BuG,GAAMA,aAAa,GAAAq3E,cAEtB,IAAK,MAAMD,KAAWk6B,EACpB,IAAK,MAAMnmG,KAASisE,EAAQm6B,cAExBpmG,aAAiB,GAAA/L,QAChB+L,EAAM/P,OACN+P,EAAMoP,SACNpP,EAAMqP,cAEP48D,EAAQo6B,YAAYrmG,E,CAI1B,MAAM,CAGR,IACE,MAAM4lG,EAAav4G,EAAKuH,SAAStG,OAC9BuG,GAAMA,aAAa,GAAAkW,gBAEhBiE,EAAW3hB,EAAKuH,SAAStG,OAC5BuG,GAAMA,aAAa,GAAAZ,OAAUY,EAAYma,WAAana,EAAE5E,MAI3D,IAAK,MAAMq2G,KAAMV,EAAaU,EAAW3M,gBAAkB,GAG3D,MAAM4M,EAAc,IAAIrrG,IACxB,IAAK,MAAMmE,KAAK2P,EAAU,CACxB,IAAIw3F,EAAiC,KACjCC,EAAOC,OAAOC,kBAClB,IAAK,MAAML,KAAMV,EAAY,CAC3B,GAAIU,IAAQjnG,EAAW,SACvB,MAAM8D,EAAOzT,KAAK4D,IAAI5D,KAAKgG,IAAI4wG,EAAG/4G,EAAI8R,EAAE9R,GAAImC,KAAKgG,IAAI4wG,EAAG94G,EAAI6R,EAAE7R,IAC1D2V,EAAOsjG,IACTA,EAAOtjG,EACPqjG,EAAUF,E,CAGd,GAAIE,EAAS,CACX,MAAMh2D,EAAM+1D,EAAYhqG,IAAIiqG,IAAY,GACxCh2D,EAAI54C,KAAKyH,GACTknG,EAAYvoG,IAAIwoG,EAASh2D,E,EAK7B,IAAK,MAAO81D,EAAIM,KAAWL,EAAY/6F,UACpC86F,EAAW3M,gBAAkBiN,EAAOlxF,QAChC4wF,EAAWO,YAAcD,EAAOj4G,QAClC23G,EAAWO,WAAWD,E,CAG3B,MAAM,CAGR,IACE,MAAMT,EAAW94G,EAAKuH,SAAStG,OAC5BuG,GAAMA,aAAa,GAAAq3E,cAEtB,GAAIi6B,EAASx3G,OAAQ,CACnB,MAAMm4G,EAAgBz5G,EAAKuH,SAAStG,OACjCuG,GAAMA,aAAa,GAAAZ,OAAUY,EAAUua,SAAWva,EAAE5E,MAIvD,IAAK,MAAMiyB,KAAMikF,EACdjkF,EAAWkkF,cAAgB,GAI9B,IAAK,MAAMzgF,KAAUmhF,EAAe,CAClC,IAAIN,EAA+B,KAC/BC,EAAOC,OAAOC,kBAClB,IAAK,MAAMzkF,KAAMikF,EAAU,CACzB,MAAMhjG,EAAOzT,KAAK4D,IAChB5D,KAAKgG,IAAIwsB,EAAG30B,EAAIo4B,EAAOp4B,GACvBmC,KAAKgG,IAAIwsB,EAAG10B,EAAIm4B,EAAOn4B,IAErB2V,EAAOsjG,IACTA,EAAOtjG,EACPqjG,EAAUtkF,E,CAGVskF,GAEFA,EAAQH,YAAY1gF,E,GAI1B,MAAM,CAGRt4B,EAAKiiF,oBACLjiF,EAAKkiB,kBAGP,IAAYw3F,IAAZ,SAAYA,GACV,qBACA,yBACA,uBACA,mBACA,mBACA,mBACA,6BACA,2BACA,iBACA,yBACA,wBACA,sBACA,wBACA,gCACA,0BACA,sBACA,0BACA,4BACA,8BACA,4CACA,8BACA,wBACA,sCACA,oCACA,sBACA,8BACA,sBACA,kCACA,sBACA,sCACA,8BACA,wCACA,oBACA,kCACA,sBACA,8BACA,8BACA,4BACA,8BACA,kCACA,kCACA,oCACA,gCACA,oCACA,4BACA,8BACA,gCACA,wBACA,sCACA,oCACA,8BACA,wCACA,sBACA,oDACA,sDACA,4BACA,2BACD,CA1DD,CAAYA,GAAA,EAAAA,WAAA,EAAAA,SAAQ,KA4DpB,MAAa/H,GAaX,WAAA5xG,CAAYmT,EAAYjT,GAEtB,IAAKiT,EACH,MAAM,IAAI2gB,MAAM,0CAGd3gB,aAAgB,EAAAyvB,QAAOpiC,KAAK+D,KAAOo1G,GAASC,OAC5CzmG,aAAgB,EAAA0M,UAASrf,KAAK+D,KAAOo1G,GAASE,SAC9C1mG,aAAgB,EAAA6vB,SAAQxiC,KAAK+D,KAAOo1G,GAASG,QAC7C3mG,aAAgB,EAAAkxB,OAAM7jC,KAAK+D,KAAOo1G,GAAStH,MAC3Cl/F,aAAgB,EAAA8T,OAAMzmB,KAAK+D,KAAOo1G,GAASI,MAC3C5mG,aAAgB,EAAAm2B,UAAS9oC,KAAK+D,KAAOo1G,GAASnH,MAC9Cr/F,aAAgB,EAAAm/D,YAAW9xE,KAAK+D,KAAOo1G,GAASK,WAChD7mG,aAAgB,EAAAmuB,WAAU9gC,KAAK+D,KAAOo1G,GAASM,UAC/C9mG,aAAgB,EAAAuvB,QAAOliC,KAAK+D,KAAOo1G,GAASO,OAC5C/mG,aAAgB,EAAA6tD,MAAKxgE,KAAK+D,KAAOo1G,GAASQ,KAC1ChnG,aAAgB,EAAAzO,UAASlE,KAAK+D,KAAOo1G,GAASS,SAC9CjnG,aAAgB,EAAAouB,SAAQ/gC,KAAK+D,KAAOo1G,GAASU,QAC7ClnG,aAAgB,EAAAG,QAAO9S,KAAK+D,KAAOo1G,GAASW,OAC5CnnG,aAAgB,EAAAonG,SAAQ/5G,KAAK+D,KAAOo1G,GAASa,QAC7CrnG,aAAgB,EAAA0vB,aAAYriC,KAAK+D,KAAOo1G,GAASc,YACjDtnG,aAAgB,EAAAsvB,UAASjiC,KAAK+D,KAAOo1G,GAASe,SAC9CvnG,aAAgB,EAAAwvB,QAAOniC,KAAK+D,KAAOo1G,GAASgB,OAC5CxnG,aAAgB,EAAA8vB,UAASziC,KAAK+D,KAAOo1G,GAASiB,SAC9CznG,aAAgB,EAAA0lB,WAAUr4B,KAAK+D,KAAOo1G,GAASkB,UAE/C1nG,aAAgB,GAAA2nG,QAAOt6G,KAAK+D,KAAOo1G,GAASz4D,OAC5C/tC,aAAgB,GAAAq4B,eAAchrC,KAAK+D,KAAOo1G,GAASoB,eACnD5nG,aAAgB,GAAAw2B,WAAUnpC,KAAK+D,KAAOo1G,GAASqB,WAC/C7nG,aAAgB,GAAA06F,gBAAertG,KAAK+D,KAAOo1G,GAASsB,gBACpD9nG,aAAgB,GAAA6kD,OAAMx3D,KAAK+D,KAAOo1G,GAASuB,MAC3C/nG,aAAgB,GAAAgwB,aAAY3iC,KAAK+D,KAAOo1G,GAASwB,aACjDhoG,aAAgB,GAAAi2B,QAAO5oC,KAAK+D,KAAOo1G,GAASyB,OAC5CjoG,aAAgB,GAAAkoG,WAAU76G,KAAK+D,KAAOo1G,GAAS2B,WAC/CnoG,aAAgB,GAAAooG,WAAU/6G,KAAK+D,KAAOo1G,GAAS6B,WAC/CroG,aAAgB,GAAAi5C,UAAS5rD,KAAK+D,KAAOo1G,GAAS8B,UAC9CtoG,aAAgB,GAAAm9D,WAAU9vE,KAAK+D,KAAOo1G,GAAS+B,WAC/CvoG,aAAgB,GAAA06C,aAAYrtD,KAAK+D,KAAOo1G,GAASgC,aACjDxoG,aAAgB,GAAAq9D,aAAYhwE,KAAK+D,KAAOo1G,GAASiC,aACjDzoG,aAAgB,GAAA0oG,cAAar7G,KAAK+D,KAAOo1G,GAASmC,cAClD3oG,aAAgB,GAAAiN,YAAW5f,KAAK+D,KAAOo1G,GAASoC,YAChD5oG,aAAgB,GAAAmmB,cAAa94B,KAAK+D,KAAOo1G,GAASqC,cAClD7oG,aAAgB,GAAAunB,WAAUl6B,KAAK+D,KAAOo1G,GAASsC,UAC/C9oG,aAAgB,GAAAi0B,YAAW5mC,KAAK+D,KAAOo1G,GAASuC,WAChD/oG,aAAgB,GAAA66C,YAAWxtD,KAAK+D,KAAOo1G,GAASwC,YAChDhpG,aAAgB,GAAAqmB,SAAQh5B,KAAK+D,KAAOo1G,GAASyC,QAC7CjpG,aAAgB,GAAAs0B,eAAcjnC,KAAK+D,KAAOo1G,GAAS0C,eACnDlpG,aAAgB,GAAAo0B,cAAa/mC,KAAK+D,KAAOo1G,GAAS2C,cAClDnpG,aAAgB,GAAAm0F,UAAS9mG,KAAK+D,KAAOo1G,GAAStE,WAC9CliG,aAAgB,GAAAw9D,YAAWnwE,KAAK+D,KAAOo1G,GAAS4C,WAChDppG,aAAgB,GAAA4vB,YAAWviC,KAAK+D,KAAOo1G,GAAS6C,WAChDrpG,aAAgB,GAAAw1B,gBAAenoC,KAAK+D,KAAOo1G,GAAS8C,gBACpDtpG,aAAgB,GAAAq2B,QAAOhpC,KAAK+D,KAAOo1G,GAAS+C,OAC5CvpG,aAAgB,GAAAwpG,QAAOn8G,KAAK+D,KAAOo1G,GAASiD,OAC5CzpG,aAAgB,GAAA2vB,YAAWtiC,KAAK+D,KAAOo1G,GAASkD,WAChD1pG,aAAgB,GAAAo1B,cAAa/nC,KAAK+D,KAAOo1G,GAASmD,cAClD3pG,aAAgB,GAAAk1B,eAAc7nC,KAAK+D,KAAOo1G,GAASoD,eACnD5pG,aAAgB,GAAAs1B,kBAAiBjoC,KAAK+D,KAAOo1G,GAASqD,kBACtD7pG,aAAgB,GAAA8pG,aAAYz8G,KAAK+D,KAAOo1G,GAASuD,aACjD/pG,aAAgB,GAAAiwB,SAAQ5iC,KAAK+D,KAAOo1G,GAASwD,QAC7ChqG,aAAgB,GAAAw0B,qBAClBnnC,KAAK+D,KAAOo1G,GAASyD,sBACnBjqG,aAAgB,GAAA00B,sBAClBrnC,KAAK+D,KAAOo1G,GAAS0D,uBACnBlqG,aAAgB,GAAAmqG,UAAS98G,KAAK+D,KAAOo1G,GAAS4D,UAC9CpqG,aAAgB,GAAAqqG,UAASh9G,KAAK+D,KAAOo1G,GAAS8D,UAClDj9G,KAAKorC,SAAWz4B,aAAgB,EAAAkN,YAAclN,EAAKy4B,SACnDprC,KAAKL,EAAIgT,EAAKhT,EACdK,KAAKJ,EAAI+S,EAAK/S,EACdI,KAAKowG,OAAS1wG,EAAKuO,MAAM9G,QAAQwL,EAAKvO,OACtCpE,KAAKonG,QAAUz0F,EAAKvO,OAAOyV,SAC3B7Z,KAAKgC,WAAa2Q,EAAK3Q,WACvBhC,KAAKS,SAAWkS,EAAKlS,SACrB,IAEE,MAAMy8G,EAAYvqG,EAAKvO,MACjB+4G,EAAiBD,GAAWl2G,UAAU1G,KACzC2G,GACCA,aAAa,GAAA3H,OACb2H,EAAEhH,QAAU,GACZgH,EAAEtH,IAAMgT,EAAKhT,GACbsH,EAAErH,IAAM+S,EAAK/S,GAEbu9G,IACFn9G,KAAKm4G,aAAegF,EAAex9G,EACnCK,KAAKo4G,aAAe+E,EAAev9G,E,CAErC,MAAM,CACV,EArGF,eAwGA,IAAI22G,GAAW,CACbvwG,EACAtG,EACAmN,EACAuwG,KAEA,IAIIzqG,EAJAlT,EACF29G,GACCp3G,EAAEohG,SAAW1nG,EAAK+8C,WAAW9tC,IAAI3I,EAAEohG,YACrB,IAAdphG,EAAEoqG,OAAgB1wG,EAAKuO,MAAMjI,EAAEoqG,QAAU,MAqF5C,GAnFIpqG,EAAEjC,OAASo1G,GAASC,QAAOzmG,EAAO,IAAI,EAAAyvB,MAAM3iC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACzDoG,EAAEjC,OAASo1G,GAASE,UAAS1mG,EAAO,IAAI,EAAA0M,QAAQ5f,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC7DoG,EAAEjC,OAASo1G,GAASG,SAAQ3mG,EAAO,IAAI,EAAA6vB,OAAO/iC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC3DoG,EAAEjC,OAASo1G,GAAStH,OAAMl/F,EAAO,IAAI,EAAAkxB,KAAKpkC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACvDoG,EAAEjC,OAASo1G,GAASI,OAAM5mG,EAAO,IAAI,EAAA8T,KAAKhnB,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACvDoG,EAAEjC,OAASo1G,GAASnH,OAAMr/F,EAAO,IAAI,EAAAm2B,QAAQrpC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC1DoG,EAAEjC,OAASo1G,GAASK,YAAW7mG,EAAO,IAAI,EAAAm/D,UAAUryE,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACjEoG,EAAEjC,OAASo1G,GAASM,WAAU9mG,EAAO,IAAI,EAAAmuB,SAASrhC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC/DoG,EAAEjC,OAASo1G,GAASO,QAAO/mG,EAAO,IAAI,EAAAuvB,MAAMziC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACzDoG,EAAEjC,OAASo1G,GAASQ,MAAKhnG,EAAO,IAAI,EAAA6tD,IAAI/gE,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACrDoG,EAAEjC,OAASo1G,GAASS,UAASjnG,EAAO,IAAI,EAAAzO,QAAQzE,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC7DoG,EAAEjC,OAASo1G,GAASU,SAAQlnG,EAAO,IAAI,EAAAouB,OAAOthC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC3DoG,EAAEjC,OAASo1G,GAASW,QAAOnnG,EAAO,IAAI,EAAAG,MAAMrT,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACzDoG,EAAEjC,OAASo1G,GAASa,SAAQrnG,EAAO,IAAI,EAAAonG,OAAOt6G,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC3DoG,EAAEjC,OAASo1G,GAASc,aAAYtnG,EAAO,IAAI,EAAA0vB,WAAW5iC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACnEoG,EAAEjC,OAASo1G,GAASe,UAASvnG,EAAO,IAAI,EAAAsvB,QAAQxiC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC7DoG,EAAEjC,OAASo1G,GAASgB,QAAOxnG,EAAO,IAAI,EAAAwvB,MAAM1iC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACzDoG,EAAEjC,OAASo1G,GAASiB,UAASznG,EAAO,IAAI,EAAA8vB,QAAQhjC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC7DoG,EAAEjC,OAASo1G,GAASkB,WAAU1nG,EAAO,IAAI,EAAA0lB,SAAS54B,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAE/DoG,EAAEjC,OAASo1G,GAASz4D,QAAO/tC,EAAO,IAAI,GAAA2nG,MAAM76G,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACzDoG,EAAEjC,OAASo1G,GAASoB,gBACtB5nG,EAAO,IAAI,GAAAq4B,aAAavrC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACnCoG,EAAEjC,OAASo1G,GAASqB,YAAW7nG,EAAO,IAAI,GAAAw2B,SAAS1pC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAChEoG,EAAEjC,OAASo1G,GAASsB,iBACtB9nG,EAAO,IAAI,GAAA06F,cAAc5tG,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACpCoG,EAAEjC,OAASo1G,GAASuB,OAAM/nG,EAAO,IAAI,GAAA6kD,KAAK/3D,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACvDoG,EAAEjC,OAASo1G,GAASwB,cAAahoG,EAAO,IAAI,GAAAgwB,WAAWljC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACpEoG,EAAEjC,OAASo1G,GAASyB,QAAOjoG,EAAO,IAAI,GAAAi2B,MAAMnpC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACzDoG,EAAEjC,OAASo1G,GAAS2B,YAAWnoG,EAAO,IAAI,GAAAkoG,SAASp7G,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAChEoG,EAAEjC,OAASo1G,GAAS6B,YAAWroG,EAAO,IAAI,GAAAooG,SAASt7G,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAChEoG,EAAEjC,OAASo1G,GAAS8B,WAAUtoG,EAAO,IAAI,GAAAi5C,QAAQnsD,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC9DoG,EAAEjC,OAASo1G,GAAS+B,YAAWvoG,EAAO,IAAI,GAAAm9D,SAASrwE,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAChEoG,EAAEjC,OAASo1G,GAASgC,cAAaxoG,EAAO,IAAI,GAAA06C,WAAW5tD,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACpEoG,EAAEjC,OAASo1G,GAASiC,cAAazoG,EAAO,IAAI,GAAAq9D,WAAWvwE,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACpEoG,EAAEjC,OAASo1G,GAASmC,eAAc3oG,EAAO,IAAI,GAAA0oG,YAAY57G,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACtEoG,EAAEjC,OAASo1G,GAASoC,aAAY5oG,EAAO,IAAI,GAAAiN,UAAUngB,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAClEoG,EAAEjC,OAASo1G,GAASqC,eAAc7oG,EAAO,IAAI,GAAAmmB,YAAYr5B,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACtEoG,EAAEjC,OAASo1G,GAASsC,WAAU9oG,EAAO,IAAI,GAAAunB,SAASz6B,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC/DoG,EAAEjC,OAASo1G,GAASuC,YAAW/oG,EAAO,IAAI,GAAAi0B,UAAUnnC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACjEoG,EAAEjC,OAASo1G,GAASwC,aAAYhpG,EAAO,IAAI,GAAA66C,UAAU/tD,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAClEoG,EAAEjC,OAASo1G,GAASyC,SAAQjpG,EAAO,IAAI,GAAAqmB,OAAOv5B,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC3DoG,EAAEjC,OAASo1G,GAAS0C,gBACtBlpG,EAAO,IAAI,GAAAs0B,aAAaxnC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACnCoG,EAAEjC,OAASo1G,GAAS2C,eAAcnpG,EAAO,IAAI,GAAAo0B,YAAYtnC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACtEoG,EAAEjC,OAASo1G,GAAStE,YAAWliG,EAAO,IAAI,GAAAm0F,QAAQrnG,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC/DoG,EAAEjC,OAASo1G,GAAS4C,YAAWppG,EAAO,IAAI,GAAAw9D,UAAU1wE,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACjEoG,EAAEjC,OAASo1G,GAAS6C,YAAWrpG,EAAO,IAAI,GAAA4vB,UAAU9iC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACjEoG,EAAEjC,OAASo1G,GAAS8C,iBACtBtpG,EAAO,IAAI,GAAAw1B,cAAc1oC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACpCoG,EAAEjC,OAASo1G,GAAS+C,QAAOvpG,EAAO,IAAI,GAAAq2B,MAAMvpC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACzDoG,EAAEjC,OAASo1G,GAASiD,QAAOzpG,EAAO,IAAI,GAAAwpG,MAAM18G,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACzDoG,EAAEjC,OAASo1G,GAASuD,cAAa/pG,EAAO,IAAI,GAAA8pG,WAAWh9G,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACpEoG,EAAEjC,OAASo1G,GAASqD,mBACtB7pG,EAAO,IAAI,GAAAs1B,gBAAgBxoC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACtCoG,EAAEjC,OAASo1G,GAASkD,YAAW1pG,EAAO,IAAI,GAAA2vB,UAAU7iC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACjEoG,EAAEjC,OAASo1G,GAASwD,SAAQhqG,EAAO,IAAI,GAAAiwB,OAAOnjC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC3DoG,EAAEjC,OAASo1G,GAASoD,gBACtB5pG,EAAO,IAAI,GAAAk1B,aAAapoC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACnCoG,EAAEjC,OAASo1G,GAASmD,eAAc3pG,EAAO,IAAI,GAAAo1B,YAAYtoC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACtEoG,EAAEjC,OAASo1G,GAASwD,SAAQhqG,EAAO,IAAI,GAAAiwB,OAAOnjC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC3DoG,EAAEjC,OAASo1G,GAASyD,uBACtBjqG,EAAO,IAAI,GAAAw0B,mBAAmB1nC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IACzCoG,EAAEjC,OAASo1G,GAAS0D,wBACtBlqG,EAAO,IAAI,GAAA00B,oBAAoB5nC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC1CoG,EAAEjC,OAASo1G,GAAS4D,WAAUpqG,EAAO,IAAI,GAAAmqG,QAAQr9G,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC9DoG,EAAEjC,OAASo1G,GAAS8D,WAAUtqG,EAAO,IAAI,GAAAqqG,QAAQv9G,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAC7D+S,IACH9I,QAAQsmB,MACN,qBACAnqB,EAAEjC,KACF,uBACAo1G,GAASnzG,EAAEjC,MACX,wBAEF4O,EAAO,IAAI,EAAAkxB,KAAKpkC,EAAMuG,EAAErG,EAAGqG,EAAEpG,IAI3B+S,IAAUA,EAAajT,OACxBiT,EAAajT,KAAOA,IAGlBD,GAAQkT,IAASA,EAAKvO,MAAO,CAChC,MAAMi5G,EAAa39G,EAAK+O,UAAU/O,EAAK8X,eACjC8lG,EAAgBD,GAAoB1jF,QACrC0jF,EAAmB1jF,UACpBj6B,EAAKuO,MAAMvO,EAAK+O,QAAQ/O,EAAK8X,eAAetF,SAChDS,EAAKvO,MAAQk5G,C,CAWf,OARIt3G,EAAEolC,WAAUz4B,EAAKy4B,UAAW,GAC5Bz4B,aAAgB,EAAAkN,YAAYlN,EAAK4qG,WAAW1wG,GAE5C8F,IAAUA,EAAajT,OACxBiT,EAAajT,KAAOA,GAEvBiT,EAAK3Q,WAAagE,EAAEhE,WACpB2Q,EAAKlS,SAAWuF,EAAEvF,SACXkS,GAGT,MAAa6qG,GAaX,WAAAh+G,CAAYqB,EAAsBnB,GAChCM,KAAKod,OAASvc,EAAUuc,OACxBpd,KAAK89D,KAAOj9D,EAAUi9D,KACtB99D,KAAKykE,KAAO5jE,EAAU4jE,KACtBzkE,KAAKy9G,gBAAkB58G,EAAU48G,gBAAgB3uG,IAAKnP,GAAMA,GAC5DK,KAAK09G,kBAAmB,EACpB78G,EAAU+5E,SACZ56E,KAAK09G,kBAAmB,EACxB19G,KAAK29G,QAAU98G,EAAU2N,MAAMrH,QAAQtG,EAAU+5E,SAEnD56E,KAAK49G,MAAQ/8G,EAAU+8G,MACvB59G,KAAK+9D,KAAOl9D,EAAUk9D,KACtB/9D,KAAKg+D,KAAOn9D,EAAUm9D,KACtBh+D,KAAKwO,MAAQyM,MAAwBpa,EAAUi9D,KAAOj9D,EAAU4jE,MAChEzkE,KAAKy4B,UAAY53B,EAAU43B,UAC3B,IAAK,IAAI0vB,EAAM,EAAGA,EAAMtnD,EAAUi9D,KAAOj9D,EAAU4jE,KAAMtc,IACvDnoD,KAAKwO,MAAM25C,GAAO,KAEpB,IAAK,MAAMx1C,KAAQ9R,EAAU2N,MACvBmE,IACF3S,KAAKwO,MAAM3N,EAAU2N,MAAMrH,QAAQwL,IAAS,IAAIy+F,GAAUz+F,EAAMjT,GAGtE,EApCF,oBA6EA,MAAam+G,GAuBX,WAAAr+G,CAAYqN,EAAgBnN,GAC1BM,KAAKL,EAAIkN,EAAOlN,EAChBK,KAAKJ,EAAIiN,EAAOjN,EAChBI,KAAKqC,KAAOwK,EAAOxK,KACnB,MAAMy7G,EAAgBjxG,GAAgB8sB,QACjC9sB,EAAe8sB,UAChBj6B,EAAKuO,MAAMpB,EAAOqF,SACtBlS,KAAKonG,QAAU0W,GAAcjkG,SAC7B7Z,KAAKowG,OAAS0N,EACVp+G,EAAKuO,MAAM9G,QAAQ22G,GACnBjxG,EAAOqF,QACXlS,KAAK6N,SAAWiwG,GAAcjwG,SAC9B,MAAMkwG,EAAaD,EACnB,GAAIC,EAAY,CACd,MAAM1jG,EAAa3a,EAAKuO,MACrBvN,OAAQ4Z,GAAMA,EAAEzM,WAAakwG,EAAWlwG,UACxCoB,KAAK,CAACC,EAAGC,IAAMD,EAAEiL,GAAKhL,EAAEgL,IAC3Bna,KAAKg+G,iBAAmB3jG,EAAW4jG,UAAW3jG,GAAMA,IAAMyjG,E,CAE5D/9G,KAAKyb,UAAY5O,EAAO4O,UACxBzb,KAAKC,OAAS4M,EAAO5M,OACrBD,KAAKyG,UAAYoG,EAAOpG,UACxBzG,KAAKqqG,eAAiBx9F,EAAOw9F,eAC7BrqG,KAAKa,UAAY,IAAI28G,GAAe3wG,EAAOhM,UAAWnB,GACtDM,KAAKk+G,uBAAwB,EACzBrxG,EAAOo0B,qBACTjhC,KAAKk+G,uBAAwB,EAC7Bl+G,KAAKm+G,yBAA2Bz+G,EAAKuO,MAAM9G,QACzC0F,EAAOo0B,mBAAmBxhC,MAE5BO,KAAKo+G,0BAA4BvxG,EAAOo0B,mBAAmBxhC,MAAMoa,SACjE7Z,KAAKq+G,qBACHxxG,EAAOo0B,mBAAmBxhC,KAAKuH,SAASG,QACtC0F,EAAOo0B,oBAEXjhC,KAAKs+G,sBAAyBzxG,EAAOo0B,mBAA2BpnB,UAElE7Z,KAAKwrC,YAAc3+B,EAAO2+B,YAE1BxrC,KAAK4rC,cAAiB/+B,EAAe++B,cACrC5rC,KAAK6rC,WAAch/B,EAAeg/B,WAClC7rC,KAAK2rC,gBAAmB9+B,EAAe8+B,eACzC,EAjEF,iBAoEA,IAAI4yE,GAAa,CAACpkG,EAAY9P,EAAgB3K,KAC5C,IAAImN,EAAS,IAAI,EAAAg1D,OAAOniE,EAAM2K,EAAE1K,EAAG0K,EAAEzK,EAAGua,IAAOza,EAAK8X,eAIpD,GAHA3K,EAAOxK,KAAOgI,EAAEhI,KAGZgI,EAAE+8F,SAAW1nG,EAAK+8C,WAAWtsC,IAAI9F,EAAE+8F,SAAU,CAC/C,MAAM3nG,EAAOC,EAAK+8C,UAAU9tC,IAAItE,EAAE+8F,SACjCv6F,EAAeu6F,QAAU/8F,EAAE+8F,QAC5Bv6F,EAAOqF,QAAUxS,EAAKuO,MAAM9G,QAAQ1H,E,KAC/B,CAEL,IAAIq+G,EACJ,QAAmBjmG,IAAfxN,EAAEwD,SAAwB,CAC5B,MAAMwM,EAAa3a,EAAKuO,MACrBvN,OAAQ4Z,GAAMA,EAAEzM,WAAaxD,EAAEwD,UAC/BoB,KAAK,CAACC,EAAGC,IAAMD,EAAEiL,GAAKhL,EAAEgL,IACvBE,EAAWtZ,SAKX+8G,OAHuBjmG,IAAvBxN,EAAE2zG,kBACF3zG,EAAE2zG,iBAAmB3jG,EAAWtZ,OAEjBsZ,EAAWhQ,EAAE2zG,kBAG1B3jG,EAAW/Z,KAAMga,GAAMA,EAAEH,KAAO9P,EAAE+lG,SAAW/1F,EAAW,G,CAIhE,IAAKyjG,EAAc,CACjB,MAAMU,EAAQ9+G,EAAKuO,MAAM3N,KAAMga,GAAMA,EAAEg2D,WAAWjmE,EAAE1K,EAAG0K,EAAEzK,IACrD4+G,IACFV,EAAeU,E,CAGdV,IACHA,EAAep+G,EAAKuO,MAAM5D,EAAE+lG,SAE7BvjG,EAAeu6F,QAAU0W,GAAcjkG,SACxChN,EAAOqF,QAAU4rG,EAAep+G,EAAKuO,MAAM9G,QAAQ22G,GAAgB,C,CAWrE,GARIp+G,EAAK0E,QACPyI,EAAOmB,MAAQtO,EAAK0E,MAAM4J,OAE5BnB,EAAO4O,UAAYpR,EAAEoR,UACrB5O,EAAO5M,OAASoK,EAAEpK,OAClB4M,EAAOpG,UAAY4D,EAAE5D,UACrBoG,EAAOw9F,eAAiBhgG,EAAEggG,eAzJR,EAACxpG,EAAsBmF,EAAmBtG,KAC5DmB,EAAUqzB,QACV,IAAK,IAAIi0B,EAAM,EAAGA,EAAMniD,EAAEwI,MAAMzN,OAAQonD,IAAO,CAC7C,MAAMs2D,EAAYz4G,EAAEwI,MAAM25C,GAC1B,GAAIs2D,EAAW,CACb,MAAMC,EAAanI,GAASkI,EAAW/+G,EAAMmB,EAAUgM,QAEvD,IAAK6xG,EAAWt6G,MAAO,CACrB,MAAM25G,EAAar+G,EAAKuO,MAAMpN,EAAUgM,OAAOqF,SAC/CwsG,EAAWt6G,MAAQ25G,C,CAEfW,EAAmBh/G,OACtBg/G,EAAmBh/G,KAAOA,GAE7BmB,EAAU2N,MAAM25C,GAAOu2D,EACnBA,aAAsB,EAAAt8F,QAA+B,OAArBvhB,EAAU+5E,SAC5C8jC,EAAWpzE,cACXzqC,EAAU+5E,OAAS8jC,E,MAGrB79G,EAAU2N,MAAM25C,GAAO,I,CAI3BtnD,EAAUuc,OAASpX,EAAEoX,OACrBvc,EAAUi9D,KAAO93D,EAAE83D,KACnBj9D,EAAU4jE,KAAOz+D,EAAEy+D,KACnB5jE,EAAUk9D,KAAO/3D,EAAE+3D,KACnBl9D,EAAUm9D,KAAOh4D,EAAEg4D,KACnBn9D,EAAU48G,gBAAkBz3G,EAAEy3G,gBAAgB3uG,IAAKnP,GAAMA,GACzDkB,EAAU+8G,MAAQ53G,EAAE43G,MACpB/8G,EAAU43B,UAAYzyB,EAAEyyB,UAEpBzyB,EAAE03G,kBAAoB13G,EAAE23G,QAAU98G,EAAU2N,MAAMzN,SACpDF,EAAU+5E,OAAS/5E,EAAU2N,MAAMxI,EAAE23G,WAwHvCgB,CAAc9xG,EAAOhM,UAAWwJ,EAAExJ,UAAWnB,GACzC2K,EAAE6zG,sBAAuB,CAC3B,MAAMU,EACHv0G,EAAE+zG,2BACD1+G,EAAK+8C,WAAW9tC,IAAItE,EAAE+zG,4BACxB1+G,EAAKuO,MAAM5D,EAAE8zG,0BACftxG,EAAOo0B,mBAAqB52B,EAAEi0G,sBACzBM,EAAO53G,SAAS1G,KACd2G,GAAOA,EAAU4S,WAAaxP,EAAEi0G,uBAElCM,EAAO53G,SAASqD,EAAEg0G,qB,CAgBzB,OAdAxxG,EAAO2+B,YAAcnhC,EAAEmhC,YAEQ,kBAApBnhC,EAAEuhC,gBACV/+B,EAAe++B,cAAgBvhC,EAAEuhC,eAChC3wB,MAAMuV,QAAQnmB,EAAEwhC,cACjBh/B,EAAeg/B,WAAaxhC,EAAEwhC,YACA,iBAAtBxhC,EAAEshC,kBACV9+B,EAAe8+B,gBAAkBthC,EAAEshC,iBAO/B9+B,GAGT,MAAaisD,GASX,WAAAt5D,CAAY4E,GACVpE,KAAKgO,MAAQ5J,EAAM4J,MACnBhO,KAAK6K,MAAQzG,EAAMyG,MACnB7K,KAAKiL,OAAS7G,EAAM6G,OACpBjL,KAAK6+G,WAAaz6G,EAAMy6G,WACxB7+G,KAAK6N,SAAWzJ,EAAMyJ,SACtB7N,KAAKwZ,QAAUpV,EAAM8U,YAAYnV,KACjC/D,KAAK8+G,SAAY16G,EAAcyV,QACjC,EAjBF,gBA8BA,MAAaklG,GAeX,WAAAv/G,GAJA,KAAA44D,uBAAoD,KACpD,KAAAhL,uBAAkD,KAIhDptD,KAAKmyE,KAAO,EACZnyE,KAAKm0E,YAAc,EACnBn0E,KAAKyO,QAAU,CAAC,EAChBzO,KAAK2c,eAAiB,CAAC,EACvB3c,KAAKoE,MAAQ,KACbpE,KAAKiO,MAAQ,EAEf,EA8iBF,IAAYupG,GArkBZ,eA0Ba,EAAA3/D,gBAAmBn4C,IAE9B,IACE,GAAKA,EAAaqjF,eAAetQ,gBAE/B,OADA5oE,QAAQC,KAAK,kDACN,I,CAET,MAAM,CAER,IACE,IAAIk1G,EAAK,IAAID,GACbC,EAAGv0D,MAAQ,GAAArxC,aAAa47B,WAGxBgqE,EAAG7sC,KAAOzyE,EAAKqZ,SAASo5D,KACxB6sC,EAAG7qC,YAAc,EAAAvyE,OAAOsS,MACxB8qG,EAAG5mD,uBAAyB14D,EAAK04D,uBACjC4mD,EAAG5xD,uBAAyB1tD,EAAK0tD,uBAG7B1tD,EAAK0E,OACP46G,EAAG56G,MAAQ,IAAI00D,GAAWp5D,EAAK0E,OAC/B46G,EAAGF,SAAYp/G,EAAK0E,MAAcyV,UAElChQ,QAAQC,KAAK,iCAKf,IAAK,MAAM9D,KAAKtG,EAAK+O,QACnB,IACE,MAAMwwG,EAAKv/G,EAAK+O,QAAQzI,GACLtG,EAAKuO,MAAMgxG,EAAG/sG,SAEjC8sG,EAAGvwG,QAAQzI,GAAK,IAAI63G,GAAYn+G,EAAK+O,QAAQzI,GAAItG,E,CACjD,MAAOywB,GAEP,MADAtmB,QAAQsmB,MAAM,+BAA+BnqB,KAAMmqB,GAC7CA,C,CAKV,IAAK,MAAMnqB,KAAKtG,EAAKid,eACnB,IACEqiG,EAAGriG,eAAe3W,GAAK,IAAI63G,GAAYn+G,EAAKid,eAAe3W,GAAItG,E,CAC/D,MAAOywB,GAEP,MADAtmB,QAAQsmB,MAAM,uCAAuCnqB,KAAMmqB,GACrDA,C,CAKV,IACG6uF,EAAWtlG,cAAiBha,EAAaga,eAAiB,M,CAC3D,MAAM,CAGR,IACE,MAAMwlG,EAAsC,CAAC,EAC7C,IAAK,MAAM5kG,KAAK5a,EAAKuO,MACnBixG,EAAY5kG,EAAEzM,WAAaqxG,EAAY5kG,EAAEzM,WAAa,GAAK,C,CAE7D,MAAM,CACR,IAAK,IAAIohE,EAAY,EAAGA,EAAYvvE,EAAKuO,MAAMlN,OAAQkuE,IAAa,CAClE,MAAMxvE,EAAOC,EAAKuO,MAAMghE,GACxB,IACExvE,EAAKgkF,UACL,MAAMyzB,EAAY,IAAIR,GAAUj3G,EAAMC,GACtCs/G,EAAG/wG,MAAMjE,KAAKktG,IACb8H,EAAGG,WAAHH,EAAGG,SAAa,KAAIn1G,KAAKvK,EAAKoa,S,CAC/B,MAAOsW,GAEP,MADAtmB,QAAQsmB,MAAM,6BAA6B8+C,KAAc9+C,GACnDA,C,EAKV,IACE,MAAMivF,EAAQ,IAAI9xG,IAClB,IAAK,MAAM+xG,KAAML,EAAG/wG,MAAO,CACzB,MAAMqxG,EAAQD,EAAWxmG,QAAqB,OAClC,SAARymG,GACJF,EAAMhvG,IAAIkvG,GAAMF,EAAMzwG,IAAI2wG,IAAQ,GAAK,E,CAExCN,EAAWO,aAAetkG,MAAM2S,KAAKwxF,EAAMxhG,WAAW9O,IACrD,EAAE+J,EAAQ5K,MAAW,CAAG4K,SAAQ5K,U,CAElC,MAAM,CAER,OAAO+wG,C,CACP,MAAO7uF,GAEP,MADAtmB,QAAQsmB,MAAM,0CAA2CA,GACnDA,C,GAIG,EAAA8jD,cAAgB,CAC3Bv0E,EACAs0E,EACAv7B,EACA+mE,KAEA,IAIM,GAAApmG,cAAgBq/B,EAAUgS,OAAO,GAAArxC,aAAasyC,SAASjT,EAAUgS,OAErE/qD,EAAKuO,MAAQ,GACbvO,EAAK+8C,UAAY,IAAInvC,IACrB5N,EAAKqO,OAAS,GACdrO,EAAK+/G,WAAa,IAAInyG,IAEtB,IACE,MAAMoyG,EAAW,EAAQ,MACxBA,EAAS1mD,MAAM6B,mBAA2B95D,OAAS,EACnD2+G,EAAS1mD,MAAMY,yBAAiC74D,OAAS,EACzD2+G,EAAS1mD,MAAMa,wBAAgC94D,OAAS,EACxD2+G,EAAS1mD,MAAMwc,mBAA2Bz0E,OAAS,EACnD2+G,EAAS1mD,MAAMyc,iBAAyB10E,OAAS,C,CAClD,MAAM,CAQR,GAJArB,EAAKqZ,SAAW,IAAI,EAAA4mG,eACpBjgH,EAAKqZ,SAAS6mG,QAAQnnE,EAAU05B,OAG3B15B,EAAUr0C,MAAO,CACpByF,QAAQC,KAAK,mDACb,MAAM+1G,EAAY,IAAI,EAAAC,MAAMpgH,EAAM,EAAG,EAAG,GAAG,EAAM,EAAG,GAAA07B,QAAQE,SAC5Dmd,EAAUr0C,MAAQ,IAAI00D,GAAW+mD,E,CAcnC,OAVIL,EACF/mE,EAAUr0C,MAAM4J,MAAQ,EAIxB,EAAApM,OAAOm+G,SAAStnE,EAAU07B,aAG5B,EAAAtvD,eAAeC,KAAK,EAAAC,OAAOmsD,yBAA0B,CAAC,GAE/CxxE,EAAKqZ,SACTinG,qBAAqBtgH,EAAM+4C,EAAUr0C,MAAM4J,OAAQwxG,GACnDptF,KAAK0b,UAEJ,IACEpuC,EAAKqZ,SAAS6mG,QAAQnnE,EAAU05B,MAChC,EAAAvwE,OAAOm+G,SAAStnE,EAAU07B,Y,CAC1B,MAAM,CAER,EAAAtvD,eAAeC,KAAK,EAAAC,OAAOosD,2BAA4B,CAAC,GAGxD,IACE,MAAM8uC,EAAaxnE,EAAUxqC,OAAS,GAEhCiyG,EAAmB,IAAI5yG,IAC7B,IAAK,MAAM+xG,KAAMY,EAAY,CAC3B,MAAMX,EAAOD,EAAWxmG,OACxB,IAAKymG,GAAe,SAARA,EAAgB,SAC5B,MAAMa,EAAMd,EAAWxxG,SACvB,GAAkB,iBAAPsyG,EAAiB,SAC5B,MAAMhpF,EAAO+oF,EAAiBvxG,IAAI2wG,SACrBznG,IAATsf,GAAsBgpF,EAAKhpF,IAAM+oF,EAAiB9vG,IAAIkvG,EAAKa,E,CAEjE,MAAMC,EAAYnlG,MAAM2S,KAAKsyF,EAAiBtiG,WAC3C9O,IAAI,EAAEwwG,EAAKa,MAAQ,CAAGb,MAAKa,QAC3BlxG,KAAK,CAACC,EAAGC,IAAMD,EAAEixG,GAAKhxG,EAAEgxG,IAGrBE,EAA6B,GAEnC,IAAK,MAAMC,KAAMF,EAAW,CAI1B,GAHsB1gH,EAAKuO,MAAMhG,KAC9BqS,GAAOA,EAAUzB,SAAWynG,EAAGhB,KAEf,SACC5/G,EAAKuO,MAAMlN,aAEzBrB,EAAKqZ,SAASC,SAClBtZ,EACA+4C,EAAUr0C,MAAM4J,OAChB,EACA,OACAyqC,EAAUr0C,MAAMoV,SACfgmG,EACDc,EAAGhB,IAEF7mE,EAAkB8mE,aACf,CACEgB,UACG9nE,EAAkB8mE,aAAaj/G,KAC7BmuF,GAAMA,EAAE51E,SAAWynG,EAAGhB,MACtBrxG,YAAS4J,QAEhBA,GAEanY,EAAKuO,MAAMlN,OAA9B,MACMy/G,EAAQ9gH,EAAKuO,MAAMvN,OACtB4Z,GAAOA,EAAUzB,SAAWynG,EAAGhB,KAGlC,IAAK,MAAMhlG,KAAKkmG,EAAOH,EAAmBr2G,KAAKsQ,E,CAIjD,MAAMmmG,EAAc/gH,EAAKqO,OAAO0qC,EAAUr0C,MAAM4J,OAChD,GAAIyyG,EAAa,CACf,MAAMC,EAAe,IAAI9xG,IACvB6xG,EAAYxyG,MAAMa,IAAKwL,GAAMA,EAAET,WAE3B8mG,EAAWN,EACd3/G,OAAQ4Z,IAAOomG,EAAavwG,IAAImK,EAAET,WAElC5K,KAAK,CAACC,EAAGC,KACR,MAAMu3F,EAAMx3F,EAAU2J,QAAU,OAC1B+nG,EAAMzxG,EAAU0J,QAAU,OAChC,OAAI6tF,IAAOka,EAAWla,EAAKka,GAAM,EAAI,EACjC1xG,EAAErB,WAAasB,EAAEtB,SAAiBqB,EAAErB,SAAWsB,EAAEtB,SAC9CqB,EAAEiL,GAAKhL,EAAEgL,KAEpB,IAAI0mG,EAAS,EACTC,EAAUL,EAAYxyG,MAAMlN,OAChC,IAAK,MAAMuZ,KAAKqmG,EACdrmG,EAAEH,GAAK2mG,EAAUD,EACjBJ,EAAYxyG,MAAMjE,KAAKsQ,GACvBumG,IAEFnhH,EAAKuO,MAAQwyG,EAAYxyG,MACzBvO,EAAK+8C,UAAY,IAAInvC,IAAI5N,EAAKuO,MAAMa,IAAKwL,GAAM,CAACA,EAAET,SAAUS,KAE5D,IACE,MAAMymG,EAAiC,CAAC,EAClCC,EAAkC,CAAC,EACzC,IAAK,MAAM1mG,KAAK5a,EAAKuO,MAAO,CAC1B,MAAMqxG,EAAOhlG,EAAUzB,QAAU,OACjCkoG,EAAOzB,IAAQyB,EAAOzB,IAAQ,GAAK,EACnC0B,EAAQ1mG,EAAEzM,WAAamzG,EAAQ1mG,EAAEzM,WAAa,GAAK,C,EAErD,MAAM,C,EAEV,MAAO5G,GACP4C,QAAQC,KAAK,gDAAiD7C,E,CAGhE,GAAKu4G,EAuRH9/G,EAAK+O,QAAQ/O,EAAK8X,eAAiB,IAAI,EAAAqqD,OAAOniE,EAAM,EAAG,GAAG,GAC1DA,EAAKD,KAAOC,EAAKuO,MAAMvO,EAAK+O,QAAQ/O,EAAK8X,eAAetF,SACxDxS,EAAKD,KAAKsiF,WAAWriF,EAAK+O,QAAQ/O,EAAK8X,gBACvC9X,EAAK+O,QAAQ/O,EAAK8X,eAAe1I,IAAIkB,kBACrCtQ,EAAK+O,QAAQ/O,EAAK8X,eAAe1I,IAAIpB,kBA3RxB,CAEb,IACwB,IAAIJ,IAC1B,IAAK,MAAM+xG,KAAM5mE,EAAUxqC,MAAO,CAChC,IAAKoxG,GAAIjY,QAAS,SAElB,IAAI7qD,EACD8iE,EAAGjY,SAAW1nG,EAAKynG,YAAYkY,EAAGjY,UACnC1nG,EAAKuO,MAAM3N,KACRga,GACCA,EAAEzM,WAAcwxG,EAAWxxG,UAC1ByM,EAAUzB,UAAawmG,EAAWxmG,QAAU,SAC7CyB,EAAEH,KAAOklG,EAAGjP,SAEhB1wG,EAAKuO,MAAM3N,KACRga,GACCA,EAAEzM,WAAcwxG,EAAWxxG,UAAYyM,EAAEH,KAAOklG,EAAGjP,SAEvD1wG,EAAKuO,MAAM3N,KAAMga,GAAMA,EAAEH,KAAOklG,EAAGjP,QACrC,GAAI7zD,GAAcA,EAAkB1iC,WAAawlG,EAAGjY,QAClD,IACE,GAAA/4E,YAAY4yF,QAAQ5B,EAAGjY,SACtB7qD,EAAkB1iC,SAAWwlG,EAAGjY,O,CACjC,MAAM,C,CAIZ1nG,EAAK+8C,UAAY,IAAInvC,IAAI5N,EAAKuO,MAAMa,IAAKwL,GAAM,CAACA,EAAET,SAAUS,I,CAC5D,MAAM,CAIR,IAAK,MAAM4mG,KAAYzoE,EAAUhqC,QAC/B,IACE,MAAM5B,EAAS0xG,GACb2C,EACAzoE,EAAUhqC,QAAQyyG,GAClBxhH,GAEFA,EAAK+O,QAAQyyG,GAAYr0G,C,CACzB,MAAOsjB,GAKP,MAJAtmB,QAAQsmB,MACN,gCAAgC+wF,KAChC/wF,GAEIA,C,CAMV,IAAK,MAAM+wF,KAAYzoE,EAAU97B,eAC/B,IACE,MAAMwkG,EAAgB5C,GACpB2C,EACAzoE,EAAU97B,eAAeukG,GACzBxhH,GAEFA,EAAKid,eAAeukG,GAAYC,C,CAChC,MAAOhxF,GAKP,MAJAtmB,QAAQsmB,MACN,wCAAwC+wF,KACxC/wF,GAEIA,C,CAMV,IACE,IAAK,MAAM+mF,KAAaz+D,EAAUxqC,MAAO,CACvC,IACIxO,EADA2hH,EAAa,GAEjB,MAAMC,EAAanK,EAAkBr+F,QAAU,OAC/C,GAAIq+F,EAAU9P,QAAS,CACrB,MAAMka,EAAK5hH,EAAKynG,YAAY+P,EAAU9P,SAClCka,IACF7hH,EAAO6hH,EACPF,EAAa,M,CAGjB,IAAK3hH,EAAM,CACT,MAAM8hH,EAAK7hH,EAAKuO,MAAM3N,KACnBga,GACCA,EAAEzM,WAAaqpG,EAAUrpG,UACxByM,EAAUzB,SAAWwoG,GACtB/mG,EAAEH,KAAO+8F,EAAU9G,QAEnBmR,IACF9hH,EAAO8hH,EACPH,EAAa,gB,CAGjB,IAAK3hH,EAAM,CACT,MAAM+hH,EAAK9hH,EAAKuO,MAAM3N,KACnBga,GACCA,EAAEzM,WAAaqpG,EAAUrpG,UACzByM,EAAEH,KAAO+8F,EAAU9G,QAEnBoR,IACF/hH,EAAO+hH,EACPJ,EAAa,W,CAGjB,IAAK3hH,EAAM,CACT,MAAMgiH,EAAK/hH,EAAKuO,MAAM3N,KAAMga,GAAMA,EAAEH,KAAO+8F,EAAU9G,QACjDqR,IACFhiH,EAAOgiH,EACPL,EAAa,K,CAIjB,MAGMM,EAHgBjiH,EAItB,GAAIiiH,EAAS,CAENxK,EAAkBr+F,SACpB6oG,EAAgB7oG,OAAUq+F,EAAkBr+F,QAE/C,MAAM8oG,EAAWjiH,EAAKD,KACtB,IACEC,EAAKD,KAAOiiH,EACZzK,GAASyK,EAASxK,EAAWx3G,E,SAE7BA,EAAKD,KAAOkiH,C,GAMlB,IACE,MAAMC,EAAgB,IAAIt0G,IACpBu0G,EAAuB,GACvBC,EAAU,IAAIx0G,IACpB,IAAK,MAAMgN,KAAK5a,EAAKuO,MACnB,IAAK,IAAItO,EAAI2a,EAAE3P,MAAQ,EAAGhL,EAAI2a,EAAE3P,MAAQ2P,EAAEzP,MAAQ,EAAGlL,IACnD,IAAK,IAAIC,EAAI0a,EAAEvP,MAAQ,EAAGnL,EAAI0a,EAAEvP,MAAQuP,EAAErP,OAAS,EAAGrL,IAAK,CACzD,MAAM0F,EAAIgV,EAAEhQ,UAAU3K,KAAKC,GAC3B,GAAI0F,aAAa,GAAAue,KAAM,CACrB,MAAM2nE,EAAOlmF,EAAUuU,SACnB2xE,GAAKo2B,EAAcxxG,IAAIo7E,EAAKlmF,GAC3BA,EAAUy8G,uBAAuBF,EAAQ73G,KAAK1E,GACnD,MAAMkwB,EAAM,GAAG71B,KAAKC,IACdgjD,EAAMk/D,EAAQnzG,IAAI6mB,IAAQ,GAChCotB,EAAI54C,KAAK1E,GACTw8G,EAAQ1xG,IAAIolB,EAAKotB,E,EAMzB,IAAK,MAAMjiD,KAAKkhH,EAAS,CACvB,MAAMG,EAAarhH,EAAUohH,sBAGzBC,GAAaJ,EAAczxG,IAAI6xG,IACjCrhH,EAAEmtG,KAAK8T,EAAcjzG,IAAIqzG,IAE1BrhH,EAAUohH,sBAAwB,I,CAGrC,IAAK,MAAOvsF,EAAKjnB,KAAUuzG,EAAQlkG,UACjC,GAAqB,IAAjBrP,EAAMxN,OAAc,CACtB,MAAOmO,EAAGC,GAAKZ,EACTW,EAAU2xE,YAAY3xE,EAAE4+F,KAAK3+F,GAC7BA,EAAU0xE,YAAY1xE,EAAE2+F,KAAK5+F,E,EAGvC,MAAOjI,GACP4C,QAAQC,KAAK,sCAAuC7C,E,EAEtD,MAAOkpB,GAEP,MADAtmB,QAAQsmB,MAAM,qCAAsCA,GAC9CA,C,CAKR,GAAI6jD,EAAgBr+C,SAASj2B,EAAK8X,eAAgB,CAChD,MAAMyqG,EAAcviH,EAAK+O,QAAQ/O,EAAK8X,eACtC,GAAIyqG,EAAa,CACf,KAAIviH,EAAKuO,MAAMlN,OAAS,GAuFtB,MAJA8I,QAAQsmB,MACN,4CACA8xF,EAAY/vG,SAER,IAAIohB,MACR,mBAAmB2uF,EAAY/vG,4BAxFR,CAGzB,MAAMmrG,EAAa5kE,EAAUhqC,QAAQ/O,EAAK8X,eACpC0qG,EAAU7E,GAAYjW,QACxB1nG,EAAKynG,YAAYkW,EAAWjW,cAC5BvvF,EAEJ,IAAIsqG,EACJ,QAA6BtqG,IAAzBwlG,GAAYxvG,SAAwB,CACtC,MAAMwM,EAAa3a,EAAKuO,MACrBvN,OAAQ4Z,GAAMA,EAAEzM,WAAawvG,EAAWxvG,UACxCoB,KAAK,CAACC,EAAGC,IAAMD,EAAEiL,GAAKhL,EAAEgL,IAEvBE,EAAWtZ,cAEsB8W,IAAjCwlG,GAAYW,kBACZX,EAAWW,iBAAmB3jG,EAAWtZ,OAEzCohH,EAAiB9nG,EAAWgjG,EAAWW,uBACPnmG,IAAvBwlG,GAAYjN,SACrB+R,EACE9nG,EAAW/Z,KAAMga,GAAMA,EAAEH,KAAOkjG,EAAWjN,SAC3C/1F,EAAW,I,CAInB,MAAM+nG,EAAY1iH,EAAKuO,MAAM3N,KAAMga,GACjCA,EAAEg2D,WAAW2xC,EAAYtiH,EAAGsiH,EAAYriH,IAIpCyiH,EACJJ,EAAY/vG,QAAUxS,EAAKuO,MAAMlN,OAC7BrB,EAAKuO,MAAMg0G,EAAY/vG,cACvB2F,EACAimG,EACJoE,GACAC,GACAC,GACAC,GACA3iH,EAAKuO,MAAM,GAEbvO,EAAKD,KAAOq+G,EACZmE,EAAY/vG,QAAUxS,EAAKuO,MAAM9G,QAAQ22G,GAEzC,IACGp+G,EAAaga,cACX++B,EAAkB/+B,eACnBokG,EAAajlG,QACb,M,CACF,MAAM,CAMR,GAHAnZ,EAAKsiF,YAAYtiF,EAAKD,MACtBC,EAAK4Z,aAAe5Z,EAAK0E,MAAM4J,MAC/Bi0G,EAAYj0G,MAAQtO,EAAK0E,MAAM4J,OAC1B8vG,EAAaxtC,WAAW2xC,EAAYtiH,EAAGsiH,EAAYriH,GAAI,CAC1D,MAAM0iH,EAASxE,EAAa37B,gBAC5B8/B,EAAY7/B,SAASkgC,EAAO3iH,EAAG2iH,EAAO1iH,E,CAExCF,EAAKD,KAAKsiF,WAAWkgC,EAAa,CAChCtiH,EAAGsiH,EAAYtiH,EACfC,EAAGqiH,EAAYriH,IAEjBqiH,EAAYnzG,IAAIkB,kBAEhB,IACEtQ,EAAKD,KAAKkiB,gB,CACV,MAAM,CAGR,MAAM7V,EACJpM,EAAKD,KAAK6K,UAAU23G,EAAYtiH,KAAKsiH,EAAYriH,GACnD,IAAKkM,GAAQA,EAAKF,UAAW,CAC3B/B,QAAQC,KACN,8DAEF,MAAMo4E,EAAaxiF,EAAKD,KAAK0iF,gBAC7B8/B,EAAY7/B,SAASF,EAAWviF,EAAGuiF,EAAWtiF,E,KAuBxD,IACEF,EAAKD,MAAMkiB,kB,CACX,MAAM,CAKR,OAFAjiB,EAAK6iH,KAAO,GAEL7iH,IAERm0B,MAAO1D,IAEN,MADAtmB,QAAQsmB,MAAM,mCAAoCA,GAC5CA,G,CAEV,MAAOA,GAEP,MADAtmB,QAAQsmB,MAAM,wCAAyCA,GACjDA,C,GAIV,SAAYqnF,GACV,qBACA,mBACA,+BACA,uBACA,mBACA,iCACA,6BACA,mBACA,+BACA,qBACA,kCACA,gCACA,sBACA,8BACA,8CACA,wBACA,4BACA,wBACA,qBACD,CApBD,CAAYA,GAAA,EAAAA,WAAA,EAAAA,SAAQ,KAqBpB,MAAaZ,GAOX,WAAAp3G,CAAYsM,EAAYpM,GAEtB,IAAKoM,EACH,MAAM,IAAIwnB,MAAM,0CAQlB,GALAtzB,KAAKL,EAAImM,EAAKnM,EACdK,KAAKJ,EAAIkM,EAAKlM,EACdI,KAAKy3G,WAAa,CAAC,EAGf3rG,aAAgB,GAAAE,MAClBhM,KAAK+D,KAAOyzG,GAASgL,WAChB,GAAI12G,aAAgB,GAAA+7E,UACzB7nF,KAAK+D,KAAOyzG,GAASiL,WACrBziH,KAAKy3G,WAAW/rG,aAAgBI,EAAaJ,aAC7C1L,KAAKy3G,WAAWl0G,MAASuI,EAAavI,WACjC,GAAIuI,aAAgB,GAAAqhG,OACzBntG,KAAK+D,KAAOyzG,GAASkL,OACrB1iH,KAAKy3G,WAAW/rG,aAAgBI,EAAaJ,kBACxC,GAAII,aAAgB,GAAAvB,KACzBvK,KAAK+D,KAAOyzG,GAAS56E,UAChB,GAAI9wB,aAAgB,GAAA+X,KACzB7jB,KAAK+D,KAAOyzG,GAASv3B,KAErBjgF,KAAKy3G,WAAW7J,SAAY9hG,EAAa/H,KACzC/D,KAAKy3G,WAAW1zG,KAAQ+H,EAAa/H,KAErC/D,KAAKy3G,WAAWr6F,OAAUtR,EAAasR,OACvCpd,KAAKy3G,WAAWxlG,OAAUnG,EAAamG,OACvCjS,KAAKy3G,WAAWn4C,OAAUxzD,EAAawzD,OAEvCt/D,KAAKy3G,WAAWj8D,SAAY1vC,EAAa6vC,UAAUH,SACnDx7C,KAAKy3G,WAAW/3C,MAAS5zD,EAAa6vC,UAAU+jB,MAChD1/D,KAAKy3G,WAAWl1B,QAAWz2E,EAAay2E,QACxCviF,KAAKy3G,WAAWh5B,WAAc3yE,EAAa2yE,WAC3Cz+E,KAAKy3G,WAAW59F,SAAY/N,EAAa+N,SACzC7Z,KAAKy3G,WAAWG,cACb9rG,EAAa+0E,YAAYhnE,UAAY,UACnC,GAAI/N,aAAgB,GAAAgrG,gBACzB92G,KAAK+D,KAAOyzG,GAASE,kBACrB13G,KAAKy3G,WAAWxlG,OAAUnG,EAAamG,OACvCjS,KAAKy3G,WAAW59F,SAAY/N,EAAa+N,cACpC,GAAI/N,aAAgB,GAAAirG,OAAQ,CACjC/2G,KAAK+D,KAAOyzG,GAASK,OACrB73G,KAAKy3G,WAAW59F,SAAY/N,EAAa+N,SACzC,MAAMgnE,EAAc/0E,EAAa+0E,WACjC7gF,KAAKy3G,WAAWG,cAAgB/2B,GAAYhnE,UAAY,I,MACnD,GAAI/N,aAAgB,GAAAgY,WAAY,CACrC9jB,KAAK+D,KAAOyzG,GAASmL,YACrB3iH,KAAKy3G,WAAW7+F,WAAc9M,EAAa8M,WAC3C5Y,KAAKy3G,WAAWv+F,YAAepN,EAAaoN,YAC5ClZ,KAAKy3G,WAAWj8D,SAAY1vC,EAAa6vC,UAAUH,SACnDx7C,KAAKy3G,WAAW/3C,MAAS5zD,EAAa6vC,UAAU+jB,MAChD,MAAMhnD,EAA2B5M,EAAa4M,YAAc,KAC5D1Y,KAAKy3G,WAAWmL,cAAgBlqG,EAAaA,EAAWmB,SAAW,I,MAC9D,GAAI/N,aAAgB,GAAAyO,SAAU,CACnCva,KAAK+D,KAAOyzG,GAASqL,UAErB7iH,KAAKy3G,WAAW98F,OAAU7O,EAAa6O,SAAU,EACjD,MAAMjC,EAA2B5M,EAAa4M,YAAc,KAC5D1Y,KAAKy3G,WAAWmL,cAAgBlqG,EAAaA,EAAWmB,SAAW,I,MAC9D,GAAI/N,aAAgB,GAAA8oB,KAAM,CAC/B50B,KAAK+D,KAAOyzG,GAASsL,KAErB,MAAMC,EAAmC,IAAtBj3G,EAAampB,KAAa,GAAK,GAC5C+tF,EAAY,EAClBhjH,KAAKy3G,WAAW/sG,SAAYoB,EAAa5K,MAAQ6hH,EACjD/iH,KAAKy3G,WAAW7sG,UAAakB,EAAa5K,MAAQ6hH,EAClD/iH,KAAKy3G,WAAW3sG,QAAWgB,EAAahB,QACxC9K,KAAKy3G,WAAWzsG,WAAcc,EAAa3K,MAAQ6hH,C,MAC9C,GAAIl3G,aAAgB,GAAA+qG,UAAW,CACpC72G,KAAK+D,KAAOyzG,GAASyL,WACrB,MAAMF,EAAY,GACZC,EAAY,EAClBhjH,KAAKy3G,WAAW/sG,SAAYoB,EAAa5K,MAAQ6hH,EACjD/iH,KAAKy3G,WAAW7sG,UAAakB,EAAa5K,MAAQ6hH,EAClD/iH,KAAKy3G,WAAW3sG,QAAWgB,EAAahB,QACxC9K,KAAKy3G,WAAWzsG,WAAcc,EAAa3K,MAAQ6hH,C,MAC9C,GAAIl3G,aAAgB,GAAAigD,MAAO,CAChC/rD,KAAK+D,KAAOyzG,GAAS0L,MAErB,MAAMH,EAAmC,IAAtBj3G,EAAampB,KAAa,GAAK,GAC5C+tF,EAAY,EAClBhjH,KAAKy3G,WAAW/sG,SAAYoB,EAAa5K,MAAQ6hH,EACjD/iH,KAAKy3G,WAAW7sG,UAAakB,EAAa5K,MAAQ6hH,EAClD/iH,KAAKy3G,WAAW3sG,QAAWgB,EAAahB,QACxC9K,KAAKy3G,WAAWzsG,WAAcc,EAAa3K,MAAQ6hH,C,MAC1Cl3G,aAAgB,GAAAu0E,WACzBrgF,KAAK+D,KAAOyzG,GAAS2L,YACZr3G,aAAgB,GAAA4sB,cACzB14B,KAAK+D,KAAOyzG,GAAS/tC,SACrBzpE,KAAKy3G,WAAW9+E,SAAY7sB,EAAa6sB,SACzC34B,KAAKy3G,WAAW7+E,SAAY9sB,EAAa8sB,UAChC9sB,aAAgB,GAAAkrG,YACzBh3G,KAAK+D,KAAOyzG,GAAS9tC,OACrB1pE,KAAKy3G,WAAW7+E,SAAY9sB,EAAa8sB,UAChC9sB,aAAgB,GAAAoP,WACzBlb,KAAK+D,KAAOyzG,GAAS4L,WACrBpjH,KAAKy3G,WAAW4L,UAAav3G,EAAau3G,WACjCv3G,aAAgB,GAAA63B,MACzB3jC,KAAK+D,KAAOyzG,GAAS8L,MACZx3G,aAAgB,GAAA85D,SACzB5lE,KAAK+D,KAAOyzG,GAAS+L,UACZz3G,aAAgB,GAAA03G,MACzBxjH,KAAK+D,KAAOyzG,GAASiM,OAGrBzjH,KAAK+D,KAAOyzG,GAASgL,MACrB34G,QAAQC,KACN,0CACAgC,EAAKtM,YAAYgC,MAGvB,EAzHF,eA4HA,IAAI61G,GAAW,CAACrrD,EAAevsD,EAAYC,KACzC,IAAIoM,EAEJ,OAAQkgD,EAAGjoD,MACT,KAAKyzG,GAASgL,MACZ12G,EAAO,IAAI,GAAAE,MAAMvM,EAAMusD,EAAGrsD,EAAGqsD,EAAGpsD,GAChC,MACF,KAAK43G,GAAS56E,KACZ9wB,EAAO,IAAI,GAAAvB,KAAK9K,EAAMusD,EAAGrsD,EAAGqsD,EAAGpsD,GAC/B,MACF,KAAK43G,GAASiL,WACZ32G,EAAO,IAAI,GAAA+7E,UAAUpoF,EAAMusD,EAAGrsD,EAAGqsD,EAAGpsD,EAAGosD,EAAGyrD,WAAW/rG,cACpDI,EAAavI,MAAQyoD,EAAGyrD,WAAWl0G,OAAS,EAC7C,MACF,KAAKi0G,GAASkL,OACZ52G,EAAO,IAAI,GAAAqhG,OAAO1tG,EAAMusD,EAAGrsD,EAAGqsD,EAAGpsD,EAAGosD,EAAGyrD,WAAW/rG,cAClD,MACF,KAAK8rG,GAASv3B,KAEZ,MAAMyjC,EACH13D,EAAGyrD,WAAW7J,UACd5hD,EAAGyrD,WAAW1zG,MACf,EAAAi8E,SAASC,KACXn0E,EAAO,IAAI,GAAA+X,KAAKpkB,EAAMC,EAAMssD,EAAGrsD,EAAGqsD,EAAGpsD,EAAGosD,EAAGyrD,WAAWl1B,QAASmhC,GAC9D53G,EAAasR,OAAS4uC,EAAGyrD,WAAWr6F,SAAU,EACX,kBAAzB4uC,EAAGyrD,WAAWxlG,SACtBnG,EAAamG,OAAS+5C,EAAGyrD,WAAWxlG,QACH,kBAAzB+5C,EAAGyrD,WAAWn4C,SACtBxzD,EAAawzD,OAAStT,EAAGyrD,WAAWn4C,QAEvC,IACOxzD,EAAa6vC,eAAuC9jC,IAA3Bm0C,EAAGyrD,WAAWj8D,WACzC1vC,EAAa6vC,SAASH,SAAWwQ,EAAGyrD,WAAWj8D,SAC/C1vC,EAAa6vC,SAAS+jB,MAAQ1T,EAAGyrD,WAAW/3C,M,CAE/C,MAAM,CAIR,GAFC5zD,EAAai2G,sBAAwB/1D,EAAGyrD,WAAWG,eAAiB,KAEjE5rD,EAAGyrD,WAAW59F,SAChB,IACE,GAAAwU,YAAY4yF,QAAQj1D,EAAGyrD,WAAW59F,UACjC/N,EAAa+N,SAAWmyC,EAAGyrD,WAAW59F,Q,CACvC,MAAM,CAEV,MACF,KAAK29F,GAASE,kBAIZ,GAHA5rG,EAAO,IAAI,GAAAgrG,gBAAgBr3G,EAAMC,EAAMssD,EAAGrsD,EAAGqsD,EAAGpsD,GACZ,kBAAzBosD,EAAGyrD,WAAWxlG,SACtBnG,EAAamG,OAAS+5C,EAAGyrD,WAAWxlG,QACnC+5C,EAAGyrD,WAAW59F,SAChB,IACE,GAAAwU,YAAY4yF,QAAQj1D,EAAGyrD,WAAW59F,UACjC/N,EAAa+N,SAAWmyC,EAAGyrD,WAAW59F,Q,CACvC,MAAM,CAEV,MACF,KAAK29F,GAASK,OAEZ,MAAM8L,EAAW,IAAI,GAAA7M,gBAAgBr3G,EAAMC,EAAMssD,EAAGrsD,EAAGqsD,EAAGpsD,GAE1D,GADAkM,EAAO,IAAI,GAAAirG,OAAOt3G,EAAMusD,EAAGrsD,EAAGqsD,EAAGpsD,EAAG+jH,GAChC33D,EAAGyrD,WAAW59F,SAChB,IACE,GAAAwU,YAAY4yF,QAAQj1D,EAAGyrD,WAAW59F,UACjC/N,EAAa+N,SAAWmyC,EAAGyrD,WAAW59F,Q,CACvC,MAAM,CAGT/N,EAAai2G,sBAAwB/1D,EAAGyrD,WAAWG,eAAiB,KACrE,MACF,KAAKJ,GAASmL,YAaZ,GAZA72G,EAAO,IAAI,GAAAgY,WACTrkB,EACAC,EACAssD,EAAGrsD,EACHqsD,EAAGpsD,EACHosD,EAAGyrD,WAAW7+F,aAAc,EAC5BozC,EAAGyrD,WAAWv+F,YACd8yC,EAAGyrD,WAAWj8D,cACd3jC,EAEA,CAAE2jC,SAAUwQ,EAAGyrD,WAAWj8D,SAAUkkB,MAAO1T,EAAGyrD,WAAW/3C,QAEvD1T,EAAGyrD,WAAWmL,cAAe,CAC/B,MAAMn3B,EAAS/rF,EAAK+8C,WAAW9tC,IAAIq9C,EAAGyrD,WAAWmL,eAC7Cn3B,IAAS3/E,EAAa4M,WAAa+yE,E,CAEzC,MACF,KAAK+rB,GAASqL,UAGZ,GAFA/2G,EAAO,IAAI,GAAAyO,SAAS9a,EAAMC,EAAMssD,EAAGrsD,EAAGqsD,EAAGpsD,GACxCkM,EAAa6O,SAAWqxC,EAAGyrD,WAAW98F,OACnCqxC,EAAGyrD,WAAWmL,cAAe,CAC/B,MAAMn3B,EAAS/rF,EAAK+8C,WAAW9tC,IAAIq9C,EAAGyrD,WAAWmL,eAC7Cn3B,IAAS3/E,EAAa4M,WAAa+yE,E,CAEzC,MACF,KAAK+rB,GAASsL,KACZh3G,EAAO,IAAI,GAAA8oB,KACTn1B,EACAusD,EAAGrsD,EACHqsD,EAAGpsD,EACHosD,EAAGyrD,WAAW/sG,WAAY,EAC1BshD,EAAGyrD,WAAW7sG,YAAa,EAC3BohD,EAAGyrD,WAAW3sG,UAAW,EACzBkhD,EAAGyrD,WAAWzsG,aAAc,GAE9B,MACF,KAAKwsG,GAASyL,WACZn3G,EAAO,IAAI,GAAA+qG,UACTp3G,EACAusD,EAAGrsD,EACHqsD,EAAGpsD,EACHosD,EAAGyrD,WAAW/sG,WAAY,EAC1BshD,EAAGyrD,WAAW7sG,YAAa,EAC3BohD,EAAGyrD,WAAW3sG,UAAW,EACzBkhD,EAAGyrD,WAAWzsG,aAAc,GAE9B,MACF,KAAKwsG,GAAS0L,MACZp3G,EAAO,IAAI,GAAAigD,MACTtsD,EACAusD,EAAGrsD,EACHqsD,EAAGpsD,EACHosD,EAAGyrD,WAAW/sG,WAAY,EAC1BshD,EAAGyrD,WAAW7sG,YAAa,EAC3BohD,EAAGyrD,WAAW3sG,UAAW,EACzBkhD,EAAGyrD,WAAWzsG,aAAc,GAE9B,MACF,KAAKwsG,GAAS2L,YACZr3G,EAAO,IAAI,GAAAu0E,WAAW5gF,EAAMusD,EAAGrsD,EAAGqsD,EAAGpsD,GACrC,MAEF,KAAK43G,GAAS/tC,SACZ39D,EAAO,IAAI,GAAA4sB,aACTj5B,EACAusD,EAAGrsD,EACHqsD,EAAGpsD,EACHosD,EAAGyrD,WAAW9+E,UAAY,EAC1BqzB,EAAGyrD,WAAW7+E,UAAY,GAE5B,MACF,KAAK4+E,GAAS9tC,OACZ59D,EAAO,IAAI,GAAAkrG,WAAWv3G,EAAMusD,EAAGrsD,EAAGqsD,EAAGpsD,EAAGosD,EAAGyrD,WAAW7+E,UAAY,GAClE,MAEF,KAAK4+E,GAAS4L,WACZt3G,EAAO,IAAI,GAAAoP,UAAUzb,EAAMusD,EAAGrsD,EAAGqsD,EAAGpsD,GACnCkM,EAAau3G,UAAYr3D,EAAGyrD,WAAW4L,YAAa,EACrD,MACF,KAAK7L,GAAS8L,MACZx3G,EAAO,IAAI,GAAA63B,MAAMlkC,EAAMusD,EAAGrsD,EAAGqsD,EAAGpsD,GAChC,MAEF,KAAK43G,GAASiM,MACZ33G,EAAO,IAAI,GAAA03G,MAAM/jH,EAAMusD,EAAGrsD,EAAGqsD,EAAGpsD,GAChC,MAEF,QACEiK,QAAQsmB,MACN,qBACA67B,EAAGjoD,KACH,uBACAyzG,GAASxrD,EAAGjoD,MACZ,yBAEF+H,EAAO,IAAI,GAAAE,MAAMvM,EAAMusD,EAAGrsD,EAAGqsD,EAAGpsD,GAKpC,OAFAkM,EAAKmpB,KAAOx1B,EAAKw1B,KAEVnpB,E,oGCxgFT,gBAEA,UACA,UAGA,UAEA,MAAa1C,UAAoB,EAAA/C,MAW/B,WAAA7G,CAAYC,EAAYC,EAAYC,EAAWC,EAAWW,GACxDV,MAAMJ,EAAMC,EAAMC,EAAGC,GA4BvB,KAAA2G,IAAM,IACGvG,KAAK8a,OAGd,KAAAxT,SAAW,KAGT,GAFAtH,KAAKuH,MAAQvH,KAAKL,EAClBK,KAAKwH,MAAQxH,KAAKJ,GACbI,KAAKqC,KAAM,CACd,GAAIrC,KAAKyH,cAAgB,EAEvB,YADAzH,KAAKyH,gBAGP,GAAKzH,KAAKoM,YAcH,GAAIpM,KAAKoM,WAAY,CAC1B,GAAIpM,KAAKP,KAAKsb,eAAiB/a,KAAKuU,aAGlC,GAFAvU,KAAKsM,WAAaxK,KAAK4D,IAAI,EAAG1F,KAAKsM,WAAa,GAChDtM,KAAK0H,QACD1H,KAAK0H,MAAQ,GAAM,EAAG,CACxB1H,KAAKkrB,UAAW,EAChB,IAAInW,EAAO/U,KAAKL,EACZqV,EAAOhV,KAAKJ,EACZob,EAAmBC,QACvB,IAAK,MAAMhU,KAAKjH,KAAKP,KAAKuH,SACpBC,IAAMjH,MACRgb,EAAiBhR,KAAK,CAAErK,EAAGsH,EAAEtH,EAAGC,EAAGqH,EAAErH,IAGzC,IAAK,IAAIqG,EAAKjG,KAAKL,EAAI,EAAGsG,GAAMjG,KAAKL,EAAI,EAAGsG,IAC1C,IAAK,IAAI4F,EAAK7L,KAAKJ,EAAI,EAAGiM,GAAM7L,KAAKJ,EAAI,EAAGiM,IAExC7L,KAAKP,KAAK6K,UAAUrE,GAAI4F,aAAe,EAAAqP,WACtClb,KAAKP,KAAK6K,UAAUrE,GAAI4F,GAAkBsP,IAG3CH,EAAiBhR,KAAK,CAAErK,EAAGsG,EAAIrG,EAAGiM,IAIxC,IAAIuP,EAAO,GACX,IAAK,IAAIzb,EAAI,EAAGA,EAAIK,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MAAOlL,IAAK,CAC1Dyb,EAAKzb,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAII,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OAAQrL,IAClDI,KAAKP,KAAK6K,UAAU3K,IAAMK,KAAKP,KAAK6K,UAAU3K,GAAGC,GACnDwb,EAAKzb,GAAGC,GAAKI,KAAKP,KAAK6K,UAAU3K,GAAGC,GACjCwb,EAAKzb,GAAGC,IAAK,C,CAGtB,IAAIyb,EAAQ,EAAAC,MAAMC,MAAMC,OACtBJ,EACApb,KACAA,KAAKuU,aACLyG,OACAnD,OACAA,OACAA,OACAA,OACAA,OACAA,EACA7X,KAAKg7B,eAEP,GAAI3f,EAAMta,OAAS,EAAG,CACpB,IAAIqb,GAAY,EAChB,IAAK,MAAMpW,KAAKhG,KAAKN,KAAK+O,QAEtBzO,KAAKN,KAAKuO,MAAMjO,KAAKN,KAAK+O,QAAQzI,GAAGkM,WAAalS,KAAKP,MACvDO,KAAKN,KAAK+O,QAAQzI,GAAGrG,IAAM0b,EAAM,GAAGM,IAAIhc,GACxCK,KAAKN,KAAK+O,QAAQzI,GAAGpG,IAAMyb,EAAM,GAAGM,IAAI/b,IAExCI,KAAKN,KAAK+O,QAAQzI,GAAGjB,KAAK/E,KAAKuG,MAAOvG,KAAKwB,MAC3CxB,KAAK+C,MAAQ,IAAO/C,KAAKL,EAAIK,KAAKN,KAAK+O,QAAQzI,GAAGrG,GAClDK,KAAKiD,MAAQ,IAAOjD,KAAKJ,EAAII,KAAKN,KAAK+O,QAAQzI,GAAGpG,GAEhDI,KAAKN,KAAK+O,QAAQzI,KAClBhG,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,gBAE5BxX,KAAKN,KAAK2c,YAAY,GAAKrc,KAAK+C,MAAO,GAAK/C,KAAKiD,OACnDmZ,GAAY,GAGXA,IACHpc,KAAKwV,QAAQ6F,EAAM,GAAGM,IAAIhc,EAAG0b,EAAM,GAAGM,IAAI/b,GAC1CI,KAAKsc,UAAUvH,EAAMC,GAEjBhV,KAAKL,EAAIoV,EAAM/U,KAAKyb,UAAY,EAAAM,UAAUC,MACrChc,KAAKL,EAAIoV,EAAM/U,KAAKyb,UAAY,EAAAM,UAAUE,KAC1Cjc,KAAKJ,EAAIoV,EAAMhV,KAAKyb,UAAY,EAAAM,UAAUG,KAC1Clc,KAAKJ,EAAIoV,IAAMhV,KAAKyb,UAAY,EAAAM,UAAUI,I,CAGvDnc,KAAKkrB,UAAW,C,MAEhBlrB,KAAKkrB,UAAW,EAChBlrB,KAAKuc,kBAIT,IAAIC,GAED,IADDC,OAAOC,OAAO1c,KAAKN,KAAKid,gBAAgBxV,QAAQnH,KAAKuU,cAEvD,IAAKvU,KAAK4c,OAASJ,EAAqB,CACtC,IAAInS,EAAIrK,KAAKqU,gBACb,IAAU,IAANhK,EAAa,CACf,IAAKiK,EAAUzH,GAAUxC,EAEvBiK,GAAY,IACXkI,GACClI,EAAWtU,KAAK6c,eAAe7c,KAAKuU,gBAElC1H,IAAW7M,KAAKuU,eAClBvU,KAAKuU,aAAe1H,EACpB7M,KAAK8b,WAAWjP,GACZA,IAAW7M,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,iBACzCxX,KAAKsM,WAAa,GAChBtM,KAAK0H,MAAQ,GAAM,IACrB1H,KAAKkrB,UAAW,EAChBlrB,KAAKuc,mB,QApHK,CACpB,MAAMvG,EAAShW,KAAKqU,gBACpB,IAAe,IAAX2B,EAAkB,CACpB,IAAK1B,EAAUjK,GAAK2L,EAChB1B,EAAW,IACbtU,KAAKkrB,UAAW,EAChBlrB,KAAKoM,YAAa,EAClBpM,KAAKuU,aAAelK,EACpBrK,KAAK8b,WAAWzR,GACZA,IAAMrK,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,iBACpCxX,KAAKsM,WAAa,GACpBtM,KAAKuc,kB,KAmHf,KAAApa,KAAQC,IACN,GAAIpC,KAAKqC,KAAM,OACf,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MAC5B,IAAI+zD,EAAUx2D,KAAKirB,OAAOjrB,KAAKkrB,SAAUlrB,KAAKuD,OAAO5D,EACvCK,KAAKirB,OAAOjrB,KAAKkrB,SAAUlrB,KAAKuD,MAAOvD,KAAKyb,WAAW7b,EAChEI,KAAKqC,OACRrC,KAAK0C,aAAaN,GACdpC,KAAK0H,MAAQ,GAAM,GACrB1H,KAAKkB,MAAQ,EACblB,KAAKmB,MAAQ,IAEbnB,KAAKkB,MAAQ,EACblB,KAAKmB,MAAQ,GAGfnB,KAAKuD,OAAS,GAAMnB,EAChBpC,KAAKuD,OAAS,IAAGvD,KAAKuD,MAAQ,GAC9BvD,KAAK2C,WAAW3C,KAAK4C,WAAWR,GACpC,EAAAV,KAAKuK,QACHjM,KAAKkB,OAAwB,IAAflB,KAAKkB,MAAc,EAAIY,KAAKgB,MAAM9C,KAAKuD,QACrDvD,KAAKmB,MAAyB,EAAjBnB,KAAKyb,UAClB,EACA,EACAzb,KAAKL,EAAIK,KAAK+C,MAAQyzD,EACtBx2D,KAAKJ,EACHI,KAAKgD,YACLhD,KAAKiD,OACW,IAAfjD,KAAKkB,MAAc,MAAS,GAC/B,EACA,EACAlB,KAAKkM,eACLlM,KAAKmD,gBAGJnD,KAAK8c,SACH9c,KAAKoM,YACRpM,KAAKqM,eAAejK,GAElBpC,KAAKsM,WAAa,GACpBtM,KAAKuM,gBAAgBnK,IAGzB,EAAAV,KAAKY,IAAIc,WAhNTpD,KAAK0H,MAAQ,EACb1H,KAAKuD,MAAQ,EACbvD,KAAKC,OAAS,EACdD,KAAKyG,UAAY,EACjBzG,KAAKwM,iBAAmB,EACxBxM,KAAKkB,MAAQ,EACblB,KAAKmB,MAAQ,EACbnB,KAAKoM,YAAa,EAClBpM,KAAK4c,OAAQ,EACb5c,KAAK+c,mBAAqB,UAC1B/c,KAAKuH,MAAQvH,KAAKL,EAClBK,KAAKwH,MAAQxH,KAAKJ,EAClBI,KAAKwB,KAAO,gBACZxB,KAAKgtB,kBAAmB,EACxBhtB,KAAK6D,eAAiB,EACtB7D,KAAK8D,eAAiB,GAClBvD,IAAMP,KAAKO,KAAOA,GACtBP,KAAKsB,QAAQ,CACX,SACA,YACA,YACA,aACA,OACA,QAEJ,EAtCF,gBAOS,EAAAsU,WAAqB,EACrB,EAAA1U,MAAgB,EAChB,EAAAC,MAAgB,C,qGCjBzB,gBACA,UAGA,UAEA,UACA,UAGA,UAEA,UACA,UACA,UACA,UAEA,MAAam9E,UAAqB,EAAAj4E,MAUhC,WAAA7G,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GAoCvB,KAAA2G,IAAM,IACG,EAET,KAAAa,MAAQ,OAER,KAAAnG,mBAAqB,KACnBjB,KAAK4jH,gBACL5jH,KAAK6T,kBAAkB7T,KAAKmT,aAC5BnT,KAAKmT,YAAc,MAGrB,KAAA7L,SAAW,KACTtH,KAAKuH,MAAQvH,KAAKL,EAClBK,KAAKwH,MAAQxH,KAAKJ,EAElB,IAAIikH,EAAgB7jH,KAAK8jH,sBAEzB,IAAK9jH,KAAKqC,KAAM,CACd,GAAIrC,KAAKyH,cAAgB,EAEvB,YADAzH,KAAKyH,gBASP,GALAzH,KAAK0H,QAGL1H,KAAK+jH,YAAYF,GACjB7jH,KAAKgkH,sBACDhkH,KAAKw4G,cAAcz3G,OAAS,EAAG,CAEjC,IAAIirG,EAAchsG,KAAKw4G,cAAcvuE,OAAO,CAACgiE,EAAU1gB,KACrD,MAAM2gB,EAAK,EAAAz0F,MAAMnD,SAAStU,KAAKL,EAAGK,KAAKJ,EAAGqsG,EAAStsG,EAAGssG,EAASrsG,GAE/D,OADW,EAAA6X,MAAMnD,SAAStU,KAAKL,EAAGK,KAAKJ,EAAG2rF,EAAQ5rF,EAAG4rF,EAAQ3rF,GACjDssG,EAAK3gB,EAAU0gB,IAIzBjxF,EAAmBC,QACvB,IAAK,MAAMhU,KAAKjH,KAAKP,KAAKuH,SACpBC,IAAMjH,MACRgb,EAAiBhR,KAAK,CAAErK,EAAGsH,EAAEtH,EAAGC,EAAGqH,EAAErH,IAGzC,IAAK,IAAIqG,EAAKjG,KAAKL,EAAI,EAAGsG,GAAMjG,KAAKL,EAAI,EAAGsG,IAC1C,IAAK,IAAI4F,EAAK7L,KAAKJ,EAAI,EAAGiM,GAAM7L,KAAKJ,EAAI,EAAGiM,IAExC7L,KAAKP,KAAK6K,UAAUrE,GAAI4F,aAAe,EAAAqP,WACtClb,KAAKP,KAAK6K,UAAUrE,GAAI4F,GAAkBsP,IAE3CH,EAAiBhR,KAAK,CAAErK,EAAGsG,EAAIrG,EAAGiM,IAMxC,IAAIuP,EAAO,GACX,IAAK,IAAIzb,EAAI,EAAGA,EAAIK,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MAAOlL,IAAK,CAC1Dyb,EAAKzb,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAII,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OAAQrL,IAClDI,KAAKP,KAAK6K,UAAU3K,IAAMK,KAAKP,KAAK6K,UAAU3K,GAAGC,GACnDwb,EAAKzb,GAAGC,GAAKI,KAAKP,KAAK6K,UAAU3K,GAAGC,GACjCwb,EAAKzb,GAAGC,IAAK,C,CAKtB,MAAMyb,EAAQ,EAAAC,MAAMC,MAAMC,OACxBJ,EACApb,KACAgsG,EACAhxF,GACA,GACA,GACA,EACAhb,KAAKyb,WAGP,GAAIJ,EAAMta,OAAS,EAAG,CACpB,MAAMgU,EAAO/U,KAAKL,EACZqV,EAAOhV,KAAKJ,EACZ8b,EAAQL,EAAM,GAAGM,IAAIhc,EACrBic,EAAQP,EAAM,GAAGM,IAAI/b,EAG3BI,KAAKwV,QAAQkG,EAAOE,GACpB5b,KAAKsc,UAAUvH,EAAMC,GAEjBhV,KAAKL,EAAIoV,EAAM/U,KAAKyb,UAAY,EAAAM,UAAUC,MACrChc,KAAKL,EAAIoV,EAAM/U,KAAKyb,UAAY,EAAAM,UAAUE,KAC1Cjc,KAAKJ,EAAIoV,EAAMhV,KAAKyb,UAAY,EAAAM,UAAUG,KAC1Clc,KAAKJ,EAAIoV,IAAMhV,KAAKyb,UAAY,EAAAM,UAAUI,G,OAGrDnc,KAAK0lB,S,CAKL1lB,KAAKw4G,cAAcz3G,OAAS,EAC9Bf,KAAKkD,WAAa,UAElBlD,KAAKkD,WAAa,UAEhBlD,KAAKmT,aACPnT,KAAKmT,YAAYoqC,eAAev9C,KAAKL,EAAI,GAAKK,KAAKJ,EAAI,KAI3D,KAAA0kB,OAAS,CAACxJ,EAAiB,KAEvB9a,KAAKC,OAASD,KAAKmsG,YACnBnsG,KAAKC,OAAS,GAAM,GACpBD,KAAKC,OAAS,GAEdD,KAAK6U,WAEP7U,KAAKmsG,WAAansG,KAAKC,QAGzB,KAAA+jH,oBAAsB,KACpBhkH,KAAKw4G,cAAcj3G,QAAS6Q,IACtBA,EAAM/P,OACRrC,KAAKw4G,cAAgBx4G,KAAKw4G,cAAc93G,OAAQuG,GAAMA,IAAMmL,OAKlE,KAAA2xG,YAAeF,IACTA,EAAc9iH,OAAS,GACzB8iH,EAActiH,QAAS6Q,IACrB,MAAMkC,EAAW,EAAAmD,MAAMnD,SAAStU,KAAKL,EAAGK,KAAKJ,EAAGwS,EAAMzS,EAAGyS,EAAMxS,GAC3C,GAAhB,EAAAgC,OAAOC,OAAcyS,GACvBtU,KAAKy4G,YAAYrmG,MAMzB,KAAA0xG,oBAAsB,IACO9jH,KAAKP,KAAKuH,SAAStG,OAC3C4W,GACCA,aAAkB,EAAAjR,OAClB,EAAAoR,MAAMnD,SAAStU,KAAKL,EAAGK,KAAKJ,EAAG0X,EAAO3X,EAAG2X,EAAO1X,IAAMI,KAAK0tB,QAC1DpW,EAAOkK,SACPlK,EAAOjV,MACRiV,IAAWtX,OACVsX,EAAOmK,cAEcqG,MAAM,EAAG,EAAAphB,iBAAiBu9G,mBAGtD,KAAAL,cAAgB,KACd,GAAI5jH,KAAKw4G,cAAcz3G,OAAS,EAAG,CACjC,IAAK,IAAIqR,KAASpS,KAAKw4G,cAChBpmG,EAAM0K,QACT1K,EAAMwP,aAGV5hB,KAAKw4G,cAAgB,E,GAIzB,KAAAC,YAAermG,IAEb,GAAKA,EAAMpR,cACXhB,KAAKggB,gBAAkB,IACvB5N,EAAMmP,YACNvhB,KAAKw4G,cAAcxuG,KAAKoI,GACpBA,EAAMoP,QAAQ,CAChB,IAAIO,EAAO,IAAI,EAAAD,WAAW1P,EAAMzS,EAAGyS,EAAMxS,EAAGI,KAAKL,EAAGK,KAAKJ,EAAGwS,GAC5D2P,EAAKuqF,mBAAqB,cAC1BvqF,EAAKrO,MAAQ,UACbqO,EAAKwqF,WAAa,GAClBxqF,EAAKyqF,QAAU,GACfzqF,EAAK0qF,WAAa,EAClB1qF,EAAK2qF,SAAW,IAChB3qF,EAAK4qF,YAAc,KACnB5qF,EAAK6qF,cAAgB,IACrB7qF,EAAKze,UAAY8O,EAAM9O,UACvBye,EAAKhe,KAAO,OACZ/D,KAAKP,KAAKsK,YAAYC,KAAK+X,E,GAI/B,KAAA8qF,WAAczqG,IACZ,IAAK,IAAI2f,KAAQ/hB,KAAKP,KAAKsK,YACzB,GAAIgY,aAAgB,EAAAD,WAAY,CAC9B,IACG9hB,KAAKw4G,cAAc7iF,SAAS5T,EAAK/K,SACpB,SAAd+K,EAAKhe,KAEL,SASF,OARAge,EAAK+qF,UACH9sG,KAAKL,EAAIK,KAAK+C,MACd/C,KAAKJ,EAAII,KAAKiD,MACd8e,EAAK/K,OAAOrX,EAAIoiB,EAAK/K,OAAOjU,MAC5Bgf,EAAK/K,OAAOpX,EAAImiB,EAAK/K,OAAO/T,OAE9B8e,EAAKze,UAAYye,EAAK/K,OAAO1T,UAErBxB,KAAKgB,MAAM9C,KAAKuD,QACtB,KAAK,EACHwe,EAAKrO,MAAQ,UACb,MACF,KAAK,EAML,KAAK,EACHqO,EAAKrO,MAAQ,UACb,MALF,KAAK,EACHqO,EAAKrO,MAAQ,U,GAUvB,KAAAvR,KAAQC,IACFpC,KAAKqC,OACT,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MAE5BzC,KAAKsD,UAAYtD,KAAKJ,EACjBI,KAAKqC,OACRrC,KAAK0C,aAAaN,GAClBpC,KAAK6sG,WAAWzqG,GAEhBpC,KAAKuD,OAAS,GAAMnB,EAChBpC,KAAKuD,OAAS,IAAGvD,KAAKuD,MAAQ,GAE9BvD,KAAK2C,WAAW3C,KAAK4C,WAAWR,GACpC,EAAAV,KAAKuK,QACHjM,KAAKkB,MAAQY,KAAKgB,MAAM9C,KAAKuD,OAC7BvD,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAIK,KAAK+C,MACd/C,KAAKJ,EAAII,KAAKgD,YAAchD,KAAKiD,MACjC,EACA,EACAjD,KAAKkM,eACLlM,KAAKmD,gBAGT,EAAAzB,KAAKY,IAAIc,YAxRTpD,KAAK0H,MAAQ,EACb1H,KAAKC,OAAS,EACdD,KAAKmsG,WAAansG,KAAKC,OACvBD,KAAKyG,UAAY,EACjBzG,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKoM,YAAa,EAClBpM,KAAKwB,KAAO,UACZxB,KAAK0tB,MAAQ,EACb1tB,KAAK4c,OAAQ,EACb5c,KAAKuD,MAAQ,EACbvD,KAAK2C,WAAY,EACjB3C,KAAKyhB,cAAe,EACpBzhB,KAAKw4G,cAAgB,GACrBx4G,KAAKkD,WAAa,UAClBlD,KAAKmT,YAAc,EAAAuO,SAASjO,eAC1BzT,KAAKL,EAAI,GACTK,KAAKJ,EAAI,GACT,CAAC,GAAI,GAAI,IACT,IACA,IAEFI,KAAKqT,eAAerT,KAAKmT,aACzBnT,KAAKP,KAAKkiB,iBACV3hB,KAAKgT,UAAW,EAChBhT,KAAK+S,WAAa,UAClB/S,KAAKiT,WAAa,GAClBjT,KAAKkT,eAAiB,EACtBlT,KAAK0M,WAAa,EAClB1M,KAAKsB,QAAQ,CAAC,YAAY,GAC1BtB,KAAK0D,UAAW,EAChB1D,KAAK2D,eAAgB,EACrB3D,KAAK2M,qBAAsB,CAC7B,EA7CF,iBAKS,EAAAzL,MAAgB,GAChB,EAAAC,MAAgB,C,wGCjBzB,gBACA,UAGA,UACA,UACA,UAEA,MAAayxF,UAAwB,EAAAngD,SACnC,WAAAjzC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GAErBI,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKC,OAAS,EACdD,KAAKgT,UAAW,EAChBhT,KAAK+S,WAAa,UAClB/S,KAAKiT,WAAa,EAClBjT,KAAKkT,eAAiB,EACtBlT,KAAKwB,KAAO,UACR,EAAAI,OAAOC,OAAS,MAClB7B,KAAKK,MAAM2J,KAAK,IAAI,EAAA4+B,MAAM5oC,KAAKP,KAAMO,KAAKL,EAAGK,KAAKJ,IAEpDI,KAAKK,MAAM2J,KAAK,IAAI,EAAA82B,SAAS9gC,KAAKP,KAAMO,KAAKL,EAAGK,KAAKJ,IACrDI,KAAKmT,YAAc,IAAI,EAAAC,YACrBpT,KAAKL,EAAI,GACTK,KAAKJ,EAAI,GACT,EACA,CAAC,EAAG,IAAK,GACT,GAEFI,KAAKqT,eAAerT,KAAKmT,YAC3B,EAxBF,mB,+FCdA,gBAMA,MAAamM,UAAe,EAAA0kB,KAG1B,WAAAxkC,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GAGlB,KAAA04B,MAASzrB,MACT,KAAA0S,WAAa,CAAC1S,EAAgB2S,OAH5Bxf,KAAK0f,eAAgB,CACvB,EANF,U,8FCJA,gBAEA,MAAa5M,UAAc,EAAA3O,MAEzB,WAAA3E,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GAEhBI,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKwB,KAAO,QACZxB,KAAKwE,QAAU,IACfxE,KAAKuE,KAAO,IACZvE,KAAK4E,OAAS,EACd5E,KAAK0E,cAAgB,EACrB1E,KAAK2E,cAAgB,EACrB3E,KAAK2f,WAAY,CACnB,EAdF,UACS,EAAA7a,SAAW,O,qGCLpB,gBACA,UAEA,UACA,SAEA,MAAake,UAAqB,EAAA6V,SAUhC,WAAAr5B,CACEC,EACAE,EACAC,EACAkb,EACApH,EACAoP,GAEAjjB,QAbF,KAAA4C,MAAgB,EAGhB,KAAAc,MAAgB,EAChB,KAAA+tE,QAAkB,EAoBlB,KAAAC,WAAa,KACX,GAAIvxE,KAAKP,KAAKgW,UAAU1U,OAAS,EAAG,CAClC,IAAIywE,EAAgBxxE,KAAKP,KAAKgW,UAAU/U,OACrC2J,GAAMA,aAAa2Y,GAEtB,GAAIwuD,EAAczwE,OAAS,GAAM,EAAG,MAAO,GAC3C,GAAIywE,EAAczwE,OAAS,GAAM,EAAG,OAAO,EAC3C,GAAIywE,EAAczwE,OAAS,GAAM,EAAG,MAAO,G,GAI/C,KAAAsC,aAAgBjB,IAGd,GAFA,EAAAV,KAAKY,IAAIC,OAELvC,KAAKqC,KAEP,YADA,EAAAX,KAAKY,IAAIc,UAGPpD,KAAKuD,MAAQ,KAAIvD,KAAKyC,OAAS,KAAQL,GAE3CpC,KAAKJ,GAAK,IAAOwC,EACjBpC,KAAKuD,OAASnB,EACF,EAAAV,KAAK4oB,YAAYtqB,KAAK8a,OAAOhN,YAAYjD,MACjD7K,KAAKyC,OAAS,OAChBzC,KAAKyC,MAAQ,EACbzC,KAAKqC,MAAO,GAEd,EAAAX,KAAKY,IAAIE,YAAcxC,KAAKyC,MAC5B,MAAMgkE,EAAU,EAAA/kE,KAAK4oB,YAAYtqB,KAAK8a,OAAOhN,YAAYjD,MAAQ,EACjE,EAAAnJ,KAAK8oB,gBACH,IAAMxqB,KAAK8a,OAAOhN,YACjB9N,KAAKL,EAAI,GAAMK,KAAKsxE,SAAW,EAAAnjE,cAAcgR,SAAWsnD,GACxDzmE,KAAKJ,EAAI,IAAO,EAAAuO,cAAcgR,SAC/Bnf,KAAK8iB,aACL9iB,KAAK0T,OAGP,EAAAhS,KAAKY,IAAIE,YAAc,EAEvB,EAAAd,KAAKY,IAAIc,WAjDTpD,KAAKP,KAAOA,EACZO,KAAK8a,OAASA,EACd9a,KAAKL,EAAIA,EACTK,KAAKJ,EAAIA,EACEI,KAAK0T,MAAZA,GACc,MACA1T,KAAK8iB,aAAnBA,GACqB,EAAA3U,cAAc4U,QACvC/iB,KAAKsxE,QAA0B,GAAhB,EAAA1vE,OAAOC,MACxB,EA5BF,gB,wHCNA,gBAMA,SAEA,IAAYyR,GAAZ,SAAYA,GACV,mBACA,uBACA,mCACA,0BACD,CALD,CAAYA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KAOvB,MAAa1K,UAA0B,EAAA2K,YAIrC,WAAA/T,CAAYC,EAAYC,EAAYC,EAAWC,EAAWW,GACxDV,MAAMJ,EAAMC,EAAMC,EAAGC,GAkBvB,KAAAuC,KAAQC,IACFpC,KAAKqC,OACT,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MACvBzC,KAAKqC,OACRrC,KAAK0C,aAAaN,GACdpC,KAAKkU,QAAUZ,EAAYa,OAAQnU,KAAKkB,MAAQ,EAC/ClB,KAAKkB,MAAQ,EAEdlB,KAAK2C,WAAa3C,KAAKkU,QAAUZ,EAAYuB,UAC/C7U,KAAK4C,WAAWR,GACdpC,KAAKuD,OAAS,GAChB,EAAA7B,KAAKuK,QACHnK,KAAKgB,MAAM9C,KAAKuD,OAAS,EACzB,EACA,EACA,EACAvD,KAAKL,EACLK,KAAKJ,EAAI,IACT,EACA,EACAI,KAAKkM,eACLlM,KAAKmD,eAEPnD,KAAKuD,OAAS,GAAMnB,EAChBpC,KAAKuD,MAAQ,KAAIvD,KAAKuD,OAAS,IAEnC,EAAA7B,KAAKuK,QACHjM,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAIK,KAAK+C,MACd/C,KAAKJ,EAAI,IAAMI,KAAKiD,MACpB,EACA,EACAjD,KAAKkM,eACLlM,KAAKmD,eAGJnD,KAAK8c,SACH9c,KAAKoM,YACRpM,KAAKqM,eAAejK,GAElBpC,KAAKsM,WAAa,GACpBtM,KAAKuM,gBAAgBnK,KAI3B,EAAAV,KAAKY,IAAIc,YAlETpD,KAAK0H,MAAQ,EACb1H,KAAKC,OAAS,EACdD,KAAKyG,UAAY,EACjBzG,KAAKwM,iBAAmB,EACxBxM,KAAKkB,MAAQ,EACblB,KAAKmB,MAAQ,EACbnB,KAAKuD,MAAQ,EACbvD,KAAKkU,MAAQZ,EAAYa,OACzBnU,KAAKoM,YAAa,EAClBpM,KAAKsM,WAAa,EAClBtM,KAAKwB,KAAO,gBACZxB,KAAKkmC,gBAAkB,CAAC,EAAG,GAAI,KAE3B3lC,IAAMP,KAAKO,KAAOA,GACtBP,KAAKsB,QAAQ,CAAC,SAAU,YAAa,aAAc,OAAQ,QAC7D,EArBF,sBACS,EAAAsU,WAAqB,EACrB,EAAA1U,MAAgB,EAChB,EAAAC,MAAgB,C,6HCjBzB,gBAUA,IAAY+iH,GAAZ,SAAYA,GACV,0CACA,wCACA,kCACA,kDACA,sCACA,0CACA,mDACD,CARD,CAAYA,EAAA,EAAAA,sBAAA,EAAAA,oBAAmB,KAU/B,uBAIE,WAAA1kH,CAAYE,EAAYykH,GAA+B,GACrDnkH,KAAKN,KAAOA,EACZM,KAAKmkH,oBACHA,GAAuBh4D,SAAS4Z,OAAOpwC,SAAS,sBACpD,CAKA,yBAAAyuF,CACE59C,EACA69C,GAGA,MAAMC,EAAatkH,KAAKukH,iBAAiB/9C,GACzC,IAAK89C,EAAWhlC,QAAS,OAAOglC,EAGhC,MAAME,EAAiBxkH,KAAKykH,yBAC1Bj+C,EACA69C,EAAOK,cAET,IAAKF,EAAellC,QAAS,OAAOklC,EAGpC,MAAMG,EAAqB3kH,KAAK4kH,uBAAuBp+C,GACvD,IAAKm+C,EAAmBrlC,QAAS,OAAOqlC,EAGxC,MAAME,EAAoB7kH,KAAK8kH,yBAAyBt+C,EAAY,GACpE,IAAKq+C,EAAkBvlC,QAAS,OAAOulC,EAGvC,MAAME,EAAe/kH,KAAKglH,mBAAmBx+C,GAC7C,IAAKu+C,EAAazlC,QAAS,OAAOylC,EAGlC,MAAME,EAAajlH,KAAKklH,wBAAwB1+C,GAChD,OAAKy+C,EAAW3lC,QAET,CAAEA,SAAS,GAFc2lC,CAGlC,CAKA,sBAAAE,CACE3+C,EACA4+C,GAGA,MAAMd,EAAatkH,KAAKukH,iBAAiB/9C,GACzC,IAAK89C,EAAWhlC,QAAS,OAAOglC,EAOhC,IAJuBtkH,KAAKykH,yBAC1Bj+C,EACA4+C,GAEkB9lC,QAClB,MAAO,CACLA,SAAS,EACT+lC,aAAc,uBAAuBD,gBAAgC5+C,EAAWzlE,SAChFukH,UAAWpB,EAAoBqB,yBAKnC,MAAMR,EAAe/kH,KAAKglH,mBAAmBx+C,GAC7C,IAAKu+C,EAAazlC,QAAS,OAAOylC,EAGlC,MAAMS,EAAgBxlH,KAAKylH,uBAAuBj/C,GAClD,OAAKg/C,EAAclmC,QAEZ,CAAEA,SAAS,GAFiBkmC,CAGrC,CAKA,0BAAAE,CAA2Bl/C,GAEzB,MAAM89C,EAAatkH,KAAKukH,iBAAiB/9C,GACzC,OAAK89C,EAAWhlC,QAGU,IAAtB9Y,EAAWzlE,OACN,CACLu+E,SAAS,EACT+lC,aAAc,4CAA4C7+C,EAAWzlE,SACrEukH,UAAWpB,EAAoByB,oBAKdn/C,EAAW,GACfziE,OAAS,EAAA6N,SAAS44D,SAC1B,CACL8U,SAAS,EACT+lC,aAAc,iDACdC,UAAWpB,EAAoByB,oBAI5B,CAAErmC,SAAS,GArBcglC,CAsBlC,CAKA,gBAAAC,CAAiB/9C,GACf,IAAKA,GAAoC,IAAtBA,EAAWzlE,OAAc,CAC1C,MAAMskH,EAAe,0BAErB,OADArlH,KAAK4lH,mBAAmBP,GACjB,CACL/lC,SAAS,EACT+lC,eACAC,UAAWpB,EAAoB2B,iB,CAGnC,MAAO,CAAEvmC,SAAS,EACpB,CAKA,wBAAAmlC,CACEj+C,EACAk+C,GAEA,GAAIl+C,EAAWzlE,OAAS2jH,EAAc,CACpC,MAAMW,EAAe,0BAA0BX,UAAqBl+C,EAAWzlE,SAE/E,OADAf,KAAK4lH,mBAAmBP,GACjB,CACL/lC,SAAS,EACT+lC,eACAC,UAAWpB,EAAoByB,mB,CAGnC,MAAO,CAAErmC,SAAS,EACpB,CAKA,sBAAAslC,CAAuBp+C,GAErB,IADoBA,EAAWv+D,KAAMoC,GAAMA,EAAEtG,OAAS,EAAA6N,SAAS03D,MAC7C,CAChB,MAAM+7C,EAAe,mCAErB,OADArlH,KAAK4lH,mBAAmBP,GACjB,CACL/lC,SAAS,EACT+lC,eACAC,UAAWpB,EAAoB4B,kB,CAGnC,MAAO,CAAExmC,SAAS,EACpB,CAKA,wBAAAwlC,CACEt+C,EACAu/C,GAEA,MAAMC,EAAWx/C,EAAWlmE,KAAM+J,GAAMA,EAAEtG,OAAS,EAAA6N,SAAS03D,MAC5D,IAAK08C,EACH,OAAOhmH,KAAK4kH,uBAAuBp+C,GAGrC,GAAIw/C,EAAS1xG,SAAWyxG,EAAa,CACnC,MAAMV,EAAe,0CAA0CW,EAAS1xG,qBAAqByxG,IAE7F,OADA/lH,KAAK4lH,mBAAmBP,GACjB,CACL/lC,SAAS,EACT+lC,eACAC,UAAWpB,EAAoB+B,e,CAGnC,MAAO,CAAE3mC,SAAS,EACpB,CAKA,kBAAA0lC,CAAmBx+C,GACjB,IAAK,IAAIxgE,EAAI,EAAGA,EAAIwgE,EAAWzlE,OAAQiF,IACrC,IAAK,IAAIG,EAAIH,EAAI,EAAGG,EAAIqgE,EAAWzlE,OAAQoF,IAAK,CAC9C,MAAM+I,EAAIs3D,EAAWxgE,GACfmJ,EAAIq3D,EAAWrgE,GACrB,GACE+I,EAAEvP,EAAIwP,EAAExP,EAAIwP,EAAE2G,GACd5G,EAAEvP,EAAIuP,EAAE4G,EAAI3G,EAAExP,GACduP,EAAEtP,EAAIuP,EAAEvP,EAAIuP,EAAEyT,GACd1T,EAAEtP,EAAIsP,EAAE0T,EAAIzT,EAAEvP,EACd,CACA,MAAMylH,EAAe,8CAA8Cr/G,6BAA6BG,IAEhG,OADAnG,KAAK4lH,mBAAmBP,GACjB,CACL/lC,SAAS,EACT+lC,eACAC,UAAWpB,EAAoBgC,uB,EAKvC,MAAO,CAAE5mC,SAAS,EACpB,CAKA,uBAAA4lC,CAAwB1+C,GAEtB,IADqBA,EAAWv+D,KAAMoC,GAAMA,EAAEtG,OAAS,EAAA6N,SAASE,YAC7C,CACjB,MAAMuzG,EAAe,mDAErB,OADArlH,KAAK4lH,mBAAmBP,GACjB,CACL/lC,SAAS,EACT+lC,eACAC,UAAWpB,EAAoBiC,mB,CAGnC,MAAO,CAAE7mC,SAAS,EACpB,CAKA,sBAAAmmC,CAAuBj/C,GAErB,IADoBA,EAAWv+D,KAAMoC,GAAMA,EAAEtG,OAAS,EAAA6N,SAASy4D,UAC7C,CAChB,MAAMg7C,EAAe,kCAErB,OADArlH,KAAK4lH,mBAAmBP,GACjB,CACL/lC,SAAS,EACT+lC,eACAC,UAAWpB,EAAoBqB,wB,CAGnC,MAAO,CAAEjmC,SAAS,EACpB,CAKA,oBAAA8mC,CAAqB5/C,GACnB,MAAM6/C,EAAmB7/C,EAAW9lE,OACjCqmE,GAA+C,IAAjCA,EAAUS,YAAYzmE,QAGvC,GAAIslH,EAAiBtlH,OAAS,EAAG,CAC/B,MAAMskH,EAAe,SAASgB,EAAiBtlH,2BAE/C,OADAf,KAAK4lH,mBAAmBP,GACjB,CACL/lC,SAAS,EACT+lC,eACAC,UAAWpB,EAAoByB,mB,CAGnC,MAAO,CAAErmC,SAAS,EACpB,CAKA,yBAAAgnC,CACE9/C,EACA+/C,GAEA,MAAMC,EAAe,IAAI53G,IAAI43D,EAAW13D,IAAKzE,GAAMA,EAAEtG,OAC/C0iH,EAAeF,EAAc7lH,OAChCqD,IAAUyiH,EAAar2G,IAAIpM,IAG9B,GAAI0iH,EAAa1lH,OAAS,EAAG,CAC3B,MAAMskH,EAAe,gCAAgCoB,EAAal+C,KAAK,QAEvE,OADAvoE,KAAK4lH,mBAAmBP,GACjB,CACL/lC,SAAS,EACT+lC,eACAC,UAAWpB,EAAoByB,mB,CAGnC,MAAO,CAAErmC,SAAS,EACpB,CAKA,wBAAAonC,CAAyBlgD,GAEvB,MACMmgD,EAAqBngD,EAAW9lE,OACnC2J,GAAMA,EAAEyL,EAFK,GAEUzL,EAAEuY,EAFZ,GAKhB,GAAI+jG,EAAmB5lH,OAAS,EAAG,CACjC,MAAMskH,EAAe,SAASsB,EAAmB5lH,gDAEjD,OADAf,KAAK4lH,mBAAmBP,GACjB,CACL/lC,SAAS,EACT+lC,eACAC,UAAWpB,EAAoByB,mB,CAKnC,MAAMiB,EAAoBpgD,EAAW9lE,OAClC2J,GAAMA,EAAEyL,GAAK,GAAKzL,EAAEuY,GAAK,GAAKvY,EAAE1K,EAAI,GAAK0K,EAAEzK,EAAI,GAGlD,GAAIgnH,EAAkB7lH,OAAS,EAAG,CAChC,MAAMskH,EAAe,SAASuB,EAAkB7lH,4CAEhD,OADAf,KAAK4lH,mBAAmBP,GACjB,CACL/lC,SAAS,EACT+lC,eACAC,UAAWpB,EAAoByB,mB,CAInC,MAAO,CAAErmC,SAAS,EACpB,CAKQ,kBAAAsmC,CAAmB90F,GACrB9wB,KAAKmkH,sBACPt6G,QAAQC,KAAK,oBAAoBgnB,KAC7B9wB,KAAKN,MAAQM,KAAKN,KAAKo1B,aACzB90B,KAAKN,KAAKo1B,YAAYhE,GAG5B,CAKA,0BAAA+1F,CACErgD,EACA69C,EACAtgH,EAAwC,WAExC,MAAM0kE,EAAoB,GAE1BA,EAAQz+D,KAAK,cAAcjG,UAAayiE,EAAWzlE,qBAEtC,YAATgD,IACF0kE,EAAQz+D,KAAK,2BAA2Bq6G,EAAOK,gBAC/Cj8C,EAAQz+D,KAAK,2BAA2Bq6G,EAAOyC,iBAGjD,MAAM9wG,EACK,YAATjS,EACI/D,KAAKokH,0BAA0B59C,EAAY69C,GAClC,SAATtgH,EACE/D,KAAKmlH,uBAAuB3+C,EAAY,GACxCxmE,KAAK0lH,2BAA2Bl/C,GAQxC,OANKxwD,EAAOspE,QAGV7W,EAAQz+D,KAAK,qBAFby+D,EAAQz+D,KAAK,sBAAsBgM,EAAOqvG,gBAKrC,IACFrvG,EACHyyD,UAEJ,E,6FC9YF,gBACA,UAGA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UAGA,MAAazkC,UAAa,EAAArtB,SA4CxB,WAAAnX,CAAY4E,EAAazE,EAAWC,GAClCC,QAbF,KAAAknH,MAAmB,KACnB,KAAA/sF,aAAuB,EACvB,KAAAsW,SAAmB,EACnB,KAAA0rC,kBAA4B,EACpB,KAAAgrC,WAAqB,EACrB,KAAAC,WAAqB,EACrB,KAAAC,YAAsB,EACtB,KAAAC,YAAsB,EACtB,KAAAC,MAAgB,EAChB,KAAAC,kBAA4B,KA+CpC,KAAAxmG,UAAY,IACH7gB,KAAKwB,KAUd,KAAA4V,KAAO,OAEP,KAAAw1B,gBAAkB,OAGlB,KAAAvoC,eAAiB,KACf,MAAMijH,EAAYtnH,KAAK2f,UAAY,aAAa3f,KAAKgC,aAAe,GACpE,MAAO,GAAGhC,KAAKwB,UAAUxB,KAAKie,iBAAiBqpG,KAGjD,KAAAplH,iBAAmB,KACjBlC,KAAKunH,aAAe,GACpBvnH,KAAKyC,MAAQ,EACbzC,KAAKwnH,SAAU,EACfxnH,KAAKynH,kBAAoB,EACzBznH,KAAK0nH,iBAIP,KAAAtjF,YAAc,KACZ,IAAIX,EAAQ,EACR,EAAAt1B,cAAcw5G,kBAAoB3nH,KAAK4nH,qBACzCnkF,EAAQ3hC,KAAKC,KAAqB,IAAhB,EAAAH,OAAOC,OAAe,MAEtC7B,KAAKoE,QAAUpE,KAAKoE,MAAM1E,KAAKD,MACjC,EAAA2B,MAAM6kB,UAAU,EAAA7kB,MAAMymH,cAAepkF,IAIzC,KAAA1c,OAAS,OAET,KAAAvmB,SAAYqM,IACLA,EAAOhM,UAAUinH,UAAU9nH,QAChCA,KAAK6M,OAASA,EACT7M,KAAKS,WACRT,KAAKoe,OAASvR,EAAOjN,EAErBI,KAAKsD,UAAYtD,KAAKJ,EACtBI,KAAKyC,MAAQ,EACbzC,KAAKS,SAAWoM,EAAOhM,UAAU4gC,QAAQzhC,MACrCA,KAAKS,YAEyB,IAA5BT,KAAK4nH,qBACP5nH,KAAKgnH,WAAahnH,KAAKL,EACvBK,KAAKinH,WAAajnH,KAAKJ,EACvBI,KAAKknH,YAAclnH,KAAK6M,OAAOlN,EAC/BK,KAAKmnH,YAAcnnH,KAAK6M,OAAOjN,EAC/BI,KAAKonH,MAAQ,GAEXpnH,KAAK+nH,UAAUl7G,KACjB7M,KAAKgoH,gBAELn7G,EAAOhM,UAAUonH,WAAWj+G,KAAKhK,OAEnCA,KAAKokC,cAGL,EAAAvf,eAAeC,KAAK,EAAAC,OAAOumC,eAAgB,CAAE48D,OAAQloH,KAAKwB,OAEtDxB,KAAKmoH,UACP,EAAA/uG,aAAaoyC,mBAAmBxrD,KAAKwB,MAErCxB,KAAK+mH,MAAMqB,kBAAkBpoH,MAC7BA,KAAKmoH,SAAU,EACfnoH,KAAK+mH,MAAQ,UAMrB,KAAA//F,WAAa,KACP,EAAA7Y,cAAcw5G,kBAAoB3nH,KAAK4nH,oBACzC5nH,KAAKQ,SAASR,KAAKoE,MAAM1E,KAAK+O,QAAQzO,KAAKoE,MAAM1E,KAAK8X,iBAI1D,KAAAwwG,cAAgB,KACd,MAAMxmH,EAAQxB,KAAKR,YAA4BsF,SAC/C,IAAIgsB,EAAU9wB,KAAK2f,UACf,YAAY3f,KAAKgC,cAAcR,KAC/B,cAAcA,KAEdxB,KAAKgC,WAAa,GAAmB,SAAdhC,KAAKwB,OAC9BsvB,EAAU,YAAY9wB,KAAKgC,cAAcR,OAG3CxB,KAAKoE,MAAM1E,KAAKo1B,YAAYhE,IAG9B,KAAAi3F,UAAal7G,IACX,IAAK,IAAI8F,KAAQ9F,EAAOhM,UAAUonH,WAChC,GAAIt1G,EAAKnT,cAAgBQ,KAAKR,YAC5B,OAAO,EAGX,OAAO,GAGT,KAAA6rC,kBAAoB,KAClBrrC,KAAK0nH,iBAIP,KAAAvkH,YAAc,IAEV,EAAAgL,cAAcmZ,kBACb,EAAAnZ,cAAcoZ,6BAER,EACJvnB,KAAKoE,MAAMojB,QAAQxnB,KAAKL,GAQtBK,KAAKoE,MAAMojB,QAAQxnB,KAAKL,KAAKK,KAAKJ,IAPvCiK,QAAQC,KACN,kDACA9J,KAAKL,EACLK,KAAKJ,GAEA,GAKX,KAAAu7E,WAAa,CAACx7E,EAAWC,OAEzB,KAAAyoH,iBAAmB,CAAC1oH,EAAWC,KACzBI,KAAK6E,QACP,EAAAnD,KAAKwE,OACH,EACA,EACA,EACA,EACAvG,EAAI,GAAM,EAAAwO,cAAcgR,SACxBvf,EAAI,GAAM,EAAAuO,cAAcgR,SACxB,EACA,IAWN,KAAAhd,KAAQC,IAEN,GADA,EAAAV,KAAKY,IAAIC,QACJvC,KAAKS,SAAU,CAClB,EAAAiB,KAAKY,IAAIE,YAAcxC,KAAKyC,MACxBzC,KAAKyC,MAAQ,IAAGzC,KAAKyC,OAAS,IAAOL,GACzCpC,KAAKsD,UAAYtD,KAAKJ,EAClBI,KAAKwnH,UACPxnH,KAAKunH,cAAoD,KAApCzlH,KAAKgG,IAAI9H,KAAKunH,aAAe,IAAenlH,EAE7DpC,KAAKunH,cAAgB,MACvBvnH,KAAKunH,cAAgB,KAGrBvnH,KAAKynH,kBAAoB,GAAKznH,KAAKunH,cAAgB,MACrDvnH,KAAKynH,mBAAqB,GAAMrlH,GAC9BpC,KAAKsoH,YAAc,IACrBtoH,KAAKsoH,aAAe,IAAOlmH,EACvBpC,KAAKsoH,YAAc,MAAMtoH,KAAKsoH,YAAc,IAElD,MAAMv3G,EAAQ,GAAK/Q,KAAKsoH,YAAc,GACtC,EAAA5mH,KAAKY,IAAIqqC,uBAAwB,EACjC,EAAA7iB,OAAO3nB,KAAKnC,KAAKL,EAAGK,KAAKJ,EAAG,EAAG,GAE/BI,KAAKuD,OAAUnB,GAAmB,EAAVN,KAAKyrC,IAAW,GACxC,EAAA7rC,KAAK6mH,SACHvoH,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAIK,KAAK8V,IAAc,GAAT/E,EAAe,IAAO/Q,KAAKwoH,WAC9CxoH,KAAKJ,EACHI,KAAKynH,kBAAoB3lH,KAAKq3C,IAAIn5C,KAAKuD,OAAS,IAChD,EACAvD,KAAKiN,QACLjN,KAAK4iB,IAAc,GAAT7R,EAAe,IACzB/Q,KAAKunH,aACPvnH,KAAK8V,EAAI/E,EACT/Q,KAAK4iB,EAAI7R,EACT/Q,KAAKoE,MAAMlB,WACXlD,KAAKmD,c,CAGT,EAAAzB,KAAKY,IAAIc,WAGX,KAAAskH,cAAgB,KACd,MAAMe,EAAczoH,KAAKoE,MAAMoK,MAAM9N,OAClCiS,GAASA,EAAKhT,IAAMK,KAAKL,GAAKgT,EAAK/S,IAAMI,KAAKJ,GAE7C6oH,EAAY1nH,OAAS,GACvB0nH,EAAYlnH,QAASoR,IACnBA,EAAK61G,aACDC,EAAY1nH,OAAS,EAAI0nH,EAAYthH,QAAQwL,GAAQ,GACvD81G,EAAY1nH,UAKpB,KAAAgsD,QAAU,KACJ/sD,KAAKg6B,cAAah6B,KAAKqiB,YAAc,IAG3C,KAAAu6B,iBAAoBx6C,IAClB,GAAIpC,KAAKS,WACyB,IAA5BT,KAAK4nH,oBAA+B5nH,KAAK6M,OAAQ,CAEnD,MAAM67G,EAAQ,KAAQtmH,EACtBpC,KAAKonH,MAAQtlH,KAAKyD,IAAI,EAAGvF,KAAKonH,MAAQsB,GACtC,MAAMpjH,EAAIxD,KAAKuwC,IAAIryC,KAAKonH,MAAO,GACzBuB,EACJ3oH,KAAKgnH,YAAc,EAAI1hH,GACvBtF,KAAKknH,YAAc5hH,GAClBtF,KAAK6M,OAAOlN,EAAIK,KAAKknH,YAAclnH,KAAK6M,OAAO9J,OAASuC,EACzDtF,KAAKwoH,WACDI,EACJ5oH,KAAKinH,YAAc,EAAI3hH,GACvBtF,KAAKmnH,YAAc7hH,GAClBtF,KAAK6M,OAAOjN,EAAII,KAAKmnH,YAAcnnH,KAAK6M,OAAO5J,OAASqC,EACzDtF,KAAKunH,aAEwB,OAA3BvnH,KAAKqnH,oBACPrnH,KAAKqnH,kBAAoB,EAAA5vG,MAAMnD,SAC7BtU,KAAK6M,OAAOlN,EAAIK,KAAK6M,OAAO9J,MAC5B/C,KAAK6M,OAAOjN,EAAII,KAAK6M,OAAO5J,MAC5B0lH,EACAC,IAGJ,MAAMt0G,EAAWxS,KAAKgG,IACpB,EAAA2P,MAAMnD,SACJtU,KAAK6M,OAAOlN,EAAIK,KAAK6M,OAAO9J,MAC5B/C,KAAK6M,OAAOjN,EAAII,KAAK6M,OAAO5J,MAC5B0lH,EACAC,IAIEC,EAAY,GAClB,GAAIvjH,EAAIujH,EAAW,CACjB,MAAMtkE,GAAKj/C,EAAIujH,IAAc,EAAIA,GACjC7oH,KAAKyC,MAAQX,KAAK4D,IAChB,EAAI6+C,EACJziD,KAAKgG,IAAIwM,EAAWtU,KAAKqnH,mB,CA2B7B,OAvBI,EAAAl5G,cAAcoc,gBAChB,EAAA7oB,KAAKY,IAAIE,YAAcV,KAAK4D,IAAI,EAAG1F,KAAKyC,QAC1CzC,KAAKL,EAAImC,KAAKgB,MAAM6lH,GACpB3oH,KAAKJ,EAAIkC,KAAKgB,MAAM8lH,GAEpB,EAAAlnH,KAAK6mH,SACHvoH,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAwnH,EACAC,EAAO,IACP5oH,KAAK8V,EACL9V,KAAK4iB,EACL5iB,KAAKoE,MAAMlB,WACXlD,KAAKmD,eAEP,EAAAzB,KAAKY,IAAIE,YAAc,OAEnBxC,KAAKonH,OAAS,IAEhBpnH,KAAKoE,MAAMoK,MAAQxO,KAAKoE,MAAMoK,MAAM9N,OAAQf,GAAMA,IAAMK,O,GAUhE,KAAAqD,aAAgBjB,IACd,GAAIpC,KAAKS,SAAU,CACjB,IAAgC,IAA5BT,KAAK4nH,mBAEF,OADL5nH,KAAK8oH,eAA8C,IAA5B,IAAM9oH,KAAK8oH,eAAuB1mH,EAI3DpC,KAAKyC,OAAS,IAAOL,EACjBN,KAAKgG,IAAI9H,KAAKyC,OAAS,MACzBzC,KAAKwoH,WAAa,EAClBxoH,KAAK8oH,cAAgB,EAErB9oH,KAAKoE,MAAMoK,MAAQxO,KAAKoE,MAAMoK,MAAM9N,OAAQf,GAAMA,IAAMK,OAGtD,EAAAmO,cAAcoc,gBAChB,EAAA7oB,KAAKY,IAAIE,YAAcV,KAAK4D,IAAI,EAAG1F,KAAKyC,QAE1C,EAAAf,KAAK6mH,SACHvoH,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAnB,KAAKL,EACLK,KAAKJ,EAAII,KAAK8oH,cACd9oH,KAAK8V,EACL9V,KAAK4iB,GAGP,EAAAlhB,KAAKY,IAAIE,YAAc,C,GAI3B,KAAAw/B,SAAW,CAAC5/B,EAAezC,EAAWC,EAAWwgB,EAAU,EAAGkM,KACxD,EAAAne,cAAcoc,gBAAe,EAAA7oB,KAAKY,IAAIE,YAAc4d,GACxDpgB,KAAKosC,eAAezsC,EAAGC,GACvB,IAAIq5C,EAAQ,EACRj5C,KAAKqiB,YAAc,IAAMriB,KAAK6E,SAChCo0C,EACEn3C,KAAKwC,MAAMxC,KAAKq3C,IAAIl0C,KAAKC,MAAQ,IAAM,IACvC,EACA,EAAAiJ,cAAcgR,UAEdnf,KAAKswC,SAAW,IAClB,EAAA5uC,KAAKY,IAAIE,YAAc,KAGzB,EAAAd,KAAK6mH,SACHvoH,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAxB,EAAIs5C,EACJr5C,EAAI,EAAII,KAAK+5B,WACb/5B,KAAK8V,EACL9V,KAAK4iB,GAEP,EAAAlhB,KAAKY,IAAIE,YAAc,EAEvB,IAAIumH,EAAaz8F,GAAgBtsB,KAAKgC,WAClCgnH,EAAYD,GAAc,EAAI,GAAK,GAAKA,EAExCE,EAAS,GADD,EAAAvnH,KAAK4oB,YAAY0+F,GAAWn+G,MAIxC,EAAAnJ,KAAK8oB,gBACHw+F,EACArpH,EAAI,EAAAwO,cAAcgR,SAAW8pG,EAC7BrpH,EAAI,EAAAuO,cAAcgR,SALP,GAMX,EAAAhR,cAAc4U,QACd,SAEF/iB,KAAKkpH,aAAavpH,EAAGC,GAErBI,KAAKm7E,WAAWx7E,EAAGC,GACnBI,KAAKqoH,iBAAiB1oH,EAAGC,IAG3B,KAAAspH,aAAe,CAACvpH,EAAWC,KACrBI,KAAKswC,SAAW,GAClB,EAAA5uC,KAAK8oB,gBACHxqB,KAAKswC,SAASxiC,WACdnO,EAAI,EAAAwO,cAAcgR,SAAW,GAC7Bvf,EAAI,EAAAuO,cAAcgR,SAAW,GAC7B,EAAAhR,cAAc4U,QACd,UAMN,KAAAqpB,eAAiB,CAACzsC,EAAWC,KAC3B,GAAII,KAAKqiB,WAAariB,KAAKsiB,cAAe,CAExC,MAAM+pB,EAAkBrsC,KAAKqiB,WAAariB,KAAKsiB,cAG/C,IAAI5O,EAAQ,EAAA+D,MAAM60B,SAChB,IAAMD,EACN,EACA,GAGF,MAAM88E,EAAY,EAAAh7G,cAAcgR,SAC1BotB,EAAWzqC,KAAKC,KAAKsqC,EAAkB88E,GACvC38E,EAAY,EAGZC,EAAO3qC,KAAKC,KAAKpC,EAAI,EAAAwO,cAAcgR,UACnCutB,EAAO5qC,KAAKC,KAChBnC,EAAI,EAAAuO,cAAcgR,SAAW,EAAAhR,cAAcgR,SAAW,GAIxD,EAAAzd,KAAKY,IAAIoP,UAAYgC,EACrB,EAAAhS,KAAKY,IAAIqqC,uBAAwB,EAGjC,EAAAjrC,KAAKY,IAAIqP,SAAS86B,EAAMC,EAAMH,EAAUC,GAGxC,EAAA9qC,KAAKY,IAAIoP,UAAY,O,GAtcvB1R,KAAK6Z,SAAW,EAAAwU,YAAYrV,SAAS,MAGrChZ,KAAKoE,MAAQA,EACbpE,KAAKL,EAAIA,EACTK,KAAKJ,EAAIA,EACTI,KAAKsD,UAAY1D,EACjBI,KAAK8V,EAAI,EACT9V,KAAK4iB,EAAI,EACT5iB,KAAKkB,MAAQ,EACblB,KAAKmB,MAAQ,EACbnB,KAAKuD,MAAQ,EACbvD,KAAK2f,WAAY,EACjB3f,KAAKgC,WAAa,EAClBhC,KAAKS,UAAW,EAChBT,KAAKyC,MAAQ,EACbzC,KAAKsoH,YAAc,EACnBtoH,KAAKiN,SAAW,GAChBjN,KAAKwB,KAAO,OACZxB,KAAKoe,OAASxe,EACdI,KAAKopH,aAAe,EAAAxnH,OAAOC,OAC3B7B,KAAKqiB,WAAa,GAClBriB,KAAKsiB,cAAgB,GACrBtiB,KAAK6E,QAAS,EACd7E,KAAKie,YAAc,GACnBje,KAAKwoH,WAAa,EAClBxoH,KAAK8oH,cAAgB,EACrB9oH,KAAKunH,aAAe,EACpBvnH,KAAKynH,kBAAoB,EACzBznH,KAAK+5B,WAAa,EAClB/5B,KAAKmoH,SAAU,EACfnoH,KAAK+mH,MAAQ,KACb/mH,KAAKg8E,kBAAoB,GACzBh8E,KAAK6M,OAAS,IAChB,CAEA,UAAO4D,CAEIhR,EAAYE,EAAWC,KAAcivB,GAC9C,OAAO,IAAI7uB,KAAKP,EAAME,EAAGC,KAAMivB,EACjC,CAMA,sBAAI+4F,GACF,OAAO,EAAAz5G,cAAck7G,kBAAkB1zF,SACrC31B,KAAKR,YAET,CA4IA,OAAA8pH,GACEtpH,KAAKS,UAAW,CAElB,EA/OF,Q,kGChBA,eAEA,UACA,SAKA,MAAa0zG,UAAkB,EAAA50G,OAC7B,WAAAC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GAgBvB,KAAAuC,KAAQC,IACFpC,KAAKqC,OACT,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MACvBzC,KAAKqC,OACJrC,KAAK2C,WAAW3C,KAAK4C,WAAWR,GAEpCpC,KAAK0C,aAAaN,GAClB,EAAAV,KAAKmB,QACH7C,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAIK,KAAK+C,MACd/C,KAAKJ,EAAII,KAAKgD,YAAchD,KAAKiD,MACjC,EACA,EACAjD,KAAKP,KAAKyD,WACVlD,KAAKmD,gBAGT,EAAAzB,KAAKY,IAAIc,YAGX,KAAAC,aAAgBjB,IACdpC,KAAKsD,UAAYtD,KAAKJ,GAxCtBI,KAAKP,KAAOA,EACZO,KAAKC,OAAS,EACdD,KAAKkB,MAAQ,EACblB,KAAKmB,MAAQ,EACbnB,KAAK2C,WAAY,EACjB3C,KAAK0D,UAAW,EAChB1D,KAAKwB,KAAO,aACZxB,KAAK6D,eAAiB,EACtB7D,KAAK8D,eAAiB,EACxB,CAEA,QAAIC,GACF,OAAO,EAAAC,WAAWwO,IACpB,EAhBF,a,iGCFA,gBAGA,MAAasuB,UAAiB,EAAAxhB,OAE5B,WAAA9f,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GAUlB,KAAA2f,WAAa,CAAC1S,EAAgB2S,KACT,cAAfA,EAAMhe,MACOge,EACNC,MAAM5S,EAAQ7M,OAI3B,KAAAqE,eAAiB,IACR,oEAhBPrE,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKwB,KAAOs/B,EAASh8B,SACrB9E,KAAK0f,eAAgB,EAErB1f,KAAK2f,WAAY,CACnB,EAXF,aACS,EAAA7a,SAAW,S,+HCVpB,gBACA,UACA,UACA,UACA,UACA,UAEA,UACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEa,EAAAykH,aAAe,CAC1B,EAAG,EAAA/gH,UACH,EAAG,EAAAC,UACH,EAAG,EAAAC,YACH,EAAG,EAAAC,WACH,EAAG,EAAAC,kBACH,EAAG,EAAAC,YACH,EAAG,EAAAC,UACH,EAAG,EAAAC,YACH,EAAG,EAAAC,mBACH,GAAI,EAAAC,cACJ,GAAI,EAAAE,WACJ,GAAI,EAAAC,YACJ,GAAI,EAAAC,eACJ,GAAI,EAAAC,gBACJ,GAAI,EAAAC,kBACJ,GAAI,EAAAC,WACJ,GAAI,EAAAC,aAgBN,gCAME,oBAAO+/G,CAAcx7G,GACnB,MAAO,CACL02G,aAA0B,EAC1BoC,aAAc94G,EAAQ,EAAI,GAAK,EAC/By7G,YAAaz7G,EAAQ,EAAI,IAAM,GAAKA,EAAQ,GAC5Ck6D,SAAU,GAAK,EAAIl6D,EACnBm6D,UAAW,GAAK,EAAIn6D,EACpB07G,mBAAoB,CAAC,IAAM,EAAK,KAChCC,sBAAuB37G,EAAQ,EAAI,GAAM,EACzC47G,kBAAmB,CAAC,EAAG,GACvBC,cAAe77G,EAAQ,EAAI,EAAI,EAC/B87G,gBAAiB97G,EAAQ,EAAI,IAAO,IAAM,GAAKA,GAAS,GAE5D,E,6FCvEF,eAEA,UAKA,SAEA,UAEA,MAAa2lG,UAAa,EAAAp0G,OACxB,WAAAC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GAmBvB,KAAAuC,KAAQC,IACFpC,KAAKqC,OACT,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MACvBzC,KAAKqC,OACRrC,KAAK0C,aAAaN,GACdpC,KAAK2C,WAAW3C,KAAK4C,WAAWR,GAEpC,EAAAV,KAAKmB,QACH7C,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAIK,KAAK+C,MAAQ,GACtB/C,KAAKJ,EAAII,KAAKgD,YAAchD,KAAKiD,MACjC,EACA,EACAjD,KAAKP,KAAKyD,WACVlD,KAAKmD,gBAGT,EAAAzB,KAAKY,IAAIc,YAGX,KAAAC,aAAgBjB,IACdpC,KAAKsD,UAAYtD,KAAKJ,GA3CtBI,KAAKP,KAAOA,EACZO,KAAKC,OAAS,EACdD,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAK2C,WAAY,EACjB3C,KAAK2D,eAAgB,EACrB3D,KAAKwB,KAAO,OACZxB,KAAK6D,eAAiB,EACtB7D,KAAK8D,eAAiB,GACtB9D,KAAKmgB,QAAS,EACdngB,KAAKgmB,SAAW,EAAA5kB,MAAM2oH,QAExB,CAEA,QAAIhmH,GACF,OAAO,EAAAC,WAAWwO,IACpB,EAnBF,Q,qGCLA,gBAGA,SACA,UAEA,MAAay0B,UAAqB,EAAA3nB,OAEhC,WAAA9f,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GAUlB,KAAAmnB,OAAS,KACwC,WAA3C/mB,KAAKoE,MAAM1E,KAAK04D,wBAClBp4D,KAAKoE,MAAM1E,KAAK04D,uBAAyB,KACzCp4D,KAAKoE,MAAMoK,MAAMxE,KAAK,IAAI,EAAA+8B,YAAY/mC,KAAKoE,MAAOpE,KAAKL,EAAGK,KAAKJ,IAC/DI,KAAKoE,MAAMoK,MAAQxO,KAAKoE,MAAMoK,MAAM9N,OAAQiS,GAASA,IAAS3S,OACV,OAA3CA,KAAKoE,MAAM1E,KAAK04D,yBACzBp4D,KAAKoE,MAAM1E,KAAK04D,uBAAyB,WAI7C,KAAA74C,WAAa,CAAC1S,EAAgB2S,KAC5B,GAAIA,aAAiB,EAAAunB,YAAa,CAChCl6B,EAAOhM,UAAU23B,WAAWx4B,MAC5B6M,EAAOhM,UAAU23B,WAAWhZ,GAC5B3S,EAAOnN,KAAKo1B,YAAY,4CACxB,MAAMr1B,EAAQoN,GAAgB8sB,QACzB9sB,EAAe8sB,UAChB9sB,EAAOnN,KAAKuO,MAAMpB,EAAOqF,SACvBw0B,EAAS,IAAI,EAAA1N,OAAOv5B,EAAMoN,EAAOlN,EAAGkN,EAAOjN,GACjDiN,EAAOhM,UAAU4gC,QAAQiF,E,GA3B3B1mC,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAK2f,WAAY,EACjB3f,KAAKwB,KAAOylC,EAAaniC,SACzB9E,KAAKie,YAAc,oDACnBje,KAAK0f,eAAgB,CACvB,EAXF,iBACS,EAAA5a,SAAW,e,6FCbpB,eAEA,UAKA,SAEA,UACA,UACA,UAEA,MAAa+4E,UAAa,EAAAt+E,OACxB,WAAAC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GAuBvB,KAAAqB,mBAAqB,KACfjB,KAAK8c,QACT,EAAA1b,MAAM4oH,YAGR,KAAA7nH,KAAQC,IACNpC,KAAKkB,MAAwB,IAAhBlB,KAAKC,OAAe,GAAK,IAClB,IAAhBD,KAAK8c,SAAiB9c,KAAKkB,MAAQ,IACnClB,KAAKqC,OACT,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MACvBzC,KAAKqC,OACJrC,KAAK2C,WAAW3C,KAAK4C,WAAWR,GAEpCpC,KAAK0C,aAAaN,GAClB,EAAAV,KAAKmB,QACH7C,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAIK,KAAK+C,MAAQ,GACtB/C,KAAKJ,EAAII,KAAKgD,YAAchD,KAAKiD,MAAQ,EACzC,EACA,EACAjD,KAAKP,KAAKyD,WACVlD,KAAKmD,gBAGT,EAAAzB,KAAKY,IAAIc,YAGX,KAAAC,aAAgBjB,IACdpC,KAAKsD,UAAYtD,KAAKJ,GAtDtBI,KAAKP,KAAOA,EACZO,KAAKC,OAAS,EACdD,KAAKyG,UAAY,EAEjBzG,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAK2C,WAAY,EACjB3C,KAAK2D,eAAgB,EACrB3D,KAAKwB,KAAO,OACZxB,KAAK6D,eAAiB,EACtB7D,KAAK8D,eAAiB,GACtB9D,KAAKmgB,QAAS,EACdngB,KAAKgmB,SAAW,EAAA5kB,MAAM2oH,SAClB,EAAAnoH,OAAOC,OAAS,IAClB7B,KAAKK,MAAM2J,KAAK,IAAI,EAAAswG,MAAMt6G,KAAKP,KAAMO,KAAKL,EAAGK,KAAKJ,GAGtD,CAEA,QAAImE,GACF,OAAO,EAAAC,WAAWwO,IACpB,EAxBF,Q,oLCbA,gBAOA,UACA,UAEA,MAAasqG,UAAgB,EAAA94E,KAE3B,WAAAxkC,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GASlB,KAAAyqC,MAASx9B,IACHA,EAAOhM,UAAUC,SACnBd,KAAKoE,MAAM1E,KAAKo1B,YACd,wEAIA90B,KAAKgC,YAAc,IACrB6K,EAAOhM,UAAU8qD,aAAa3rD,KAAM,GACpC6M,EAAOhM,UAAU4gC,QAAQ,IAAI,EAAAu7E,QAAQh9G,KAAKoE,MAAOpE,KAAKL,EAAGK,KAAKJ,IAC9D,EAAAwB,MAAMyqD,YACN7rD,KAAKoE,MAAM1E,KAAKo1B,YAAY,6CAlB9B90B,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKwB,KAAOs7G,EAAQh4G,SACpB9E,KAAK2f,WAAY,EACjB3f,KAAKie,YAAc,eACrB,EAVF,YACS,EAAAnZ,SAAW,U,qGCRpB,gBACA,UACA,UACA,UACA,MAAa6tF,UAAqB,EAAAlgD,SAChC,WAAAjzC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GAErBI,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKC,OAAS,EACdD,KAAKwB,KAAO,OACR,EAAAI,OAAOC,OAAS,IAClB7B,KAAKK,MAAM2J,KAAK,IAAI,EAAA4+B,MAAM5oC,KAAKP,KAAMO,KAAKL,EAAGK,KAAKJ,IAGpDI,KAAKK,MAAM2J,KAAK,IAAI,EAAA8+B,QAAQ9oC,KAAKP,KAAMO,KAAKL,EAAGK,KAAKJ,GACtD,EAbF,gB,kGCPA,gBACA,UAEA,UAEA,UACA,UAEA,UACA,MAAaqqH,UAAkB,EAAAlkF,WAO7B,WAAAvmC,CAAY8X,EAAgB3X,EAAWC,EAAWG,GAChDF,MAAMyX,EAAQ3X,EAAGC,GA4CnB,KAAAyD,aAAgBjB,IACVpC,KAAKqC,OACLrC,KAAKy6E,YAAc,IAAGz6E,KAAKy6E,aAAe,GAAKr4E,GAC/CpC,KAAKy6E,aAAe,IACtBz6E,KAAKuD,OAAS,IAAOnB,GAGnBpC,KAAKuD,MAAQ,KAAIvD,KAAKqC,MAAO,GACjC,EAAAX,KAAKwE,OAAOpE,KAAKgB,MAAM9C,KAAKuD,OAAQ,EAAG,EAAG,EAAGvD,KAAKL,EAAGK,KAAKJ,EAAI,EAAG,EAAG,KAnDpEI,KAAKkU,MAAQ,EACblU,KAAKuD,MAAQ,EACbvD,KAAKgX,OAASM,EACdtX,KAAKy6E,YAC6D,KAA/D,EAAAhjE,MAAMnD,SAAStU,KAAKgX,OAAOrX,EAAGK,KAAKgX,OAAOpX,EAAGI,KAAKL,EAAGK,KAAKJ,GAC7DI,KAAKyjC,MAAQ,EACb,EAAA/hB,SAAS6hB,eACPvjC,KAAKgX,OAAOvX,KACZO,KAAKL,EAAI,GACTK,KAAKJ,EAAI,GACT,GACA,CAAC,IAAK,IAAK,GACX,IACA,GACAkC,KAAKgG,IAAI9H,KAAKy6E,cAEhB,MAAMnmE,EAAW,EAAAmD,MAAMnD,SACrBtU,KAAKgX,OAAOrX,EACZK,KAAKgX,OAAOpX,EACZI,KAAKL,EACLK,KAAKJ,GAGDkb,EACS,IAAbxG,EAAiB,EAAIxS,KAAK4D,IAAI,GAAK5D,KAAKgB,MAAO,EAAIwR,EAAY,GAAK,GACtE,IAAK,MAAMgD,KAAUtX,KAAKgX,OAAOvX,KAAKuH,SAElCsQ,EAAO3X,IAAMK,KAAKL,GAClB2X,EAAO1X,IAAMI,KAAKJ,GAClB0X,IAAWtX,KAAKgX,SAEZM,aAAkB,EAAA8lE,OACpB9lE,EAAO4yG,WAAa,GAEtB5yG,EAAOvS,KAAKhF,EAAa+a,IAEvB/a,EAAYJ,IAAMK,KAAKL,GAAKI,EAAYH,IAAMI,KAAKJ,GACjDG,aAAuB,EAAA8hE,QACzB9hE,EAAYgF,KAAK+V,EAAQ,OAIjC,EAnDF,a,4FCNA,gBAIA,UAEA,MAAa0lD,UAAY,EAAAlhD,OAMvB,WAAA9f,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GAWlB,KAAAyE,eAAiB,IAGR,gBADsB,OAAfrE,KAAKgO,MAAiB,UAAYhO,KAAKgO,MAAMF,WAAa,IAI1E,KAAAtN,SAAYqM,IACL7M,KAAKS,WACRT,KAAKS,SAAWoM,EAAOhM,UAAU4gC,QAAQzhC,MACrCA,KAAKS,WACPT,KAAKoE,MAAM1E,KAAKo1B,YAAY,oBAC5B90B,KAAKoE,MAAM1E,KAAKo1B,YAAY,kCAE5B,EAAA1zB,MAAM+oH,YACa,OAAfnqH,KAAKgO,QAAgBhO,KAAKgO,MAAQnB,EAAOmB,OAC7CnE,QAAQ+C,IAAI5M,KAAKgO,UAKvB,KAAAsqB,MAASzrB,IACP7M,KAAKijF,UAAYjjF,KAAKijF,SACtB,MAAMnyD,EAAU9wB,KAAKijF,SAAW,eAAiB,cACjDjjF,KAAKP,KAAKmiF,uBAEV5hF,KAAKP,KAAKC,KAAKo1B,YAAYhE,IAG7B,KAAA8b,gBAAkB,OAIlB,KAAA7lB,OAAS,KACP/mB,KAAKP,KAAKmiF,wBAGZ,KAAAsB,iBAAmB,KACjB,IACE,MAAMr2E,EAAS7M,KAAKoE,MAAM1E,KAAK+O,QAAQzO,KAAKoE,MAAM1E,KAAK8X,eACjDumG,EAAclxG,GAAgB8sB,aAAe35B,KAAKoE,MACxD,IAAK25G,EAAY,OAGjB,MAAMr5D,EAAQ1kD,KAAKoE,MAAMA,MAAMgmH,8BAC7BrM,EACA/9G,KAAKugE,QAEP,IAAK7b,EAGH,YADAq5D,EAAW36B,iBAAcvrE,GAI3B,MAAM,OAAEwyG,EAAQ5qH,KAAM6qH,GAAe5lE,EAGrC,GAAI4lE,IAAevM,EAAY,CAC7B,MAAM56B,EAAO46B,EAAWvvB,uBACtB3hF,EAAOlN,EACPkN,EAAOjN,EACPyqH,EAAO1qH,EACP0qH,EAAOzqH,GAIT,YADAm+G,EAAW36B,YAAcD,E,CAK3B,MAAMonC,EAA0BxM,EAAWlwB,uBACzCy8B,GACA,GAEF,IAAKC,GAAgC,IAApBA,EAASxpH,OAExB,YADAg9G,EAAW36B,iBAAcvrE,GAI3B,MAAM2yG,EAAYD,EAAS,GAErBpnC,EAAO46B,EAAWvvB,uBACtB3hF,EAAOlN,EACPkN,EAAOjN,EACP4qH,EAAU7qH,EACV6qH,EAAU5qH,GAEZm+G,EAAW36B,YAAcD,C,CACzB,MAAOl8E,G,GAhGTjH,KAAKkB,MAAQ,EACblB,KAAKmB,MAAQ,EACbnB,KAAKwB,KAAO,MACZxB,KAAKugE,OAAS,EACdvgE,KAAKgO,MAAQ,KACbhO,KAAKP,KAAO2E,EACZpE,KAAKijF,UAAW,CAClB,EAhBF,QACS,EAAAn+E,SAAW,K,kGCApB,MAAaupB,EAWJ,eAAOrV,CAASyxG,EAAiB,IACtC,IAAItwG,EAGJ,EAAG,CACD,MAAMs1B,GAAOzvC,KAAK0qH,SAAS58G,SAAS,IACpCqM,EAAKswG,EAAS,GAAGA,KAAUh7E,IAAQA,C,OAC5BzvC,KAAK2qH,UAAUx6G,IAAIgK,IAG5B,OADAna,KAAK2qH,UAAUl6G,IAAI0J,GACZA,CACT,CAMO,cAAO8mG,CAAQ2J,GACpB,GAAI5qH,KAAK2qH,UAAUx6G,IAAIy6G,GACrB,MAAM,IAAIt3F,MAAM,0CAA0Cs3F,KAE5D5qH,KAAK2qH,UAAUl6G,IAAIm6G,EACrB,CAGO,iBAAOC,CAAW1wG,GACvB,OAAOna,KAAK2qH,UAAUx6G,IAAIgK,EAC5B,CAKO,mBAAO2wG,GACZ9qH,KAAK0qH,MAAQK,OAAO,GACpB/qH,KAAK2qH,UAAUz2F,OACjB,EA9CF,gBAEiB,EAAAw2F,MAAQK,OAAO,GAGf,EAAAJ,UAAY,IAAI/7G,G,2MCfjC,+CCAA,yCCAA,6JCIA,EAHA,SAAkBo8G,GACd,MAAuB,iBAATA,GAAqB,EAAM1nE,KAAK0nE,EAClD,ECKA,EAPA,SAAeA,GACX,IAAK,EAASA,GACV,MAAMC,UAAU,gBAEpB,IAAIviE,EACJ,OAAOg6C,WAAWwoB,IAAIxiE,EAAI7gC,SAASmjG,EAAKljG,MAAM,EAAG,GAAI,OAAS,GAAK4gC,IAAM,GAAM,IAAOA,IAAM,EAAK,IAAU,IAAJA,GAAWA,EAAI7gC,SAASmjG,EAAKljG,MAAM,EAAG,IAAK,OAAS,EAAO,IAAJ4gC,GAAWA,EAAI7gC,SAASmjG,EAAKljG,MAAM,GAAI,IAAK,OAAS,EAAO,IAAJ4gC,GAAWA,EAAI7gC,SAASmjG,EAAKljG,MAAM,GAAI,IAAK,OAAS,EAAO,IAAJ4gC,GAAYA,EAAI7gC,SAASmjG,EAAKljG,MAAM,GAAI,IAAK,KAAO,cAAiB,IAAO4gC,EAAI,WAAe,IAAOA,IAAM,GAAM,IAAOA,IAAM,GAAM,IAAOA,IAAM,EAAK,IAAU,IAAJA,EAC/a,ECNMyiE,EAAY,GAClB,IAAK,IAAInlH,EAAI,EAAGA,EAAI,MAAOA,EACvBmlH,EAAUnhH,MAAMhE,EAAI,KAAO8H,SAAS,IAAIga,MAAM,IAE3C,SAASsjG,EAAgBxoE,EAAKhyC,EAAS,GAC1C,OAAQu6G,EAAUvoE,EAAIhyC,EAAS,IAC3Bu6G,EAAUvoE,EAAIhyC,EAAS,IACvBu6G,EAAUvoE,EAAIhyC,EAAS,IACvBu6G,EAAUvoE,EAAIhyC,EAAS,IACvB,IACAu6G,EAAUvoE,EAAIhyC,EAAS,IACvBu6G,EAAUvoE,EAAIhyC,EAAS,IACvB,IACAu6G,EAAUvoE,EAAIhyC,EAAS,IACvBu6G,EAAUvoE,EAAIhyC,EAAS,IACvB,IACAu6G,EAAUvoE,EAAIhyC,EAAS,IACvBu6G,EAAUvoE,EAAIhyC,EAAS,IACvB,IACAu6G,EAAUvoE,EAAIhyC,EAAS,KACvBu6G,EAAUvoE,EAAIhyC,EAAS,KACvBu6G,EAAUvoE,EAAIhyC,EAAS,KACvBu6G,EAAUvoE,EAAIhyC,EAAS,KACvBu6G,EAAUvoE,EAAIhyC,EAAS,KACvBu6G,EAAUvoE,EAAIhyC,EAAS,MAAM8kB,aACrC,CAQA,QAPA,SAAmBktB,EAAKhyC,EAAS,GAC7B,MAAMo6G,EAAOI,EAAgBxoE,EAAKhyC,GAClC,IAAK,EAASo6G,GACV,MAAMC,UAAU,+BAEpB,OAAOD,CACX,ECjCA,IAAIK,EACJ,MAAMC,EAAQ,IAAI5oB,WAAW,IACd,SAAS6oB,IACpB,IAAKF,EAAiB,CAClB,GAAsB,oBAAXG,SAA2BA,OAAOH,gBACzC,MAAM,IAAI/3F,MAAM,4GAEpB+3F,EAAkBG,OAAOH,gBAAgBtsB,KAAKysB,OAClD,CACA,OAAOH,EAAgBC,EAC3B,CCRA,MAAMpvB,EAAS,CAAC,EA6ChB,SAASuvB,EAAQC,EAAMC,EAAOC,EAAOC,EAAU7uF,EAAM8uF,EAAKl7G,EAAS,GAC/D,GAAI86G,EAAK3qH,OAAS,GACd,MAAM,IAAIuyB,MAAM,qCAEpB,GAAKw4F,GAKD,GAAIl7G,EAAS,GAAKA,EAAS,GAAKk7G,EAAI/qH,OAChC,MAAM,IAAIgrH,WAAW,mBAAmBn7G,KAAUA,EAAS,mCAL/Dk7G,EAAM,IAAIppB,WAAW,IACrB9xF,EAAS,EAOb+6G,IAAU1mH,KAAKC,MACf0mH,IAAU,EACVC,IAA0C,OAA3BH,EAAK,IAAM,EAAKA,EAAK,IACpC1uF,IAAS0uF,EAAK5jG,MAAM,GAAI,IAExB,MAAMkkG,GAA4B,KAAb,WADrBL,GAAS,cACiCC,GAAS,WACnDE,EAAIl7G,KAAao7G,IAAO,GAAM,IAC9BF,EAAIl7G,KAAao7G,IAAO,GAAM,IAC9BF,EAAIl7G,KAAao7G,IAAO,EAAK,IAC7BF,EAAIl7G,KAAiB,IAALo7G,EAChB,MAAMC,EAAQN,EAAQ,WAAe,IAAS,UAC9CG,EAAIl7G,KAAaq7G,IAAQ,EAAK,IAC9BH,EAAIl7G,KAAkB,IAANq7G,EAChBH,EAAIl7G,KAAcq7G,IAAQ,GAAM,GAAO,GACvCH,EAAIl7G,KAAaq7G,IAAQ,GAAM,IAC/BH,EAAIl7G,KAAai7G,IAAa,EAAK,IACnCC,EAAIl7G,KAAuB,IAAXi7G,EAChB,IAAK,IAAIxuF,EAAI,EAAGA,EAAI,IAAKA,EACrByuF,EAAIl7G,KAAYosB,EAAKK,GAEzB,OAAOyuF,CACX,CACA,QA/EA,SAAYI,EAASJ,EAAKl7G,GACtB,IAAIu7G,EACJ,MAAMC,EAAOF,GAASG,MAAO,EAC7B,GAAIH,EAAS,CACT,MAAMI,EAAc7vG,OAAO+2C,KAAK04D,GACL,IAAvBI,EAAYvrH,QAAmC,QAAnBurH,EAAY,KACxCJ,OAAUr0G,EAElB,CACA,GAAIq0G,EACAC,EAAQV,EAAQS,EAAQ1oC,QAAU0oC,EAAQX,SAAWA,IAAOW,EAAQP,MAAOO,EAAQN,MAAOM,EAAQL,SAAUK,EAAQlvF,KAAM8uF,EAAKl7G,OAE9H,CACD,MAAM1L,EAAMD,KAAKC,MACXwmH,EAAOH,KAMd,SAAuBr3G,EAAOhP,EAAKwmH,GACtCx3G,EAAMy3G,SAAU,IAChBz3G,EAAM03G,QAAU,EACZ1mH,IAAQgP,EAAMy3G,OACdz3G,EAAM03G,QACF13G,EAAM03G,OAAS,MACf13G,EAAM8oB,UAAOnlB,EACb3D,EAAM03G,MAAQ,IAGb1mH,EAAMgP,EAAMy3G,MACjBz3G,EAAM03G,MAAQ,EAET1mH,EAAMgP,EAAMy3G,QACjBz3G,EAAM8oB,UAAOnlB,GAEZ3D,EAAM8oB,OACP9oB,EAAM8oB,KAAO0uF,EAAK5jG,MAAM,GAAI,IAC5B5T,EAAM8oB,KAAK,IAAM,EACjB9oB,EAAM23G,SAAwC,OAA3BH,EAAK,IAAM,EAAKA,EAAK,KAE5Cx3G,EAAMy3G,MAAQzmH,CAElB,CA5BQqnH,CAAcrwB,EAAQh3F,EAAKwmH,GAC3BS,EAAQV,EAAQC,EAAMxvB,EAAOyvB,MAAOzvB,EAAO0vB,MAAOQ,OAAOv0G,EAAYqkF,EAAO2vB,SAAUO,OAAOv0G,EAAYqkF,EAAOl/D,KAAM8uF,EAAKl7G,EAC/H,CACA,OAAOk7G,GAAOV,EAAgBe,EAClC,ECpBe,SAASK,EAAOxB,GAC3B,MACMyB,EAGV,SAAiBhB,GACb,OAAO/oB,WAAWwoB,IAAkB,GAAbO,EAAQ,KAAc,EAAOA,EAAQ,IAAM,EAAK,IAAsB,GAAbA,EAAQ,KAAc,GAAoB,IAAbA,EAAQ,KAAc,GAAmB,GAAbA,EAAQ,KAAc,GAAoB,IAAbA,EAAQ,KAAc,GAAmB,GAAbA,EAAQ,KAAc,GAAoB,IAAbA,EAAQ,KAAc,GAAmB,GAAbA,EAAQ,KAAc,GAAoB,IAAbA,EAAQ,KAAc,GAAmB,GAAbA,EAAQ,KAAc,GAAoB,IAAbA,EAAQ,KAAc,EAAI,GAAqB,GAAbA,EAAQ,GAAYA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,IAAKA,EAAQ,IAAKA,EAAQ,IAAKA,EAAQ,IAAKA,EAAQ,IAAKA,EAAQ,IACxf,CALoBiB,CADgB,iBAAT1B,EAAoB,EAAMA,GAAQA,GAEzD,MAAuB,iBAATA,EAAoBI,EAAgBqB,GAAWA,CACjE,CCMA,SAASE,EAAgBC,GACrB,OAA4C,IAAlCA,EAAe,KAAQ,GAAM,GAAU,CACrD,CAiGA,SAASC,EAAQltH,EAAGC,GAChB,MAAMktH,GAAW,MAAJntH,IAAmB,MAAJC,GAE5B,OADaD,GAAK,KAAOC,GAAK,KAAOktH,GAAO,KAC7B,GAAa,MAANA,CAC1B,CAIA,SAASC,EAAOvoE,EAAGt1C,EAAGC,EAAGxP,EAAG8R,EAAGnM,GAC3B,OAAOunH,GAJYt0D,EAIUs0D,EAAQA,EAAQ39G,EAAGs1C,GAAIqoE,EAAQltH,EAAG2F,OAJvCw8F,EAI4CrwF,GAH7C8mD,IAAS,GAAKupC,EAGmC3yF,GAJ5E,IAAuBopD,EAAKupC,CAK5B,CACA,SAASkrB,EAAM99G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAG8R,EAAGnM,GAC7B,OAAOynH,EAAQ59G,EAAImuC,GAAOnuC,EAAIxO,EAAIuO,EAAGC,EAAGxP,EAAG8R,EAAGnM,EAClD,CACA,SAAS2nH,EAAM/9G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAG8R,EAAGnM,GAC7B,OAAOynH,EAAQ59G,EAAIxO,EAAM28C,GAAK38C,EAAIuO,EAAGC,EAAGxP,EAAG8R,EAAGnM,EAClD,CACA,SAAS4nH,EAAMh+G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAG8R,EAAGnM,GAC7B,OAAOynH,EAAO59G,EAAImuC,EAAI38C,EAAGuO,EAAGC,EAAGxP,EAAG8R,EAAGnM,EACzC,CACA,SAAS6nH,EAAMj+G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAG8R,EAAGnM,GAC7B,OAAOynH,EAAOzvE,GAAKnuC,GAAKxO,GAAIuO,EAAGC,EAAGxP,EAAG8R,EAAGnM,EAC5C,CACA,QAtIA,SAAa6mH,GAGT,OAEJ,SAAuB31F,GACnB,MAAM21F,EAAQ,IAAIzpB,WAA0B,EAAflsE,EAAMz1B,QACnC,IAAK,IAAIiF,EAAI,EAAGA,EAAmB,EAAfwwB,EAAMz1B,OAAYiF,IAClCmmH,EAAMnmH,GAAMwwB,EAAMxwB,GAAK,KAASA,EAAI,EAAK,EAAM,IAEnD,OAAOmmH,CACX,CARWiB,CAYX,SAAoBztH,EAAGi4B,GACnB,MAAMy1F,EAAO,IAAIC,YAAYX,EAAgB/0F,IAAM4V,KAAK,GACxD6/E,EAAKj9G,IAAIzQ,GACT0tH,EAAKz1F,GAAO,IAAM,KAAQA,EAAM,GAChCy1F,EAAKA,EAAKtsH,OAAS,GAAK62B,EACxBj4B,EAAI0tH,EACJ,IAAIn+G,EAAI,WACJC,GAAK,UACLmuC,GAAK,WACL38C,EAAI,UACR,IAAK,IAAIqF,EAAI,EAAGA,EAAIrG,EAAEoB,OAAQiF,GAAK,GAAI,CACnC,MAAMunH,EAAOr+G,EACPs+G,EAAOr+G,EACPs+G,EAAOnwE,EACPowE,EAAO/sH,EACbuO,EAAI89G,EAAM99G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,GAAI,GAAI,WAChCrF,EAAIqsH,EAAMrsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,GAAI,IAAK,WACrCs3C,EAAI0vE,EAAM1vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,GAAI,GAAI,WACpCmJ,EAAI69G,EAAM79G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,GAAI,IAAK,YACrCkJ,EAAI89G,EAAM99G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,GAAI,GAAI,WACpCrF,EAAIqsH,EAAMrsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,GAAI,GAAI,YACpCs3C,EAAI0vE,EAAM1vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,GAAI,IAAK,YACrCmJ,EAAI69G,EAAM79G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,GAAI,IAAK,UACrCkJ,EAAI89G,EAAM99G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,GAAI,EAAG,YACnCrF,EAAIqsH,EAAMrsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,GAAI,IAAK,YACrCs3C,EAAI0vE,EAAM1vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,IAAK,IAAK,OACtCmJ,EAAI69G,EAAM79G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,IAAK,IAAK,YACtCkJ,EAAI89G,EAAM99G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,IAAK,EAAG,YACpCrF,EAAIqsH,EAAMrsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,IAAK,IAAK,UACtCs3C,EAAI0vE,EAAM1vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,IAAK,IAAK,YACtCmJ,EAAI69G,EAAM79G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,IAAK,GAAI,YACrCkJ,EAAI+9G,EAAM/9G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,GAAI,GAAI,WACpCrF,EAAIssH,EAAMtsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,GAAI,GAAI,YACpCs3C,EAAI2vE,EAAM3vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,IAAK,GAAI,WACrCmJ,EAAI89G,EAAM99G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,GAAI,IAAK,WACjCkJ,EAAI+9G,EAAM/9G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,GAAI,GAAI,WACpCrF,EAAIssH,EAAMtsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,IAAK,EAAG,UACpCs3C,EAAI2vE,EAAM3vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,IAAK,IAAK,WACtCmJ,EAAI89G,EAAM99G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,GAAI,IAAK,WACrCkJ,EAAI+9G,EAAM/9G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,GAAI,EAAG,WACnCrF,EAAIssH,EAAMtsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,IAAK,GAAI,YACrCs3C,EAAI2vE,EAAM3vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,GAAI,IAAK,WACrCmJ,EAAI89G,EAAM99G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,GAAI,GAAI,YACpCkJ,EAAI+9G,EAAM/9G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,IAAK,GAAI,YACrCrF,EAAIssH,EAAMtsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,GAAI,GAAI,UACpCs3C,EAAI2vE,EAAM3vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,GAAI,GAAI,YACpCmJ,EAAI89G,EAAM99G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,IAAK,IAAK,YACtCkJ,EAAIg+G,EAAMh+G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,GAAI,GAAI,QACpCrF,EAAIusH,EAAMvsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,GAAI,IAAK,YACrCs3C,EAAI4vE,EAAM5vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,IAAK,GAAI,YACrCmJ,EAAI+9G,EAAM/9G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,IAAK,IAAK,UACtCkJ,EAAIg+G,EAAMh+G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,GAAI,GAAI,YACpCrF,EAAIusH,EAAMvsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,GAAI,GAAI,YACpCs3C,EAAI4vE,EAAM5vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,GAAI,IAAK,WACrCmJ,EAAI+9G,EAAM/9G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,IAAK,IAAK,YACtCkJ,EAAIg+G,EAAMh+G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,IAAK,EAAG,WACpCrF,EAAIusH,EAAMvsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,GAAI,IAAK,WACjCs3C,EAAI4vE,EAAM5vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,GAAI,IAAK,WACrCmJ,EAAI+9G,EAAM/9G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,GAAI,GAAI,UACpCkJ,EAAIg+G,EAAMh+G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,GAAI,GAAI,WACpCrF,EAAIusH,EAAMvsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,IAAK,IAAK,WACtCs3C,EAAI4vE,EAAM5vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,IAAK,GAAI,WACrCmJ,EAAI+9G,EAAM/9G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,GAAI,IAAK,WACrCkJ,EAAIi+G,EAAMj+G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,GAAI,GAAI,WAChCrF,EAAIwsH,EAAMxsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,GAAI,GAAI,YACpCs3C,EAAI6vE,EAAM7vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,IAAK,IAAK,YACtCmJ,EAAIg+G,EAAMh+G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,GAAI,IAAK,UACrCkJ,EAAIi+G,EAAMj+G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,IAAK,EAAG,YACpCrF,EAAIwsH,EAAMxsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,GAAI,IAAK,YACrCs3C,EAAI6vE,EAAM7vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,IAAK,IAAK,SACtCmJ,EAAIg+G,EAAMh+G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,GAAI,IAAK,YACrCkJ,EAAIi+G,EAAMj+G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,GAAI,EAAG,YACnCrF,EAAIwsH,EAAMxsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,IAAK,IAAK,UACtCs3C,EAAI6vE,EAAM7vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,GAAI,IAAK,YACrCmJ,EAAIg+G,EAAMh+G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,IAAK,GAAI,YACrCkJ,EAAIi+G,EAAMj+G,EAAGC,EAAGmuC,EAAG38C,EAAGhB,EAAEqG,EAAI,GAAI,GAAI,WACpCrF,EAAIwsH,EAAMxsH,EAAGuO,EAAGC,EAAGmuC,EAAG39C,EAAEqG,EAAI,IAAK,IAAK,YACtCs3C,EAAI6vE,EAAM7vE,EAAG38C,EAAGuO,EAAGC,EAAGxP,EAAEqG,EAAI,GAAI,GAAI,WACpCmJ,EAAIg+G,EAAMh+G,EAAGmuC,EAAG38C,EAAGuO,EAAGvP,EAAEqG,EAAI,GAAI,IAAK,WACrCkJ,EAAI29G,EAAQ39G,EAAGq+G,GACfp+G,EAAI09G,EAAQ19G,EAAGq+G,GACflwE,EAAIuvE,EAAQvvE,EAAGmwE,GACf9sH,EAAIksH,EAAQlsH,EAAG+sH,EACnB,CACA,OAAOJ,YAAYpC,GAAGh8G,EAAGC,EAAGmuC,EAAG38C,EACnC,CAlGqBgtH,CAmGrB,SAAuBn3F,GACnB,GAAqB,IAAjBA,EAAMz1B,OACN,OAAO,IAAIusH,YAEf,MAAMM,EAAS,IAAIN,YAAYX,EAA+B,EAAfn2F,EAAMz1B,SAAaysC,KAAK,GACvE,IAAK,IAAIxnC,EAAI,EAAGA,EAAIwwB,EAAMz1B,OAAQiF,IAC9B4nH,EAAO5nH,GAAK,KAAkB,IAAXwwB,EAAMxwB,KAAgBA,EAAI,EAAK,EAEtD,OAAO4nH,CACX,CA7GkBC,CAAc1B,GACsB,EAAfA,EAAMprH,QAE7C,ECMa+sH,EAAM,uCACNC,EAAM,uCACJ,SAASC,EAAIr1E,EAASs1E,EAAM/2F,EAAOg3F,EAAWpC,EAAKl7G,GAC9D,MAAMu9G,EAA8B,iBAAVj3F,EAXvB,SAAuB2sB,GAC1BA,EAAMuqE,SAASC,mBAAmBxqE,IAClC,MAAMsoE,EAAQ,IAAIzpB,WAAW7+C,EAAI9iD,QACjC,IAAK,IAAIiF,EAAI,EAAGA,EAAI69C,EAAI9iD,SAAUiF,EAC9BmmH,EAAMnmH,GAAK69C,EAAI8+C,WAAW38F,GAE9B,OAAOmmH,CACX,CAImDmC,CAAcp3F,GAASA,EAChEq3F,EAAsC,iBAAdL,EAAyB,EAAMA,GAAaA,EAI1E,GAHyB,iBAAdA,IACPA,EAAY,EAAMA,IAEI,KAAtBA,GAAWntH,OACX,MAAMkqH,UAAU,oEAEpB,IAAIkB,EAAQ,IAAIzpB,WAAW,GAAKyrB,EAAWptH,QAM3C,GALAorH,EAAM/7G,IAAIm+G,GACVpC,EAAM/7G,IAAI+9G,EAAYI,EAAextH,QACrCorH,EAAQ8B,EAAK9B,GACbA,EAAM,GAAiB,GAAXA,EAAM,GAAaxzE,EAC/BwzE,EAAM,GAAiB,GAAXA,EAAM,GAAa,IAC3BL,EAAK,CACLl7G,EAASA,GAAU,EACnB,IAAK,IAAI5K,EAAI,EAAGA,EAAI,KAAMA,EACtB8lH,EAAIl7G,EAAS5K,GAAKmmH,EAAMnmH,GAE5B,OAAO8lH,CACX,CACA,OAAOV,EAAgBe,EAC3B,CChCA,SAASqC,EAAGt3F,EAAOg3F,EAAWpC,EAAKl7G,GAC/B,OAAOo9G,EAAI,GAAM,EAAK92F,EAAOg3F,EAAWpC,EAAKl7G,EACjD,CACA49G,EAAGV,IAAMA,EACTU,EAAGT,IAAMA,EACT,UCPA,GAAiBU,WADoB,oBAAXjD,QAA0BA,OAAOiD,YAAcjD,OAAOiD,WAAW1vB,KAAKysB,SC6BhG,EANA,SAAYU,EAASJ,EAAKl7G,GACtB,OAAI,EAAO69G,YAAe3C,GAAQI,EArBtC,SAAaA,EAASJ,EAAKl7G,GAEvB,MAAM86G,GADNQ,EAAUA,GAAW,CAAC,GACD1oC,QAAU0oC,EAAQX,SAAWA,IAClD,GAAIG,EAAK3qH,OAAS,GACd,MAAM,IAAIuyB,MAAM,qCAIpB,GAFAo4F,EAAK,GAAgB,GAAVA,EAAK,GAAa,GAC7BA,EAAK,GAAgB,GAAVA,EAAK,GAAa,IACzBI,EAAK,CAEL,IADAl7G,EAASA,GAAU,GACN,GAAKA,EAAS,GAAKk7G,EAAI/qH,OAChC,MAAM,IAAIgrH,WAAW,mBAAmBn7G,KAAUA,EAAS,8BAE/D,IAAK,IAAI5K,EAAI,EAAGA,EAAI,KAAMA,EACtB8lH,EAAIl7G,EAAS5K,GAAK0lH,EAAK1lH,GAE3B,OAAO8lH,CACX,CACA,OAAOV,EAAgBM,EAC3B,CAKWgD,CAAIxC,EAASJ,EAAKl7G,GAFd,EAAO69G,YAGtB,EC5BA,SAASpwF,EAAE5sB,EAAG9R,EAAGC,EAAGktC,GAChB,OAAQr7B,GACJ,KAAK,EACD,OAAQ9R,EAAIC,GAAOD,EAAImtC,EAC3B,KAAK,EAIL,KAAK,EACD,OAAOntC,EAAIC,EAAIktC,EAHnB,KAAK,EACD,OAAQntC,EAAIC,EAAMD,EAAImtC,EAAMltC,EAAIktC,EAI5C,CACA,SAAS6hF,EAAKhvH,EAAG09B,GACb,OAAQ19B,GAAK09B,EAAM19B,IAAO,GAAK09B,CACnC,CAuDA,QAtDA,SAAc8uF,GACV,MAAMyC,EAAI,CAAC,WAAY,WAAY,WAAY,YACzCC,EAAI,CAAC,WAAY,WAAY,WAAY,UAAY,YACrDC,EAAW,IAAIpsB,WAAWypB,EAAMprH,OAAS,GAC/C+tH,EAAS1+G,IAAI+7G,GACb2C,EAAS3C,EAAMprH,QAAU,IAEzB,MAAM07B,GADN0vF,EAAQ2C,GACQ/tH,OAAS,EAAI,EACvBo1E,EAAIr0E,KAAKC,KAAK06B,EAAI,IAClBy5C,EAAI,IAAIj7D,MAAMk7D,GACpB,IAAK,IAAInwE,EAAI,EAAGA,EAAImwE,IAAKnwE,EAAG,CACxB,MAAM48C,EAAM,IAAI0qE,YAAY,IAC5B,IAAK,IAAInnH,EAAI,EAAGA,EAAI,KAAMA,EACtBy8C,EAAIz8C,GACCgmH,EAAU,GAAJnmH,EAAa,EAAJG,IAAU,GACrBgmH,EAAU,GAAJnmH,EAAa,EAAJG,EAAQ,IAAM,GAC7BgmH,EAAU,GAAJnmH,EAAa,EAAJG,EAAQ,IAAM,EAC9BgmH,EAAU,GAAJnmH,EAAa,EAAJG,EAAQ,GAEnC+vE,EAAElwE,GAAK48C,CACX,CACAszB,EAAEC,EAAI,GAAG,IAA4B,GAApBg2C,EAAMprH,OAAS,GAAUe,KAAKuwC,IAAI,EAAG,IACtD6jC,EAAEC,EAAI,GAAG,IAAMr0E,KAAKgB,MAAMozE,EAAEC,EAAI,GAAG,KACnCD,EAAEC,EAAI,GAAG,IAA4B,GAApBg2C,EAAMprH,OAAS,GAAU,WAC1C,IAAK,IAAIiF,EAAI,EAAGA,EAAImwE,IAAKnwE,EAAG,CACxB,MAAM8vE,EAAI,IAAIw3C,YAAY,IAC1B,IAAK,IAAIhoH,EAAI,EAAGA,EAAI,KAAMA,EACtBwwE,EAAExwE,GAAK4wE,EAAElwE,GAAGV,GAEhB,IAAK,IAAIA,EAAI,GAAIA,EAAI,KAAMA,EACvBwwE,EAAExwE,GAAKqpH,EAAK74C,EAAExwE,EAAI,GAAKwwE,EAAExwE,EAAI,GAAKwwE,EAAExwE,EAAI,IAAMwwE,EAAExwE,EAAI,IAAK,GAE7D,IAAI4J,EAAI2/G,EAAE,GACN1/G,EAAI0/G,EAAE,GACNvxE,EAAIuxE,EAAE,GACNluH,EAAIkuH,EAAE,GACN5nH,EAAI4nH,EAAE,GACV,IAAK,IAAIvpH,EAAI,EAAGA,EAAI,KAAMA,EAAG,CACzB,MAAMmM,EAAI3P,KAAKgB,MAAMwC,EAAI,IACnBypH,EAAKJ,EAAKz/G,EAAG,GAAKmvB,EAAE5sB,EAAGtC,EAAGmuC,EAAG38C,GAAKsG,EAAI2nH,EAAEn9G,GAAKqkE,EAAExwE,KAAQ,EAC7D2B,EAAItG,EACJA,EAAI28C,EACJA,EAAIqxE,EAAKx/G,EAAG,MAAQ,EACpBA,EAAID,EACJA,EAAI6/G,CACR,CACAF,EAAE,GAAMA,EAAE,GAAK3/G,IAAO,EACtB2/G,EAAE,GAAMA,EAAE,GAAK1/G,IAAO,EACtB0/G,EAAE,GAAMA,EAAE,GAAKvxE,IAAO,EACtBuxE,EAAE,GAAMA,EAAE,GAAKluH,IAAO,EACtBkuH,EAAE,GAAMA,EAAE,GAAK5nH,IAAO,CAC1B,CACA,OAAOy7F,WAAWwoB,GAAG2D,EAAE,IAAM,GAAIA,EAAE,IAAM,GAAIA,EAAE,IAAM,EAAGA,EAAE,GAAIA,EAAE,IAAM,GAAIA,EAAE,IAAM,GAAIA,EAAE,IAAM,EAAGA,EAAE,GAAIA,EAAE,IAAM,GAAIA,EAAE,IAAM,GAAIA,EAAE,IAAM,EAAGA,EAAE,GAAIA,EAAE,IAAM,GAAIA,EAAE,IAAM,GAAIA,EAAE,IAAM,EAAGA,EAAE,GAAIA,EAAE,IAAM,GAAIA,EAAE,IAAM,GAAIA,EAAE,IAAM,EAAGA,EAAE,GAClO,ECjEA,SAASG,EAAG93F,EAAOg3F,EAAWpC,EAAKl7G,GAC/B,OAAOo9G,EAAI,GAAM,EAAM92F,EAAOg3F,EAAWpC,EAAKl7G,EAClD,CACAo+G,EAAGlB,IAAMA,EACTkB,EAAGjB,IAAMA,EACT,UCQA,EAbA,SAAY7B,EAASJ,EAAKl7G,GACtBs7G,IAAY,CAAC,EACbt7G,IAAW,EACX,IAAIu7G,EAAQ,EAAG,IAAKD,EAASG,KAAK,GAAQ,IAAI3pB,WAAW,KAEzD,GADAypB,EAAQK,EAAOL,GACXL,EAAK,CACL,IAAK,IAAI9lH,EAAI,EAAGA,EAAI,GAAIA,IACpB8lH,EAAIl7G,EAAS5K,GAAKmmH,EAAMnmH,GAE5B,OAAO8lH,CACX,CACA,OAAOV,EAAgBe,EAC3B,ECbe,SAAS8C,EAAOjE,GAC3B,MACMS,GAGOgB,EAJmB,iBAATzB,EAAoB,EAAMA,GAAQA,EAKlDtoB,WAAWwoB,IAAkB,GAAbuB,EAAQ,KAAc,EAAOA,EAAQ,IAAM,EAAK,IAAsB,GAAbA,EAAQ,KAAc,GAAoB,IAAbA,EAAQ,KAAc,GAAmB,GAAbA,EAAQ,KAAc,EAAmB,GAAbA,EAAQ,GAAYA,EAAQ,IAAmB,GAAbA,EAAQ,KAAc,GAAoB,IAAbA,EAAQ,KAAc,GAAmB,GAAbA,EAAQ,KAAc,GAAoB,IAAbA,EAAQ,KAAc,EAAI,IAAsB,IAAbA,EAAQ,KAAc,GAAmB,GAAbA,EAAQ,KAAc,GAAoB,IAAbA,EAAQ,KAAc,EAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,IAAKA,EAAQ,IAAKA,EAAQ,IAAKA,EAAQ,IAAKA,EAAQ,IAAKA,EAAQ,MADxf,IAAiBA,EAFb,MAAuB,iBAATzB,EAAoBI,EAAgBK,GAAWA,CACjE,CCJA,MAAM,EAAS,CAAC,EA6BhB,SAASyD,EAAQxD,EAAMC,EAAOwD,EAAKrD,EAAKl7G,EAAS,GAC7C,GAAI86G,EAAK3qH,OAAS,GACd,MAAM,IAAIuyB,MAAM,qCAEpB,GAAKw4F,GAKD,GAAIl7G,EAAS,GAAKA,EAAS,GAAKk7G,EAAI/qH,OAChC,MAAM,IAAIgrH,WAAW,mBAAmBn7G,KAAUA,EAAS,mCAL/Dk7G,EAAM,IAAIppB,WAAW,IACrB9xF,EAAS,EAyBb,OAlBA+6G,IAAU1mH,KAAKC,MACfiqH,IAAoB,IAAVzD,EAAK,IAAc,GAAOA,EAAK,IAAM,GAAOA,EAAK,IAAM,EAAKA,EAAK,GAC3EI,EAAIl7G,KAAa+6G,EAAQ,cAAiB,IAC1CG,EAAIl7G,KAAa+6G,EAAQ,WAAe,IACxCG,EAAIl7G,KAAa+6G,EAAQ,SAAa,IACtCG,EAAIl7G,KAAa+6G,EAAQ,MAAW,IACpCG,EAAIl7G,KAAa+6G,EAAQ,IAAS,IAClCG,EAAIl7G,KAAoB,IAAR+6G,EAChBG,EAAIl7G,KAAY,IAASu+G,IAAQ,GAAM,GACvCrD,EAAIl7G,KAAau+G,IAAQ,GAAM,IAC/BrD,EAAIl7G,KAAY,IAASu+G,IAAQ,GAAM,GACvCrD,EAAIl7G,KAAau+G,IAAQ,EAAK,IAC9BrD,EAAIl7G,KAAcu+G,GAAO,EAAK,IAAoB,EAAXzD,EAAK,IAC5CI,EAAIl7G,KAAY86G,EAAK,IACrBI,EAAIl7G,KAAY86G,EAAK,IACrBI,EAAIl7G,KAAY86G,EAAK,IACrBI,EAAIl7G,KAAY86G,EAAK,IACrBI,EAAIl7G,KAAY86G,EAAK,IACdI,CACX,CACA,QA7DA,SAAYI,EAASJ,EAAKl7G,GACtB,IAAIu7G,EACJ,GAAID,EACAC,EAAQ+C,EAAQhD,EAAQ1oC,QAAU0oC,EAAQX,SAAWA,IAAOW,EAAQP,MAAOO,EAAQiD,IAAKrD,EAAKl7G,OAE5F,CACD,MAAM1L,EAAMD,KAAKC,MACXwmH,EAAOH,KAMd,SAAuBr3G,EAAOhP,EAAKwmH,GACtCx3G,EAAMy3G,SAAU,IAChBz3G,EAAMi7G,MAAQ,EACVjqH,EAAMgP,EAAMy3G,OACZz3G,EAAMi7G,IAAOzD,EAAK,IAAM,GAAOA,EAAK,IAAM,GAAOA,EAAK,IAAM,EAAKA,EAAK,GACtEx3G,EAAMy3G,MAAQzmH,IAGdgP,EAAMi7G,IAAOj7G,EAAMi7G,IAAM,EAAK,EACZ,IAAdj7G,EAAMi7G,KACNj7G,EAAMy3G,QAIlB,CAnBQyD,CAAc,EAAQlqH,EAAKwmH,GAC3BS,EAAQ+C,EAAQxD,EAAM,EAAOC,MAAO,EAAOwD,IAAKrD,EAAKl7G,EACzD,CACA,OAAOk7G,GAAOV,EAAgBe,EAClC,ECRA,EANA,SAAiBnB,GACb,IAAK,EAASA,GACV,MAAMC,UAAU,gBAEpB,OAAOpjG,SAASmjG,EAAKljG,MAAM,GAAI,IAAK,GACxC,C,uLCNA,gBACA,UAEA,UAEA,MAAau4D,UAAmB,EAAAxrD,KAI9B,WAAAr1B,CAAYC,EAAYE,EAAWC,GACjCC,MAAMJ,EAAME,EAAGC,GAejB,KAAAuC,KAAQC,IACN,EAAAV,KAAKszB,SACHh1B,KAAKiwE,UACLjwE,KAAKi1B,KACL,EACA,EACAj1B,KAAKL,EACLK,KAAKJ,EACL,EACA,EACAI,KAAKP,KAAKyD,WACVlD,KAAKmD,gBAzBPnD,KAAKiwE,UAAY,EACbjwE,KAAKi1B,MAAQ,EAAAi7C,SAAS50C,UACxBt7B,KAAKiwE,UAAY,EAAAvuE,KAAKC,UACpB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IACnD,EAAAC,OAAOC,OAEP7B,KAAKi1B,MAAQ,EAAAi7C,SAAS30C,OAExBv7B,KAAKiwE,UAAY,EAAAvuE,KAAKC,UACpB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IACnD,EAAAC,OAAOC,MAEb,EAlBF,c,kGCLA,gBAGA,UACA,UACA,UACA,UAEA,MAAagmF,UAAkB,EAAAt9E,KAO7B,WAAA/K,CAAYC,EAAYE,EAAWC,EAAW8L,GAC5C7L,MAAMJ,EAAME,EAAGC,GAoBjB,KAAAgM,QAAU,KACD,EAET,KAAAmpB,cAAgB,KACP,EAET,KAAAmoB,SAAW,KACT,MAAM/xC,EAAWnL,KAAKP,KAAK0L,SAASwD,IAAI,GAAG3O,KAAKL,KAAKK,KAAKJ,KAC1D,OAAKuL,IAEDA,EAASK,YAAcL,EAASY,aAClCZ,EAASC,YACTD,EAASG,aAIb,KAAAnJ,KAAQC,IACNpC,KAAKotG,SAAShrG,GACd,MAAM+I,EAAWnL,KAAKP,KAAK0L,SAASwD,IAAI,GAAG3O,KAAKL,KAAKK,KAAKJ,KACrDuL,IAAUnL,KAAK2lC,YAAc,GAClC3lC,KAAKuD,OAAS,GAAMnB,EAChBpC,KAAKuD,OAAS,KAAIvD,KAAKuD,MAAQ,GAEnCvD,KAAK2lC,YACyB,gBAA5Bx6B,GAAUgoF,eACkB,oBAA5BhoF,GAAUgoF,cACN,EACA,EACDnzF,KAAK0L,cACR,EAAAhK,KAAKszB,SACH,EACAh1B,KAAKi1B,KACL,EACA,EACAj1B,KAAKL,EACLK,KAAKJ,EACL,EACA,EACAI,KAAKP,KAAKyD,WACVlD,KAAKmD,eAIT,EAAAzB,KAAKwE,OACHpE,KAAKgB,MAAM9C,KAAKuD,OAChB,GACA,EACA,EACAvD,KAAKL,EACLK,KAAKJ,EAAI,EAAII,KAAKqvH,YAClB,EACA,GAGErvH,KAAK0L,cACP,EAAAhK,KAAKszB,SACH,EACAh1B,KAAKi1B,KACL,EACA,EACAj1B,KAAKL,EACLK,KAAKJ,EAAI,GACT,EACA,EACAI,KAAKP,KAAKyD,WACV,IAnFJlD,KAAK0L,aAAeA,EACpB1L,KAAKqvH,YAAc3jH,EAAe,EAAI,EACtC1L,KAAKmT,YAAc,IAAI,EAAAC,YACrBpT,KAAKL,EAAI,GACTK,KAAKJ,EAAI,GAAMI,KAAKqvH,YACpB,EACA,EAAA7pH,eAAeggC,kBACf,KAEFxlC,KAAKP,KAAKmU,aAAa5J,KAAKhK,KAAKmT,aACjCnT,KAAKuD,MAAwB,GAAhB,EAAA3B,OAAOC,OACpB7B,KAAK2lC,YAAc,EACnB3lC,KAAKgT,UAAW,EAChBhT,KAAK+S,WAAa,UAClB/S,KAAKiT,WAAa,EAClBjT,KAAKkT,eAAiB,CACxB,EA1BF,a,+FCRA,gBAGA,MAAa6mG,UAAe,EAAA33F,OAE1B,WAAA5iB,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GAQlB,KAAAu5B,WAAa,CAACC,EAAcC,MACtBr5B,KAAKu5B,kBAAkBH,EAAMC,KAEZr5B,KAAKy5B,cACxBL,EACAC,GACA,EACAr5B,KAAK8a,OAAS9a,KAAKs5B,QAAQI,aAM/B,KAAAqzB,QAAU,OAnBR/sD,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKwB,KAAO,SACZxB,KAAKie,YAAc,gCACrB,EATF,WACS,EAAAnZ,SAAW,Q,4GCHpB,gBACA,UACA,UAaA,MAAawqH,EAQX,WAAA9vH,CAAYqL,EAAgB,IAAKI,EAAiB,KAP1C,KAAAgD,MAAgB,GAKhB,KAAAshH,SAAmB,EAGzBvvH,KAAK6K,MAAQA,EACb7K,KAAKiL,OAASA,EACdjL,KAAKmuD,OAAShC,SAASC,cAAc,UACrCpsD,KAAKmuD,OAAOtjD,MAAQA,EACpB7K,KAAKmuD,OAAOljD,OAASA,EACrBjL,KAAKsC,IAAMtC,KAAKmuD,OAAO7B,WAAW,MAGlCtsD,KAAKsC,IAAIqqC,uBAAwB,EAChC3sC,KAAKsC,IAAYktH,6BAA8B,EAC/CxvH,KAAKsC,IAAYmtH,0BAA2B,EAC5CzvH,KAAKsC,IAAYotH,yBAA0B,CAC9C,CAGQ,gBAAAC,GAeN,MAAO,CAAE9kH,MATK/I,KAAK4D,IALH,EAOd5D,KAAKyD,IANS,GAMI,EAAAkS,MAAMirB,gBAPV,EACA,GAM4C,CAAEktF,OAAQ,MAOtD3kH,OALDnJ,KAAK4D,IATJ,EAWd5D,KAAKyD,IAVS,GAUI,EAAAkS,MAAMirB,gBAXV,EACA,GAU4C,CAAEktF,OAAQ,MAIxE,CAGQ,aAAAC,CAAchlH,EAAeI,GACnC,OAAOJ,EAAQI,EAAS,EAC1B,CAGA,aAAA6kH,CACEC,EACAluH,EAAqB,EAAAD,OAAOC,KAC5BmuH,EAAkD,UAElDhwH,KAAKiO,MAAQ,GACbjO,KAAKuvH,SAAU,EAEf,IAAK,IAAIvpH,EAAI,EAAGA,EAAI+pH,EAAU/pH,IAAK,CACjC,MAAM,MAAE6E,EAAK,OAAEI,GAAWjL,KAAK2vH,mBACzBM,EAAOjwH,KAAK6vH,cAAchlH,EAAOI,GAEvC,IAAItL,EAAWC,EAGf,OAAQowH,GACN,IAAK,QACChqH,EAAI+pH,EAAW,GAEjBpwH,EAAiB,GAAbK,KAAK6K,MAAchJ,IAAS7B,KAAK6K,MAAQ,GAC7CjL,EAAkB,GAAdI,KAAKiL,OAAepJ,IAAS7B,KAAKiL,OAAS,KAG/CtL,EAAiB,GAAbK,KAAK6K,MAAchJ,IAAS7B,KAAK6K,MAAQ,GAC7CjL,EAAkB,GAAdI,KAAKiL,OAAepJ,IAAS7B,KAAKiL,OAAS,IAEjD,MACF,IAAK,UAEH,OADenJ,KAAKgB,MAAe,EAATjB,MAExB,KAAK,EACHlC,EAAiB,GAAbK,KAAK6K,MAAchJ,IAAS7B,KAAK6K,MAAQ,GAC7CjL,EAAkB,GAAdI,KAAKiL,OAAepJ,IAAS7B,KAAKiL,OAAS,GAC/C,MACF,KAAK,EACHtL,EAAiB,GAAbK,KAAK6K,MAAchJ,IAAS7B,KAAK6K,MAAQ,GAC7CjL,EAAkB,GAAdI,KAAKiL,OAAepJ,IAAS7B,KAAKiL,OAAS,GAC/C,MACF,KAAK,EACHtL,EAAiB,GAAbK,KAAK6K,MAAchJ,IAAS7B,KAAK6K,MAAQ,GAC7CjL,EAAkB,GAAdI,KAAKiL,OAAepJ,IAAS7B,KAAKiL,OAAS,GAC/C,MACF,KAAK,EACHtL,EAAiB,GAAbK,KAAK6K,MAAchJ,IAAS7B,KAAK6K,MAAQ,GAC7CjL,EAAkB,GAAdI,KAAKiL,OAAepJ,IAAS7B,KAAKiL,OAAS,GAGnD,MACF,QACEtL,EAAiB,GAAbK,KAAK6K,MAAchJ,IAAS7B,KAAK6K,MAAQ,GAC7CjL,EAAkB,GAAdI,KAAKiL,OAAepJ,IAAS7B,KAAKiL,OAAS,GAGnDjL,KAAKiO,MAAMjE,KAAK,CACdrK,IACAC,IACAiL,QACAI,SACAilH,GAAI,EACJC,GAAI,EACJF,OACA91G,GAAInU,G,CAGV,CAGQ,YAAAoqH,CAAaC,EAAaC,GAChC,QACED,EAAM1wH,EAAI0wH,EAAMxlH,MAAQ,GAAKylH,EAAM3wH,GACnC2wH,EAAM3wH,EAAI2wH,EAAMzlH,MAAQ,GAAKwlH,EAAM1wH,GACnC0wH,EAAMzwH,EAAIywH,EAAMplH,OAAS,GAAKqlH,EAAM1wH,GACpC0wH,EAAM1wH,EAAI0wH,EAAMrlH,OAAS,GAAKolH,EAAMzwH,EAExC,CAGQ,UAAA2wH,CAAWF,EAAaC,GAC9B,MAGME,EAAgB1uH,KAAKyD,IACzBzD,KAAKgG,IAAIuoH,EAAM1wH,EAAI0wH,EAAMxlH,MAAQ,EAAIylH,EAAM3wH,GAC3CmC,KAAKgG,IAAIwoH,EAAM3wH,EAAI2wH,EAAMzlH,MAAQ,EAAIwlH,EAAM1wH,IAIvC8wH,EAAc3uH,KAAKyD,IACvBzD,KAAKgG,IAAIuoH,EAAMzwH,EAAIywH,EAAMplH,OAAS,EAAIqlH,EAAM1wH,GAC5CkC,KAAKgG,IAAIwoH,EAAM1wH,EAAI0wH,EAAMrlH,OAAS,EAAIolH,EAAMzwH,IAGxC8wH,IACJL,EAAM1wH,EAAI0wH,EAAMxlH,MAAQylH,EAAM3wH,GAAK2wH,EAAM3wH,EAAI2wH,EAAMzlH,MAAQwlH,EAAM1wH,GAG7DgxH,IACJN,EAAMzwH,EAAIywH,EAAMplH,OAASqlH,EAAM1wH,GAAK0wH,EAAM1wH,EAAI0wH,EAAMrlH,OAASolH,EAAMzwH,GAGrE,OACG4wH,EAvBmB,GAuBcG,GACjCF,EAxBmB,GAwBYC,CAEpC,CAGQ,SAAAE,CAAUP,EAAaC,GAC7B,MAAMI,IACJL,EAAM1wH,EAAI0wH,EAAMxlH,MAAQylH,EAAM3wH,GAAK2wH,EAAM3wH,EAAI2wH,EAAMzlH,MAAQwlH,EAAM1wH,GAG7DgxH,IACJN,EAAMzwH,EAAIywH,EAAMplH,OAASqlH,EAAM1wH,GAAK0wH,EAAM1wH,EAAI0wH,EAAMrlH,OAASolH,EAAMzwH,GAGrE,GAAI8wH,EAEF,GAAIL,EAAMzwH,EAAI0wH,EAAM1wH,EAAG,CAErB,MAAM6lB,EAAU4qG,EAAMzwH,EAAIywH,EAAMplH,OAAS,EACzCqlH,EAAM1wH,EAAI6lB,EACV6qG,EAAMH,GAAK,EACXE,EAAMF,GAAK,C,KACN,CAEL,MAAM1qG,EAAU6qG,EAAM1wH,EAAI0wH,EAAMrlH,OAAS,EACzColH,EAAMzwH,EAAI6lB,EACV4qG,EAAMF,GAAK,EACXG,EAAMH,GAAK,C,MAER,GAAIQ,EAET,GAAIN,EAAM1wH,EAAI2wH,EAAM3wH,EAAG,CAErB,MAAM6lB,EAAU6qG,EAAM1wH,EAAI0wH,EAAMxlH,MAAQ,EACxCylH,EAAM3wH,EAAI6lB,EACV8qG,EAAMJ,GAAK,EACXG,EAAMH,GAAK,C,KACN,CAEL,MAAM1qG,EAAU8qG,EAAM3wH,EAAI2wH,EAAMzlH,MAAQ,EACxCwlH,EAAM1wH,EAAI6lB,EACV6qG,EAAMH,GAAK,EACXI,EAAMJ,GAAK,C,CAGjB,CAGQ,gBAAAW,CAAiBR,EAAaC,GAEpC,MAAMQ,EAAWhvH,KAAKyD,IACpB8qH,EAAM1wH,EAAI0wH,EAAMxlH,MAAQ,EAAIylH,EAAM3wH,EAClC2wH,EAAM3wH,EAAI2wH,EAAMzlH,MAAQ,EAAIwlH,EAAM1wH,GAE9BoxH,EAAWjvH,KAAKyD,IACpB8qH,EAAMzwH,EAAIywH,EAAMplH,OAAS,EAAIqlH,EAAM1wH,EACnC0wH,EAAM1wH,EAAI0wH,EAAMrlH,OAAS,EAAIolH,EAAMzwH,GAIrC,GAAIkxH,EAAWC,EAAU,CAEvB,MAAMt1G,EAAY40G,EAAM1wH,EAAI2wH,EAAM3wH,GAAK,EAAI,EACrCqxH,EAAYX,EAAMJ,KAAOK,EAAML,KAC/BgB,EAAaH,EAAW,EAE9BT,EAAM1wH,GAAK8b,EAAYw1G,GAAcX,EAAML,KAAOe,GAClDV,EAAM3wH,GAAK8b,EAAYw1G,GAAcZ,EAAMJ,KAAOe,GAGlDX,EAAMH,IAAkB,GAAZz0G,GAAmB60G,EAAML,KAAOe,GAC5CV,EAAMJ,IAAkB,GAAZz0G,GAAmB40G,EAAMJ,KAAOe,E,KACvC,CAEL,MAAMv1G,EAAY40G,EAAMzwH,EAAI0wH,EAAM1wH,GAAK,EAAI,EACrCoxH,EAAYX,EAAMJ,KAAOK,EAAML,KAC/BgB,EAAaF,EAAW,EAE9BV,EAAMzwH,GAAK6b,EAAYw1G,GAAcX,EAAML,KAAOe,GAClDV,EAAM1wH,GAAK6b,EAAYw1G,GAAcZ,EAAMJ,KAAOe,GAGlDX,EAAMF,IAAkB,GAAZ10G,GAAmB60G,EAAML,KAAOe,GAC5CV,EAAMH,IAAkB,GAAZ10G,GAAmB40G,EAAMJ,KAAOe,E,CAEhD,CAGA,eAAAE,CAAgBzkB,EAAqB,KAInC,IAAK,IAAI0kB,EAAO,EAAGA,EAAO1kB,EAAY0kB,IAAQ,CAC5C,IAAIC,GAAc,EAGlB,IAAK,IAAIprH,EAAI,EAAGA,EAAIhG,KAAKiO,MAAMlN,OAAQiF,IACrC,IAAK,IAAIG,EAAIH,EAAI,EAAGG,EAAInG,KAAKiO,MAAMlN,OAAQoF,IACrCnG,KAAKowH,aAAapwH,KAAKiO,MAAMjI,GAAIhG,KAAKiO,MAAM9H,MAC9CnG,KAAK6wH,iBAAiB7wH,KAAKiO,MAAMjI,GAAIhG,KAAKiO,MAAM9H,IAChDirH,GAAc,GAMpB,IAAK,IAAIprH,EAAI,EAAGA,EAAIhG,KAAKiO,MAAMlN,OAAQiF,IACrC,IAAK,IAAIG,EAAIH,EAAI,EAAGG,EAAInG,KAAKiO,MAAMlN,OAAQoF,IACrCnG,KAAKuwH,WAAWvwH,KAAKiO,MAAMjI,GAAIhG,KAAKiO,MAAM9H,KAC5CnG,KAAK4wH,UAAU5wH,KAAKiO,MAAMjI,GAAIhG,KAAKiO,MAAM9H,IAM/C,IAAK,MAAM1G,KAAQO,KAAKiO,MACtBxO,EAAKE,GAAKF,EAAKywH,GACfzwH,EAAKG,GAAKH,EAAK0wH,GACf1wH,EAAKywH,IA7BO,IA8BZzwH,EAAK0wH,IA9BO,IAiCZ1wH,EAAKE,EAAImC,KAAK4D,IAAI,EAAG5D,KAAKyD,IAAIvF,KAAK6K,MAAQpL,EAAKoL,MAAQ,EAAGpL,EAAKE,IAChEF,EAAKG,EAAIkC,KAAK4D,IAAI,EAAG5D,KAAKyD,IAAIvF,KAAKiL,OAASxL,EAAKwL,OAAS,EAAGxL,EAAKG,KAGhEkC,KAAKgG,IAAIrI,EAAKywH,IApCA,KAqCdpuH,KAAKgG,IAAIrI,EAAK0wH,IArCA,OAuCdiB,GAAc,GAKlB,IAAKA,EAAa,CAChBvnH,QAAQ+C,IAAI,yBAAyBukH,gBACrC,K,EAKJ,IAAK,MAAM1xH,KAAQO,KAAKiO,MACtBxO,EAAKE,EAAImC,KAAKwC,MAAM7E,EAAKE,GACzBF,EAAKG,EAAIkC,KAAKwC,MAAM7E,EAAKG,GAG3BI,KAAKuvH,SAAU,CACjB,CAGA,WAAA8B,GAEErxH,KAAKsC,IAAIiqD,UAAU,EAAG,EAAGvsD,KAAK6K,MAAO7K,KAAKiL,QAG1CjL,KAAKsC,IAAIqqC,uBAAwB,EAGjC3sC,KAAKsC,IAAIoP,UAAY,QACrB,IAAK,MAAMjS,KAAQO,KAAKiO,MACtBjO,KAAKsC,IAAIqP,SACP7P,KAAKgB,MAAMrD,EAAKE,GAChBmC,KAAKgB,MAAMrD,EAAKG,GAChBH,EAAKoL,MACLpL,EAAKwL,QAIT,OAAOjL,KAAKmuD,MACd,CAGA,OAAAmjE,CAAQC,GACN,MAAMpjE,EAASnuD,KAAKqxH,cACdG,GAAY,IAAIvsH,MAAOwsH,cAAcvtE,QAAQ,QAAS,KACtDwtE,EAAgBH,GAAY,SAASC,QAGrC1jB,EAAO3hD,SAASC,cAAc,KACpC0hD,EAAK6jB,SAAW,oBAAoBD,IACpC5jB,EAAK8jB,KAAOzjE,EAAO0jE,UAAU,aAG7B1lE,SAAS2lE,KAAKC,YAAYjkB,GAC1BA,EAAKkkB,QACL7lE,SAAS2lE,KAAKG,YAAYnkB,GAG1BjkG,QAAQ+C,IACN,wBAAwB5M,KAAK6K,SAAS7K,KAAKiL,WAC3C6iG,EAAK8jB,MAEP/nH,QAAQ+C,IAAI,yCAAyC8kH,IACvD,CAGA,IAAAvvH,CAAK6K,EAAkB,EAAGC,EAAkB,EAAG8D,EAAgB,GAC7D,GAAK,EAAArP,KAAKY,IAAV,CAEA,EAAAZ,KAAKY,IAAIC,OAGT,EAAAb,KAAKY,IAAIqqC,uBAAwB,EAChC,EAAAjrC,KAAKY,IAAYktH,6BAA8B,EAC/C,EAAA9tH,KAAKY,IAAYmtH,0BAA2B,EAC5C,EAAA/tH,KAAKY,IAAYotH,yBAA0B,EAG5C,EAAAhuH,KAAKY,IAAIoP,UAAY,qBACrB,EAAAhQ,KAAKY,IAAIqP,SACP3E,EACAC,EACAjN,KAAK6K,MAAQkG,EACb/Q,KAAKiL,OAAS8F,GAIhB,EAAArP,KAAKY,IAAIihE,YAAc,2BACvB,EAAA7hE,KAAKY,IAAIkhE,UAAY,EACrB,IAAK,IAAI7jE,EAAI,EAAGA,GAAKK,KAAK6K,MAAOlL,GAAK,GACpC,EAAA+B,KAAKY,IAAI+qC,YACT,EAAA3rC,KAAKY,IAAI4vH,OAAOllH,EAAUrN,EAAIoR,EAAO9D,GACrC,EAAAvL,KAAKY,IAAI6vH,OAAOnlH,EAAUrN,EAAIoR,EAAO9D,EAAUjN,KAAKiL,OAAS8F,GAC7D,EAAArP,KAAKY,IAAI8vH,SAEX,IAAK,IAAIxyH,EAAI,EAAGA,GAAKI,KAAKiL,OAAQrL,GAAK,GACrC,EAAA8B,KAAKY,IAAI+qC,YACT,EAAA3rC,KAAKY,IAAI4vH,OAAOllH,EAASC,EAAUrN,EAAImR,GACvC,EAAArP,KAAKY,IAAI6vH,OAAOnlH,EAAUhN,KAAK6K,MAAQkG,EAAO9D,EAAUrN,EAAImR,GAC5D,EAAArP,KAAKY,IAAI8vH,SAIX,IAAK,MAAM3yH,KAAQO,KAAKiO,MAAO,CAE7B,MAAMokH,EAAc5yH,EAAKoL,MAAQpL,EAAKwL,OACtC,IAAIqnH,EAIFA,EAFED,EAAc,IAEV,IAAkB,GAAV5yH,EAAK0a,GAAW,GACrBk4G,EAAc,IAEjB,EAAgB,GAAV5yH,EAAK0a,GAAW,GAGtB,IAAkB,GAAV1a,EAAK0a,GAAW,GAGhC,EAAAzY,KAAKY,IAAIoP,UAAY,OAAO4gH,eAC5B,EAAA5wH,KAAKY,IAAIqP,SACP3E,EAAUlL,KAAKgB,MAAMrD,EAAKE,GAAKoR,EAC/B9D,EAAUnL,KAAKgB,MAAMrD,EAAKG,GAAKmR,EAC/BtR,EAAKoL,MAAQkG,EACbtR,EAAKwL,OAAS8F,GAIhB,EAAArP,KAAKY,IAAIihE,YAAc,QACvB,EAAA7hE,KAAKY,IAAIkhE,UAAY,EACrB,EAAA9hE,KAAKY,IAAIqhE,WACP32D,EAAUlL,KAAKgB,MAAMrD,EAAKE,GAAKoR,EAC/B9D,EAAUnL,KAAKgB,MAAMrD,EAAKG,GAAKmR,EAC/BtR,EAAKoL,MAAQkG,EACbtR,EAAKwL,OAAS8F,GAIZA,GAAS,IACX,EAAArP,KAAKY,IAAIoP,UAAY,QACrB,EAAAhQ,KAAKY,IAAImlE,KAAO,iBAChB,EAAA/lE,KAAKY,IAAIiwH,UAAY,SACrB,EAAA7wH,KAAKY,IAAI+b,SACP,GAAG5e,EAAK0a,KACRnN,GAAWvN,EAAKE,EAAIF,EAAKoL,MAAQ,GAAKkG,EACtC9D,GAAWxN,EAAKG,EAAIH,EAAKwL,OAAS,GAAK8F,EAAQ,GAI7CA,GAAS,IACX,EAAArP,KAAKY,IAAImlE,KAAO,gBAChB,EAAA/lE,KAAKY,IAAI+b,SACP,GAAG5e,EAAKoL,SAASpL,EAAKwL,SACtB+B,GAAWvN,EAAKE,EAAIF,EAAKoL,MAAQ,GAAKkG,EACtC9D,GAAWxN,EAAKG,EAAIH,EAAKwL,OAAS,GAAK8F,EAAQ,I,CAMvD,EAAArP,KAAKY,IAAIc,SA7FY,CA8FvB,CAGA,0BAAOovH,CACL3nH,EAAgB,GAChBI,EAAiB,GACjB8kH,EAAmB,GACnBluH,EAAqB,EAAAD,OAAOC,KAC5BoiD,EAA0C,UAE1C,MAAMwuE,EAAY,IAAInD,EAAoBzkH,EAAOI,GAGjD,OAFAwnH,EAAU3C,cAAcC,EAAUluH,EAAMoiD,GACxCwuE,EAAUvB,kBACHuB,CACT,CAGA,QAAAC,GACE,MAAO,IAAI1yH,KAAKiO,MAClB,CAGA,kBAAA0kH,GACE,GAA0B,IAAtB3yH,KAAKiO,MAAMlN,OAAc,OAAO,EACpC,GAA0B,IAAtBf,KAAKiO,MAAMlN,OAAc,OAAO,EAGpC,MAAMu9B,EAAU,IAAI1vB,IACd08E,EAAQ,CAAC,GAGf,IAFAhtD,EAAQ7tB,IAAI,GAEL66E,EAAMvqF,OAAS,GAAG,CACvB,MAAM6xH,EAAYtnC,EAAMpzD,QAClB6zD,EAAc/rF,KAAKiO,MAAM2kH,GAG/B,IAAK,IAAI5sH,EAAI,EAAGA,EAAIhG,KAAKiO,MAAMlN,OAAQiF,IAAK,CAC1C,GAAIs4B,EAAQnuB,IAAInK,GAAI,SAEpB,MAAM6sH,EAAY7yH,KAAKiO,MAAMjI,GAGvB8sH,EACJhxH,KAAKgG,IAAIikF,EAAYpsF,EAAIosF,EAAYlhF,MAAQ,EAAIgoH,EAAUlzH,GAAK,GAChEmC,KAAKgG,IAAI+qH,EAAUlzH,EAAIkzH,EAAUhoH,MAAQ,EAAIkhF,EAAYpsF,GAAK,EAE1DozH,EACJjxH,KAAKgG,IAAIikF,EAAYnsF,EAAImsF,EAAY9gF,OAAS,EAAI4nH,EAAUjzH,GAAK,GACjEkC,KAAKgG,IAAI+qH,EAAUjzH,EAAIizH,EAAU5nH,OAAS,EAAI8gF,EAAYnsF,GAAK,EAE3D8wH,IACJ3kC,EAAYpsF,EAAIosF,EAAYlhF,MAAQgoH,EAAUlzH,GAC9CkzH,EAAUlzH,EAAIkzH,EAAUhoH,MAAQkhF,EAAYpsF,GAGxCgxH,IACJ5kC,EAAYnsF,EAAImsF,EAAY9gF,OAAS4nH,EAAUjzH,GAC/CizH,EAAUjzH,EAAIizH,EAAU5nH,OAAS8gF,EAAYnsF,IAI5CkzH,GAAwBnC,GACxBoC,GAAsBrC,KAEvBpyF,EAAQ7tB,IAAIzK,GACZslF,EAAMthF,KAAKhE,G,EAKjB,OAAOs4B,EAAQ9gB,OAASxd,KAAKiO,MAAMlN,MACrC,EAhgBF,uB,8FChBA,gBACA,UAEA,MAAa0W,GAAb,UACS,EAAAnD,SAAW,CAChB6J,EACAC,EACA2N,EACAC,IAEOlqB,KAAKyO,MAAMwb,EAAO5N,IAAW,GAAK6N,EAAO5N,IAAW,GAGtD,EAAA40G,4BAA8B,CACnC1+G,EACA2+G,IAEOnxH,KAAKoxH,KAAKD,EAAc3+G,GAI1B,EAAAg4B,SAAW,CAAC1pB,EAAWnR,EAAWi3C,KACvC,IAAIpL,EAAIoL,EAAIj3C,EACR9R,EAAI29C,GAAK,EAAIx7C,KAAKgG,IAAM8a,EAAI,GAAM,EAAK,IACvC6rE,EAAI/lC,EAAIpL,EACRhjC,EAAI,EACNwO,EAAI,EACJ3Z,EAAI,EAEFyT,GAAK,GAAKA,EAAI,IAChBtI,EAAIgjC,EACJx0B,EAAInpB,EACJwP,EAAI,GACKyT,GAAK,IAAMA,EAAI,KACxBtI,EAAI3a,EACJmpB,EAAIw0B,EACJnuC,EAAI,GACKyT,GAAK,KAAOA,EAAI,KACzBtI,EAAI,EACJwO,EAAIw0B,EACJnuC,EAAIxP,GACKijB,GAAK,KAAOA,EAAI,KACzBtI,EAAI,EACJwO,EAAInpB,EACJwP,EAAImuC,GACK16B,GAAK,KAAOA,EAAI,KACzBtI,EAAI3a,EACJmpB,EAAI,EACJ3Z,EAAImuC,IAEJhjC,EAAIgjC,EACJx0B,EAAI,EACJ3Z,EAAIxP,GAIN,MAAMwzH,EAASrxH,KAAKwC,MAAgB,KAATgW,EAAIm0E,IACzB2kC,EAAStxH,KAAKwC,MAAgB,KAATwkB,EAAI2lE,IACzB4kC,EAASvxH,KAAKwC,MAAgB,KAAT6K,EAAIs/E,IAE/B,OAAOh3E,EAAMuR,SAASmqG,EAAQC,EAAQC,IAIjC,EAAArqG,SAAW,CAAC1O,EAAWwO,EAAW3Z,KACvC,MAAMmkH,EAASt7F,IACb,MAAMrQ,EAAMqQ,EAAIlqB,SAAS,IACzB,OAAsB,IAAf6Z,EAAI5mB,OAAe,IAAM4mB,EAAMA,GAGxC,MAAO,IAAI2rG,EAAMh5G,KAAKg5G,EAAMxqG,KAAKwqG,EAAMnkH,MAqBlC,EAAAokH,cAAgB,CACrBhuH,EACAG,EACAwmH,EAEI,CAAC,KAEL,MAAMsH,EAAa1xH,KAAKC,KAAK2D,GACvB+tH,EAAa3xH,KAAKgB,MAAMyC,GACxBmoB,EAAQ8lG,EAAaC,EAAa,GAElC,OAAE7D,EAAS6D,GAAc/lG,EAAQ,GAAK,GAAMw+F,EAG5CwH,EAAgB5xH,KAAKyD,IAAIzD,KAAK4D,IAAIkqH,EAAQ6D,GAAaD,GAGvDr/B,EAAqB,EAAhB,EAAAvyF,OAAOC,OAAaC,KAAKyrC,GAC9B8mD,EAAqB,EAAhB,EAAAzyF,OAAOC,OAAaC,KAAKyrC,GAG9BrW,GAASp1B,KAAK+vE,IAAIsiB,GAAMryF,KAAK+vE,IAAIwiB,GAAM,GAAK,EAG5Cs/B,GAAkBD,EAAgBD,IAAe/lG,EAAQ,GAIzDkmG,EACJ18F,GAAS,EAFI,QAGZA,EAAQ,GACLA,GAASy8F,EAAiB,IAC1BA,EAAiC,GAAfz8F,EAAQ,KAAY,EAAIy8F,IAK1CE,EAAe/xH,KAAKyD,IAAIzD,KAAK4D,IAAIkuH,EADvB,MAC8C,MAGxD59G,EAASlU,KAAKgB,MAAM+wH,EAAenmG,GAAS+lG,EAElD,OAAO3xH,KAAKyD,IAAIzD,KAAK4D,IAAIsQ,EAAQy9G,GAAaD,IAGzC,EAAAM,kBAAqBhhC,IAE1B,IAAKA,GAA0B,IAAjBA,EAAM/xF,OAAc,OAAO,KAOzC,IAJmB+xF,EAAM7qF,KACtB0K,GAASA,GAA+B,iBAAhBA,EAAKohH,QAK9B,OAAOjhC,EAAM,EAAApxF,KAAKG,KAAK,EAAGixF,EAAM/xF,OAAS,EAAG,EAAAa,OAAOC,OAIrD,MAAMmyH,EAAclhC,EAAM7oD,OAAO,CAACs8C,EAAK5zE,IAC9B4zE,GAAO5zE,GAA+B,iBAAhBA,EAAKohH,OAAsBphH,EAAKohH,OAAS,GACrE,GAEH,GAAIC,GAAe,EAEjB,OAAOlhC,EAAM,EAAApxF,KAAKG,KAAK,EAAGixF,EAAM/xF,OAAS,EAAG,EAAAa,OAAOC,OAIrD,IAAIoyH,EAAc,EAAAryH,OAAOC,OAASmyH,EAGlC,IAAK,MAAMrhH,KAAQmgF,EACjB,GAAIngF,GAA+B,iBAAhBA,EAAKohH,SACtBE,GAAethH,EAAKohH,OAChBE,GAAe,GACjB,OAAOthH,EAMb,OAAOmgF,EAAMA,EAAM/xF,OAAS,IAqBvB,EAAA2hC,gBAAkB,CACvBn9B,EACAG,EACAwmH,EAEI,CAAC,KAEL,MAAM,OAAE0D,EAASrqH,GAAOG,EAAMH,GAAO,GAAM2mH,EAGrCgI,GAAqBxuH,EAAMH,GAAO,EAIxC,IAAI4uH,EAAK,EAAAvyH,OAAOC,OACZuyH,EAAK,EAAAxyH,OAAOC,OAGhB,KAAc,IAAPsyH,GACLA,EAAK,EAAAvyH,OAAOC,OAId,MAGMwyH,EAHKvyH,KAAKyO,MAAM,EAAIzO,KAAK8K,IAAIunH,IAAOryH,KAAK+vE,IAAI,EAAI/vE,KAAKyrC,GAAK6mF,GAGxCF,EAAoBtE,EAGvC0E,EAAexyH,KAAK4D,IAAI,EAAG2uH,GAGjC,OAAOvyH,KAAKwC,MAAMgwH,G,6FCnOT,EAAAvvG,OAAS,CACpBwvG,SAAU,WACVC,OAAQ,SACRC,iBAAkB,mBAClBC,kBAAmB,oBACnB/5D,WAAY,aACZg6D,YAAa,cACbC,WAAY,aACZC,UAAW,YACXC,IAAK,MACLC,SAAU,WACVC,WAAY,aACZC,SAAU,WAGVC,aAAc,cACdC,kBAAmB,kBACnB/rG,aAAc,eACdpE,YAAa,cACbmmC,aAAc,eACdC,YAAa,cACbC,eAAgB,iBAChBC,eAAgB,iBAChB4lB,yBAA0B,2BAC1BC,2BAA4B,6B,sGCxB9B,gBACA,SACA,UACA,UAEA,UAIA,UAIA,UACA,UAEA,UACA,UAEA,UAEA,UAGA,SACA,UACA,UAOA,UACA,UAKA,UAEA,UACA,UACA,UACA,UACA,UACA,UAEA,MAAahjE,EAyFX,wBAAW6gC,GACT,OAAO7gC,EAAcmZ,eACvB,EA3FF,kBACkB,EAAAu3B,QAAU,eACnB,EAAAzwC,gBAAiB,EACjB,EAAAkhB,UAAW,EACX,EAAAm4D,OAAQ,EACR,EAAAxpB,yBAA0B,EAC1B,EAAAm3D,aAAe,EACf,EAAAlyD,gBAAiB,EAER,EAAAhvB,IAAM,IACN,EAAA3pB,eAAgB,EACzB,EAAA8qG,aAAe,GACf,EAAAC,oBAAsB,GAEb,EAAAn2G,SAAW,GACpB,EAAA2vB,MAAQ,KACR,EAAAD,WAAa,EACJ,EAAA0mF,UAAY,GACZ,EAAAC,UAAY,EACrB,EAAAC,eAAgB,EAEP,EAAAz8C,aAAe,IACf,EAAAf,YAAc,IAEvB,EAAAy9C,gBAAkB,IAClB,EAAAC,uBAAyB,IACzB,EAAAC,yBAA2B,GAC3B,EAAArlF,kBAAoB,GACpB,EAAAyB,wBAA0B,GACjB,EAAAwnB,iBAAkB,EAC3B,EAAA9nB,0BAA2B,EAC3B,EAAAtC,sBAAuB,EAEd,EAAAymF,iBAAmB,IACnB,EAAAC,eAAiB,IAC1B,EAAAnhF,gBAAkB,EACT,EAAAs+B,eAAiB,GACjB,EAAAa,2BAA6B,GACtC,EAAAiiD,cAAe,EAEN,EAAAC,aAAe7nH,EAAcgR,SAC7B,EAAA82G,cAAgB9nH,EAAcgR,SACvC,EAAArO,MAAQ,EAAAtL,eAAekZ,SAAWvQ,EAAcgR,SAChD,EAAAnO,OAAS,EAAAxL,eAAeoZ,SAAWzQ,EAAcgR,SAEjD,EAAA+2G,gBAAiB,EAER,EAAAtrC,iBAAmB,GACnB,EAAAurC,UAAY,EACZ,EAAAC,cAAgB,GAEhB,EAAAC,IAAM,UACN,EAAA1rG,YAAc,UACd,EAAA2rG,MAAQ,UACR,EAAAC,WAAa,UACb,EAAAxzG,QAAU,UACV,EAAAyzG,qBAAuB,UACvB,EAAAC,kBAAoB,UACpB,EAAAC,WAAa,UACb,EAAAptG,kBAAmB,EAEnB,EAAA+a,gBAAiB,EACjB,EAAAF,kBAAmB,EACnB,EAAAwjF,kBAAmB,EAEnB,EAAA0B,kBAAoB,CAClC,EAAAxlF,KACA,EAAAiF,QACA,EAAAg0E,QACA,EAAA/7E,OACA,EAAA1hB,QACA,EAAAyhB,SACA,EAAA0sB,UACA,EAAA/mC,KACA,EAAA+wC,MAGc,EAAAm/D,uBAAwB,EAEjC,EAAAznF,oBAAqB,EACZ,EAAA8K,8BAA+B,EAC/B,EAAAD,4BAA6B,EAC7B,EAAAE,oCAAqC,EACrC,EAAA28E,0BAA2B,EAC3B,EAAAC,oCAAqC,EACrC,EAAAC,kCAAmC,EACnC,EAAAC,0CAA2C,EAEpD,EAAAziF,6BAA8B,EAI9B,EAAAgzC,gCAAkC,aAClC,EAAAI,gCAAkC,cAElC,EAAAngE,8BAA+B,EAC/B,EAAAyvG,uBAAwB,EACxB,EAAA1vG,iBAAkB,EAClB,EAAAigE,gBAAiB,EACjB,EAAAyL,cAAe,EACf,EAAAhM,gBAAiB,EACjB,EAAAz2B,mBAAoB,EACpB,EAAAwD,uBAAyB,EACzB,EAAAkyB,qBAAsB,EAEtB,EAAAgxC,gBAAiB,EAER,EAAAC,iCAAmC,CACjD,cACA,SACA,WACA,UACA,SACA,WAGc,EAAAC,iCAAmC,CACjD,aAGA,UAIA,YAWc,EAAAC,oCAAsC,CACpDC,GAAgB,KAEhB,MAAMC,EAAenpH,EAAcgpH,iCAAiChwH,QAClEgH,EAAcm5E,iCAEhB,IAAIiwC,EAIFA,EAFEF,GAGCC,EACC,EACAnpH,EAAcgpH,iCAAiCp2H,QACjDoN,EAAcgpH,iCAAiCp2H,QAI9Cu2H,EAAe,GAChBnpH,EAAcgpH,iCAAiCp2H,OAGnDoN,EAAcm5E,gCACZn5E,EAAcgpH,iCAAiCI,GAEjD1tH,QAAQ+C,IACN,0CAA0CuB,EAAcm5E,oCAI5C,EAAA3uB,oCAAsC,CACpD0+D,GAAgB,KAEhB,MAAMC,EAAenpH,EAAc+oH,iCAAiC/vH,QAClEgH,EAAcu5E,iCAEhB,IAAI6vC,EAIFA,EAFEF,GAGCC,EACC,EACAnpH,EAAc+oH,iCAAiCn2H,QACjDoN,EAAc+oH,iCAAiCn2H,QAI9Cu2H,EAAe,GAChBnpH,EAAc+oH,iCAAiCn2H,OAGnDoN,EAAcu5E,gCACZv5E,EAAc+oH,iCAAiCK,GAEjD1tH,QAAQ+C,IACN,0CAA0CuB,EAAcu5E,oCAI5C,EAAA8vC,6BAA+B,KAC7CrpH,EAAc6oH,uBAAyB7oH,EAAc6oH,uBAGvC,EAAAS,2BAA6B,KAC3CtpH,EAAc83E,qBAAuB93E,EAAc83E,qBAGrC,EAAAyxC,sBAAwB,KACtCvpH,EAAc64E,gBAAkB74E,EAAc64E,eAC9Cn9E,QAAQ+C,IACN,sBAAqBuB,EAAc64E,eAAiB,UAAY,cAIpD,EAAA2wC,yBAA2B,KACzCxpH,EAAcoiD,mBAAqBpiD,EAAcoiD,kBACjD1mD,QAAQ+C,IACN,uBAAsBuB,EAAcoiD,kBAAoB,kBAAoB,sBAIhE,EAAAqnE,UAAY,KAC1BzpH,EAAc2gC,QACV3gC,EAAc2gC,MAAQ3gC,EAAconH,YACtCpnH,EAAc2gC,MAAQ3gC,EAAconH,YAIxB,EAAAsC,eAAiB,KAC3B1pH,EAAc2gC,MAAQ3gC,EAAconH,YACtCpnH,EAAc2gC,QACV3gC,EAAc2gC,MAAQ3gC,EAAconH,YACtCpnH,EAAc2gC,MAAQ3gC,EAAconH,aAK1B,EAAAuC,eAAiB,KAC3B3pH,EAAc2gC,MAAQ3gC,EAAcqnH,YACtCrnH,EAAc2gC,QACV3gC,EAAc2gC,MAAQ3gC,EAAcqnH,YACtCrnH,EAAc2gC,MAAQ3gC,EAAcqnH,aAK1B,EAAAuC,WAAczoG,IAC5B,IAAI0oG,EAAY7pH,EAAcqnH,UAC1ByC,EAAiB5pD,IACrB,MAIM6pD,GAHH5oG,GAAwC,sBAA5B7Y,OAAOD,YAAYzS,KAE5B0tB,OAAO+S,WADP/S,OAAOgT,aAEehT,OAAO0mG,iBAC7BC,EAAc9oG,EAAW,EAAI,GAEnC,IAAK,IAAItpB,EAAImI,EAAcqnH,UAAWxvH,GAAKmI,EAAconH,UAAWvvH,IAAK,CACvE,MAAMoE,EAAQ8tH,GAAalyH,EAAImI,EAAcgR,UACvCmiB,EAAax/B,KAAKgG,IAAIsC,EAAQguH,GAEhC92F,EAAa22F,IACfA,EAAiB32F,EACjB02F,EAAYhyH,E,CAIhB,OAAOgyH,GAGO,EAAAK,mBAAqB,CAAC,EAAAte,OAAQ,EAAAv3E,QAC9B,EAAA81F,uBAAyB,CACvC,EAAAve,OACA,EAAAjnG,MACA,EAAAqpG,MACA,EAAAh6E,MACA,EAAA44E,SACA,EAAAx4E,UACA,EAAAI,WACA,EAAAP,MACA,EAAA/J,SACA,EAAAuK,OACA,EAAAL,UACA,EAAAiF,aACA,EAAAnoB,QACA,EAAAmuC,UACA,EAAAzsB,OACA,EAAAssB,WACA,EAAAlkB,SACA,EAAAA,SACA,EAAAA,SACA,EAAA2zE,QACA,EAAAh0E,QACA,EAAAA,QACA,EAAAA,QACA,EAAAA,QACA,EAAAA,QACA,EAAAA,QACA,EAAAA,Q,oLCrVJ,eAEA,UAIA,SAGA,UAEA,UAEA,MAAayvF,UAAiB,EAAAh5H,OAC5B,WAAAC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GAsBvB,KAAAuC,KAAQC,IACFpC,KAAKqC,OACT,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MACvBzC,KAAKqC,OACJrC,KAAK2C,WAAW3C,KAAK4C,WAAWR,GAEpCpC,KAAK0C,aAAaN,GAClB,EAAAV,KAAKmB,QACH7C,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAIK,KAAK+C,MACd/C,KAAKJ,EAAII,KAAKgD,YAAchD,KAAKiD,MACjC,EACA,EACAjD,KAAKP,KAAKyD,WACVlD,KAAKmD,gBAGT,EAAAzB,KAAKY,IAAIc,YAGX,KAAAC,aAAgBjB,IACdpC,KAAKsD,UAAYtD,KAAKJ,GA9CtBI,KAAKP,KAAOA,EACZO,KAAKC,OAAS,EACdD,KAAKkB,MAAQ,EACblB,KAAKmB,MAAQ,EACbnB,KAAK2C,WAAY,EACjB3C,KAAK2D,eAAgB,EACrB3D,KAAKwB,KAAO,YAEZxB,KAAKgmB,SAAW,EAAA5kB,MAAM2/D,SACtB/gE,KAAK6D,eAAiB,EACtB7D,KAAK8D,eAAiB,GAEP,EAAAlC,OAAOC,MAGxB,CAEA,QAAIkC,GACF,OAAO,EAAAC,WAAWwO,IACpB,EAtBF,Y,8BCVA,SAASusF,EAAKvC,EAAIg8B,GAChB,OAAO,WACL,OAAOh8B,EAAG33C,MAAM2zE,EAAS14B,UAC3B,CACF,CAIA,MAAM,SAAChyF,GAAY2O,OAAOyB,WACpB,eAACu6G,GAAkBh8G,QACnB,SAACi8G,EAAQ,YAAEC,GAAeC,OAE1BC,GAAUt3B,EAGb9kF,OAAOkxB,OAAO,MAHQmrF,IACrB,MAAMj1E,EAAM/1C,EAASukB,KAAKymG,GAC1B,OAAOv3B,EAAM19C,KAAS09C,EAAM19C,GAAOA,EAAI/7B,MAAM,GAAI,GAAG4N,iBAFzC,IAAC6rE,EAKhB,MAAMw3B,EAAch1H,IAClBA,EAAOA,EAAK2xB,cACJojG,GAAUD,EAAOC,KAAW/0H,GAGhCi1H,EAAaj1H,GAAQ+0H,UAAgBA,IAAU/0H,GAS/C,QAACysB,GAAWvV,MASZg+G,EAAcD,EAAW,aAS/B,SAASE,EAASlhG,GAChB,OAAe,OAARA,IAAiBihG,EAAYjhG,IAA4B,OAApBA,EAAIx4B,cAAyBy5H,EAAYjhG,EAAIx4B,cACpF25H,EAAanhG,EAAIx4B,YAAY05H,WAAalhG,EAAIx4B,YAAY05H,SAASlhG,EAC1E,CASA,MAAMohG,EAAgBL,EAAW,eA2B3B91E,EAAW+1E,EAAW,UAQtBG,EAAeH,EAAW,YAS1BK,EAAWL,EAAW,UAStBM,EAAYR,GAAoB,OAAVA,GAAmC,iBAAVA,EAiB/CS,EAAiBvhG,IACrB,GAAoB,WAAhB6gG,EAAO7gG,GACT,OAAO,EAGT,MAAM9Z,EAAYu6G,EAAezgG,GACjC,QAAsB,OAAd9Z,GAAsBA,IAAczB,OAAOyB,WAAkD,OAArCzB,OAAOg8G,eAAev6G,IAA0By6G,KAAe3gG,GAAU0gG,KAAY1gG,IA+BjJwhG,EAAST,EAAW,QASpBU,EAASV,EAAW,QASpBW,EAASX,EAAW,QASpBY,EAAaZ,EAAW,YAsCxBa,EAAoBb,EAAW,oBAE9Bc,EAAkBC,EAAWC,EAAYC,GAAa,CAAC,iBAAkB,UAAW,WAAY,WAAWlrH,IAAIiqH,GA2BtH,SAASx3H,EAAQ4hD,EAAKq5C,GAAI,WAACy9B,GAAa,GAAS,CAAC,GAEhD,GAAI92E,QACF,OAGF,IAAIn9C,EACAy2B,EAQJ,GALmB,iBAAR0mB,IAETA,EAAM,CAACA,IAGL3yB,EAAQ2yB,GAEV,IAAKn9C,EAAI,EAAGy2B,EAAI0mB,EAAIpiD,OAAQiF,EAAIy2B,EAAGz2B,IACjCw2F,EAAGnqE,KAAK,KAAM8wB,EAAIn9C,GAAIA,EAAGm9C,OAEtB,CAEL,GAAI+1E,EAAS/1E,GACX,OAIF,MAAMqQ,EAAOymE,EAAax9G,OAAOy9G,oBAAoB/2E,GAAO1mC,OAAO+2C,KAAKrQ,GAClEvrB,EAAM47B,EAAKzyD,OACjB,IAAIy0B,EAEJ,IAAKxvB,EAAI,EAAGA,EAAI4xB,EAAK5xB,IACnBwvB,EAAMg+B,EAAKxtD,GACXw2F,EAAGnqE,KAAK,KAAM8wB,EAAI3tB,GAAMA,EAAK2tB,EAEjC,CACF,CAEA,SAASg3E,EAAQh3E,EAAK3tB,GACpB,GAAI0jG,EAAS/1E,GACX,OAAO,KAGT3tB,EAAMA,EAAIE,cACV,MAAM89B,EAAO/2C,OAAO+2C,KAAKrQ,GACzB,IACIi3E,EADAp0H,EAAIwtD,EAAKzyD,OAEb,KAAOiF,KAAM,GAEX,GADAo0H,EAAO5mE,EAAKxtD,GACRwvB,IAAQ4kG,EAAK1kG,cACf,OAAO0kG,EAGX,OAAO,IACT,CAEA,MAAMC,EAEsB,oBAAfhtH,WAAmCA,WACvB,oBAAT6oF,KAAuBA,KAA0B,oBAAXzkE,OAAyBA,OAAS,EAAA3I,EAGlFwxG,EAAoBhsE,IAAa2qE,EAAY3qE,IAAYA,IAAY+rE,EAkLrEE,GAAgBC,EAKG,oBAAf93B,YAA8B+1B,EAAe/1B,YAH9Co2B,GACE0B,GAAc1B,aAAiB0B,GAHrB,IAACA,EAetB,MAiCMC,EAAa1B,EAAW,mBAWxB/zE,EAAiB,GAAGA,oBAAoB,CAAC7B,EAAKE,IAAS2B,EAAe3yB,KAAK8wB,EAAKE,GAA/D,CAAsE5mC,OAAOyB,WAS9Fw8G,EAAW3B,EAAW,UAEtB4B,EAAoB,CAACx3E,EAAKy3E,KAC9B,MAAMC,EAAcp+G,OAAOq+G,0BAA0B33E,GAC/C43E,EAAqB,CAAC,EAE5Bx5H,EAAQs5H,EAAa,CAACG,EAAYx5H,KAChC,IAAI+9B,GAC2C,KAA1CA,EAAMq7F,EAAQI,EAAYx5H,EAAM2hD,MACnC43E,EAAmBv5H,GAAQ+9B,GAAOy7F,KAItCv+G,OAAOw+G,iBAAiB93E,EAAK43E,IAuGzBG,EAAYnC,EAAW,iBAQvBoC,GAAkBC,EAkBE,mBAAjBC,aAlBsCC,EAmB7CnC,EAAakB,EAAQkB,aAlBjBH,EACKC,aAGFC,GAAyB33E,EAW7B,SAAS7hD,KAAK0hF,WAXsBg4C,EAWV,GAV3BnB,EAAQvjG,iBAAiB,UAAW,EAAElH,SAAQ7gB,WACxC6gB,IAAWyqG,GAAWtrH,IAAS40C,GACjC63E,EAAUz6H,QAAUy6H,EAAUtjG,OAAVsjG,KAErB,GAEK70E,IACN60E,EAAUxxH,KAAK28C,GACf0zE,EAAQkB,YAAY53E,EAAO,OAEKgD,GAAO1iC,WAAW0iC,IAhBlC,IAAEy0E,EAAuBE,EAKb33E,EAAO63E,EAiBzC,MAAMC,EAAiC,oBAAnBC,eAClBA,eAAe38B,KAAKs7B,GAAgC,oBAAZ3hE,SAA2BA,QAAQijE,UAAYR,EAQzF,IAAIS,EAAU,CACZprG,UACA4oG,gBACAF,WACA2C,WApgBkB/C,IAClB,IAAIgD,EACJ,OAAOhD,IACgB,mBAAbiD,UAA2BjD,aAAiBiD,UAClD5C,EAAaL,EAAMtwE,UACU,cAA1BszE,EAAOjD,EAAOC,KAEL,WAATgD,GAAqB3C,EAAaL,EAAMhrH,WAAkC,sBAArBgrH,EAAMhrH,cA8flEkuH,kBAnpBF,SAA2BhkG,GACzB,IAAIhiB,EAMJ,OAJEA,EAD0B,oBAAhBimH,aAAiCA,YAAkB,OACpDA,YAAYC,OAAOlkG,GAEnB,GAAUA,EAAU,QAAMohG,EAAcphG,EAAIvI,QAEhDzZ,CACT,EA4oBEitC,WACAo2E,WACA8C,UAnmBgBrD,IAAmB,IAAVA,IAA4B,IAAVA,EAomB3CQ,WACAC,gBACA6C,cA7kBqBpkG,IAErB,IAAKshG,EAASthG,IAAQkhG,EAASlhG,GAC7B,OAAO,EAGT,IACE,OAAmC,IAA5Bvb,OAAO+2C,KAAKx7B,GAAKj3B,QAAgB0b,OAAOg8G,eAAezgG,KAASvb,OAAOyB,SAChF,CAAE,MAAOjX,GAEP,OAAO,CACT,GAmkBA4yH,mBACAC,YACAC,aACAC,YACAf,cACAO,SACAC,SACAC,SACAgB,WACA2B,WAAYlD,EACZmD,SA/hBgBtkG,GAAQshG,EAASthG,IAAQmhG,EAAanhG,EAAIukG,MAgiB1D3C,oBACAW,eACAZ,aACAp4H,UACAi7H,MAxZF,SAASA,IACP,MAAM,SAACC,EAAQ,cAAEC,GAAiBpC,EAAiBt6H,OAASA,MAAQ,CAAC,EAC/DgW,EAAS,CAAC,EACV2mH,EAAc,CAAC3kG,EAAKxC,KACxB,MAAMonG,EAAYH,GAAYtC,EAAQnkH,EAAQwf,IAAQA,EAClD+jG,EAAcvjH,EAAO4mH,KAAerD,EAAcvhG,GACpDhiB,EAAO4mH,GAAaJ,EAAMxmH,EAAO4mH,GAAY5kG,GACpCuhG,EAAcvhG,GACvBhiB,EAAO4mH,GAAaJ,EAAM,CAAC,EAAGxkG,GACrBxH,EAAQwH,GACjBhiB,EAAO4mH,GAAa5kG,EAAIlQ,QACd40G,GAAkBzD,EAAYjhG,KACxChiB,EAAO4mH,GAAa5kG,IAIxB,IAAK,IAAIhyB,EAAI,EAAGy2B,EAAIqjE,UAAU/+F,OAAQiF,EAAIy2B,EAAGz2B,IAC3C85F,UAAU95F,IAAMzE,EAAQu+F,UAAU95F,GAAI22H,GAExC,OAAO3mH,CACT,EAqYEgzC,OAzXa,CAAC95C,EAAGC,EAAGqpH,GAAUyB,cAAa,CAAC,KAC5C14H,EAAQ4N,EAAG,CAAC6oB,EAAKxC,KACXgjG,GAAWW,EAAanhG,GAC1B9oB,EAAEsmB,GAAOupE,EAAK/mE,EAAKwgG,GAEnBtpH,EAAEsmB,GAAOwC,GAEV,CAACiiG,eACG/qH,GAkXP+oB,KA9fY4rB,GAAQA,EAAI5rB,KACxB4rB,EAAI5rB,OAAS4rB,EAAIK,QAAQ,qCAAsC,IA8f/D24E,SAzWgB9/F,IACc,QAA1BA,EAAQ4lE,WAAW,KACrB5lE,EAAUA,EAAQjV,MAAM,IAEnBiV,GAsWP+/F,SA1Ve,CAACt9H,EAAau9H,EAAkBl/E,EAAOg9E,KACtDr7H,EAAY0e,UAAYzB,OAAOkxB,OAAOovF,EAAiB7+G,UAAW28G,GAClEr7H,EAAY0e,UAAU1e,YAAcA,EACpCid,OAAOugH,eAAex9H,EAAa,QAAS,CAC1C03B,MAAO6lG,EAAiB7+G,YAE1B2/B,GAASphC,OAAOuS,OAAOxvB,EAAY0e,UAAW2/B,IAqV9Co/E,aAzUmB,CAACC,EAAWC,EAASz8H,EAAQ08H,KAChD,IAAIv/E,EACA73C,EACAq9C,EACJ,MAAMw9D,EAAS,CAAC,EAIhB,GAFAsc,EAAUA,GAAW,CAAC,EAEL,MAAbD,EAAmB,OAAOC,EAE9B,EAAG,CAGD,IAFAt/E,EAAQphC,OAAOy9G,oBAAoBgD,GACnCl3H,EAAI63C,EAAM98C,OACHiF,KAAM,GACXq9C,EAAOxF,EAAM73C,GACPo3H,IAAcA,EAAW/5E,EAAM65E,EAAWC,IAActc,EAAOx9D,KACnE85E,EAAQ95E,GAAQ65E,EAAU75E,GAC1Bw9D,EAAOx9D,IAAQ,GAGnB65E,GAAuB,IAAXx8H,GAAoB+3H,EAAeyE,EACjD,OAASA,KAAex8H,GAAUA,EAAOw8H,EAAWC,KAAaD,IAAczgH,OAAOyB,WAEtF,OAAOi/G,GAmTPtE,SACAE,aACAsE,SAzSe,CAACx5E,EAAKy5E,EAAcn1H,KACnC07C,EAAM05E,OAAO15E,SACIhsC,IAAb1P,GAA0BA,EAAW07C,EAAI9iD,UAC3CoH,EAAW07C,EAAI9iD,QAEjBoH,GAAYm1H,EAAav8H,OACzB,MAAMy8H,EAAY35E,EAAI18C,QAAQm2H,EAAcn1H,GAC5C,OAAsB,IAAfq1H,GAAoBA,IAAcr1H,GAmSzCs1H,QAxRe3E,IACf,IAAKA,EAAO,OAAO,KACnB,GAAItoG,EAAQsoG,GAAQ,OAAOA,EAC3B,IAAI9yH,EAAI8yH,EAAM/3H,OACd,IAAKs4H,EAASrzH,GAAI,OAAO,KACzB,MAAM48C,EAAM,IAAI3nC,MAAMjV,GACtB,KAAOA,KAAM,GACX48C,EAAI58C,GAAK8yH,EAAM9yH,GAEjB,OAAO48C,GAgRP86E,aArPmB,CAACv6E,EAAKq5C,KACzB,MAEMmhC,GAFYx6E,GAAOA,EAAIu1E,IAEDrmG,KAAK8wB,GAEjC,IAAIntC,EAEJ,MAAQA,EAAS2nH,EAAUjhF,UAAY1mC,EAAO4nH,MAAM,CAClD,MAAMC,EAAO7nH,EAAOkhB,MACpBslE,EAAGnqE,KAAK8wB,EAAK06E,EAAK,GAAIA,EAAK,GAC7B,GA4OAC,SAjOe,CAACC,EAAQl6E,KACxB,IAAIY,EACJ,MAAM7B,EAAM,GAEZ,KAAwC,QAAhC6B,EAAUs5E,EAAOn5E,KAAKf,KAC5BjB,EAAI54C,KAAKy6C,GAGX,OAAO7B,GA0NP63E,aACAz1E,iBACAg5E,WAAYh5E,EACZ21E,oBACAsD,cAjLqB96E,IACrBw3E,EAAkBx3E,EAAK,CAAC63E,EAAYx5H,KAElC,GAAI23H,EAAah2E,KAA6D,IAArD,CAAC,YAAa,SAAU,UAAUh8C,QAAQ3F,GACjE,OAAO,EAGT,MAAM01B,EAAQisB,EAAI3hD,GAEb23H,EAAajiG,KAElB8jG,EAAWkD,YAAa,EAEpB,aAAclD,EAChBA,EAAWmD,UAAW,EAInBnD,EAAW5qH,MACd4qH,EAAW5qH,IAAM,KACf,MAAMkjB,MAAM,qCAAwC9xB,EAAO,WA8JjE48H,YAxJkB,CAACC,EAAeC,KAClC,MAAMn7E,EAAM,CAAC,EAEPo7E,EAAU37E,IACdA,EAAIrhD,QAAQ21B,IACVisB,EAAIjsB,IAAS,KAMjB,OAFA1G,EAAQ6tG,GAAiBE,EAAOF,GAAiBE,EAAOhB,OAAOc,GAAe5tG,MAAM6tG,IAE7En7E,GA8IPq7E,YA1NkB36E,GACXA,EAAInuB,cAAcwuB,QAAQ,wBAC/B,SAAkBuqC,EAAG/f,EAAIC,GACvB,OAAOD,EAAG3lD,cAAgB4lD,CAC5B,GAuNF8vD,KA5IW,OA6IXC,eA3IqB,CAACxnG,EAAOynG,IACb,MAATznG,GAAiB4hF,OAAO8lB,SAAS1nG,GAASA,GAASA,EAAQynG,EA2IlExE,UACA0E,OAAQxE,EACRC,mBACAwE,oBAlIF,SAA6BhG,GAC3B,SAAUA,GAASK,EAAaL,EAAMtwE,SAAkC,aAAvBswE,EAAMH,IAA+BG,EAAMJ,GAC9F,EAiIEqG,aA/HoB57E,IACpB,MAAM1hD,EAAQ,IAAIwZ,MAAM,IAElB+jH,EAAQ,CAACpvG,EAAQ5pB,KAErB,GAAIszH,EAAS1pG,GAAS,CACpB,GAAInuB,EAAM0F,QAAQyoB,IAAW,EAC3B,OAIF,GAAIspG,EAAStpG,GACX,OAAOA,EAGT,KAAK,WAAYA,GAAS,CACxBnuB,EAAMuE,GAAK4pB,EACX,MAAMmI,EAASvH,EAAQZ,GAAU,GAAK,CAAC,EASvC,OAPAruB,EAAQquB,EAAQ,CAACsH,EAAO1B,KACtB,MAAMypG,EAAeD,EAAM9nG,EAAOlxB,EAAI,IACrCizH,EAAYgG,KAAkBlnG,EAAOvC,GAAOypG,KAG/Cx9H,EAAMuE,QAAK6R,EAEJkgB,CACT,CACF,CAEA,OAAOnI,GAGT,OAAOovG,EAAM77E,EAAK,IA+FlB+3E,YACAgE,WA3FkBpG,GAClBA,IAAUQ,EAASR,IAAUK,EAAaL,KAAWK,EAAaL,EAAM1mG,OAAS+mG,EAAaL,EAAMjlG,OA2FpGwnG,aAAcF,EACdM,OACA0D,WA5DkBrG,GAAmB,MAATA,GAAiBK,EAAaL,EAAMJ,KA0ElE,SAAS0G,EAAWtuG,EAAS6lD,EAAMtX,EAAQggE,EAASlsG,GAClDG,MAAMjB,KAAKryB,MAEPszB,MAAMgsG,kBACRhsG,MAAMgsG,kBAAkBt/H,KAAMA,KAAKR,aAEnCQ,KAAKyB,OAAQ,IAAK6xB,OAAS7xB,MAG7BzB,KAAK8wB,QAAUA,EACf9wB,KAAKwB,KAAO,aACZm1E,IAAS32E,KAAK22E,KAAOA,GACrBtX,IAAWr/D,KAAKq/D,OAASA,GACzBggE,IAAYr/H,KAAKq/H,QAAUA,GACvBlsG,IACFnzB,KAAKmzB,SAAWA,EAChBnzB,KAAKuzB,OAASJ,EAASI,OAASJ,EAASI,OAAS,KAEtD,CAEAqoG,EAAQkB,SAASsC,EAAY9rG,MAAO,CAClCisG,OAAQ,WACN,MAAO,CAELzuG,QAAS9wB,KAAK8wB,QACdtvB,KAAMxB,KAAKwB,KAEXyc,YAAaje,KAAKie,YAClBuhH,OAAQx/H,KAAKw/H,OAEbC,SAAUz/H,KAAKy/H,SACfC,WAAY1/H,KAAK0/H,WACjBC,aAAc3/H,KAAK2/H,aACnBl+H,MAAOzB,KAAKyB,MAEZ49D,OAAQu8D,EAAQmD,aAAa/+H,KAAKq/D,QAClCsX,KAAM32E,KAAK22E,KACXpjD,OAAQvzB,KAAKuzB,OAEjB,IAGF,MAAMqsG,EAAcR,EAAWlhH,UACzB28G,EAAc,CAAC,EA6DrB,SAASgF,EAAY/G,GACnB,OAAO8C,EAAQrC,cAAcT,IAAU8C,EAAQprG,QAAQsoG,EACzD,CASA,SAASgH,EAAetqG,GACtB,OAAOomG,EAAQyB,SAAS7nG,EAAK,MAAQA,EAAI1N,MAAM,GAAI,GAAK0N,CAC1D,CAWA,SAASuqG,EAAU58C,EAAM3tD,EAAKwqG,GAC5B,OAAK78C,EACEA,EAAKr+B,OAAOtvB,GAAK1mB,IAAI,SAAc60C,EAAO39C,GAG/C,OADA29C,EAAQm8E,EAAen8E,IACfq8E,GAAQh6H,EAAI,IAAM29C,EAAQ,IAAMA,CAC1C,GAAG4kB,KAAKy3D,EAAO,IAAM,IALHxqG,CAMpB,CA1FA,CACE,uBACA,iBACA,eACA,YACA,cACA,4BACA,iBACA,mBACA,kBACA,eACA,kBACA,mBAEAj0B,QAAQo1E,IACRkkD,EAAYlkD,GAAQ,CAACz/C,MAAOy/C,KAG9Bl6D,OAAOw+G,iBAAiBmE,EAAYvE,GACpCp+G,OAAOugH,eAAe4C,EAAa,eAAgB,CAAC1oG,OAAO,IAG3DkoG,EAAWxxG,KAAO,CAACuC,EAAOwmD,EAAMtX,EAAQggE,EAASlsG,EAAU8sG,KACzD,MAAMC,EAAazjH,OAAOkxB,OAAOiyF,GAEjChE,EAAQqB,aAAa9sG,EAAO+vG,EAAY,SAAgB/8E,GACtD,OAAOA,IAAQ7vB,MAAMpV,SACvB,EAAGmlC,GACe,iBAATA,GAGT,MAAMo+C,EAAMtxE,GAASA,EAAMW,QAAUX,EAAMW,QAAU,QAG/CqvG,EAAkB,MAARxpD,GAAgBxmD,EAAQA,EAAMwmD,KAAOA,EAYrD,OAXAyoD,EAAW/sG,KAAK6tG,EAAYz+B,EAAK0+B,EAAS9gE,EAAQggE,EAASlsG,GAGvDhD,GAA6B,MAApB+vG,EAAWE,OACtB3jH,OAAOugH,eAAekD,EAAY,QAAS,CAAEhpG,MAAO/G,EAAOkwG,cAAc,IAG3EH,EAAW1+H,KAAQ2uB,GAASA,EAAM3uB,MAAS,QAE3Cy+H,GAAexjH,OAAOuS,OAAOkxG,EAAYD,GAElCC,GAyDT,MAAMI,GAAa1E,EAAQqB,aAAarB,EAAS,CAAC,EAAG,KAAM,SAAgBv4E,GACzE,MAAO,WAAWC,KAAKD,EACzB,GAyBA,SAASk9E,GAAWp9E,EAAKq9E,EAAUtU,GACjC,IAAK0P,EAAQtC,SAASn2E,GACpB,MAAM,IAAI8nE,UAAU,4BAItBuV,EAAWA,GAAY,IAAI,SAY3B,MAAMC,GATNvU,EAAU0P,EAAQqB,aAAa/Q,EAAS,CACtCuU,YAAY,EACZT,MAAM,EACNU,SAAS,IACR,EAAO,SAAiBC,EAAQ/wG,GAEjC,OAAQgsG,EAAQ3C,YAAYrpG,EAAO+wG,GACrC,IAE2BF,WAErBG,EAAU1U,EAAQ0U,SAAWC,EAC7Bb,EAAO9T,EAAQ8T,KACfU,EAAUxU,EAAQwU,QAElBI,GADQ5U,EAAQ6U,MAAwB,oBAATA,MAAwBA,OACpCnF,EAAQkD,oBAAoB0B,GAErD,IAAK5E,EAAQS,WAAWuE,GACtB,MAAM,IAAI3V,UAAU,8BAGtB,SAAS+V,EAAa9pG,GACpB,GAAc,OAAVA,EAAgB,MAAO,GAE3B,GAAI0kG,EAAQpC,OAAOtiG,GACjB,OAAOA,EAAMu6F,cAGf,GAAImK,EAAQO,UAAUjlG,GACpB,OAAOA,EAAMppB,WAGf,IAAKgzH,GAAWlF,EAAQlC,OAAOxiG,GAC7B,MAAM,IAAIkoG,EAAW,gDAGvB,OAAIxD,EAAQxC,cAAcliG,IAAU0kG,EAAQrB,aAAarjG,GAChD4pG,GAA2B,mBAATC,KAAsB,IAAIA,KAAK,CAAC7pG,IAAU+pG,OAAOrzG,KAAKsJ,GAG1EA,CACT,CAYA,SAAS2pG,EAAe3pG,EAAO1B,EAAK2tD,GAClC,IAAIvgC,EAAM1rB,EAEV,GAAIA,IAAUisD,GAAyB,iBAAVjsD,EAC3B,GAAI0kG,EAAQyB,SAAS7nG,EAAK,MAExBA,EAAMirG,EAAajrG,EAAMA,EAAI1N,MAAM,GAAI,GAEvCoP,EAAQoY,KAAKC,UAAUrY,QAClB,GACJ0kG,EAAQprG,QAAQ0G,IAvGzB,SAAqB0rB,GACnB,OAAOg5E,EAAQprG,QAAQoyB,KAASA,EAAI36C,KAAK43H,EAC3C,CAqGmCqB,CAAYhqG,KACrC0kG,EAAQjC,WAAWziG,IAAU0kG,EAAQyB,SAAS7nG,EAAK,SAAWotB,EAAMg5E,EAAQ6B,QAAQvmG,IAYtF,OATA1B,EAAMsqG,EAAetqG,GAErBotB,EAAIrhD,QAAQ,SAAc4/H,EAAIjnH,IAC1B0hH,EAAQ3C,YAAYkI,IAAc,OAAPA,GAAgBX,EAASh4E,QAExC,IAAZk4E,EAAmBX,EAAU,CAACvqG,GAAMtb,EAAO8lH,GAAqB,OAAZU,EAAmBlrG,EAAMA,EAAM,KACnFwrG,EAAaG,GAEjB,IACO,EAIX,QAAItB,EAAY3oG,KAIhBspG,EAASh4E,OAAOu3E,EAAU58C,EAAM3tD,EAAKwqG,GAAOgB,EAAa9pG,KAElD,EACT,CAEA,MAAMz1B,EAAQ,GAER2/H,EAAiB3kH,OAAOuS,OAAOsxG,GAAY,CAC/CO,iBACAG,eACAnB,gBAyBF,IAAKjE,EAAQtC,SAASn2E,GACpB,MAAM,IAAI8nE,UAAU,0BAKtB,OA5BA,SAASoW,EAAMnqG,EAAOisD,GACpB,IAAIy4C,EAAQ3C,YAAY/hG,GAAxB,CAEA,IAA8B,IAA1Bz1B,EAAM0F,QAAQ+vB,GAChB,MAAM5D,MAAM,kCAAoC6vD,EAAK5a,KAAK,MAG5D9mE,EAAMuI,KAAKktB,GAEX0kG,EAAQr6H,QAAQ21B,EAAO,SAAciqG,EAAI3rG,IAKxB,OAJEomG,EAAQ3C,YAAYkI,IAAc,OAAPA,IAAgBP,EAAQvuG,KAClEmuG,EAAUW,EAAIvF,EAAQ34E,SAASztB,GAAOA,EAAIyC,OAASzC,EAAK2tD,EAAMi+C,KAI9DC,EAAMF,EAAIh+C,EAAOA,EAAKr+B,OAAOtvB,GAAO,CAACA,GAEzC,GAEA/zB,EAAMivB,KAlBgC,CAmBxC,CAMA2wG,CAAMl+E,GAECq9E,CACT,CAUA,SAASc,GAASz9E,GAChB,MAAM09E,EAAU,CACd,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,MAAO,IACP,MAAO,MAET,OAAOlT,mBAAmBxqE,GAAKK,QAAQ,mBAAoB,SAAkBQ,GAC3E,OAAO68E,EAAQ78E,EACjB,EACF,CAUA,SAAS88E,GAAqBnd,EAAQ6H,GACpClsH,KAAKyhI,OAAS,GAEdpd,GAAUkc,GAAWlc,EAAQrkH,KAAMksH,EACrC,CAEA,MAAMhuG,GAAYsjH,GAAqBtjH,UAwBvC,SAASwjH,GAAO1pG,GACd,OAAOq2F,mBAAmBr2F,GACxBksB,QAAQ,QAAS,KACjBA,QAAQ,OAAQ,KAChBA,QAAQ,QAAS,KACjBA,QAAQ,OAAQ,IACpB,CAWA,SAASy9E,GAAS1jC,EAAKomB,EAAQ6H,GAE7B,IAAK7H,EACH,OAAOpmB,EAGT,MAAM2jC,EAAU1V,GAAWA,EAAQwV,QAAUA,GAEzC9F,EAAQS,WAAWnQ,KACrBA,EAAU,CACR2V,UAAW3V,IAIf,MAAM4V,EAAc5V,GAAWA,EAAQ2V,UAEvC,IAAIE,EAUJ,GAPEA,EADED,EACiBA,EAAYzd,EAAQ6H,GAEpB0P,EAAQhC,kBAAkBvV,GAC3CA,EAAOv2G,WACP,IAAI0zH,GAAqBnd,EAAQ6H,GAASp+G,SAAS8zH,GAGnDG,EAAkB,CACpB,MAAMC,EAAgB/jC,EAAI92F,QAAQ,MAEX,IAAnB66H,IACF/jC,EAAMA,EAAIn2E,MAAM,EAAGk6G,IAErB/jC,KAA8B,IAAtBA,EAAI92F,QAAQ,KAAc,IAAM,KAAO46H,CACjD,CAEA,OAAO9jC,CACT,CA3EA//E,GAAUsqC,OAAS,SAAgBhnD,EAAM01B,GACvCl3B,KAAKyhI,OAAOz3H,KAAK,CAACxI,EAAM01B,GAC1B,EAEAhZ,GAAUpQ,SAAW,SAAkBm0H,GACrC,MAAML,EAAUK,EAAU,SAAS/qG,GACjC,OAAO+qG,EAAQ5vG,KAAKryB,KAAMk3B,EAAOoqG,GACnC,EAAIA,GAEJ,OAAOthI,KAAKyhI,OAAO3yH,IAAI,SAAc+uH,GACnC,OAAO+D,EAAQ/D,EAAK,IAAM,IAAM+D,EAAQ/D,EAAK,GAC/C,EAAG,IAAIt1D,KAAK,IACd,EAmIA,IAAI25D,GAlEJ,MACE,WAAA1iI,GACEQ,KAAKmiI,SAAW,EAClB,CAUA,GAAAC,CAAIC,EAAWC,EAAUpW,GAOvB,OANAlsH,KAAKmiI,SAASn4H,KAAK,CACjBq4H,YACAC,WACAC,cAAarW,GAAUA,EAAQqW,YAC/BC,QAAStW,EAAUA,EAAQsW,QAAU,OAEhCxiI,KAAKmiI,SAASphI,OAAS,CAChC,CASA,KAAA0hI,CAAMtoH,GACAna,KAAKmiI,SAAShoH,KAChBna,KAAKmiI,SAAShoH,GAAM,KAExB,CAOA,KAAA+Z,GACMl0B,KAAKmiI,WACPniI,KAAKmiI,SAAW,GAEpB,CAYA,OAAA5gI,CAAQi7F,GACNo/B,EAAQr6H,QAAQvB,KAAKmiI,SAAU,SAAwBv/G,GAC3C,OAANA,GACF45E,EAAG55E,EAEP,EACF,GAKE8/G,GAAuB,CACzBC,mBAAmB,EACnBC,mBAAmB,EACnBC,qBAAqB,GASnBC,GAAa,CACfC,WAAW,EACXC,QAAS,CACPC,gBAT+C,oBAApBA,gBAAkCA,gBAAkBzB,GAU/EzF,SARiC,oBAAbA,SAA2BA,SAAW,KAS1DgF,KAPyB,oBAATA,KAAuBA,KAAO,MAShDmC,UAAW,CAAC,OAAQ,QAAS,OAAQ,OAAQ,MAAO,SAGtD,MAAMC,GAAkC,oBAAX1xG,QAA8C,oBAAb06B,SAExDuqC,GAAkC,iBAAdxgF,WAA0BA,gBAAa2B,EAmB3DurH,GAAwBD,MAC1BzsC,IAAc,CAAC,cAAe,eAAgB,MAAMvvF,QAAQuvF,GAAW2sC,SAAW,GAWhFC,GAE2B,oBAAtBC,mBAEPrtC,gBAAgBqtC,mBACc,mBAAvBrtC,KAAKstC,cAIVC,GAASN,IAAiB1xG,OAAOxH,SAAS2nG,MAAQ,mBAExD,IASIxuB,GAAW,IATU3mF,OAAOinH,OAAO,CACrCC,UAAW,KACXR,cAAeA,GACfG,+BAAgCA,GAChCF,sBAAuBA,GACvBltH,UAAWwgF,GACX+sC,OAAQA,QAKLX,IA6DL,SAASc,GAAepD,GACtB,SAASqD,EAAU1gD,EAAMjsD,EAAOa,EAAQ7d,GACtC,IAAI1Y,EAAO2hF,EAAKjpE,KAEhB,GAAa,cAAT1Y,EAAsB,OAAO,EAEjC,MAAMsiI,EAAehrB,OAAO8lB,UAAUp9H,GAChCuiI,EAAS7pH,GAASipE,EAAKpiF,OAG7B,OAFAS,GAAQA,GAAQo6H,EAAQprG,QAAQuH,GAAUA,EAAOh3B,OAASS,EAEtDuiI,GACEnI,EAAQoC,WAAWjmG,EAAQv2B,GAC7Bu2B,EAAOv2B,GAAQ,CAACu2B,EAAOv2B,GAAO01B,GAE9Ba,EAAOv2B,GAAQ01B,GAGT4sG,IAGL/rG,EAAOv2B,IAAUo6H,EAAQtC,SAASvhG,EAAOv2B,MAC5Cu2B,EAAOv2B,GAAQ,IAGFqiI,EAAU1gD,EAAMjsD,EAAOa,EAAOv2B,GAAO0Y,IAEtC0hH,EAAQprG,QAAQuH,EAAOv2B,MACnCu2B,EAAOv2B,GA/Cb,SAAuBohD,GACrB,MAAMO,EAAM,CAAC,EACPqQ,EAAO/2C,OAAO+2C,KAAK5Q,GACzB,IAAI58C,EACJ,MAAM4xB,EAAM47B,EAAKzyD,OACjB,IAAIy0B,EACJ,IAAKxvB,EAAI,EAAGA,EAAI4xB,EAAK5xB,IACnBwvB,EAAMg+B,EAAKxtD,GACXm9C,EAAI3tB,GAAOotB,EAAIptB,GAEjB,OAAO2tB,CACT,CAoCqB6gF,CAAcjsG,EAAOv2B,MAG9BsiI,EACV,CAEA,GAAIlI,EAAQC,WAAW2E,IAAa5E,EAAQS,WAAWmE,EAAS5iH,SAAU,CACxE,MAAMulC,EAAM,CAAC,EAMb,OAJAy4E,EAAQ8B,aAAa8C,EAAU,CAACh/H,EAAM01B,KACpC2sG,EA1EN,SAAuBriI,GAKrB,OAAOo6H,EAAQkC,SAAS,gBAAiBt8H,GAAMsN,IAAI41C,GAC7B,OAAbA,EAAM,GAAc,GAAKA,EAAM,IAAMA,EAAM,GAEtD,CAkEgBu/E,CAAcziI,GAAO01B,EAAOisB,EAAK,KAGtCA,CACT,CAEA,OAAO,IACT,CA2BA,MAAM+gF,GAAW,CAEfC,aAAczB,GAEd0B,QAAS,CAAC,MAAO,OAAQ,SAEzBC,iBAAkB,CAAC,SAA0Bt1H,EAAMw5C,GACjD,MAAM+7E,EAAc/7E,EAAQg8E,kBAAoB,GAC1CC,EAAqBF,EAAYn9H,QAAQ,qBAAuB,EAChEs9H,EAAkB7I,EAAQtC,SAASvqH,GAQzC,GANI01H,GAAmB7I,EAAQnB,WAAW1rH,KACxCA,EAAO,IAAIgtH,SAAShtH,IAGH6sH,EAAQC,WAAW9sH,GAGpC,OAAOy1H,EAAqBl1F,KAAKC,UAAUq0F,GAAe70H,IAASA,EAGrE,GAAI6sH,EAAQxC,cAAcrqH,IACxB6sH,EAAQ1C,SAASnqH,IACjB6sH,EAAQU,SAASvtH,IACjB6sH,EAAQnC,OAAO1qH,IACf6sH,EAAQlC,OAAO3qH,IACf6sH,EAAQ/B,iBAAiB9qH,GAEzB,OAAOA,EAET,GAAI6sH,EAAQI,kBAAkBjtH,GAC5B,OAAOA,EAAK0gB,OAEd,GAAImsG,EAAQhC,kBAAkB7qH,GAE5B,OADAw5C,EAAQm8E,eAAe,mDAAmD,GACnE31H,EAAKjB,WAGd,IAAI6rH,EAEJ,GAAI8K,EAAiB,CACnB,GAAIH,EAAYn9H,QAAQ,sCAAwC,EAC9D,OA3KR,SAA0B4H,EAAMm9G,GAC9B,OAAOqU,GAAWxxH,EAAM,IAAIq0F,GAAS4/B,QAAQC,gBAAmB,CAC9DrC,QAAS,SAAS1pG,EAAO1B,EAAK2tD,EAAMwhD,GAClC,OAAIvhC,GAASwhC,QAAUhJ,EAAQ1C,SAAShiG,IACtCl3B,KAAKwoD,OAAOhzB,EAAK0B,EAAMppB,SAAS,YACzB,GAGF62H,EAAQ9D,eAAeh8E,MAAM7kD,KAAM8/F,UAC5C,KACGosB,GAEP,CA+Je2Y,CAAiB91H,EAAM/O,KAAK8kI,gBAAgBh3H,WAGrD,IAAK6rH,EAAaiC,EAAQjC,WAAW5qH,KAAUu1H,EAAYn9H,QAAQ,wBAA0B,EAAG,CAC9F,MAAM49H,EAAY/kI,KAAKglI,KAAOhlI,KAAKglI,IAAIjJ,SAEvC,OAAOwE,GACL5G,EAAa,CAAC,UAAW5qH,GAAQA,EACjCg2H,GAAa,IAAIA,EACjB/kI,KAAK8kI,eAET,CACF,CAEA,OAAIL,GAAmBD,GACrBj8E,EAAQm8E,eAAe,oBAAoB,GAxEjD,SAAyBO,GACvB,GAAIrJ,EAAQ34E,SAASgiF,GACnB,IAEE,OADA,EAAW31F,KAAKK,OAAOs1F,GAChBrJ,EAAQ3jG,KAAKgtG,EACtB,CAAE,MAAOh+H,GACP,GAAe,gBAAXA,EAAEzF,KACJ,MAAMyF,CAEV,CAGF,OAAO,EAAYqoC,KAAKC,WAAW01F,EACrC,CA4DaC,CAAgBn2H,IAGlBA,CACT,GAEAo2H,kBAAmB,CAAC,SAA2Bp2H,GAC7C,MAAMo1H,EAAenkI,KAAKmkI,cAAgBD,GAASC,aAC7CvB,EAAoBuB,GAAgBA,EAAavB,kBACjDwC,EAAsC,SAAtBplI,KAAK6iG,aAE3B,GAAI+4B,EAAQ7B,WAAWhrH,IAAS6sH,EAAQ/B,iBAAiB9qH,GACvD,OAAOA,EAGT,GAAIA,GAAQ6sH,EAAQ34E,SAASl0C,KAAW6zH,IAAsB5iI,KAAK6iG,cAAiBuiC,GAAgB,CAClG,MACMC,IADoBlB,GAAgBA,EAAaxB,oBACPyC,EAEhD,IACE,OAAO91F,KAAKK,MAAM5gC,EAAM/O,KAAKslI,aAC/B,CAAE,MAAOr+H,GACP,GAAIo+H,EAAmB,CACrB,GAAe,gBAAXp+H,EAAEzF,KACJ,MAAM49H,EAAWxxG,KAAK3mB,EAAGm4H,EAAWmG,iBAAkBvlI,KAAM,KAAMA,KAAKmzB,UAEzE,MAAMlsB,CACR,CACF,CACF,CAEA,OAAO8H,CACT,GAMA0vF,QAAS,EAET+mC,eAAgB,aAChBC,eAAgB,eAEhBC,kBAAmB,EACnBC,eAAgB,EAEhBX,IAAK,CACHjJ,SAAU34B,GAAS4/B,QAAQjH,SAC3BgF,KAAM39B,GAAS4/B,QAAQjC,MAGzB6E,eAAgB,SAAwBryG,GACtC,OAAOA,GAAU,KAAOA,EAAS,GACnC,EAEAg1B,QAAS,CACPs9E,OAAQ,CACN,OAAU,oCACV,oBAAgBhuH,KAKtB+jH,EAAQr6H,QAAQ,CAAC,SAAU,MAAO,OAAQ,OAAQ,MAAO,SAAWu6F,IAClEooC,GAAS37E,QAAQuzC,GAAU,CAAC,IAG9B,IAAIgqC,GAAa5B,GAIjB,MAAM6B,GAAoBnK,EAAQwC,YAAY,CAC5C,MAAO,gBAAiB,iBAAkB,eAAgB,OAC1D,UAAW,OAAQ,OAAQ,oBAAqB,sBAChD,gBAAiB,WAAY,eAAgB,sBAC7C,UAAW,cAAe,eA8CtB4H,GAAapN,OAAO,aAE1B,SAASqN,GAAgBziF,GACvB,OAAOA,GAAU+5E,OAAO/5E,GAAQvrB,OAAOvC,aACzC,CAEA,SAASwwG,GAAehvG,GACtB,OAAc,IAAVA,GAA4B,MAATA,EACdA,EAGF0kG,EAAQprG,QAAQ0G,GAASA,EAAMpoB,IAAIo3H,IAAkB3I,OAAOrmG,EACrE,CAgBA,SAASivG,GAAiB73E,EAASp3B,EAAOssB,EAAQ9iD,EAAQ0lI,GACxD,OAAIxK,EAAQS,WAAW37H,GACdA,EAAO2xB,KAAKryB,KAAMk3B,EAAOssB,IAG9B4iF,IACFlvG,EAAQssB,GAGLo4E,EAAQ34E,SAAS/rB,GAElB0kG,EAAQ34E,SAASviD,IACe,IAA3Bw2B,EAAM/vB,QAAQzG,GAGnBk7H,EAAQlB,SAASh6H,GACZA,EAAO4iD,KAAKpsB,QADrB,OANA,EASF,CAsBA,MAAMmvG,GACJ,WAAA7mI,CAAY+oD,GACVA,GAAWvoD,KAAKoQ,IAAIm4C,EACtB,CAEA,GAAAn4C,CAAIozC,EAAQ8iF,EAAgBC,GAC1B,MAAMrwC,EAAOl2F,KAEb,SAASwmI,EAAUC,EAAQC,EAASC,GAClC,MAAMC,EAAUX,GAAgBS,GAEhC,IAAKE,EACH,MAAM,IAAItzG,MAAM,0CAGlB,MAAMkC,EAAMomG,EAAQzB,QAAQjkC,EAAM0wC,KAE9BpxG,QAAqB3d,IAAdq+E,EAAK1gE,KAAmC,IAAbmxG,QAAmC9uH,IAAb8uH,IAAwC,IAAdzwC,EAAK1gE,MACzF0gE,EAAK1gE,GAAOkxG,GAAWR,GAAeO,GAE1C,CAEA,MAAMI,EAAa,CAACt+E,EAASo+E,IAC3B/K,EAAQr6H,QAAQgnD,EAAS,CAACk+E,EAAQC,IAAYF,EAAUC,EAAQC,EAASC,IAE3E,GAAI/K,EAAQrC,cAAc/1E,IAAWA,aAAkBxjD,KAAKR,YAC1DqnI,EAAWrjF,EAAQ8iF,QACd,GAAG1K,EAAQ34E,SAASO,KAAYA,EAASA,EAAOvrB,UArExB,iCAAiCqrB,KAqEqBE,EArEZvrB,QAsEvE4uG,EA7HaC,KACjB,MAAMC,EAAS,CAAC,EAChB,IAAIvxG,EACAwC,EACAhyB,EAsBJ,OApBA8gI,GAAcA,EAAWr2G,MAAM,MAAMlvB,QAAQ,SAAgBo1C,GAC3D3wC,EAAI2wC,EAAKxvC,QAAQ,KACjBquB,EAAMmhB,EAAK9gB,UAAU,EAAG7vB,GAAGiyB,OAAOvC,cAClCsC,EAAM2e,EAAK9gB,UAAU7vB,EAAI,GAAGiyB,QAEvBzC,GAAQuxG,EAAOvxG,IAAQuwG,GAAkBvwG,KAIlC,eAARA,EACEuxG,EAAOvxG,GACTuxG,EAAOvxG,GAAKxrB,KAAKguB,GAEjB+uG,EAAOvxG,GAAO,CAACwC,GAGjB+uG,EAAOvxG,GAAOuxG,EAAOvxG,GAAOuxG,EAAOvxG,GAAO,KAAOwC,EAAMA,EAE3D,GAEO+uG,GAmGQC,CAAaxjF,GAAS8iF,QAC5B,GAAI1K,EAAQtC,SAAS91E,IAAWo4E,EAAQuD,WAAW37E,GAAS,CACjE,IAAcyjF,EAAMzxG,EAAhB2tB,EAAM,CAAC,EACX,IAAK,MAAM7kC,KAASklC,EAAQ,CAC1B,IAAKo4E,EAAQprG,QAAQlS,GACnB,MAAM2sG,UAAU,gDAGlB9nE,EAAI3tB,EAAMlX,EAAM,KAAO2oH,EAAO9jF,EAAI3tB,IAC/BomG,EAAQprG,QAAQy2G,GAAQ,IAAIA,EAAM3oH,EAAM,IAAM,CAAC2oH,EAAM3oH,EAAM,IAAOA,EAAM,EAC7E,CAEAuoH,EAAW1jF,EAAKmjF,EAClB,MACY,MAAV9iF,GAAkBgjF,EAAUF,EAAgB9iF,EAAQ+iF,GAGtD,OAAOvmI,IACT,CAEA,GAAA2O,CAAI60C,EAAQ0G,GAGV,GAFA1G,EAASyiF,GAAgBziF,GAEb,CACV,MAAMhuB,EAAMomG,EAAQzB,QAAQn6H,KAAMwjD,GAElC,GAAIhuB,EAAK,CACP,MAAM0B,EAAQl3B,KAAKw1B,GAEnB,IAAK00B,EACH,OAAOhzB,EAGT,IAAe,IAAXgzB,EACF,OApHV,SAAqBrG,GACnB,MAAMJ,EAAShnC,OAAOkxB,OAAO,MACvBu5F,EAAW,mCACjB,IAAIxiF,EAEJ,KAAQA,EAAQwiF,EAAStiF,KAAKf,IAC5BJ,EAAOiB,EAAM,IAAMA,EAAM,GAG3B,OAAOjB,CACT,CA0GiB0jF,CAAYjwG,GAGrB,GAAI0kG,EAAQS,WAAWnyE,GACrB,OAAOA,EAAO73B,KAAKryB,KAAMk3B,EAAO1B,GAGlC,GAAIomG,EAAQlB,SAASxwE,GACnB,OAAOA,EAAOtF,KAAK1tB,GAGrB,MAAM,IAAI+zF,UAAU,yCACtB,CACF,CACF,CAEA,GAAA96G,CAAIqzC,EAAQ4jF,GAGV,GAFA5jF,EAASyiF,GAAgBziF,GAEb,CACV,MAAMhuB,EAAMomG,EAAQzB,QAAQn6H,KAAMwjD,GAElC,SAAUhuB,QAAqB3d,IAAd7X,KAAKw1B,IAAwB4xG,IAAWjB,GAAiBnmI,EAAMA,KAAKw1B,GAAMA,EAAK4xG,GAClG,CAEA,OAAO,CACT,CAEA,OAAO5jF,EAAQ4jF,GACb,MAAMlxC,EAAOl2F,KACb,IAAIqnI,GAAU,EAEd,SAASC,EAAaZ,GAGpB,GAFAA,EAAUT,GAAgBS,GAEb,CACX,MAAMlxG,EAAMomG,EAAQzB,QAAQjkC,EAAMwwC,IAE9BlxG,GAAS4xG,IAAWjB,GAAiBjwC,EAAMA,EAAK1gE,GAAMA,EAAK4xG,YACtDlxC,EAAK1gE,GAEZ6xG,GAAU,EAEd,CACF,CAQA,OANIzL,EAAQprG,QAAQgzB,GAClBA,EAAOjiD,QAAQ+lI,GAEfA,EAAa9jF,GAGR6jF,CACT,CAEA,KAAAnzG,CAAMkzG,GACJ,MAAM5zE,EAAO/2C,OAAO+2C,KAAKxzD,MACzB,IAAIgG,EAAIwtD,EAAKzyD,OACTsmI,GAAU,EAEd,KAAOrhI,KAAK,CACV,MAAMwvB,EAAMg+B,EAAKxtD,GACbohI,IAAWjB,GAAiBnmI,EAAMA,KAAKw1B,GAAMA,EAAK4xG,GAAS,YACtDpnI,KAAKw1B,GACZ6xG,GAAU,EAEd,CAEA,OAAOA,CACT,CAEA,SAAAE,CAAUvsC,GACR,MAAM9E,EAAOl2F,KACPuoD,EAAU,CAAC,EAsBjB,OApBAqzE,EAAQr6H,QAAQvB,KAAM,CAACk3B,EAAOssB,KAC5B,MAAMhuB,EAAMomG,EAAQzB,QAAQ5xE,EAAS/E,GAErC,GAAIhuB,EAGF,OAFA0gE,EAAK1gE,GAAO0wG,GAAehvG,eACpBg/D,EAAK1yC,GAId,MAAM4iC,EAAa4U,EAtKzB,SAAsBx3C,GACpB,OAAOA,EAAOvrB,OACXvC,cAAcwuB,QAAQ,kBAAmB,CAACpuC,EAAG0xH,EAAM3jF,IAC3C2jF,EAAKz+G,cAAgB86B,EAElC,CAiKkC4jF,CAAajkF,GAAU+5E,OAAO/5E,GAAQvrB,OAE9DmuD,IAAe5iC,UACV0yC,EAAK1yC,GAGd0yC,EAAK9P,GAAc8/C,GAAehvG,GAElCqxB,EAAQ69B,IAAc,IAGjBpmF,IACT,CAEA,MAAA8kD,IAAUg1B,GACR,OAAO95E,KAAKR,YAAYslD,OAAO9kD,QAAS85E,EAC1C,CAEA,MAAAylD,CAAOmI,GACL,MAAMvkF,EAAM1mC,OAAOkxB,OAAO,MAM1B,OAJAiuF,EAAQr6H,QAAQvB,KAAM,CAACk3B,EAAOssB,KACnB,MAATtsB,IAA2B,IAAVA,IAAoBisB,EAAIK,GAAUkkF,GAAa9L,EAAQprG,QAAQ0G,GAASA,EAAMqxC,KAAK,MAAQrxC,KAGvGisB,CACT,CAEA,CAACy1E,OAAOF,YACN,OAAOj8G,OAAOmB,QAAQ5d,KAAKu/H,UAAU3G,OAAOF,WAC9C,CAEA,QAAA5qH,GACE,OAAO2O,OAAOmB,QAAQ5d,KAAKu/H,UAAUzwH,IAAI,EAAE00C,EAAQtsB,KAAWssB,EAAS,KAAOtsB,GAAOqxC,KAAK,KAC5F,CAEA,YAAAo/D,GACE,OAAO3nI,KAAK2O,IAAI,eAAiB,EACnC,CAEA,IAAKiqH,OAAOD,eACV,MAAO,cACT,CAEA,WAAO/qG,CAAKkrG,GACV,OAAOA,aAAiB94H,KAAO84H,EAAQ,IAAI94H,KAAK84H,EAClD,CAEA,aAAOh0E,CAAO8iF,KAAU9tD,GACtB,MAAM+tD,EAAW,IAAI7nI,KAAK4nI,GAI1B,OAFA9tD,EAAQv4E,QAASw2B,GAAW8vG,EAASz3H,IAAI2nB,IAElC8vG,CACT,CAEA,eAAOC,CAAStkF,GACd,MAIMukF,GAJY/nI,KAAKgmI,IAAehmI,KAAKgmI,IAAc,CACvD+B,UAAW,CAAC,IAGcA,UACtB7pH,EAAYle,KAAKke,UAEvB,SAAS8pH,EAAetB,GACtB,MAAME,EAAUX,GAAgBS,GAE3BqB,EAAUnB,KAlOrB,SAAwBzjF,EAAKK,GAC3B,MAAMykF,EAAerM,EAAQ4C,YAAY,IAAMh7E,GAE/C,CAAC,MAAO,MAAO,OAAOjiD,QAAQ2mI,IAC5BzrH,OAAOugH,eAAe75E,EAAK+kF,EAAaD,EAAc,CACpD/wG,MAAO,SAASixG,EAAMC,EAAMC,GAC1B,OAAOroI,KAAKkoI,GAAY71G,KAAKryB,KAAMwjD,EAAQ2kF,EAAMC,EAAMC,EACzD,EACAhI,cAAc,KAGpB,CAwNQiI,CAAepqH,EAAWwoH,GAC1BqB,EAAUnB,IAAW,EAEzB,CAIA,OAFAhL,EAAQprG,QAAQgzB,GAAUA,EAAOjiD,QAAQymI,GAAkBA,EAAexkF,GAEnExjD,IACT,EAGFqmI,GAAayB,SAAS,CAAC,eAAgB,iBAAkB,SAAU,kBAAmB,aAAc,kBAGpGlM,EAAQjB,kBAAkB0L,GAAanoH,UAAW,EAAEgZ,SAAQ1B,KAC1D,IAAI+yG,EAAS/yG,EAAI,GAAGzM,cAAgByM,EAAI1N,MAAM,GAC9C,MAAO,CACLnZ,IAAK,IAAMuoB,EACX,GAAA9mB,CAAIo4H,GACFxoI,KAAKuoI,GAAUC,CACjB,KAIJ5M,EAAQqC,cAAcoI,IAEtB,IAAIoC,GAAiBpC,GAUrB,SAASqC,GAAcC,EAAKx1G,GAC1B,MAAMksC,EAASr/D,MAAQ8lI,GACjBx3E,EAAUn7B,GAAYksC,EACtB9W,EAAUkgF,GAAe76G,KAAK0gC,EAAQ/F,SAC5C,IAAIx5C,EAAOu/C,EAAQv/C,KAQnB,OANA6sH,EAAQr6H,QAAQonI,EAAK,SAAmBnsC,GACtCztF,EAAOytF,EAAGnqE,KAAKgtC,EAAQtwD,EAAMw5C,EAAQg/E,YAAap0G,EAAWA,EAASI,YAAS1b,EACjF,GAEA0wC,EAAQg/E,YAEDx4H,CACT,CAEA,SAAS65H,GAAS1xG,GAChB,SAAUA,IAASA,EAAM2xG,WAC3B,CAWA,SAASC,GAAch4G,EAASuuC,EAAQggE,GAEtCD,EAAW/sG,KAAKryB,KAAiB,MAAX8wB,EAAkB,WAAaA,EAASsuG,EAAW2J,aAAc1pE,EAAQggE,GAC/Fr/H,KAAKwB,KAAO,eACd,CAeA,SAASwnI,GAAO33G,EAASg6C,EAAQl4C,GAC/B,MAAMyyG,EAAiBzyG,EAASksC,OAAOumE,eAClCzyG,EAASI,QAAWqyG,IAAkBA,EAAezyG,EAASI,QAGjE83C,EAAO,IAAI+zD,EACT,mCAAqCjsG,EAASI,OAC9C,CAAC6rG,EAAW6J,gBAAiB7J,EAAWmG,kBAAkBzjI,KAAKgB,MAAMqwB,EAASI,OAAS,KAAO,GAC9FJ,EAASksC,OACTlsC,EAASksG,QACTlsG,IAPF9B,EAAQ8B,EAUZ,CA1BAyoG,EAAQkB,SAASgM,GAAe1J,EAAY,CAC1CyJ,YAAY,IA+Hd,MAAMK,GAAuB,CAACvvD,EAAUwvD,EAAkBC,EAAO,KAC/D,IAAIC,EAAgB,EACpB,MAAMC,EA3FR,SAAqBC,EAAchkI,GACjCgkI,EAAeA,GAAgB,GAC/B,MAAMpd,EAAQ,IAAIlxG,MAAMsuH,GAClBC,EAAa,IAAIvuH,MAAMsuH,GAC7B,IAEIE,EAFAC,EAAO,EACPC,EAAO,EAKX,OAFApkI,OAAcsS,IAARtS,EAAoBA,EAAM,IAEzB,SAAcqkI,GACnB,MAAM1kI,EAAMD,KAAKC,MAEX2kI,EAAYL,EAAWG,GAExBF,IACHA,EAAgBvkI,GAGlBinH,EAAMud,GAAQE,EACdJ,EAAWE,GAAQxkI,EAEnB,IAAIc,EAAI2jI,EACJG,EAAa,EAEjB,KAAO9jI,IAAM0jI,GACXI,GAAc3d,EAAMnmH,KACpBA,GAAQujI,EASV,GANAG,GAAQA,EAAO,GAAKH,EAEhBG,IAASC,IACXA,GAAQA,EAAO,GAAKJ,GAGlBrkI,EAAMukI,EAAgBlkI,EACxB,OAGF,MAAMwkI,EAASF,GAAa3kI,EAAM2kI,EAElC,OAAOE,EAASjoI,KAAKwC,MAAmB,IAAbwlI,EAAoBC,QAAUlyH,CAC3D,CACF,CA+CuBmyH,CAAY,GAAI,KAErC,OAzCF,SAAkBxtC,EAAI4sC,GACpB,IAEIa,EACA73D,EAHAo/C,EAAY,EACZ0Y,EAAY,IAAOd,EAIvB,MAAMe,EAAS,CAAClqC,EAAM/6F,EAAMD,KAAKC,SAC/BssH,EAAYtsH,EACZ+kI,EAAW,KACP73D,IACFjO,aAAaiO,GACbA,EAAQ,MA8BInrE,KACd,MAAMqxG,EAASrxG,EAAEqxG,OACXjsF,EAAQplB,EAAEmjI,iBAAmBnjI,EAAEolB,WAAQxU,EACvCwyH,EAAgB/xB,EAAS+wB,EACzB3tC,EAAO4tC,EAAae,GAG1BhB,EAAgB/wB,EAchB3+B,EAZa,CACX2+B,SACAjsF,QACAk6C,SAAUl6C,EAASisF,EAASjsF,OAASxU,EACrCs0G,MAAOke,EACP3uC,KAAMA,QAAc7jF,EACpByyH,UAAW5uC,GAAQrvE,GAVLisF,GAAUjsF,GAUeA,EAAQisF,GAAU5c,OAAO7jF,EAChEk/C,MAAO9vD,EACPmjI,iBAA2B,MAAT/9G,EAClB,CAAC88G,EAAmB,WAAa,WAAW,KA9C9C3sC,IAAMyD,IAqBR,MAAO,CAlBW,IAAIA,KACpB,MAAM/6F,EAAMD,KAAKC,MACX6kI,EAAS7kI,EAAMssH,EAChBuY,GAAUG,EACbC,EAAOlqC,EAAM/6F,IAEb+kI,EAAWhqC,EACN7tB,IACHA,EAAQnuD,WAAW,KACjBmuD,EAAQ,KACR+3D,EAAOF,IACNC,EAAYH,MAKP,IAAME,GAAYE,EAAOF,GAGzC,CAMSM,CAAStjI,EAsBbmiI,IAGCoB,GAAyB,CAACn+G,EAAOo+G,KACrC,MAAML,EAA4B,MAAT/9G,EAEzB,MAAO,CAAEisF,GAAWmyB,EAAU,GAAG,CAC/BL,mBACA/9G,QACAisF,WACEmyB,EAAU,KAGVC,GAAkBluC,GAAO,IAAIyD,IAAS27B,EAAQH,KAAK,IAAMj/B,KAAMyD,IAErE,IAAI0qC,GAAkBvnC,GAASggC,sBAAwB,EAAEK,EAAQmH,IAAY3sC,IAC3EA,EAAM,IAAI8vB,IAAI9vB,EAAKmF,GAASqgC,QAG1BA,EAAO14F,WAAakzD,EAAIlzD,UACxB04F,EAAOoH,OAAS5sC,EAAI4sC,OACnBD,GAAUnH,EAAOqH,OAAS7sC,EAAI6sC,OANoB,CASrD,IAAI/c,IAAI3qB,GAASqgC,QACjBrgC,GAASltF,WAAa,kBAAkBotC,KAAK8/C,GAASltF,UAAUC,YAC9D,KAAM,EAEN40H,GAAU3nC,GAASggC,sBAGrB,CACE,KAAA4H,CAAMxpI,EAAM01B,EAAO+zG,EAAS9nD,EAAM+nD,EAAQC,GACxC,MAAMplE,EAAS,CAACvkE,EAAO,IAAM6sH,mBAAmBn3F,IAEhD0kG,EAAQvC,SAAS4R,IAAYllE,EAAO/7D,KAAK,WAAa,IAAI/E,KAAKgmI,GAASG,eAExExP,EAAQ34E,SAASkgC,IAASpd,EAAO/7D,KAAK,QAAUm5E,GAEhDy4C,EAAQ34E,SAASioF,IAAWnlE,EAAO/7D,KAAK,UAAYkhI,IAEzC,IAAXC,GAAmBplE,EAAO/7D,KAAK,UAE/BmiD,SAAS4Z,OAASA,EAAOwC,KAAK,KAChC,EAEA,IAAA8iE,CAAK7pI,GACH,MAAMkjD,EAAQyH,SAAS4Z,OAAOrhB,MAAM,IAAI4mF,OAAO,aAAe9pI,EAAO,cACrE,OAAQkjD,EAAQ6mF,mBAAmB7mF,EAAM,IAAM,IACjD,EAEA,MAAApjC,CAAO9f,GACLxB,KAAKgrI,MAAMxpI,EAAM,GAAIyD,KAAKC,MAAQ,MACpC,GAMF,CACE,KAAA8lI,GAAS,EACTK,KAAI,IACK,KAET,MAAA/pH,GAAU,GAyCd,SAASkqH,GAAc59F,EAAS69F,EAAcC,GAC5C,IAAIC,GA5BG,8BAA8BroF,KA4BFmoF,GACnC,OAAI79F,IAAY+9F,GAAsC,GAArBD,GAlBnC,SAAqB99F,EAASg+F,GAC5B,OAAOA,EACHh+F,EAAQsW,QAAQ,SAAU,IAAM,IAAM0nF,EAAY1nF,QAAQ,OAAQ,IAClEtW,CACN,CAeWi+F,CAAYj+F,EAAS69F,GAEvBA,CACT,CAEA,MAAMK,GAAmBhT,GAAUA,aAAiB2P,GAAiB,IAAK3P,GAAUA,EAWpF,SAASiT,GAAYC,EAASC,GAE5BA,EAAUA,GAAW,CAAC,EACtB,MAAM5sE,EAAS,CAAC,EAEhB,SAAS6sE,EAAen0G,EAAQnI,EAAQyzB,EAAMo5E,GAC5C,OAAIb,EAAQrC,cAAcxhG,IAAW6jG,EAAQrC,cAAc3pG,GAClDgsG,EAAQY,MAAMnqG,KAAK,CAACoqG,YAAW1kG,EAAQnI,GACrCgsG,EAAQrC,cAAc3pG,GACxBgsG,EAAQY,MAAM,CAAC,EAAG5sG,GAChBgsG,EAAQprG,QAAQZ,GAClBA,EAAO9H,QAET8H,CACT,CAGA,SAASu8G,EAAoBj9H,EAAGC,EAAGk0C,EAAOo5E,GACxC,OAAKb,EAAQ3C,YAAY9pH,GAEbysH,EAAQ3C,YAAY/pH,QAAzB,EACEg9H,OAAer0H,EAAW3I,EAAGm0C,EAAOo5E,GAFpCyP,EAAeh9H,EAAGC,EAAGk0C,EAAOo5E,EAIvC,CAGA,SAAS2P,EAAiBl9H,EAAGC,GAC3B,IAAKysH,EAAQ3C,YAAY9pH,GACvB,OAAO+8H,OAAer0H,EAAW1I,EAErC,CAGA,SAASk9H,EAAiBn9H,EAAGC,GAC3B,OAAKysH,EAAQ3C,YAAY9pH,GAEbysH,EAAQ3C,YAAY/pH,QAAzB,EACEg9H,OAAer0H,EAAW3I,GAF1Bg9H,OAAer0H,EAAW1I,EAIrC,CAGA,SAASm9H,EAAgBp9H,EAAGC,EAAGk0C,GAC7B,OAAIA,KAAQ4oF,EACHC,EAAeh9H,EAAGC,GAChBk0C,KAAQ2oF,EACVE,OAAer0H,EAAW3I,QAD5B,CAGT,CAEA,MAAMq9H,EAAW,CACftuC,IAAKmuC,EACLtwC,OAAQswC,EACRr9H,KAAMq9H,EACNx+F,QAASy+F,EACThI,iBAAkBgI,EAClBlH,kBAAmBkH,EACnBG,iBAAkBH,EAClB5tC,QAAS4tC,EACTI,eAAgBJ,EAChBrwC,gBAAiBqwC,EACjBK,cAAeL,EACfjI,QAASiI,EACTxpC,aAAcwpC,EACd7G,eAAgB6G,EAChB5G,eAAgB4G,EAChBM,iBAAkBN,EAClBO,mBAAoBP,EACpBQ,WAAYR,EACZ3G,iBAAkB2G,EAClB1G,cAAe0G,EACfS,eAAgBT,EAChBU,UAAWV,EACXW,UAAWX,EACXY,WAAYZ,EACZa,YAAab,EACbc,WAAYd,EACZe,iBAAkBf,EAClBzG,eAAgB0G,EAChB/jF,QAAS,CAACr5C,EAAGC,EAAIk0C,IAAS8oF,EAAoBL,GAAgB58H,GAAI48H,GAAgB38H,GAAGk0C,GAAM,IAS7F,OANAu4E,EAAQr6H,QAAQkb,OAAO+2C,KAAK,IAAIw4E,KAAYC,IAAW,SAA4B5oF,GACjF,MAAMm5E,EAAQ+P,EAASlpF,IAAS8oF,EAC1BkB,EAAc7Q,EAAMwP,EAAQ3oF,GAAO4oF,EAAQ5oF,GAAOA,GACvDu4E,EAAQ3C,YAAYoU,IAAgB7Q,IAAU8P,IAAqBjtE,EAAOhc,GAAQgqF,EACrF,GAEOhuE,CACT,CAEA,IAAIiuE,GAAiBjuE,IACnB,MAAMkuE,EAAYxB,GAAY,CAAC,EAAG1sE,GAElC,IAAI,KAAEtwD,EAAI,cAAE29H,EAAa,eAAEjH,EAAc,eAAED,EAAc,QAAEj9E,EAAO,KAAEilF,GAASD,EAa7E,GAXAA,EAAUhlF,QAAUA,EAAUkgF,GAAe76G,KAAK26B,GAElDglF,EAAUtvC,IAAM0jC,GAAS6J,GAAc+B,EAAU3/F,QAAS2/F,EAAUtvC,IAAKsvC,EAAU7B,mBAAoBrsE,EAAOglD,OAAQhlD,EAAOmtE,kBAGzHgB,GACFjlF,EAAQn4C,IAAI,gBAAiB,SAC3Bq9H,MAAMD,EAAKE,UAAY,IAAM,KAAOF,EAAKG,SAAWvf,SAASC,mBAAmBmf,EAAKG,WAAa,MAIlG/R,EAAQC,WAAW9sH,GACrB,GAAIq0F,GAASggC,uBAAyBhgC,GAASkgC,+BAC7C/6E,EAAQm8E,oBAAe7sH,QAClB,GAAI+jH,EAAQS,WAAWttH,EAAK6+H,YAAa,CAE9C,MAAMC,EAAc9+H,EAAK6+H,aAEnBE,EAAiB,CAAC,eAAgB,kBACxCrxH,OAAOmB,QAAQiwH,GAAatsI,QAAQ,EAAEi0B,EAAKwC,MACrC81G,EAAen4G,SAASH,EAAIE,gBAC9B6yB,EAAQn4C,IAAIolB,EAAKwC,IAGvB,CAOF,GAAIorE,GAASggC,wBACXsJ,GAAiB9Q,EAAQS,WAAWqQ,KAAmBA,EAAgBA,EAAca,IAEjFb,IAAoC,IAAlBA,GAA2B/B,GAAgB4C,EAAUtvC,MAAO,CAEhF,MAAM8vC,EAAYtI,GAAkBD,GAAkBuF,GAAQM,KAAK7F,GAE/DuI,GACFxlF,EAAQn4C,IAAIq1H,EAAgBsI,EAEhC,CAGF,OAAOR,GAKLS,GAFoD,oBAAnBprC,gBAEK,SAAUvjC,GAClD,OAAO,IAAIjuC,QAAQ,SAA4BC,EAASg6C,GACtD,MAAM4iE,EAAUX,GAAcjuE,GAC9B,IAAI6uE,EAAcD,EAAQl/H,KAC1B,MAAMo/H,EAAiB1F,GAAe76G,KAAKqgH,EAAQ1lF,SAASg/E,YAC5D,IACI6G,EACAC,EAAiBC,EACjBC,EAAaC,GAHb,aAAC3rC,EAAY,iBAAE8pC,EAAgB,mBAAEC,GAAsBqB,EAK3D,SAASrQ,IACP2Q,GAAeA,IACfC,GAAiBA,IAEjBP,EAAQf,aAAee,EAAQf,YAAYuB,YAAYL,GAEvDH,EAAQS,QAAUT,EAAQS,OAAO72G,oBAAoB,QAASu2G,EAChE,CAEA,IAAI/O,EAAU,IAAIz8B,eAOlB,SAAS+rC,IACP,IAAKtP,EACH,OAGF,MAAMuP,EAAkBnG,GAAe76G,KACrC,0BAA2ByxG,GAAWA,EAAQwP,yBAahD7F,GAAO,SAAkB9xG,GACvB7F,EAAQ6F,GACR0mG,GACF,EAAG,SAAiBhyD,GAClBP,EAAOO,GACPgyD,GACF,EAfiB,CACf7uH,KAHoB8zF,GAAiC,SAAjBA,GAA4C,SAAjBA,EACxCw8B,EAAQlsG,SAA/BksG,EAAQyP,aAGRv7G,OAAQ8rG,EAAQ9rG,OAChBw7G,WAAY1P,EAAQ0P,WACpBxmF,QAASqmF,EACTvvE,SACAggE,YAYFA,EAAU,IACZ,CAlCAA,EAAQl/H,KAAK8tI,EAAQnyC,OAAO/yE,cAAeklH,EAAQhwC,KAAK,GAGxDohC,EAAQ5gC,QAAUwvC,EAAQxvC,QAiCtB,cAAe4gC,EAEjBA,EAAQsP,UAAYA,EAGpBtP,EAAQ2P,mBAAqB,WACtB3P,GAAkC,IAAvBA,EAAQ9/B,aAQD,IAAnB8/B,EAAQ9rG,QAAkB8rG,EAAQ4P,aAAwD,IAAzC5P,EAAQ4P,YAAY9nI,QAAQ,WAKjF8c,WAAW0qH,EACb,EAIFtP,EAAQ6P,QAAU,WACX7P,IAILh0D,EAAO,IAAI+zD,EAAW,kBAAmBA,EAAW+P,aAAc9vE,EAAQggE,IAG1EA,EAAU,KACZ,EAGFA,EAAQ1zD,QAAU,SAAqB5U,GAIlC,MACM6U,EAAM,IAAIwzD,EADJroE,GAASA,EAAMjmC,QAAUimC,EAAMjmC,QAAU,gBACrBsuG,EAAWgQ,YAAa/vE,EAAQggE,GAEhEzzD,EAAI7U,MAAQA,GAAS,KACrBsU,EAAOO,GACPyzD,EAAU,IACb,EAGAA,EAAQgQ,UAAY,WAClB,IAAIC,EAAsBrB,EAAQxvC,QAAU,cAAgBwvC,EAAQxvC,QAAU,cAAgB,mBAC9F,MAAM0lC,EAAe8J,EAAQ9J,cAAgBzB,GACzCuL,EAAQqB,sBACVA,EAAsBrB,EAAQqB,qBAEhCjkE,EAAO,IAAI+zD,EACTkQ,EACAnL,EAAatB,oBAAsBzD,EAAWmQ,UAAYnQ,EAAW+P,aACrE9vE,EACAggE,IAGFA,EAAU,IACZ,OAGgBxnH,IAAhBq2H,GAA6BC,EAAezJ,eAAe,MAGvD,qBAAsBrF,GACxBzD,EAAQr6H,QAAQ4sI,EAAe5O,SAAU,SAA0BvnG,EAAKxC,GACtE6pG,EAAQv8B,iBAAiBttE,EAAKwC,EAChC,GAIG4jG,EAAQ3C,YAAYgV,EAAQjyC,mBAC/BqjC,EAAQrjC,kBAAoBiyC,EAAQjyC,iBAIlC6G,GAAiC,SAAjBA,IAClBw8B,EAAQx8B,aAAeorC,EAAQprC,cAI7B+pC,KACA0B,EAAmBE,GAAiBtF,GAAqB0D,GAAoB,GAC/EvN,EAAQvoG,iBAAiB,WAAYw3G,IAInC3B,GAAoBtN,EAAQmQ,UAC5BnB,EAAiBE,GAAerF,GAAqByD,GAEvDtN,EAAQmQ,OAAO14G,iBAAiB,WAAYu3G,GAE5ChP,EAAQmQ,OAAO14G,iBAAiB,UAAWy3G,KAGzCN,EAAQf,aAAee,EAAQS,UAGjCN,EAAaqB,IACNpQ,IAGLh0D,GAAQokE,GAAUA,EAAO1rI,KAAO,IAAI+kI,GAAc,KAAMzpE,EAAQggE,GAAWoQ,GAC3EpQ,EAAQqQ,QACRrQ,EAAU,OAGZ4O,EAAQf,aAAee,EAAQf,YAAYyC,UAAUvB,GACjDH,EAAQS,SACVT,EAAQS,OAAOkB,QAAUxB,IAAeH,EAAQS,OAAO53G,iBAAiB,QAASs3G,KAIrF,MAAMrjG,EA1jBV,SAAuBkzD,GACrB,MAAMv5C,EAAQ,4BAA4BE,KAAKq5C,GAC/C,OAAOv5C,GAASA,EAAM,IAAM,EAC9B,CAujBqBmrF,CAAc5B,EAAQhwC,KAEnClzD,IAAsD,IAA1Cq4D,GAAS8/B,UAAU/7H,QAAQ4jC,GACzCsgC,EAAO,IAAI+zD,EAAW,wBAA0Br0F,EAAW,IAAKq0F,EAAW6J,gBAAiB5pE,IAM9FggE,EAAQr8B,KAAKkrC,GAAe,KAC9B,EACF,EA6CI4B,GA3CmB,CAACC,EAAStxC,KAC/B,MAAM,OAAC19F,GAAWgvI,EAAUA,EAAUA,EAAQrvI,OAAOsvI,SAAW,GAEhE,GAAIvxC,GAAW19F,EAAQ,CACrB,IAEI6uI,EAFAK,EAAa,IAAIC,gBAIrB,MAAMhB,EAAU,SAAUiB,GACxB,IAAKP,EAAS,CACZA,GAAU,EACVnB,IACA,MAAM7iE,EAAMukE,aAAkB78G,MAAQ68G,EAASnwI,KAAKmwI,OACpDF,EAAWP,MAAM9jE,aAAewzD,EAAaxzD,EAAM,IAAIk9D,GAAcl9D,aAAet4C,MAAQs4C,EAAI96C,QAAU86C,GAC5G,CACF,EAEA,IAAIwG,EAAQqsB,GAAWx6E,WAAW,KAChCmuD,EAAQ,KACR88D,EAAQ,IAAI9P,EAAW,WAAW3gC,mBAA0B2gC,EAAWmQ,aACtE9wC,GAEH,MAAMgwC,EAAc,KACdsB,IACF39D,GAASjO,aAAaiO,GACtBA,EAAQ,KACR29D,EAAQxuI,QAAQmtI,IACdA,EAAOD,YAAcC,EAAOD,YAAYS,GAAWR,EAAO72G,oBAAoB,QAASq3G,KAEzFa,EAAU,OAIdA,EAAQxuI,QAASmtI,GAAWA,EAAO53G,iBAAiB,QAASo4G,IAE7D,MAAM,OAACR,GAAUuB,EAIjB,OAFAvB,EAAOD,YAAc,IAAM7S,EAAQH,KAAKgT,GAEjCC,CACT,GAKF,MAAM0B,GAAc,UAAWC,EAAOC,GACpC,IAAI14G,EAAMy4G,EAAME,WAEhB,IAAKD,GAAa14G,EAAM04G,EAEtB,kBADMD,GAIR,IACInzG,EADAvhB,EAAM,EAGV,KAAOA,EAAMic,GACXsF,EAAMvhB,EAAM20H,QACND,EAAMvoH,MAAMnM,EAAKuhB,GACvBvhB,EAAMuhB,CAEV,EA4BMszG,GAAc,CAACC,EAAQH,EAAWI,EAAYC,KAClD,MAAMjY,EA3BU5qF,gBAAiB8iG,EAAUN,GAC3C,UAAW,MAAMD,KAKAviG,gBAAiB2iG,GAClC,GAAIA,EAAO7X,OAAOiY,eAEhB,kBADOJ,GAIT,MAAMK,EAASL,EAAOM,YACtB,IACE,OAAS,CACP,MAAM,KAACnT,EAAI,MAAE1mG,SAAe45G,EAAOzF,OACnC,GAAIzN,EACF,YAEI1mG,CACR,CACF,CAAE,cACM45G,EAAOrB,QACf,CACF,CAvB4BuB,CAAWJ,SAC5BR,GAAYC,EAAOC,EAE9B,CAuBmBW,CAAUR,EAAQH,GAEnC,IACI1S,EADAzR,EAAQ,EAER+kB,EAAajqI,IACV22H,IACHA,GAAO,EACP+S,GAAYA,EAAS1pI,KAIzB,OAAO,IAAIkqI,eAAe,CACxB,UAAMC,CAAKnB,GACT,IACE,MAAM,KAACrS,EAAI,MAAE1mG,SAAewhG,EAASh8E,OAErC,GAAIkhF,EAGF,OAFDsT,SACCjB,EAAWvyH,QAIb,IAAIka,EAAMV,EAAMq5G,WAChB,GAAIG,EAAY,CACd,IAAIW,EAAcllB,GAASv0F,EAC3B84G,EAAWW,EACb,CACApB,EAAWqB,QAAQ,IAAI5uC,WAAWxrE,GACpC,CAAE,MAAO00C,GAEP,MADAslE,EAAUtlE,GACJA,CACR,CACF,EACA6jE,OAAOU,IACLe,EAAUf,GACHzX,EAAS6Y,WAEjB,CACDC,cAAe,MAMb,WAACnV,IAAcT,EAEf6V,GAAiB,GAAGC,UAASC,eAAc,CAC/CD,UAASC,aADY,CAEnB/V,EAAQiD,SAGVsS,eAAgBS,GAAgB,YAAEC,IAChCjW,EAAQiD,OAGNv7E,GAAO,CAACk5C,KAAOyD,KACnB,IACE,QAASzD,KAAMyD,EACjB,CAAE,MAAOh5F,GACP,OAAO,CACT,GAGI6qI,GAAW9M,IACfA,EAAMpJ,EAAQY,MAAMnqG,KAAK,CACvBqqG,eAAe,GACd+U,GAAgBzM,GAEnB,MAAO5xG,MAAO2+G,EAAQ,QAAEL,EAAO,SAAEC,GAAY3M,EACvCgN,EAAmBD,EAAW1V,GAAW0V,GAA6B,mBAAV3+G,MAC5D6+G,EAAqB5V,GAAWqV,GAChCQ,EAAsB7V,GAAWsV,GAEvC,IAAKK,EACH,OAAO,EAGT,MAAMG,EAA4BH,GAAoB3V,GAAWuV,IAE3DQ,EAAaJ,IAA4C,mBAAhBH,IACzC5P,EAA0C,IAAI4P,GAAjChuF,GAAQo+E,EAAQP,OAAO79E,IACtC/V,MAAO+V,GAAQ,IAAI6+C,iBAAiB,IAAIgvC,EAAQ7tF,GAAKrwB,gBADrD,IAAEyuG,EAIN,MAAMoQ,EAAwBJ,GAAsBE,GAA6B7uF,GAAK,KACpF,IAAIgvF,GAAiB,EAErB,MAAMC,EAAiB,IAAIb,EAAQtuC,GAASqgC,OAAQ,CAClD3R,KAAM,IAAI8f,GACV91C,OAAQ,OACR,UAAI02C,GAEF,OADAF,GAAiB,EACV,MACT,IACC/pF,QAAQp4C,IAAI,gBAEf,OAAOmiI,IAAmBC,IAGtBE,EAAyBP,GAAuBC,GACpD7uF,GAAK,IAAMs4E,EAAQ/B,iBAAiB,IAAI8X,EAAS,IAAI7f,OAEjD4gB,EAAY,CAChBjC,OAAQgC,GAA0B,CAAEtsF,GAAQA,EAAI2rE,OAGlDkgB,GACE,CAAC,OAAQ,cAAe,OAAQ,WAAY,UAAUzwI,QAAQwC,KAC3D2uI,EAAU3uI,KAAU2uI,EAAU3uI,GAAQ,CAACoiD,EAAKkZ,KAC3C,IAAIy8B,EAAS31C,GAAOA,EAAIpiD,GAExB,GAAI+3F,EACF,OAAOA,EAAOzpE,KAAK8zB,GAGrB,MAAM,IAAIi5E,EAAW,kBAAkBr7H,sBAA0Bq7H,EAAWuT,gBAAiBtzE,OAyCnG,OAAOvxB,MAAOuxB,IACZ,IAAI,IACF4+B,EAAG,OACHnC,EAAM,KACN/sF,EAAI,OACJ2/H,EAAM,YACNxB,EAAW,QACXzuC,EAAO,mBACPmuC,EAAkB,iBAClBD,EAAgB,aAChB9pC,EAAY,QACZt6C,EAAO,gBACPyzC,EAAkB,cAAa,aAC/B42C,GACEtF,GAAcjuE,GAEdwzE,EAASd,GAAY3+G,MAEzByvE,EAAeA,GAAgBA,EAAe,IAAIntE,cAAgB,OAElE,IAAIo9G,EAAiBhD,GAAiB,CAACpB,EAAQxB,GAAeA,EAAY6F,iBAAkBt0C,GAExF4gC,EAAU,KAEd,MAAMoP,EAAcqE,GAAkBA,EAAerE,aAAe,MAClEqE,EAAerE,aAChB,GAED,IAAIuE,EAEJ,IACE,GACErG,GAAoB0F,GAAoC,QAAXv2C,GAA+B,SAAXA,GACG,KAAnEk3C,OAvCmBllG,OAAOya,EAASupE,KACxC,MAAM/wH,EAAS66H,EAAQ8C,eAAen2E,EAAQ0qF,oBAE9C,OAAiB,MAAVlyI,EAjCa+sC,OAAOgkF,IAC3B,GAAY,MAARA,EACF,OAAO,EAGT,GAAI8J,EAAQlC,OAAO5H,GACjB,OAAOA,EAAKt0G,KAGd,GAAIo+G,EAAQkD,oBAAoBhN,GAAO,CACrC,MAAMohB,EAAW,IAAIxB,EAAQtuC,GAASqgC,OAAQ,CAC5C3nC,OAAQ,OACRg2B,SAEF,aAAcohB,EAAS1/G,eAAe+8G,UACxC,CAEA,OAAI3U,EAAQI,kBAAkBlK,IAAS8J,EAAQxC,cAActH,GACpDA,EAAKye,YAGV3U,EAAQhC,kBAAkB9H,KAC5BA,GAAc,IAGZ8J,EAAQ34E,SAAS6uE,UACLsgB,EAAWtgB,IAAOye,gBADlC,IAQwB4C,CAAcrhB,GAAQ/wH,GAoCZqyI,CAAkB7qF,EAASx5C,IACzD,CACA,IAMIskI,EANAH,EAAW,IAAIxB,EAAQzzC,EAAK,CAC9BnC,OAAQ,OACRg2B,KAAM/iH,EACNyjI,OAAQ,SASV,GAJI5W,EAAQC,WAAW9sH,KAAUskI,EAAoBH,EAAS3qF,QAAQ55C,IAAI,kBACxE45C,EAAQm8E,eAAe2O,GAGrBH,EAASphB,KAAM,CACjB,MAAO4e,EAAY4C,GAAS9I,GAC1BwI,EACA9J,GAAqBwB,GAAeiC,KAGtC59H,EAAOyhI,GAAY0C,EAASphB,KAvKX,MAuKqC4e,EAAY4C,EACpE,CACF,CAEK1X,EAAQ34E,SAAS+4C,KACpBA,EAAkBA,EAAkB,UAAY,QAKlD,MAAMu3C,EAAyBtB,GAAsB,gBAAiBP,EAAQxzH,UAExEs1H,EAAkB,IACnBZ,EACHlE,OAAQoE,EACRh3C,OAAQA,EAAO/yE,cACfw/B,QAASA,EAAQg/E,YAAYhI,SAC7BzN,KAAM/iH,EACNyjI,OAAQ,OACRiB,YAAaF,EAAyBv3C,OAAkBnkF,GAG1DwnH,EAAU4S,GAAsB,IAAIP,EAAQzzC,EAAKu1C,GAEjD,IAAIrgH,QAAkB8+G,EAAqBY,EAAOxT,EAASuT,GAAgBC,EAAO50C,EAAKu1C,IAEvF,MAAME,EAAmBjB,IAA4C,WAAjB5vC,GAA8C,aAAjBA,GAEjF,GAAI4vC,IAA2B7F,GAAuB8G,GAAoBjF,GAAe,CACvF,MAAMviB,EAAU,CAAC,EAEjB,CAAC,SAAU,aAAc,WAAW3qH,QAAQ8hD,IAC1C6oE,EAAQ7oE,GAAQlwB,EAASkwB,KAG3B,MAAMswF,EAAwB/X,EAAQ8C,eAAevrG,EAASo1B,QAAQ55C,IAAI,oBAEnE+hI,EAAY4C,GAAS1G,GAAsBpC,GAChDmJ,EACAzK,GAAqBwB,GAAekC,IAAqB,KACtD,GAELz5G,EAAW,IAAIw+G,EACbnB,GAAYr9G,EAAS2+F,KAlNJ,MAkN8B4e,EAAY,KACzD4C,GAASA,IACT7E,GAAeA,MAEjBviB,EAEJ,CAEArpB,EAAeA,GAAgB,OAE/B,IAAI+wC,QAAqBlB,EAAU9W,EAAQzB,QAAQuY,EAAW7vC,IAAiB,QAAQ1vE,EAAUksC,GAIjG,OAFCq0E,GAAoBjF,GAAeA,UAEvB,IAAIr9G,QAAQ,CAACC,EAASg6C,KACjC29D,GAAO33G,EAASg6C,EAAQ,CACtBt8D,KAAM6kI,EACNrrF,QAASkgF,GAAe76G,KAAKuF,EAASo1B,SACtCh1B,OAAQJ,EAASI,OACjBw7G,WAAY57G,EAAS47G,WACrB1vE,SACAggE,aAGN,CAAE,MAAOzzD,GAGP,GAFA6iE,GAAeA,IAEX7iE,GAAoB,cAAbA,EAAIpqE,MAAwB,qBAAqB8hD,KAAKsoB,EAAI96C,SACnE,MAAMrU,OAAOuS,OACX,IAAIowG,EAAW,gBAAiBA,EAAWgQ,YAAa/vE,EAAQggE,GAChE,CACEe,MAAOx0D,EAAIw0D,OAASx0D,IAK1B,MAAMwzD,EAAWxxG,KAAKg+C,EAAKA,GAAOA,EAAI+K,KAAMtX,EAAQggE,EACtD,IAIEwU,GAAY,IAAIvmI,IAEhBwmI,GAAYz0E,IAChB,IAAI2lE,EAAM3lE,EAASA,EAAO2lE,IAAM,CAAC,EACjC,MAAM,MAAC5xG,EAAK,QAAEs+G,EAAO,SAAEC,GAAY3M,EAC7B+O,EAAQ,CACZrC,EAASC,EAAUv+G,GAGrB,IACE++C,EAAMp6C,EADgB/xB,EAAd+tI,EAAMhzI,OACA+N,EAAM+kI,GAEtB,KAAO7tI,KACLmsE,EAAO4hE,EAAM/tI,GACb+xB,EAASjpB,EAAIH,IAAIwjE,QAENt6D,IAAXkgB,GAAwBjpB,EAAIsB,IAAI+hE,EAAMp6C,EAAU/xB,EAAI,IAAIsH,IAAQwkI,GAAQ9M,IAExEl2H,EAAMipB,EAGR,OAAOA,GAGT+7G,KAEA,MAAME,GAAgB,CACpBC,KAlnEgB,KAmnEhBl4C,IAAKiyC,GACL56G,MAAO,CACLzkB,IAAKmlI,KAITlY,EAAQr6H,QAAQyyI,GAAe,CAACx3C,EAAItlE,KAClC,GAAIslE,EAAI,CACN,IACE//E,OAAOugH,eAAexgC,EAAI,OAAQ,CAACtlE,SACrC,CAAE,MAAOjwB,GAET,CACAwV,OAAOugH,eAAexgC,EAAI,cAAe,CAACtlE,SAC5C,IAGF,MAAMg9G,GAAgB/D,GAAW,KAAKA,IAEhCgE,GAAoB/P,GAAYxI,EAAQS,WAAW+H,IAAwB,OAAZA,IAAgC,IAAZA,EAEzF,IAAIgQ,GACU,CAACA,EAAU/0E,KACrB+0E,EAAWxY,EAAQprG,QAAQ4jH,GAAYA,EAAW,CAACA,GAEnD,MAAM,OAACrzI,GAAUqzI,EACjB,IAAIC,EACAjQ,EAEJ,MAAMkQ,EAAkB,CAAC,EAEzB,IAAK,IAAItuI,EAAI,EAAGA,EAAIjF,EAAQiF,IAAK,CAE/B,IAAImU,EAIJ,GALAk6H,EAAgBD,EAASpuI,GAGzBo+H,EAAUiQ,GAELF,GAAiBE,KACpBjQ,EAAU4P,IAAe75H,EAAKojH,OAAO8W,IAAgB3+G,oBAErC7d,IAAZusH,GACF,MAAM,IAAIhF,EAAW,oBAAoBjlH,MAI7C,GAAIiqH,IAAYxI,EAAQS,WAAW+H,KAAaA,EAAUA,EAAQz1H,IAAI0wD,KACpE,MAGFi1E,EAAgBn6H,GAAM,IAAMnU,GAAKo+H,CACnC,CAEA,IAAKA,EAAS,CAEZ,MAAMmQ,EAAU93H,OAAOmB,QAAQ02H,GAC5BxlI,IAAI,EAAEqL,EAAIjG,KAAW,WAAWiG,OACpB,IAAVjG,EAAkB,sCAAwC,kCAO/D,MAAM,IAAIkrH,EACR,yDALMr+H,EACLwzI,EAAQxzI,OAAS,EAAI,YAAcwzI,EAAQzlI,IAAIolI,IAAc3rE,KAAK,MAAQ,IAAM2rE,GAAaK,EAAQ,IACtG,2BAIA,kBAEJ,CAEA,OAAOnQ,GAYX,SAASoQ,GAA6Bn1E,GAKpC,GAJIA,EAAO6tE,aACT7tE,EAAO6tE,YAAYuH,mBAGjBp1E,EAAOqvE,QAAUrvE,EAAOqvE,OAAOkB,QACjC,MAAM,IAAI9G,GAAc,KAAMzpE,EAElC,CASA,SAASq1E,GAAgBr1E,GAiBvB,OAhBAm1E,GAA6Bn1E,GAE7BA,EAAO9W,QAAUkgF,GAAe76G,KAAKyxC,EAAO9W,SAG5C8W,EAAOtwD,KAAO25H,GAAcr2G,KAC1BgtC,EACAA,EAAOglE,mBAGgD,IAArD,CAAC,OAAQ,MAAO,SAASl9H,QAAQk4D,EAAOy8B,SAC1Cz8B,EAAO9W,QAAQm8E,eAAe,qCAAqC,GAGrD0P,GAAoB/0E,EAAO+kE,SAAW0B,GAAW1B,QAAS/kE,EAEnE+kE,CAAQ/kE,GAAQjtC,KAAK,SAA6Be,GAYvD,OAXAqhH,GAA6Bn1E,GAG7BlsC,EAASpkB,KAAO25H,GAAcr2G,KAC5BgtC,EACAA,EAAO8lE,kBACPhyG,GAGFA,EAASo1B,QAAUkgF,GAAe76G,KAAKuF,EAASo1B,SAEzCp1B,CACT,EAAG,SAA4Bg9G,GAe7B,OAdKvH,GAASuH,KACZqE,GAA6Bn1E,GAGzB8wE,GAAUA,EAAOh9G,WACnBg9G,EAAOh9G,SAASpkB,KAAO25H,GAAcr2G,KACnCgtC,EACAA,EAAO8lE,kBACPgL,EAAOh9G,UAETg9G,EAAOh9G,SAASo1B,QAAUkgF,GAAe76G,KAAKuiH,EAAOh9G,SAASo1B,WAI3Dn3B,QAAQi6C,OAAO8kE,EACxB,EACF,CAEA,MAAMtxF,GAAU,SAEV81F,GAAe,CAAC,EAGtB,CAAC,SAAU,UAAW,SAAU,WAAY,SAAU,UAAUpzI,QAAQ,CAACwC,EAAMiC,KAC7E2uI,GAAa5wI,GAAQ,SAAmB+0H,GACtC,cAAcA,IAAU/0H,GAAQ,KAAOiC,EAAI,EAAI,KAAO,KAAOjC,CAC/D,IAGF,MAAM6wI,GAAqB,CAAC,EAW5BD,GAAaxQ,aAAe,SAAsB0Q,EAAWl8F,EAAS7nB,GACpE,SAASgkH,EAAcC,EAAKC,GAC1B,MAAO,WAAan2F,GAAU,0BAA6Bk2F,EAAM,IAAOC,GAAQlkH,EAAU,KAAOA,EAAU,GAC7G,CAGA,MAAO,CAACoG,EAAO69G,EAAK57H,KAClB,IAAkB,IAAd07H,EACF,MAAM,IAAIzV,EACR0V,EAAcC,EAAK,qBAAuBp8F,EAAU,OAASA,EAAU,KACvEymF,EAAW6V,gBAef,OAXIt8F,IAAYi8F,GAAmBG,KACjCH,GAAmBG,IAAO,EAE1BlrI,QAAQC,KACNgrI,EACEC,EACA,+BAAiCp8F,EAAU,8CAK1Ck8F,GAAYA,EAAU39G,EAAO69G,EAAK57H,GAE7C,EAEAw7H,GAAaO,SAAW,SAAkBC,GACxC,MAAO,CAACj+G,EAAO69G,KAEblrI,QAAQC,KAAK,GAAGirI,gCAAkCI,MAC3C,EAEX,EAmCA,IAAIN,GAAY,CACdO,cAxBF,SAAuBlpB,EAASmpB,EAAQC,GACtC,GAAuB,iBAAZppB,EACT,MAAM,IAAIkT,EAAW,4BAA6BA,EAAWmW,sBAE/D,MAAM/hF,EAAO/2C,OAAO+2C,KAAK04D,GACzB,IAAIlmH,EAAIwtD,EAAKzyD,OACb,KAAOiF,KAAM,GAAG,CACd,MAAM+uI,EAAMvhF,EAAKxtD,GACX6uI,EAAYQ,EAAON,GACzB,GAAIF,EAAW,CACb,MAAM39G,EAAQg1F,EAAQ6oB,GAChB/+H,OAAmB6B,IAAVqf,GAAuB29G,EAAU39G,EAAO69G,EAAK7oB,GAC5D,IAAe,IAAXl2G,EACF,MAAM,IAAIopH,EAAW,UAAY2V,EAAM,YAAc/+H,EAAQopH,EAAWmW,sBAE1E,QACF,CACA,IAAqB,IAAjBD,EACF,MAAM,IAAIlW,EAAW,kBAAoB2V,EAAK3V,EAAWoW,eAE7D,CACF,EAIEC,WAAYd,IAGd,MAAMc,GAAaZ,GAAUY,WAS7B,MAAMC,GACJ,WAAAl2I,CAAYm2I,GACV31I,KAAKkkI,SAAWyR,GAAkB,CAAC,EACnC31I,KAAK41I,aAAe,CAClBvW,QAAS,IAAI6C,GACb/uG,SAAU,IAAI+uG,GAElB,CAUA,aAAM7C,CAAQwW,EAAax2E,GACzB,IACE,aAAar/D,KAAKkzI,SAAS2C,EAAax2E,EAC1C,CAAE,MAAOuM,GACP,GAAIA,aAAet4C,MAAO,CACxB,IAAIwiH,EAAQ,CAAC,EAEbxiH,MAAMgsG,kBAAoBhsG,MAAMgsG,kBAAkBwW,GAAUA,EAAQ,IAAIxiH,MAGxE,MAAM7xB,EAAQq0I,EAAMr0I,MAAQq0I,EAAMr0I,MAAMyiD,QAAQ,QAAS,IAAM,GAC/D,IACO0nB,EAAInqE,MAGEA,IAAU87H,OAAO3xD,EAAInqE,OAAO47H,SAAS57H,EAAMyiD,QAAQ,YAAa,OACzE0nB,EAAInqE,OAAS,KAAOA,GAHpBmqE,EAAInqE,MAAQA,CAKhB,CAAE,MAAOwF,GAET,CACF,CAEA,MAAM2kE,CACR,CACF,CAEA,QAAAsnE,CAAS2C,EAAax2E,GAGO,iBAAhBw2E,GACTx2E,EAASA,GAAU,CAAC,GACb4+B,IAAM43C,EAEbx2E,EAASw2E,GAAe,CAAC,EAG3Bx2E,EAAS0sE,GAAY/rI,KAAKkkI,SAAU7kE,GAEpC,MAAM,aAAC8kE,EAAY,iBAAEqI,EAAgB,QAAEjkF,GAAW8W,OAE7BxnD,IAAjBssH,GACF0Q,GAAUO,cAAcjR,EAAc,CACpCxB,kBAAmB8S,GAAWtR,aAAasR,GAAWM,SACtDnT,kBAAmB6S,GAAWtR,aAAasR,GAAWM,SACtDlT,oBAAqB4S,GAAWtR,aAAasR,GAAWM,WACvD,GAGmB,MAApBvJ,IACE5Q,EAAQS,WAAWmQ,GACrBntE,EAAOmtE,iBAAmB,CACxB3K,UAAW2K,GAGbqI,GAAUO,cAAc5I,EAAkB,CACxC9K,OAAQ+T,GAAWO,SACnBnU,UAAW4T,GAAWO,WACrB,SAK0Bn+H,IAA7BwnD,EAAOqsE,yBAAgF7zH,IAApC7X,KAAKkkI,SAASwH,kBACnErsE,EAAOqsE,kBAAoB1rI,KAAKkkI,SAASwH,kBAEzCrsE,EAAOqsE,mBAAoB,GAG7BmJ,GAAUO,cAAc/1E,EAAQ,CAC9B42E,QAASR,GAAWP,SAAS,WAC7BgB,cAAeT,GAAWP,SAAS,mBAClC,GAGH71E,EAAOy8B,QAAUz8B,EAAOy8B,QAAU97F,KAAKkkI,SAASpoC,QAAU,OAAOpmE,cAGjE,IAAIygH,EAAiB5tF,GAAWqzE,EAAQY,MACtCj0E,EAAQs9E,OACRt9E,EAAQ8W,EAAOy8B,SAGjBvzC,GAAWqzE,EAAQr6H,QACjB,CAAC,SAAU,MAAO,OAAQ,OAAQ,MAAO,QAAS,UACjDu6F,WACQvzC,EAAQuzC,KAInBz8B,EAAO9W,QAAUkgF,GAAe3jF,OAAOqxF,EAAgB5tF,GAGvD,MAAM6tF,EAA0B,GAChC,IAAIC,GAAiC,EACrCr2I,KAAK41I,aAAavW,QAAQ99H,QAAQ,SAAoC+0I,GACjC,mBAAxBA,EAAY9T,UAA0D,IAAhC8T,EAAY9T,QAAQnjE,KAIrEg3E,EAAiCA,GAAkCC,EAAY/T,YAE/E6T,EAAwBppE,QAAQspE,EAAYjU,UAAWiU,EAAYhU,UACrE,GAEA,MAAMiU,EAA2B,GAKjC,IAAIC,EAJJx2I,KAAK41I,aAAaziH,SAAS5xB,QAAQ,SAAkC+0I,GACnEC,EAAyBvsI,KAAKssI,EAAYjU,UAAWiU,EAAYhU,SACnE,GAGA,IACI1qG,EADA5xB,EAAI,EAGR,IAAKqwI,EAAgC,CACnC,MAAMI,EAAQ,CAAC/B,GAAgB31C,KAAK/+F,WAAO6X,GAO3C,IANA4+H,EAAMzpE,WAAWopE,GACjBK,EAAMzsI,QAAQusI,GACd3+G,EAAM6+G,EAAM11I,OAEZy1I,EAAUplH,QAAQC,QAAQguC,GAEnBr5D,EAAI4xB,GACT4+G,EAAUA,EAAQpkH,KAAKqkH,EAAMzwI,KAAMywI,EAAMzwI,MAG3C,OAAOwwI,CACT,CAEA5+G,EAAMw+G,EAAwBr1I,OAE9B,IAAIwsI,EAAYluE,EAEhB,KAAOr5D,EAAI4xB,GAAK,CACd,MAAM8+G,EAAcN,EAAwBpwI,KACtC2wI,EAAaP,EAAwBpwI,KAC3C,IACEunI,EAAYmJ,EAAYnJ,EAC1B,CAAE,MAAOp9G,GACPwmH,EAAWtkH,KAAKryB,KAAMmwB,GACtB,KACF,CACF,CAEA,IACEqmH,EAAU9B,GAAgBriH,KAAKryB,KAAMutI,EACvC,CAAE,MAAOp9G,GACP,OAAOiB,QAAQi6C,OAAOl7C,EACxB,CAKA,IAHAnqB,EAAI,EACJ4xB,EAAM2+G,EAAyBx1I,OAExBiF,EAAI4xB,GACT4+G,EAAUA,EAAQpkH,KAAKmkH,EAAyBvwI,KAAMuwI,EAAyBvwI,MAGjF,OAAOwwI,CACT,CAEA,MAAAI,CAAOv3E,GAGL,OAAOsiE,GADU6J,IADjBnsE,EAAS0sE,GAAY/rI,KAAKkkI,SAAU7kE,IACEzxB,QAASyxB,EAAO4+B,IAAK5+B,EAAOqsE,mBACxCrsE,EAAOglD,OAAQhlD,EAAOmtE,iBAClD,EAIF5Q,EAAQr6H,QAAQ,CAAC,SAAU,MAAO,OAAQ,WAAY,SAA6Bu6F,GAEjF45C,GAAMx3H,UAAU49E,GAAU,SAASmC,EAAK5+B,GACtC,OAAOr/D,KAAKq/H,QAAQ0M,GAAY1sE,GAAU,CAAC,EAAG,CAC5Cy8B,SACAmC,MACAlvF,MAAOswD,GAAU,CAAC,GAAGtwD,OAEzB,CACF,GAEA6sH,EAAQr6H,QAAQ,CAAC,OAAQ,MAAO,SAAU,SAA+Bu6F,GAGvE,SAAS+6C,EAAmBC,GAC1B,OAAO,SAAoB74C,EAAKlvF,EAAMswD,GACpC,OAAOr/D,KAAKq/H,QAAQ0M,GAAY1sE,GAAU,CAAC,EAAG,CAC5Cy8B,SACAvzC,QAASuuF,EAAS,CAChB,eAAgB,uBACd,CAAC,EACL74C,MACAlvF,SAEJ,CACF,CAEA2mI,GAAMx3H,UAAU49E,GAAU+6C,IAE1BnB,GAAMx3H,UAAU49E,EAAS,QAAU+6C,GAAmB,EACxD,GAEA,IAAIE,GAAUrB,GASd,MAAMsB,GACJ,WAAAx3I,CAAYy3I,GACV,GAAwB,mBAAbA,EACT,MAAM,IAAIhsB,UAAU,gCAGtB,IAAIisB,EAEJl3I,KAAKw2I,QAAU,IAAIplH,QAAQ,SAAyBC,GAClD6lH,EAAiB7lH,CACnB,GAEA,MAAMsyB,EAAQ3jD,KAGdA,KAAKw2I,QAAQpkH,KAAKq9G,IAChB,IAAK9rF,EAAMwzF,WAAY,OAEvB,IAAInxI,EAAI29C,EAAMwzF,WAAWp2I,OAEzB,KAAOiF,KAAM,GACX29C,EAAMwzF,WAAWnxI,GAAGypI,GAEtB9rF,EAAMwzF,WAAa,OAIrBn3I,KAAKw2I,QAAQpkH,KAAOglH,IAClB,IAAIC,EAEJ,MAAMb,EAAU,IAAIplH,QAAQC,IAC1BsyB,EAAMgsF,UAAUt+G,GAChBgmH,EAAWhmH,IACVe,KAAKglH,GAMR,OAJAZ,EAAQ/G,OAAS,WACf9rF,EAAM8qF,YAAY4I,EACpB,EAEOb,GAGTS,EAAS,SAAgBnmH,EAASuuC,EAAQggE,GACpC17E,EAAMwsF,SAKVxsF,EAAMwsF,OAAS,IAAIrH,GAAch4G,EAASuuC,EAAQggE,GAClD6X,EAAevzF,EAAMwsF,QACvB,EACF,CAKA,gBAAAsE,GACE,GAAIz0I,KAAKmwI,OACP,MAAMnwI,KAAKmwI,MAEf,CAMA,SAAAR,CAAUh2D,GACJ35E,KAAKmwI,OACPx2D,EAAS35E,KAAKmwI,QAIZnwI,KAAKm3I,WACPn3I,KAAKm3I,WAAWntI,KAAK2vE,GAErB35E,KAAKm3I,WAAa,CAACx9D,EAEvB,CAMA,WAAA80D,CAAY90D,GACV,IAAK35E,KAAKm3I,WACR,OAEF,MAAMj9H,EAAQla,KAAKm3I,WAAWhwI,QAAQwyE,IACvB,IAAXz/D,GACFla,KAAKm3I,WAAWpqE,OAAO7yD,EAAO,EAElC,CAEA,aAAA64H,GACE,MAAM9C,EAAa,IAAIC,gBAEjBR,EAAS9jE,IACbqkE,EAAWP,MAAM9jE,IAOnB,OAJA5rE,KAAK2vI,UAAUD,GAEfO,EAAWvB,OAAOD,YAAc,IAAMzuI,KAAKyuI,YAAYiB,GAEhDO,EAAWvB,MACpB,CAMA,aAAO9+G,GACL,IAAI6/G,EAIJ,MAAO,CACL9rF,MAJY,IAAIqzF,GAAY,SAAkB15F,GAC9CmyF,EAASnyF,CACX,GAGEmyF,SAEJ,EAGF,IAAI6H,GAAgBN,GAwCpB,MAAMO,GAAiB,CACrBC,SAAU,IACVC,mBAAoB,IACpBC,WAAY,IACZC,WAAY,IACZC,GAAI,IACJC,QAAS,IACTC,SAAU,IACVC,4BAA6B,IAC7BC,UAAW,IACXC,aAAc,IACdC,eAAgB,IAChBC,YAAa,IACbC,gBAAiB,IACjBC,OAAQ,IACRC,gBAAiB,IACjBC,iBAAkB,IAClBC,MAAO,IACPC,SAAU,IACVC,YAAa,IACbC,SAAU,IACVC,OAAQ,IACRC,kBAAmB,IACnBC,kBAAmB,IACnBC,WAAY,IACZC,aAAc,IACdC,gBAAiB,IACjBC,UAAW,IACXC,SAAU,IACVC,iBAAkB,IAClBC,cAAe,IACfC,4BAA6B,IAC7BC,eAAgB,IAChBC,SAAU,IACVC,KAAM,IACNC,eAAgB,IAChBC,mBAAoB,IACpBC,gBAAiB,IACjBC,WAAY,IACZC,qBAAsB,IACtBC,oBAAqB,IACrBC,kBAAmB,IACnBC,UAAW,IACXC,mBAAoB,IACpBC,oBAAqB,IACrBC,OAAQ,IACRC,iBAAkB,IAClBC,SAAU,IACVC,gBAAiB,IACjBC,qBAAsB,IACtBC,gBAAiB,IACjBC,4BAA6B,IAC7BC,2BAA4B,IAC5BC,oBAAqB,IACrBC,eAAgB,IAChBC,WAAY,IACZC,mBAAoB,IACpBC,eAAgB,IAChBC,wBAAyB,IACzBC,sBAAuB,IACvBC,oBAAqB,IACrBC,aAAc,IACdC,YAAa,IACbC,8BAA+B,KAGjC7+H,OAAOmB,QAAQ25H,IAAgBh2I,QAAQ,EAAEi0B,EAAK0B,MAC5CqgH,GAAergH,GAAS1B,IAG1B,IAAI+lH,GAAmBhE,GA4BvB,MAAMiE,GAnBN,SAASC,EAAeC,GACtB,MAAMptF,EAAU,IAAIyoF,GAAQ2E,GACtBrsF,EAAW0vC,EAAKg4C,GAAQ74H,UAAUmhH,QAAS/wE,GAajD,OAVAstE,EAAQ5yE,OAAOqG,EAAU0nF,GAAQ74H,UAAWowC,EAAS,CAAC2rE,YAAY,IAGlE2B,EAAQ5yE,OAAOqG,EAAUf,EAAS,KAAM,CAAC2rE,YAAY,IAGrD5qE,EAAS1hB,OAAS,SAAgBgoG,GAChC,OAAO8F,EAAe1P,GAAY2P,EAAe/F,GACnD,EAEOtmF,CACT,CAGcosF,CAAe3V,IAG7B0V,GAAM9F,MAAQqB,GAGdyE,GAAM1S,cAAgBA,GACtB0S,GAAMxE,YAAcM,GACpBkE,GAAM5S,SAAWA,GACjB4S,GAAM38F,QAAUA,GAChB28F,GAAMjb,WAAaA,GAGnBib,GAAMpc,WAAaA,EAGnBoc,GAAMG,OAASH,GAAM1S,cAGrB0S,GAAMI,IAAM,SAAaC,GACvB,OAAOzqH,QAAQwqH,IAAIC,EACrB,EAEAL,GAAMM,OA1IN,SAAgB9kH,GACd,OAAO,SAAc4rB,GACnB,OAAO5rB,EAAS6tB,MAAM,KAAMjC,EAC9B,CACF,EAyIA44F,GAAMO,aAhIN,SAAsBnxF,GACpB,OAAOgxE,EAAQtC,SAAS1uE,KAAsC,IAAzBA,EAAQmxF,YAC/C,EAiIAP,GAAMzP,YAAcA,GAEpByP,GAAMnV,aAAeoC,GAErB+S,GAAMQ,WAAaljB,GAAS8K,GAAehI,EAAQnB,WAAW3B,GAAS,IAAIiD,SAASjD,GAASA,GAE7F0iB,GAAMS,WAAa7H,GAEnBoH,GAAMjE,eAAiBgE,GAEvBC,GAAMU,QAAUV,GAEhB1xF,EAAOD,QAAU2xF,E,kGC9vHjB,gBAIA,UACA,UACA,UAGA,MAAa1yI,UAAkB,EAAAzC,MAW7B,WAAA7G,CAAYC,EAAYC,EAAYC,EAAWC,EAAWW,GACxDV,MAAMJ,EAAMC,EAAMC,EAAGC,GAmBvB,KAAA2G,IAAM,IACGvG,KAAK8a,OAGd,KAAAxT,SAAW,KAGT,GAFAtH,KAAKuH,MAAQvH,KAAKL,EAClBK,KAAKwH,MAAQxH,KAAKJ,GACbI,KAAKqC,KAAM,CACd,GAAIrC,KAAKyH,cAAgB,EAEvB,YADAzH,KAAKyH,gBAIP,GADAzH,KAAK0H,QACA1H,KAAKoM,YAaH,GAAIpM,KAAKoM,WAAY,CAC1B,GAAIpM,KAAKP,KAAKsb,eAAiB/a,KAAKuU,aAAc,CAChDvU,KAAKsM,WAAaxK,KAAK4D,IAAI,EAAG1F,KAAKsM,WAAa,GAChD,IAAIyI,EAAO/U,KAAKL,EACZqV,EAAOhV,KAAKJ,EAEZob,EAAmBC,QACvB,IAAK,MAAMhU,KAAKjH,KAAKP,KAAKuH,SACpBC,IAAMjH,MACRgb,EAAiBhR,KAAK,CAAErK,EAAGsH,EAAEtH,EAAGC,EAAGqH,EAAErH,IAGzC,IAAK,IAAIqG,EAAKjG,KAAKL,EAAI,EAAGsG,GAAMjG,KAAKL,EAAI,EAAGsG,IAC1C,IAAK,IAAI4F,EAAK7L,KAAKJ,EAAI,EAAGiM,GAAM7L,KAAKJ,EAAI,EAAGiM,IAExC7L,KAAKP,KAAK6K,UAAUrE,GAAI4F,aAAe,EAAAqP,WACtClb,KAAKP,KAAK6K,UAAUrE,GAAI4F,GAAkBsP,IAG3CH,EAAiBhR,KAAK,CAAErK,EAAGsG,EAAIrG,EAAGiM,IAIxC,IAAIuP,EAAO,GACX,IAAK,IAAIzb,EAAI,EAAGA,EAAIK,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MAAOlL,IAAK,CAC1Dyb,EAAKzb,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAII,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OAAQrL,IAClDI,KAAKP,KAAK6K,UAAU3K,IAAMK,KAAKP,KAAK6K,UAAU3K,GAAGC,GACnDwb,EAAKzb,GAAGC,GAAKI,KAAKP,KAAK6K,UAAU3K,GAAGC,GACjCwb,EAAKzb,GAAGC,IAAK,C,CAItB,IAAIyb,EAAQ,EAAAC,MAAMC,MAAMC,OACtBJ,EACApb,KACAA,KAAKuU,aACLyG,GACA,GACA,OACAnD,OACAA,OACAA,GACA,EACA7X,KAAKg7B,eAEP,GAAIh7B,KAAKugB,SAGPvgB,KAAKugB,UAAW,OACX,GAAIlF,EAAMta,OAAS,IAAMf,KAAK6sB,YAAa,CAChD,IAAInR,EAAQL,EAAM,GAAGM,IAAIhc,EAErBic,EAAQP,EAAM,GAAGM,IAAI/b,EAErBwc,GAAY,EAChB,IAAK,MAAMpW,KAAKhG,KAAKN,KAAK+O,QAEtBzO,KAAKN,KAAKuO,MAAMjO,KAAKN,KAAK+O,QAAQzI,GAAGkM,WAAalS,KAAKP,MACvDO,KAAKN,KAAK+O,QAAQzI,GAAGrG,IAAM+b,GAC3B1b,KAAKN,KAAK+O,QAAQzI,GAAGpG,IAAMgc,IAE3B5b,KAAKN,KAAK+O,QAAQzI,GAAGjB,KAAK/E,KAAKuG,MAAOvG,KAAKwB,MAC3CxB,KAAK+C,MAAQ,IAAO/C,KAAKL,EAAIK,KAAKN,KAAK+O,QAAQzI,GAAGrG,GAClDK,KAAKiD,MAAQ,IAAOjD,KAAKJ,EAAII,KAAKN,KAAK+O,QAAQzI,GAAGpG,GAEhDI,KAAKN,KAAK+O,QAAQzI,KAClBhG,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,gBAE5BxX,KAAKN,KAAK2c,YAAY,GAAKrc,KAAK+C,MAAO,GAAK/C,KAAKiD,QAIlDmZ,IACHpc,KAAKwV,QAAQkG,EAAOE,GACpB5b,KAAKsc,UAAUvH,EAAMC,G,CAGzBhV,KAAKuc,iB,CAGP,IAAIC,GAED,IADDC,OAAOC,OAAO1c,KAAKN,KAAKid,gBAAgBxV,QAAQnH,KAAKuU,cAEvD,IAAKvU,KAAK4c,OAASJ,EAAqB,CACtC,IAAInS,EAAIrK,KAAKqU,gBACb,IAAU,IAANhK,EAAa,CACf,IAAKiK,EAAUzH,GAAUxC,EAEvBiK,GAAY,IACXkI,GACClI,EAAWtU,KAAK6c,eAAe7c,KAAKuU,gBAElC1H,IAAW7M,KAAKuU,eAClBvU,KAAKuU,aAAe1H,EACpB7M,KAAK8b,WAAWjP,GACZA,IAAW7M,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,iBACzCxX,KAAKsM,WAAa,GACpBtM,KAAKuc,kB,QA/GO,CACpB,IAAIlS,EAAIrK,KAAKqU,gBACb,IAAU,IAANhK,EAAa,CACf,IAAKiK,EAAUzH,GAAUxC,EACrBiK,GAAY,IACdtU,KAAKuU,aAAe1H,EACpB7M,KAAK8b,WAAWjP,GAChB7M,KAAKoM,YAAa,EACdS,IAAW7M,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,iBACzCxX,KAAKsM,WAAa,GACpBtM,KAAKuc,kB,KA8Gf,KAAApa,KAAQC,IACFpC,KAAKqC,OACT,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MACVzC,KAAKC,QAAU,GAAKD,KAAK8c,OAEtC9c,KAAKqC,OACRrC,KAAK0C,aAAaN,GAClBpC,KAAKuD,OAAS,GAAMnB,EAChBpC,KAAKuD,OAAS,IAAGvD,KAAKuD,MAAQ,GAE9BvD,KAAK2C,WAAW3C,KAAK4C,WAAWR,GACpC,EAAAV,KAAKuK,QACHjM,KAAKkB,MAAQY,KAAKgB,MAAM9C,KAAKuD,OAC7BvD,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAIK,KAAK+C,MACd/C,KAAKJ,EAAII,KAAKgD,YAAchD,KAAKiD,MAAQjD,KAAK00B,MAC9C,EACA,EACA10B,KAAKkM,eACLlM,KAAKmD,gBAGJnD,KAAK8c,SACH9c,KAAKoM,YACRpM,KAAKqM,eAAejK,GAElBpC,KAAKsM,WAAa,GACpBtM,KAAKuM,gBAAgBnK,IAGzB,EAAAV,KAAKY,IAAIc,YAxLTpD,KAAK0H,MAAQ,EACb1H,KAAKuD,MAAQ,EACbvD,KAAKC,OAAS,EACdD,KAAKyG,UAAY,EACjBzG,KAAKwM,iBAAmB,EACxBxM,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKoM,YAAa,EAClBpM,KAAK4c,OAAQ,EACb5c,KAAKwB,KAAO,OACZxB,KAAKgtB,kBAAmB,EACxBhtB,KAAKktB,gBAAiB,EACtBltB,KAAKm7B,WAAa,GACd56B,IAAMP,KAAKO,KAAOA,GACtBP,KAAKid,SAAU,EACfjd,KAAKsB,QAAQ,CAAC,SAAU,YAAa,aAAc,OAAQ,QAC7D,EA7BF,cAOS,EAAAsU,WAAqB,EACrB,EAAA1U,MAAgB,GAChB,EAAAC,MAAgB,C,yGCVzB,gBAEA,UACA,UAEA,MAAa4zG,UAAyB,EAAAtiE,SACpC,WAAAjzC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GACrBI,KAAKP,KAAOA,EACZO,KAAKC,OAAS,EACdD,KAAKkB,MAAQ,EACblB,KAAKmB,MAAQ,EACbnB,KAAK2C,WAAY,EACjB3C,KAAK2D,eAAgB,EACrB3D,KAAKwB,KAAO,WACR,EAAAI,OAAOC,OAAS,MAClB7B,KAAKK,MAAM2J,KAAK,IAAI,EAAA4+B,MAAM5oC,KAAKP,KAAMO,KAAKL,EAAGK,KAAKJ,GAGtD,EAdF,oB,mGCVA,gBAEA,UAEA,MAAa68G,UAAmB,EAAAn9F,OAC9B,WAAA9f,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GAMlB,KAAA04B,MAASzrB,IACPA,EAAO5M,OAAS6B,KAAKyD,IAAIsH,EAAOpG,UAAWoG,EAAO5M,OAAS,GACvDD,KAAKoE,MAAM1E,KAAKuO,MAAMpB,EAAOqF,WAAalS,KAAKoE,MAAM1E,KAAKD,MAC5D,EAAA2B,MAAM23B,OACRlsB,EAAOhM,UAAU23B,WAAWx4B,OAK9B,KAAAqE,eAAiB,IACR,kCAfPrE,KAAKkB,MAAQ,EACblB,KAAKmB,MAAQ,EACbnB,KAAKiN,SAAW,EAClB,EANF,c,mGCPA,gBAIA,UACA,UACA,UAEA,MAAa9D,UAAmB,EAAA9C,MAW9B,WAAA7G,CAAYC,EAAYC,EAAYC,EAAWC,EAAWW,GACxDV,MAAMJ,EAAMC,EAAMC,EAAGC,GAFvB,KAAA2gB,UAAoB,EAwBpB,KAAAha,IAAM,IACGvG,KAAK8a,OAGd,KAAAxT,SAAW,KAKT,GAJAtH,KAAKuH,MAAQvH,KAAKL,EAClBK,KAAKwH,MAAQxH,KAAKJ,EAEdI,KAAKC,QAAU,IAAGD,KAAK8D,eAAiB,KACvC9D,KAAKqC,KAAM,CACd,GAAIrC,KAAKyH,cAAgB,EAEvB,YADAzH,KAAKyH,gBAIP,GADAzH,KAAK0H,QACA1H,KAAKoM,YAeH,GAAIpM,KAAKoM,WAAY,CAC1B,GAAIpM,KAAKP,KAAKsb,eAAiB/a,KAAKuU,aAAc,CAChDvU,KAAKsM,WAAaxK,KAAK4D,IAAI,EAAG1F,KAAKsM,WAAa,GAChD,IAAIyI,EAAO/U,KAAKL,EACZqV,EAAOhV,KAAKJ,EAEZob,EAAmBC,QACvB,IAAK,MAAMhU,KAAKjH,KAAKP,KAAKuH,SACpBC,IAAMjH,MACRgb,EAAiBhR,KAAK,CAAErK,EAAGsH,EAAEtH,EAAGC,EAAGqH,EAAErH,IAGzC,IAAK,IAAIqG,EAAKjG,KAAKL,EAAI,EAAGsG,GAAMjG,KAAKL,EAAI,EAAGsG,IAC1C,IAAK,IAAI4F,EAAK7L,KAAKJ,EAAI,EAAGiM,GAAM7L,KAAKJ,EAAI,EAAGiM,IAExC7L,KAAKP,KAAK6K,UAAUrE,GAAI4F,aAAe,EAAAqP,WACtClb,KAAKP,KAAK6K,UAAUrE,GAAI4F,GAAkBsP,IAG3CH,EAAiBhR,KAAK,CAAErK,EAAGsG,EAAIrG,EAAGiM,IAIxC,IAAIuP,EAAO,GACX,IAAK,IAAIzb,EAAI,EAAGA,EAAIK,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MAAOlL,IAAK,CAC1Dyb,EAAKzb,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAII,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OAAQrL,IAClDI,KAAKP,KAAK6K,UAAU3K,IAAMK,KAAKP,KAAK6K,UAAU3K,GAAGC,GACnDwb,EAAKzb,GAAGC,GAAKI,KAAKP,KAAK6K,UAAU3K,GAAGC,GACjCwb,EAAKzb,GAAGC,IAAK,C,CAGtB,IAAIyb,EAAQ,EAAAC,MAAMC,MAAMC,OACtBJ,EACApb,KACAA,KAAKuU,aACLyG,GACA,GACA,OACAnD,OACAA,OACAA,GACA,GAEF,GAAI7X,KAAKugB,SACPvgB,KAAKm/D,QAAQpqD,EAAMC,QACd,GAAIqG,EAAMta,OAAS,EAAG,CAC3Bia,EAAiBhR,KAAK,CAAErK,EAAGoV,EAAO,EAAGnV,EAAGoV,IACxCgG,EAAiBhR,KAAK,CAAErK,EAAGoV,EAAO,EAAGnV,EAAGoV,IACxCgG,EAAiBhR,KAAK,CAAErK,EAAGoV,EAAMnV,EAAGoV,EAAO,IAC3CgG,EAAiBhR,KAAK,CAAErK,EAAGoV,EAAMnV,EAAGoV,EAAO,IAC3C,IAAI0G,EAAQL,EAAM,GAAGM,IAAIhc,EACrBic,EAAQP,EAAM,GAAGM,IAAI/b,EAErBwc,GAAY,EAChB,IAAK,MAAMpW,KAAKhG,KAAKN,KAAK+O,QAEtBzO,KAAKN,KAAKuO,MAAMjO,KAAKN,KAAK+O,QAAQzI,GAAGkM,WAAalS,KAAKP,MACvDO,KAAKN,KAAK+O,QAAQzI,GAAGrG,IAAM+b,GAC3B1b,KAAKN,KAAK+O,QAAQzI,GAAGpG,IAAMgc,IAE3B5b,KAAKN,KAAK+O,QAAQzI,GAAGjB,KAAK/E,KAAKuG,MAAOvG,KAAKwB,MAC3CxB,KAAK+C,MAAQ,IAAO/C,KAAKL,EAAIK,KAAKN,KAAK+O,QAAQzI,GAAGrG,GAClDK,KAAKiD,MAAQ,IAAOjD,KAAKJ,EAAII,KAAKN,KAAK+O,QAAQzI,GAAGpG,GAEhDI,KAAKN,KAAK+O,QAAQzI,KAClBhG,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,gBAE5BxX,KAAKN,KAAK2c,YAAY,GAAKrc,KAAK+C,MAAO,GAAK/C,KAAKiD,QAGlDmZ,IAEHpc,KAAKwV,QAAQkG,EAAOE,GACpB5b,KAAKsc,UAAUvH,EAAMC,G,CAGzBhV,KAAKuc,iB,CAGP,IAAIC,GAED,IADDC,OAAOC,OAAO1c,KAAKN,KAAKid,gBAAgBxV,QAAQnH,KAAKuU,cAEvD,IAAKvU,KAAK4c,OAASJ,EAAqB,CACtC,IAAInS,EAAIrK,KAAKqU,gBACb,IAAU,IAANhK,EAAa,CACf,IAAKiK,EAAUzH,GAAUxC,EAEvBiK,GAAY,IACXkI,GACClI,EAAWtU,KAAK6c,eAAe7c,KAAKuU,gBAElC1H,IAAW7M,KAAKuU,eAClBvU,KAAKuU,aAAe1H,EACpB7M,KAAK8b,WAAWjP,GACZA,IAAW7M,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,iBACzCxX,KAAKsM,WAAa,GACpBtM,KAAKuc,kB,QAhHO,CACpBvc,KAAKugB,UAAW,EAEhB,IAAIlW,EAAIrK,KAAKqU,gBACb,IAAU,IAANhK,EAAa,CACf,IAAKiK,EAAUzH,GAAUxC,EACrBiK,GAAY,IACdtU,KAAKuU,aAAe1H,EACpB7M,KAAK8b,WAAWjP,GAChB7M,KAAKoM,YAAa,EACdS,IAAW7M,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,iBACzCxX,KAAKsM,WAAa,GACpBtM,KAAKuc,kB,KA6Gf,KAAAk4B,KAAQryC,IACN,IAAI+D,EAAIrE,KAAK4D,IAAI5D,KAAKgG,IAAI9H,KAAK+C,OAAQjB,KAAKgG,IAAI9H,KAAKiD,QAEjDyxB,EAAQ5yB,KAAKgG,IAAIhG,KAAKq3C,IAAIhzC,EAAIrE,KAAKyrC,KAAOvtC,KAAKm7B,WAC/CzG,EAAQ,MAAMA,EAAQ,GACtBA,EAAQ10B,KAAKm7B,aAAYzG,EAAQ10B,KAAKm7B,YAC1Cn7B,KAAK00B,MAAQA,GAGf,KAAAvyB,KAAQC,IACN,IAAIg9D,EAAcp/D,KAAKC,QAAU,EAAI,GAAK,EACtCD,KAAK8c,SAAQsiD,EAAc,GAC3Bp/D,KAAKqC,OACT,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MAEvBzC,KAAKqC,OACRrC,KAAK0C,aAAaN,GAClBpC,KAAKuD,OAAS,GAAMnB,EAChBpC,KAAKuD,OAAS,IAAGvD,KAAKuD,MAAQ,GAE9BvD,KAAK2C,WAAW3C,KAAK4C,WAAWR,GACpC,EAAAV,KAAKuK,QACHjM,KAAKkB,MAAQY,KAAKgB,MAAM9C,KAAKuD,OAC7BvD,KAAKmB,MAAQi+D,EACb,EACA,EACAp/D,KAAKL,EAAIK,KAAK+C,MACd/C,KAAKJ,EAAII,KAAKgD,YAAchD,KAAKiD,MAAQjD,KAAK00B,MAC9C,EACA,EACA10B,KAAKkM,eACLlM,KAAKmD,eAAiB,EAAInD,KAAK00B,MAAQ,KAGtC10B,KAAK8c,SACH9c,KAAKoM,YACRpM,KAAKqM,eAAejK,GAElBpC,KAAKsM,WAAa,GACpBtM,KAAKuM,gBAAgBnK,IAGzB,EAAAV,KAAKY,IAAIc,YAxMTpD,KAAK0H,MAAQ,EACb1H,KAAKuD,MAAQ,EACbvD,KAAKC,OAAS,EACdD,KAAKyG,UAAY,EACjBzG,KAAKwM,iBAAmB,EACxBxM,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,GACbnB,KAAKoM,YAAa,EAClBpM,KAAK4c,OAAQ,EACb5c,KAAK2M,qBAAsB,EAC3B3M,KAAKwB,KAAO,QACZxB,KAAKgtB,kBAAmB,EACxBhtB,KAAKktB,gBAAiB,EACtBltB,KAAKm7B,WAAa,EAClBn7B,KAAK6D,eAAiB,EACtB7D,KAAK8D,eAAiB,GAClBvD,IAAMP,KAAKO,KAAOA,GACtBP,KAAKid,SAAU,EACfjd,KAAKsB,QAAQ,CAAC,SAAU,YAAa,aAAc,OAAQ,QAC7D,EAhCF,eAOS,EAAAsU,WAAqB,EACrB,EAAA1U,MAAgB,GAChB,EAAAC,MAAgB,C,8FCjBzB,gBAEA,UACA,UAEA,MAAag7G,UAAc,EAAA/5F,OAGzB,WAAA5iB,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GAalB,KAAAomB,SAAW,KACT,EAAA5kB,MAAMmF,MACN,EAAAnF,MAAMurD,kBAGR,KAAAxzB,WAAa,CAACC,EAAcC,KAC1B,IAAI8iH,EAAa,CAAEx8I,EAAGy5B,EAAMx5B,EAAGy5B,GAC3B+iH,EAAc,CAAEz8I,EAAGy5B,EAAMx5B,EAAGy5B,GAE5BzxB,EAAY,CAACu0I,EAAYC,GAE7B,OAAQp8I,KAAKs5B,QAAQ7d,WACnB,KAAK,EAAAM,UAAUG,KACbigI,EAAWx8I,EAAIy5B,EAAO,EACtBgjH,EAAYz8I,EAAIy5B,EAAO,EAEvB,MACF,KAAK,EAAArd,UAAUI,GACbggI,EAAWx8I,EAAIy5B,EAAO,EACtBgjH,EAAYz8I,EAAIy5B,EAAO,EAEvB,MACF,KAAK,EAAArd,UAAUE,KACbkgI,EAAWv8I,EAAIy5B,EAAO,EACtB+iH,EAAYx8I,EAAIy5B,EAAO,EAEvB,MACF,KAAK,EAAAtd,UAAUC,MACbmgI,EAAWv8I,EAAIy5B,EAAO,EACtB+iH,EAAYx8I,EAAIy5B,EAAO,EAK3B,GAAIr5B,KAAKu5B,kBAAkBH,EAAMC,GAAO,OAAO,EAE/C,MAAMG,EAAex5B,KAAKy5B,cACxBL,EACAC,GACA,EACAr5B,KAAK8a,OAAS9a,KAAKs5B,QAAQI,aAC3B,GACA,GACA,GACA,GAEF,GAAIF,EAAc,CAChB,IAAK,MAAM7d,KAAO/T,EAChB,IACG5H,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAAS5H,UAAUqR,EAAIhc,GACnDgc,EAAI/b,GACJgM,UACF,CACA,MAAMkP,EAAS9a,KAAK8a,OAAS9a,KAAKs5B,QAAQI,YAC1C15B,KAAK45B,cAAcje,EAAIhc,EAAGgc,EAAI/b,EAAGkb,E,CAGrC9a,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAASkF,KAAKpX,KAAKs5B,Q,CAGlD,OAAQE,GAGV,KAAAnd,YAAc,KAGZ4H,WAAW,KAET,OAAQjkB,KAAKs5B,QAAQ7d,WACnB,KAAK,EAAAM,UAAUG,KAGf,KAAK,EAAAH,UAAUI,GACbnc,KAAKN,KAAK2c,YAAY,GAAI,GAAG,GAC7B,MACF,KAAK,EAAAN,UAAUE,KACbjc,KAAKN,KAAK2c,aAAa,GAAI,GAAG,GAC9B,MACF,KAAK,EAAAN,UAAUC,MACbhc,KAAKN,KAAK2c,YAAY,GAAI,GAAG,KAGhCrc,KAAK65B,WA7FR75B,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAK8a,OAAS,EACd9a,KAAKwB,KAAO,QAEZxB,KAAKg6B,aAAc,EACnBh6B,KAAK85B,QAAU,EACf95B,KAAKiN,SAAW,EAElB,EAfF,UACS,EAAAnI,SAAW,O,2GCApB,gBAKA,UACA,UAEA,MAAaqiC,UAA2B,EAAA7nB,OAEtC,WAAA9f,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GAWlB,KAAAmnB,OAAS,KACwC,SAA3C/mB,KAAKoE,MAAM1E,KAAK0tD,wBAClBptD,KAAKoE,MAAM1E,KAAK0tD,uBAAyB,KACzCptD,KAAKoE,MAAMoK,MAAMxE,KACf,IAAI,EAAAq9B,oBAAoBrnC,KAAKoE,MAAOpE,KAAKL,EAAGK,KAAKJ,IAEnDI,KAAKoE,MAAMoK,MAAQxO,KAAKoE,MAAMoK,MAAM9N,OAAQiS,GAASA,IAAS3S,OACV,OAA3CA,KAAKoE,MAAM1E,KAAK0tD,yBACzBptD,KAAKoE,MAAM1E,KAAK04D,uBAAyB,UAI7C,KAAA74C,WAAa,CAAC1S,EAAgB2S,KAC5B,GAAIA,aAAiB,EAAA6nB,oBAAqB,CACxCx6B,EAAOhM,UAAU23B,WAAWx4B,MAC5B6M,EAAOhM,UAAU23B,WAAWhZ,GAC5B3S,EAAOnN,KAAKo1B,YACV,mDAEF,MAAMr1B,EAAQoN,GAAgB8sB,QACzB9sB,EAAe8sB,UAChB9sB,EAAOnN,KAAKuO,MAAMpB,EAAOqF,SACvBgP,EAAS,IAAI,EAAAkhB,MAAM3iC,EAAMoN,EAAOlN,EAAGkN,EAAOjN,GAChDiN,EAAOhM,UAAU4gC,QAAQvgB,E,GAhC3BlhB,KAAKkB,MAAQ,EACblB,KAAKmB,MAAQ,EACbnB,KAAK2f,WAAY,EACjB3f,KAAKwB,KAAO2lC,EAAmBriC,SAC/B9E,KAAKie,YACH,oEACFje,KAAK0f,eAAgB,CACvB,EAZF,uBACS,EAAA5a,SAAW,sB,uGCRpB,gBAGA,UACA,UAEA,SACA,UAEA,MAAa2wG,UAAuB,EAAAhjE,SAClC,WAAAjzC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GAErBI,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKC,OAAS,EACdD,KAAKwB,KAAO,SACZxB,KAAKgT,UAAW,EAChBhT,KAAK+S,WAAa,UAClB/S,KAAKiT,WAAa,EAClBjT,KAAKkT,eAAiB,EAClB,EAAAtR,OAAOC,OAAS,MAClB7B,KAAKK,MAAM2J,KAAK,IAAI,EAAA4+B,MAAM5oC,KAAKP,KAAMO,KAAKL,EAAGK,KAAKJ,IAEpDI,KAAKK,MAAM2J,KAAK,IAAI,EAAAqV,QAAQrf,KAAKP,KAAMO,KAAKL,EAAGK,KAAKJ,IACpDI,KAAKmT,YAAc,IAAI,EAAAC,YACrBpT,KAAKL,EAAI,GACTK,KAAKJ,EAAI,GACT,EACA,CAAC,EAAG,EAAG,KACP,GAEFI,KAAKqT,eAAerT,KAAKmT,YAC3B,EAxBF,kB,0ICfA,gBACA,UAOMkpI,EAAc,UAEP,EAAA15E,cAAiBjjE,IAC5B,MAAMwU,GAAQ,IAAA2jC,iBAAgBn4C,GACxB48I,EAAOhtG,KAAKC,UAAUr7B,IAE5B,IAAAqoI,iBAAgBF,EAAaC,EAAM,IACnC58I,EAAKo1B,cAAc,sBAGR,EAAA8tC,gBAAkB90B,MAAOpuC,IACpC,MAAM48I,GAAO,IAAAE,iBAAgBH,GAC7B,IAAKC,EAEH,OADA58I,EAAKo1B,cAAc,0BACZ,EAET,IACE,MAAM5gB,EAAQo7B,KAAKK,MAAM2sG,GAEnBtoE,EAAkB,CAACt0E,EAAK8X,eAG9B,aAFM,IAAAy8D,eAAcv0E,EAAMs0E,EAAiB9/D,GAAO,GAClDxU,EAAKo1B,cAAc,yBACZ,C,CACP,MAAO7tB,GAGP,OAFA4C,QAAQsmB,MAAM,qBAAsBlpB,GACpCvH,EAAKo1B,cAAc,wBACZ,C,GAIE,EAAAiuC,gBAAkB,KAC7B,IACE,MAAM05E,GAAO,IAAA/sG,WAAU,GAAG2sG,UACpBhwH,EAAQowH,EAAO50H,SAAS40H,EAAM,IAAMC,IAC1C,GAAI5jC,OAAO8lB,SAASvyG,IAAUA,EAAQ,EACpC,IAAK,IAAIrmB,EAAI,EAAGA,EAAIqmB,EAAOrmB,KAAK,IAAA22I,cAAa,GAAGN,KAAer2I,UAG/D,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,KAAK,IAAA22I,cAAa,GAAGN,KAAer2I,I,CAE9D,MAAM,EACR,IAAA22I,cAAa,GAAGN,U,kGCjDlB,gBACA,UAEA,UAEA,MAAaxlC,UAAkB,EAAAhiF,KAK7B,WAAAr1B,CACEC,EACAE,EACAC,EACA8K,EACAE,EACAE,EACAE,GAEAnL,MAAMJ,EAAME,EAAGC,GAwBjB,KAAAE,SAAW,KACTE,KAAKP,KAAKC,KAAKo1B,YAAY,4BAG7B,KAAAlpB,QAAU,KACD,EAET,KAAAmpB,cAAgB,KACP,EAGT,KAAA5yB,KAAQC,IACN,EAAAV,KAAKszB,SACH,EACAh1B,KAAKi1B,KACL,EACA,EACAj1B,KAAKL,EACLK,KAAKJ,EACL,EACA,EACAI,KAAKP,KAAKyD,WACVlD,KAAKmD,eAEHnD,KAAK8K,SACP,EAAApJ,KAAKszB,SACH,GACA,EACA,EACA,EACAh1B,KAAKL,EACLK,KAAKJ,EACL,EACA,EACAI,KAAKP,KAAKyD,WACVlD,KAAKmD,eAET,EAAAzB,KAAKszB,SACHh1B,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAnB,KAAKL,EACLK,KAAKJ,EACL,EACA,EACAI,KAAKP,KAAKyD,WACVlD,KAAKmD,gBArEPnD,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EAETuJ,EAAU1K,KAAKkB,QACV0J,GAAW5K,KAAKkB,QACrB4J,EAAS9K,KAAKmB,QACT6J,GAAYhL,KAAKmB,QAE1BnB,KAAK8K,QAAUA,EACf,MAAMqI,EAAc,IAAI,EAAAC,YACtBpT,KAAKL,EAAI,GACTK,KAAKJ,EAAI,GACT,GACA,CAAC,IAAK,GAAI,GACV,GAEFI,KAAKP,KAAKmU,aAAa5J,KAAKmJ,GAC5BnT,KAAKgT,UAAW,EAChBhT,KAAK+S,WAAa,UAClB/S,KAAKiT,WAAa,CACpB,EApCF,a,4GCFA,8BAGE,WAAAzT,CAAYqN,GACV7M,KAAK6M,OAASA,CAChB,CAEA,OAAA6rD,CAAQoa,GAEN,IACG9yE,KAAK6M,OAAOnN,KAAaqjF,eAAelQ,aAAaC,E,CACtD,MAAM,CACR,OAAQA,EAAO/uE,MACb,IAAK,OACH/D,KAAK6M,OAAOmnC,SAASrD,KACnBmiC,EAAOr3D,UACPq3D,EAAOttD,QACPstD,EAAOrtD,SAET,MAEF,IAAK,YACHzlB,KAAK6M,OAAOmnC,SAAS7C,UACnB2hC,EAAOr3D,UACPq3D,EAAOttD,QACPstD,EAAOrtD,SAET,MACF,IAAK,gBACHzlB,KAAK6M,OAAOhM,UAAUV,OACtB,MAEF,IAAK,iBACHH,KAAK6M,OAAOhM,UAAU6c,QACtB,MAEF,IAAK,gBACH1d,KAAK6M,OAAOhM,UAAU+7I,eACtB,MAEF,IAAK,iBACH58I,KAAK6M,OAAOhM,UAAUg8I,gBACtB,MAEF,IAAK,eACH78I,KAAK6M,OAAOhM,UAAUi8I,gBACtB,MAEF,IAAK,gBACH98I,KAAK6M,OAAOhM,UAAUN,OACtB,MAEF,IAAK,kBAEHP,KAAK6M,OAAOhM,UAAUk9D,KAAOj8D,KAAK4D,IAChC,EACA5D,KAAKyD,IAAIutE,EAAO54D,MAAOla,KAAK6M,OAAOhM,UAAUi9D,KAAO,IAEtD99D,KAAK6M,OAAOhM,UAAUm9D,KAAO,EAC7Bh+D,KAAK6M,OAAOhM,UAAUi8I,gBACtB,MACF,IAAK,gBAAiB,CACpB,MAAMlvH,EAAO9rB,KAAK4D,IAChB,EACA5D,KAAKyD,IACHutE,EAAOiqE,UACP/8I,KAAK6M,OAAOhM,UAAUi9D,MACnB99D,KAAK6M,OAAOhM,UAAU4jE,KACpBzkE,KAAK6M,OAAOhM,UAAkB43B,WACjC,IAGAynE,EAAKp+F,KAAK4D,IACd,EACA5D,KAAKyD,IACHutE,EAAOkqE,QACPh9I,KAAK6M,OAAOhM,UAAUi9D,MACnB99D,KAAK6M,OAAOhM,UAAU4jE,KACpBzkE,KAAK6M,OAAOhM,UAAkB43B,WACjC,IAGA9lB,EAAO3S,KAAK6M,OAAOhM,UAAU2N,MAAMof,GACzC,GAAIjb,EAAM,CACR,MAAMsqI,EAAWj9I,KAAK6M,OAAOhM,UAAU2N,MAAM0xF,GAC7ClgG,KAAK6M,OAAOhM,UAAU2N,MAAMof,GAAQqvH,EACpCj9I,KAAK6M,OAAOhM,UAAU2N,MAAM0xF,GAAMvtF,C,CAEpC,K,CAGF,IAAK,UACH3S,KAAK6M,OAAO0vD,UACZ,MAEF,IAAK,SAEH1yD,QAAQC,KAAK,mDACb,MAEF,IAAK,WACH9J,KAAK6M,OAAO2I,QAAQs9D,EAAO/6C,OAAOp4B,EAAGmzE,EAAO/6C,OAAOn4B,GAGzD,E,8FC5GF,eACA,UAIA,UACA,UACA,SAEA,UAEA,UAEA,UAEA,UACA,UAEA,IAAK0wG,GAAL,SAAKA,GACH,qBACA,qBACA,uBACA,mBACA,kBACD,CAND,CAAKA,IAAAA,EAAU,KAuBf,MAAsBjqG,UAAc,EAAA9G,OAwBlC,WAAAC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GARvB,KAAA2gB,UAAoB,EA2CpB,KAAAha,IAAM,IACGvG,KAAK8a,OAGd,KAAAoiI,mBAAqB,KACnB,IAAKl9I,KAAKoM,WAAY,OACtB,MAAM/B,EAAIrK,KAAKqU,gBACf,IAAU,IAANhK,EAAa,OACjB,MAAM4qC,EAAUj1C,KAAKP,KAAKuH,SAAStG,OAAQuG,GAAMA,aAAaZ,GAC9D,IAAK,MAAMY,KAAKguC,EACVhuC,IAAMjH,MACO,EAAAyX,MAAMnD,SAAStU,KAAKL,EAAGK,KAAKJ,EAAGqH,EAAEtH,EAAGsH,EAAErH,IAEzC,EAAA8G,iBAAiBy2I,+BAC7Bl2I,aAAaZ,IACZY,EAAEmF,YAEHnF,EAAES,OAAS,IAEXT,EAAEm2I,iBAAiB/yI,EAAE,IAAI,GACzBpD,EAAEqF,WAAa,IASrB,KAAAiY,gBAAmBxkB,IACZA,GACDA,IACFC,KAAK4c,OAAQ,EACb5c,KAAKuU,aAAexU,EAEhBA,IAAgBC,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,iBAC9CxX,KAAKsM,WAAa,KAIxB,KAAAjF,OAAS,KACFrH,KAAKuzB,OAAOlsB,OAAO4vD,SACtBj3D,KAAKuzB,OAAOlsB,OAAS,CACnB4vD,QAAQ,EACRomF,SAAU,EACVC,UAAWt9I,KAAK0H,MAChB61I,WAAYv9I,KAAK0H,MAAQ,GAE3B1H,KAAKkD,WAAa,YAItB,KAAAkE,MAAQ,KACDpH,KAAKuzB,OAAOnsB,MAAM6vD,SACrBj3D,KAAKuzB,OAAOnsB,MAAQ,CAClB6vD,QAAQ,EACRomF,SAAU,EACVC,UAAWt9I,KAAK0H,MAChB61I,WAAYv9I,KAAK0H,MAAQ,KAK/B,KAAA81I,WAAa,KACPx9I,KAAKuzB,OAAOlsB,OAAO4vD,QAAUj3D,KAAKuU,cAElCvU,KAAK0H,MAAQ,IAAM1H,KAAKuzB,OAAOlsB,OAAOk2I,YACtCv9I,KAAK0H,QAAU1H,KAAKuzB,OAAOlsB,OAAOi2I,WAClCt9I,KAAKC,QAAU,IAEfD,KAAK+E,KAAK/E,KAAKuU,aAAc,EAAG,UAChCvU,KAAKkD,WAAa,YAiBxB,KAAAu6I,UAAY,KACNz9I,KAAKuzB,OAAOnsB,MAAM6vD,QAAUj3D,KAAKuU,cAEjCvU,KAAK0H,MAAQ,IAAM1H,KAAKuzB,OAAOnsB,MAAMm2I,YACrCv9I,KAAK0H,QAAU1H,KAAKuzB,OAAOnsB,MAAMk2I,YAEjCt9I,KAAK+E,KAAK/E,KAAKuU,aAAc,GAAK,SAElCvU,KAAKkD,WAAa,UAClBlD,KAAKuzB,OAAOnsB,MAAMi2I,WAEdr9I,KAAKuzB,OAAOnsB,MAAMi2I,UAAY,IAChCr9I,KAAKuzB,OAAOnsB,MAAQ,CAClB6vD,QAAQ,EACRomF,SAAU,EACVC,UAAW,EACXC,WAAY,MAOtB,KAAAnmI,KAAO,KACLpX,KAAKw9I,aACLx9I,KAAKy9I,YACLz9I,KAAKsH,WACDtH,KAAKL,IAAMK,KAAKuH,OAASvH,KAAKJ,IAAMI,KAAKwH,OAC3CxH,KAAKgqB,iBAEHhqB,KAAKohB,UAAUphB,KAAKkhB,OAAO6I,uBAC/B/pB,KAAKk9I,sBAGP,KAAAvnI,cAAgB,CAAC8kB,GAAgB,KAC/B,GAAIz6B,KAAKoM,WAAY,OAErB,MAAM/B,EAAIrK,KAAKqU,gBACf,IAAU,IAANhK,EAAa,OAEjB,MAAOiK,EAAUzH,GAAUxC,EACvBiK,EAAWtU,KAAK06B,aAEpB16B,KAAKo9I,iBAAiBvwI,EAAQ4tB,GAE9Bz6B,KAAKuc,oBAGP,KAAA6gI,iBAAmB,CAACvwI,EAAgB4tB,GAAgB,KAClDz6B,KAAKuU,aAAe1H,EAChB4tB,GAAMz6B,KAAK8b,WAAWjP,GAC1B7M,KAAKoM,YAAa,EAElB,EAAAyY,eAAeC,KAAK,kBAAmB,CACrC6V,UAAW36B,KAAKR,YAAYgC,KAC5Bo5B,UAAW56B,KAAKwB,OAGdqL,IAAW7M,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,iBACzCxX,KAAKsM,WAAa,IAItB,KAAAoxI,oBAAsB,KACpB,IAAI1iI,EAAmBC,QACvB,IAAK,MAAMhU,KAAKjH,KAAKP,KAAKuH,SACpBC,IAAMjH,MACRgb,EAAiBhR,KAAK,CAAErK,EAAGsH,EAAEtH,EAAGC,EAAGqH,EAAErH,IAGzC,IAAK,IAAIqG,EAAKjG,KAAKL,EAAI,EAAGsG,GAAMjG,KAAKL,EAAI,EAAGsG,IAC1C,IAAK,IAAI4F,EAAK7L,KAAKJ,EAAI,EAAGiM,GAAM7L,KAAKJ,EAAI,EAAGiM,IAExC7L,KAAKP,KAAK6K,UAAUrE,GAAI4F,aAAe,EAAAqP,WACtClb,KAAKP,KAAK6K,UAAUrE,GAAI4F,GAAkBsP,IAG3CH,EAAiBhR,KAAK,CAAErK,EAAGsG,EAAIrG,EAAGiM,IAIxC,OAAOmP,GAGT,KAAA4xE,SAAW,KACT,IAAI5xE,EAAmBC,QACvB,IAAK,MAAMhU,KAAKjH,KAAKP,KAAKuH,SACpBC,IAAMjH,MACRgb,EAAiBhR,KAAK,CAAErK,EAAGsH,EAAEtH,EAAGC,EAAGqH,EAAErH,IAGzC,IAAK,IAAIqG,EAAKjG,KAAKL,EAAI,EAAGsG,GAAMjG,KAAKL,EAAI,EAAGsG,IAC1C,IAAK,IAAI4F,EAAK7L,KAAKJ,EAAI,EAAGiM,GAAM7L,KAAKJ,EAAI,EAAGiM,IAExC7L,KAAKP,KAAK6K,UAAUrE,GAAI4F,aAAe,EAAAqP,WACtClb,KAAKP,KAAK6K,UAAUrE,GAAI4F,GAAkBsP,IAG3CH,EAAiBhR,KAAK,CAAErK,EAAGsG,EAAIrG,EAAGiM,IAKxC,IAAIuP,EAAO,GACX,IAAK,IAAIzb,EAAI,EAAGA,EAAIK,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MAAOlL,IAAK,CAC1Dyb,EAAKzb,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAII,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OAAQrL,IAClDI,KAAKP,KAAK6K,UAAU3K,IAAMK,KAAKP,KAAK6K,UAAU3K,GAAGC,GACnDwb,EAAKzb,GAAGC,GAAKI,KAAKP,KAAK6K,UAAU3K,GAAGC,GACjCwb,EAAKzb,GAAGC,IAAK,C,CAKV,EAAA0b,MAAMC,MAAMC,OACtBJ,EACApb,KACAA,KAAKuU,aACLyG,GACA,GACA,GACA,EACAhb,KAAKyb,YAIT,KAAAnU,SAAW,KAMT,GAJAtH,KAAKuH,MAAQvH,KAAKL,EAClBK,KAAKwH,MAAQxH,KAAKJ,GAGbI,KAAKqC,KAAM,CAEd,GAAIrC,KAAKyH,cAAgB,EAEvB,YADAzH,KAAKyH,gBAQP,GAHAzH,KAAK0H,QAGA1H,KAAKoM,YACL,GAAIpM,KAAKoM,WAAY,CAExB,GAAIpM,KAAKP,KAAKsb,eAAiB/a,KAAKuU,aAAc,CAEhDvU,KAAKsM,WAAaxK,KAAK4D,IAAI,EAAG1F,KAAKsM,WAAa,GAGhD,IAAIyI,EAAO/U,KAAKL,EACZqV,EAAOhV,KAAKJ,EAGZob,EAAmBC,QACvB,IAAK,MAAMhU,KAAKjH,KAAKP,KAAKuH,SACpBC,IAAMjH,MACRgb,EAAiBhR,KAAK,CAAErK,EAAGsH,EAAEtH,EAAGC,EAAGqH,EAAErH,IAGzC,IAAK,IAAIqG,EAAKjG,KAAKL,EAAI,EAAGsG,GAAMjG,KAAKL,EAAI,EAAGsG,IAC1C,IAAK,IAAI4F,EAAK7L,KAAKJ,EAAI,EAAGiM,GAAM7L,KAAKJ,EAAI,EAAGiM,IAExC7L,KAAKP,KAAK6K,UAAUrE,GAAI4F,aAAe,EAAAqP,WACtClb,KAAKP,KAAK6K,UAAUrE,GAAI4F,GAAkBsP,IAG3CH,EAAiBhR,KAAK,CAAErK,EAAGsG,EAAIrG,EAAGiM,IAKxC,IAAIuP,EAAO,GACX,IAAK,IAAIzb,EAAI,EAAGA,EAAIK,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MAAOlL,IAAK,CAC1Dyb,EAAKzb,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAII,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OAAQrL,IAClDI,KAAKP,KAAK6K,UAAU3K,IAAMK,KAAKP,KAAK6K,UAAU3K,GAAGC,GACnDwb,EAAKzb,GAAGC,GAAKI,KAAKP,KAAK6K,UAAU3K,GAAGC,GACjCwb,EAAKzb,GAAGC,IAAK,C,CAKtB,IAAIyb,EAAQ,EAAAC,MAAMC,MAAMC,OACtBJ,EACApb,KACAA,KAAKuU,aACLyG,GACA,GACA,GACA,EACAhb,KAAKyb,WAIP,GAAIJ,EAAMta,OAAS,EAAG,CACpB,IAAI2a,EAAQL,EAAM,GAAGM,IAAIhc,EACrBic,EAAQP,EAAM,GAAGM,IAAI/b,EACrBic,EAAS7b,KAAKyb,UACd5O,EAAS7M,KAAKuU,aAYlB,GATAvU,KAAK8b,WAAWjP,GAGZ6O,EAAQ3G,EAAM/U,KAAKyb,UAAY,EAAAM,UAAUC,MACpCN,EAAQ3G,EAAM/U,KAAKyb,UAAY,EAAAM,UAAUE,KACzCL,EAAQ5G,EAAMhV,KAAKyb,UAAY,EAAAM,UAAUG,KACzCN,EAAQ5G,IAAMhV,KAAKyb,UAAY,EAAAM,UAAUI,IAG9CN,GAAU7b,KAAKyb,UAAW,CAC5B,IAAIW,GAAY,EAChB,IAAK,MAAMpW,KAAKhG,KAAKN,KAAK+O,QAEtBzO,KAAKN,KAAKuO,MAAMjO,KAAKN,KAAK+O,QAAQzI,GAAGkM,WAAalS,KAAKP,MACvDO,KAAKN,KAAK+O,QAAQzI,GAAGrG,IAAM+b,GAC3B1b,KAAKN,KAAK+O,QAAQzI,GAAGpG,IAAMgc,IAG3B5b,KAAKN,KAAK+O,QAAQzI,GAAGjB,KAAK/E,KAAKuG,MAAOvG,KAAKwB,MAC3CxB,KAAK+C,MAAQ,IAAO/C,KAAKL,EAAIK,KAAKN,KAAK+O,QAAQzI,GAAGrG,GAClDK,KAAKiD,MAAQ,IAAOjD,KAAKJ,EAAII,KAAKN,KAAK+O,QAAQzI,GAAGpG,GAEhDI,KAAKN,KAAK+O,QAAQzI,KAClBhG,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,gBAE5BxX,KAAKN,KAAK2c,YAAY,GAAKrc,KAAK+C,MAAO,GAAK/C,KAAKiD,QAGlDmZ,IAEHpc,KAAKwV,QAAQkG,EAAOE,GACpB5b,KAAKsc,UAAUZ,EAAOE,GAClB5b,KAAKL,EAAI+b,EAAO1b,KAAKyb,UAAY,EAAAM,UAAUC,MACtChc,KAAKL,EAAI+b,EAAO1b,KAAKyb,UAAY,EAAAM,UAAUE,KAC3Cjc,KAAKJ,EAAIgc,EAAO5b,KAAKyb,UAAY,EAAAM,UAAUG,KAC3Clc,KAAKJ,EAAIgc,IAAO5b,KAAKyb,UAAY,EAAAM,UAAUI,I,EAMtDnc,KAAKyb,WAAa,EAAAM,UAAUE,OAC9BjB,EAAiBhR,KAAK,CACpBrK,EAAGK,KAAKL,EACRC,EAAGI,KAAKJ,EAAI,IAEdob,EAAiBhR,KAAK,CACpBrK,EAAGK,KAAKL,EACRC,EAAGI,KAAKJ,EAAI,KAGZI,KAAKyb,WAAa,EAAAM,UAAUC,QAC9BhB,EAAiBhR,KAAK,CACpBrK,EAAGK,KAAKL,EACRC,EAAGI,KAAKJ,EAAI,IAEdob,EAAiBhR,KAAK,CACpBrK,EAAGK,KAAKL,EACRC,EAAGI,KAAKJ,EAAI,KAGZI,KAAKyb,WAAa,EAAAM,UAAUG,OAC9BlB,EAAiBhR,KAAK,CACpBrK,EAAGK,KAAKL,EAAI,EACZC,EAAGI,KAAKJ,IAEVob,EAAiBhR,KAAK,CACpBrK,EAAGK,KAAKL,EAAI,EACZC,EAAGI,KAAKJ,KAGRI,KAAKyb,WAAa,EAAAM,UAAUI,KAC9BnB,EAAiBhR,KAAK,CACpBrK,EAAGK,KAAKL,EAAI,EACZC,EAAGI,KAAKJ,IAEVob,EAAiBhR,KAAK,CACpBrK,EAAGK,KAAKL,EAAI,EACZC,EAAGI,KAAKJ,KAIZI,KAAKuc,iB,CAIP,IAAIC,GAED,IADDC,OAAOC,OAAO1c,KAAKN,KAAKid,gBAAgBxV,QAAQnH,KAAKuU,cAGvD,IAAKvU,KAAK4c,OAASJ,EAAqB,CACtC,IAAInS,EAAIrK,KAAKqU,gBACb,IAAU,IAANhK,EAAa,CACf,IAAKiK,EAAUzH,GAAUxC,EAEvBiK,GAAY,IACXkI,GACClI,EAAWtU,KAAK6c,eAAe7c,KAAKuU,gBAElC1H,IAAW7M,KAAKuU,eAClBvU,KAAKuU,aAAe1H,EACpB7M,KAAK8b,WAAWjP,GACZA,IAAW7M,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,iBACzCxX,KAAKsM,WAAa,GACpBtM,KAAKuc,kB,SApKOvc,KAAK2V,e,GA6K/B,KAAA2O,OAAS,CACPxJ,EAAiB,EACjB/W,EAA6C,UAEzC/D,KAAKC,OAAS,GACH,SAAT8D,IACF/D,KAAKugB,UAAW,IAKtB,KAAAo9H,KAAO,KACD39I,KAAKwgB,UACTxgB,KAAKwgB,SAAU,EACfxgB,KAAK6sB,aAAc,EACnB,IAAI,EAAAi/B,cAAc9rD,KAAMA,KAAKL,EAAGK,KAAKJ,KAGvC,KAAAu/D,QAAU,CAACpqD,EAAcC,KAEvB,IAAI3E,EAAKrQ,KAAKL,EAAIK,KAAKuU,aAAa5U,EAChC2Q,EAAKtQ,KAAKJ,EAAII,KAAKuU,aAAa3U,EAGhCmB,EAASe,KAAKyO,KAAKF,EAAKA,EAAKC,EAAKA,GAClCvP,EAAS,IACXsP,EAAKvO,KAAKwC,MAAM+L,EAAKtP,GACrBuP,EAAKxO,KAAKwC,MAAMgM,EAAKvP,IAGvB,IAAI68I,EAAW59I,KAAKL,EAChBk+I,EAAW79I,KAAKJ,EAChBk+I,GAAoB,EAGxB,GAAI99I,KAAKgtB,kBAAoBhtB,KAAKktB,eAKhC,GAHA0wH,EAAW59I,KAAKL,EAAI0Q,EACpBwtI,EAAW79I,KAAKJ,EAAI0Q,EAEhBtQ,KAAKP,KAAK0sF,YAAYyxD,EAAUC,GAClCC,GAAoB,MACf,CAEM,IAAPxtI,IAAUA,EAAK,EAAA1O,OAAOC,OAAS,GAAM,GAAK,GACnC,IAAPwO,IAAUA,EAAK,EAAAzO,OAAOC,OAAS,GAAM,GAAK,GAC9C,IAAIk8I,EAAa/9I,KAAKL,EAAI2Q,EACtB0tI,EAAah+I,KAAKJ,EAAIyQ,EACtB4tI,EAAaj+I,KAAKL,EAAI2Q,EACtB4tI,EAAal+I,KAAKJ,EAAIyQ,EAGtB8tI,EAAa,EAAAv8I,OAAOC,OAAS,GAC7Bu8I,EAASD,EAAaJ,EAAaE,EACnCI,EAASF,EAAaH,EAAaE,EACnCI,EAAUH,EAAaF,EAAaF,EACpCQ,EAAUJ,EAAaD,EAAaF,EAGpCh+I,KAAKP,KAAK0sF,YAAYiyD,EAAQC,IAChCT,EAAWQ,EACXP,EAAWQ,EACXP,GAAoB,GAGb99I,KAAKP,KAAK0sF,YAAYmyD,EAASC,KACtCX,EAAWU,EACXT,EAAWU,EACXT,GAAoB,E,MAGnB,GAAI99I,KAAKgtB,iBAEd4wH,EAAW59I,KAAKL,EAAI0Q,EACpBwtI,EAAW79I,KAAKJ,EAAI0Q,EAEhBtQ,KAAKP,KAAK0sF,YAAYyxD,EAAUC,KAClCC,GAAoB,QAEjB,GAAI99I,KAAKktB,eAAgB,CACnB,IAAP5c,IAAUA,EAAK,EAAA1O,OAAOC,OAAS,GAAM,GAAK,GACnC,IAAPwO,IAAUA,EAAK,EAAAzO,OAAOC,OAAS,GAAM,GAAK,GAE9C,IAAIk8I,EAAa/9I,KAAKL,EAAI2Q,EACtB0tI,EAAah+I,KAAKJ,EAAIyQ,EACtB4tI,EAAaj+I,KAAKL,EAAI2Q,EACtB4tI,EAAal+I,KAAKJ,EAAIyQ,EAGtB8tI,EAAa,EAAAv8I,OAAOC,OAAS,GAC7Bu8I,EAASD,EAAaJ,EAAaE,EACnCI,EAASF,EAAaH,EAAaE,EACnCI,EAAUH,EAAaF,EAAaF,EACpCQ,EAAUJ,EAAaD,EAAaF,EAGpCh+I,KAAKP,KAAK0sF,YAAYiyD,EAAQC,IAChCT,EAAWQ,EACXP,EAAWQ,EACXP,GAAoB,GAGb99I,KAAKP,KAAK0sF,YAAYmyD,EAASC,KACtCX,EAAWU,EACXT,EAAWU,EACXT,GAAoB,E,CAMpBA,IACF99I,KAAKwV,QAAQooI,EAAUC,GACvB79I,KAAKsc,UAAUvH,EAAMC,IAGvBhV,KAAKugB,UAAW,GAGlB,KAAAk0B,KAAQryC,IACN,IAAI+D,EAAIrE,KAAK4D,IAAI5D,KAAKgG,IAAI9H,KAAK+C,OAAQjB,KAAKgG,IAAI9H,KAAKiD,QACrDjD,KAAK00B,MAAQ5yB,KAAKgG,IAAIhG,KAAKq3C,IAAIhzC,EAAIrE,KAAKyrC,KAAOvtC,KAAKm7B,WAChDn7B,KAAK00B,MAAQ,MAAM10B,KAAK00B,MAAQ,GAChC10B,KAAK00B,MAAQ10B,KAAKm7B,aAAYn7B,KAAK00B,MAAQ10B,KAAKm7B,aAGtD,KAAAz4B,aAAgBN,IAEdpC,KAAKijB,gBAAgB7gB,GACrBpC,KAAKkjB,aAAa9gB,GAEbpC,KAAKojB,eACRpjB,KAAK+C,OAAS/C,KAAKqjB,eAAiBjhB,EACpCpC,KAAKiD,OAASjD,KAAKqjB,eAAiBjhB,EAEpCpC,KAAK+C,MAAQjB,KAAKgG,IAAI9H,KAAK+C,OAAS,IAAO,EAAI/C,KAAK+C,MACpD/C,KAAKiD,MAAQnB,KAAKgG,IAAI9H,KAAKiD,OAAS,IAAO,EAAIjD,KAAKiD,MACpDjD,KAAKy0C,KAAKryC,IAGZpC,KAAKmjB,iBAAiB/gB,IAGxB,KAAAka,UAAY,CAAC3c,EAAWC,KACtBI,KAAK+C,OAAS/C,KAAKL,EAAIA,EACvBK,KAAKiD,OAASjD,KAAKJ,EAAIA,GAUzB,KAAAiV,SAAW,KACT,IAAIo4F,EAAUjtG,KAAKw+I,cACfvxC,IACFjtG,KAAK+C,MAAQkqG,EAAQttG,EAAIK,KAAKL,EAC9BK,KAAKiD,MAAQgqG,EAAQrtG,EAAII,KAAKJ,EAE9BI,KAAKL,EAAIstG,EAAQttG,EACjBK,KAAKJ,EAAIqtG,EAAQrtG,EACjBI,KAAKmT,aAAaoqC,eAAev9C,KAAKL,EAAI,GAAKK,KAAKJ,EAAI,IACxDI,KAAKP,KAAKkiB,mBAId,KAAA68H,YAAc,KAEZ,MAAMvpI,EAAajV,KAAKP,KAAKoI,gBACvBgF,EAAS7M,KAAKkkB,YAEpB,IAAKrX,GAAgC,IAAtBoI,EAAWlU,OACxB,OAAO,KAIT,MAAM09I,EAAqBxpI,EAAWnG,IAAKhD,IAElC,CAAEA,OAAMwI,SADE,EAAAmD,MAAMnD,SAASxI,EAAKnM,EAAGmM,EAAKlM,EAAGiN,EAAOlN,EAAGkN,EAAOjN,MAKnE6+I,EAAmBxvI,KAAK,CAACC,EAAGC,IAAMA,EAAEmF,SAAWpF,EAAEoF,UAGjD,MAAMoqI,EAAWD,EAAmB32H,MAClC,EACAhmB,KAAKgB,MAAM27I,EAAmB19I,OAAS,IAIzC,OAAwB,IAApB29I,EAAS39I,OACJ,KAKF29I,EADa58I,KAAKgB,MAAM,EAAAlB,OAAOC,OAAS68I,EAAS39I,SAC3B+K,MAG/B,KAAA3J,KAAQC,IACDpC,KAAKqC,OACRrC,KAAK0C,aAAaN,GAClBpC,KAAKuD,OAAS,GAAMnB,EAChBpC,KAAKuD,OAAS,IAAGvD,KAAKuD,MAAQ,GAC9BvD,KAAK2C,WAAW3C,KAAK4C,WAAWR,GACpC,EAAAV,KAAKuK,QACHjM,KAAKkB,MAAQY,KAAKgB,MAAM9C,KAAKuD,OAC7BvD,KAAKmB,MAAyB,EAAjBnB,KAAKyb,UAClB,EACA,EACAzb,KAAKL,EAAIK,KAAK+C,MACd/C,KAAKJ,EAAII,KAAKgD,YAAchD,KAAKiD,MAAQjD,KAAK00B,MAC9C,EACA,EACA10B,KAAKkM,eACLlM,KAAKmD,gBAGJnD,KAAKmM,QACHnM,KAAKoM,YACRpM,KAAKqM,eAAejK,GAElBpC,KAAKsM,WAAa,GACpBtM,KAAKuM,gBAAgBnK,KAxpBzBpC,KAAKgD,YAAc,IACnBhD,KAAKwB,KAAO,GACZxB,KAAKoM,YAAa,EAClBpM,KAAK2+I,aAAc,EACnB3+I,KAAK0H,MAAQ,EACb1H,KAAKuD,MAAQ,EACbvD,KAAKC,OAAS,EACdD,KAAKyG,UAAY,EACjBzG,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAK4c,OAAQ,EACb5c,KAAK00B,MAAQ,EACb10B,KAAKm7B,WAAa,GAElBn7B,KAAKwB,KAAO,gBACZxB,KAAK0M,WAAa,GAClB1M,KAAKuzB,OAAS,CACZlsB,OAAQ,CAAE4vD,QAAQ,EAAOomF,SAAU,EAAGC,UAAW,EAAGC,WAAY,GAChEn2I,MAAO,CAAE6vD,QAAQ,EAAOomF,SAAU,EAAGC,UAAW,EAAGC,WAAY,IAEjEv9I,KAAK06B,WAAa,EAAAh0B,iBAAiBk4I,uBACnC5+I,KAAK6+I,gBAAkB,EACvB7+I,KAAKs9I,UAAY,EACjBt9I,KAAK8W,SAAU,EACf9W,KAAK8+I,eAAiB,EACtB9+I,KAAK++I,cAAgB,EACrB/+I,KAAKqjB,cAAgB,IACrBrjB,KAAKugB,UAAW,EAChBvgB,KAAKgtB,kBAAmB,EACxBhtB,KAAKktB,gBAAiB,EACtBltB,KAAKmmC,WAAa,CAEpB,CA2BA,UAAIrrB,GACF,OAAO9a,KAAKwhB,OAAS,EAAIxhB,KAAKmmC,WAAanmC,KAAKmmC,UAClD,CA6gBA,iBAAInL,GACF,MAAO,CACLr7B,EAAGK,KAAKuU,aAAahN,MACrB3H,EAAGI,KAAKuU,aAAa/M,MAEzB,CA8EA,QAAIzD,GACF,OAAO,EAAAC,WAAWuO,KACpB,EAzrBF,UAWS,EAAAqD,WAAqB,C,uKCpD9B,gBACA,UACA,UAGA,UACA,UAGA,IAAYopI,KAAA,EAAAA,WAAA,EAAAA,SAAQ,KAClB,2BACA,6BACA,2BAgBF,MAAalxE,EAKX,WAAAtuE,CAAYG,EAAWC,EAAW4f,GAChCxf,KAAKL,EAAIA,EACTK,KAAKJ,EAAIA,EACTI,KAAKwf,MAAQA,CACf,EATF,wBAYA,MAAa8sD,EAeX,WAAA9sE,CAAYG,EAAWC,EAAWkW,EAAW8M,EAAWlR,GAgBxD,KAAA+e,MAAQqd,UAKN9tC,KAAKi/I,WAAY,EACjBj/I,KAAKk/I,aAAc,EACnBl/I,KAAKm/I,cAAe,EACpBn/I,KAAKo/I,YAAa,EAGlB,IAAIC,EAAW,IAED,IACJ,EAAAz9I,OAAOC,OAAS,IAFX,GAOf,GAAI7B,KAAK8V,EAAI9V,KAAK4iB,EAAG,CACnB,IAAI08H,EAAKx9I,KAAKgB,MAAMu8I,IAAar/I,KAAK8V,GAClCypI,EAAKv/I,KAAK8V,EAAIwpI,EAAK,EACvB,OAAIA,EALS,GAKQC,EALR,EAK8B,CAACv/I,MACrC,CACL,IAAIssE,EAAUtsE,KAAKL,EAAGK,KAAKJ,EAAG0/I,EAAIt/I,KAAK4iB,EAAG5iB,KAAK0R,WAC/C,IAAI46D,EAAUtsE,KAAKL,EAAI2/I,EAAK,EAAGt/I,KAAKJ,EAAG2/I,EAAIv/I,KAAK4iB,EAAG5iB,KAAK0R,W,CAErD,CACL,IAAI8tI,EAAK19I,KAAKgB,MAAMu8I,IAAar/I,KAAK4iB,GAClC68H,EAAKz/I,KAAK4iB,EAAI48H,EAAK,EACvB,OAAIA,EAbS,GAaQC,EAbR,EAa8B,CAACz/I,MACrC,CACL,IAAIssE,EAAUtsE,KAAKL,EAAGK,KAAKJ,EAAGI,KAAK8V,EAAG0pI,EAAIx/I,KAAK0R,WAC/C,IAAI46D,EAAUtsE,KAAKL,EAAGK,KAAKJ,EAAI4/I,EAAK,EAAGx/I,KAAK8V,EAAG2pI,EAAIz/I,KAAK0R,W,GAK9D,KAAAguI,SAAW,CAAC//I,EAAWC,IAEnBD,GAAKK,KAAKL,GAAKA,EAAIK,KAAKL,EAAIK,KAAK8V,GAAKlW,GAAKI,KAAKJ,GAAKA,EAAII,KAAKJ,EAAII,KAAK4iB,EAI3E,KAAA+8H,cAAgB,CAAChgJ,EAAWC,IAEvBD,GAAKK,KAAKL,EAAI,GACbA,EAAIK,KAAKL,EAAIK,KAAK8V,EAAI,GACtBlW,GAAKI,KAAKJ,GACVA,EAAII,KAAKJ,EAAII,KAAK4iB,GACnBjjB,GAAKK,KAAKL,GACTA,EAAIK,KAAKL,EAAIK,KAAK8V,GAClBlW,GAAKI,KAAKJ,EAAI,GACdA,EAAII,KAAKJ,EAAII,KAAK4iB,EAAI,EAI5B,KAAAklD,KAAO,IACE9nE,KAAK8V,EAAI9V,KAAK4iB,EAGvB,KAAA8sD,SAAYlwD,GAERA,EAAM7f,EAAIK,KAAKL,EAAIK,KAAK8V,EAAI,GAC5B0J,EAAM7f,EAAI6f,EAAM1J,EAAI9V,KAAKL,EAAI,GAC7B6f,EAAM5f,EAAII,KAAKJ,EAAII,KAAK4iB,EAAI,GAC5BpD,EAAM5f,EAAI4f,EAAMoD,EAAI5iB,KAAKJ,EAAI,EAIjC,KAAAmuE,YAAexG,IAEXA,EAAW3nE,IAAMI,KAAKJ,EAAI,GAC1B2nE,EAAW5nE,GAAKK,KAAKL,GACrB4nE,EAAW5nE,EAAIK,KAAKL,EAAIK,KAAK8V,IAE7B9V,KAAKi/I,WAAY,GAGjB13E,EAAW3nE,IAAMI,KAAKJ,EAAII,KAAK4iB,GAC/B2kD,EAAW5nE,GAAKK,KAAKL,GACrB4nE,EAAW5nE,EAAIK,KAAKL,EAAIK,KAAK8V,IAE7B9V,KAAKm/I,cAAe,GAGpB53E,EAAW5nE,IAAMK,KAAKL,EAAIK,KAAK8V,GAC/ByxD,EAAW3nE,GAAKI,KAAKJ,GACrB2nE,EAAW3nE,EAAII,KAAKJ,EAAII,KAAK4iB,IAE7B5iB,KAAKk/I,aAAc,GAGnB33E,EAAW5nE,IAAMK,KAAKL,EAAI,GAC1B4nE,EAAW3nE,GAAKI,KAAKJ,GACrB2nE,EAAW3nE,EAAII,KAAKJ,EAAII,KAAK4iB,IAE7B5iB,KAAKo/I,YAAa,IAItB,KAAAQ,iBAAmB,KACjB,IAAIC,EAAS,GACb,IAAK,IAAIlgJ,EAAIK,KAAKL,EAAGA,EAAIK,KAAKL,EAAIK,KAAK8V,EAAGnW,IACxCkgJ,EAAO71I,KAAK,CAAErK,EAAGA,EAAGC,EAAGI,KAAKJ,EAAI,IAChCigJ,EAAO71I,KAAK,CAAErK,EAAGA,EAAGC,EAAGI,KAAKJ,EAAII,KAAK4iB,IAEvC,IAAK,IAAIhjB,EAAII,KAAKJ,EAAGA,EAAII,KAAKJ,EAAII,KAAK4iB,EAAGhjB,IACxCigJ,EAAO71I,KAAK,CAAErK,EAAGK,KAAKL,EAAI,EAAGC,EAAGA,IAChCigJ,EAAO71I,KAAK,CAAErK,EAAGK,KAAKL,EAAIK,KAAK8V,EAAGlW,EAAGA,IASvC,OAPAigJ,EAASA,EAAOn/I,OACb2J,IACErK,KAAKwnE,YAAYv/D,KACfq1C,GAAMx7C,KAAKgG,IAAIw1C,EAAE39C,EAAI0K,EAAE1K,GAAKmC,KAAKgG,IAAIw1C,EAAE19C,EAAIyK,EAAEzK,IAAM,IAG1DigJ,EAAO5wI,KAAK,IAAM,GAAM,EAAArN,OAAOC,QACxBg+I,EAAO,IArId7/I,KAAKL,EAAIA,EACTK,KAAKJ,EAAIA,EACTI,KAAK8V,EAAIA,EACT9V,KAAK4iB,EAAIA,EACT5iB,KAAK0R,UAAYA,EACjB1R,KAAK+D,KAAO,EAAA6N,SAAS0pB,QACrBt7B,KAAKwnE,YAAc,GACnBxnE,KAAKsU,SAAW,IAChBtU,KAAKi/I,WAAY,EACjBj/I,KAAKk/I,aAAc,EACnBl/I,KAAKm/I,cAAe,EACpBn/I,KAAKo/I,YAAa,EAClBp/I,KAAK8/I,UAAY,CACnB,EA7BF,cAyJA,MAAa30E,EAGX,WAAA3rE,GACEQ,KAAKwmE,WAAa,EACpB,EALF,iBAQA,2BAIE,WAAAhnE,CAAYE,GACVM,KAAK60I,UAAY,IAAI,EAAAkL,eAAergJ,GACpCM,KAAKggJ,WAAa,IAAI,EAAAC,qBAAqBvgJ,EAC7C,CAEA,+BAAMwgJ,CACJxgJ,EACAwoE,EACAC,EACAn6D,EACAq2G,EACA87B,GAEA,MAAMj1E,EAAe,IAAIC,EACzB,IAAIi1E,EACA/6H,EAAW,EAEfrlB,KAAKggJ,WAAWn3E,eAAe,8BAA+B,GAE9D,GACExjD,IACArlB,KAAKggJ,WAAWn3E,eACd,wBAAwBxjD,IACb,GAAXA,SAGIrlB,KAAKqgJ,yBACT3gJ,EACAwrE,EACAhD,EACAC,EACAn6D,EACAq2G,EACA87B,GAGFC,EAAmBpgJ,KAAK60I,UAAUzwB,0BAChCl5C,EAAa1E,WACb69C,GAIFrkH,KAAKggJ,WAAWp5E,sBACdsE,EAAa1E,WACb0B,EAAW,EACXC,EAAY,EACZ,aACA,WAIMi4E,EAAiB9gE,SAS3B,OAPAt/E,KAAKggJ,WAAWn3E,eAAe,wBAAyB,UAClD7oE,KAAKggJ,WAAWt4E,qBAAqB,SAE3C1nE,KAAKggJ,WAAWt3E,mBAAmB,uBACnC1oE,KAAKggJ,WAAWn3E,eAAe,sBAAuB,GAEtDh/D,QAAQ+C,IAAI,uBACLs+D,EAAa1E,UACtB,CAEA,4BAAM85E,CAAuBnnI,GAC3B,MAAM+xD,EAAe,IAAIC,EACzB,IAAIi1E,EACA/6H,EAAW,EACf,MAAM6iD,EAAW/uD,EAAK+uD,UAAY,GAC5BC,EAAYhvD,EAAKgvD,WAAa,GAC9B4nD,EAAW52G,EAAKonG,WAAa,EAC7BggC,EAAyC,iBAAnBpnI,EAAKqnI,UAC3BC,EACsB,iBAAnBtnI,EAAKsnI,UACRtnI,EAAKsnI,UACLF,EACEz+I,KAAK4D,IAAI,EAAG5D,KAAKyD,IAAI,EAAG,EAAK4T,EAAKqnI,YAClC,GACFE,EACsB,iBAAnBvnI,EAAKunI,UACRvnI,EAAKunI,UACLH,EACEz+I,KAAK4D,IAAI,EAAG5D,KAAKyD,IAAI,EAAG,EAAK4T,EAAKqnI,YAClC,GAERxgJ,KAAKggJ,WAAWn3E,eAAe,2BAA4B,GAE3D,GACExjD,IACArlB,KAAKggJ,WAAWn3E,eACd,6BAA6BxjD,IAClB,GAAXA,SAGIrlB,KAAK2gJ,sBACTz1E,EACAhD,EACAC,EACA4nD,EACA0wB,EACAC,GAGFN,EAAmBpgJ,KAAK60I,UAAU1vB,uBAChCj6C,EAAa1E,WACbupD,GAIF/vH,KAAKggJ,WAAWp5E,sBACdsE,EAAa1E,WACb0B,EAAW,EACXC,EAAY,EACZ,kBACA,WAIMi4E,EAAiB9gE,SAG3B,OADAt/E,KAAKggJ,WAAWn3E,eAAe,2BAA4B,GACpDqC,EAAa1E,UACtB,CAEA,0BAAAo6E,CACE31I,EAAiB,EACjBJ,EAAgB,GAEhB,MAAM27D,EAAa,CAAC,IAAI8F,EAAU,EAAG,EAAGrhE,EAAQJ,EAAO,UACvD27D,EAAW,GAAGziE,KAAO,EAAA6N,SAAS44D,SAG9B,MAAM41E,EACJpgJ,KAAK60I,UAAUnvB,2BAA2Bl/C,GAC5C,IAAK45E,EAAiB9gE,QACpB,MAAM,IAAIhsD,MACR,+BAA+B8sH,EAAiB/6B,gBAIpD,OAAO7+C,CACT,CAEQ,8BAAM65E,CACZ3gJ,EACAwrE,EACA21E,EACAC,EACA9yI,EACAq2G,EACA87B,GAEA,MAAM,aACJz7B,EAAY,aACZoC,EAAY,YACZ2C,EAAW,mBACXC,EAAkB,sBAClBC,EAAqB,gBACrBG,GACEzF,EAaJ,IAXAn5C,EAAa1E,WAAa,CAAC,IAAI8F,EAAU,EAAG,EAAGu0E,EAAOC,EAAO,UAE7D9gJ,KAAKggJ,WAAWn3E,eAAe,uBAAwB,IACvD7oE,KAAKggJ,WAAWp5E,sBACdsE,EAAa1E,WACbq6E,EAAQ,EACRC,EAAQ,EACR,aAIK51E,EAAa1E,WAAWzlE,OAASsjH,EAAOyC,cAC7C,IAAK,IAAI9gH,EAAI,EAAGA,EAAI0jH,EAAmB3oH,OAAQiF,IAC7CklE,EAAa1E,iBAAmBxmE,KAAK+gJ,gBACnC71E,EAAa1E,WACbkjD,EAAmB1jH,IAIrBhG,KAAKggJ,WAAWp5E,sBACdsE,EAAa1E,WACbq6E,EAAQ,EACRC,EAAQ,EACR,YACA,GAAO96I,EAAI0jH,EAAmB3oH,OAAU,IAK9C,IAAK,IAAIiF,EAAI,EAAGA,EAAI,IAAKA,IACvBklE,EAAa1E,WAAWjlE,QAAQusC,MAAOi5B,IACrC,IAAI0tB,EAAW,EAAA7yF,OAAOC,OAAS,IAAOioH,EAAkBL,EACpD1iD,EAAUe,OAAS2sB,IACrBvpB,EAAa1E,WAAa0E,EAAa1E,WAAW9lE,OAC/C2J,GAAMA,IAAM08D,GAEfmE,EAAa1E,WAAa0E,EAAa1E,WAAW1hB,aAC1C9kD,KAAKghJ,eAAej6E,EAAW,QAgB7C,GAVA/mE,KAAKggJ,WAAWn3E,eAAe,sBAAuB,IACtDqC,EAAa1E,WAAaxmE,KAAKihJ,gBAC7B/1E,EAAa1E,WACbq6E,EACAC,EACAn3B,SAGI3pH,KAAKggJ,WAAWt4E,qBAAqB,SAEJ,IAAnCwD,EAAa1E,WAAWzlE,OAE1B,YADAmqE,EAAa1E,WAAa,IAS5B,GALAxmE,KAAKggJ,WAAWn3E,eAAe,uBAAwB,IAEvDqC,EAAa1E,WAAWv3D,KAAK,CAACC,EAAGC,IAAMD,EAAE44D,OAAS34D,EAAE24D,QACpD9nE,KAAKggJ,WAAWp4E,sBAAsBsD,EAAa1E,YAEZ,IAAnC0E,EAAa1E,WAAWzlE,OAE1B,YADAmqE,EAAa1E,WAAa,IAI5B,IAAIqG,EAAQ3B,EAAa1E,WAAW,GAC/BqG,GAKLA,EAAM9oE,KAAO,EAAA6N,SAASy3D,MACtBwD,EAAMn7D,UAAY,iBACdw5D,EAAa1E,WAAWzlE,OAAS,IACnCmqE,EAAa1E,WAAW0E,EAAa1E,WAAWzlE,OAAS,GAAGgD,KAC1D,EAAA6N,SAAS03D,KACX4B,EAAa1E,WAAW0E,EAAa1E,WAAWzlE,OAAS,GAAG2Q,UAC1D,OAGJ1R,KAAKggJ,WAAWn3E,eAAe,wBAAyB,UAClD7oE,KAAKstE,kBAAkBpC,EAAc2B,EAAOszE,GAAUM,WAE5DzgJ,KAAKggJ,WAAWn3E,eAAe,0BAA2B,IACtDqC,EAAa1E,WAAWzlE,OAAS,SAC7Bf,KAAKktE,mBAAmBhC,EAAci1E,GAAUO,WAGxD1gJ,KAAKggJ,WAAWn3E,eAAe,oBAAqB,IAChDqC,EAAa1E,WAAWzlE,OAAS,SAC7Bf,KAAKutE,aAAarC,EAAcxrE,GAGxCM,KAAKggJ,WAAWn3E,eAAe,wBAAyB,IACpDqC,EAAa1E,WAAWzlE,OAAS,UAC7Bf,KAAKmtE,mBAAmBjC,EAAc2B,SACtC7sE,KAAKotE,gBAAgBlC,KA7B3BA,EAAa1E,WAAa,EA+B9B,CAEQ,2BAAMm6E,CACZz1E,EACA21E,EACAC,EACAI,EACAT,EAAoB,GACpBC,EAAoB,IAGpBx1E,EAAa1E,WAAa,CACxB,IAAI8F,EAFc,QAEsBu0E,EAAOC,EAAO,UAGxD,IAAK,IAAI96I,EAAI,EAAGA,EAAI,EAAGA,IACrBklE,EAAa1E,iBAAmBxmE,KAAK+gJ,gBACnC71E,EAAa1E,WACb,KAMJ,GAFA0E,EAAa1E,WAAWv3D,KAAK,CAACC,EAAGC,IAAMD,EAAE44D,OAAS34D,EAAE24D,QAEb,IAAnCoD,EAAa1E,WAAWzlE,OAC1B,MAAM,IAAIuyB,MAAM,4BAGlB,IAAIu5C,EAAQ3B,EAAa1E,WAAW,GACpCqG,EAAM9oE,KAAO,EAAA6N,SAASy4D,SACtB,IAAK,IAAIrkE,EAAI,EAAGA,EAAIklE,EAAa1E,WAAWzlE,OAAQiF,IAClDklE,EAAa1E,WAAWxgE,GAAGjC,KAAO,EAAA6N,SAAS2pB,WAGvCv7B,KAAKitE,sBAAsB/B,EAAc2B,EAAOq0E,EAAWT,SAC3DzgJ,KAAKmhJ,aAAaj2E,EAAcw1E,SAChC1gJ,KAAKmtE,mBAAmBjC,EAAc2B,EAC9C,CAEQ,qBAAMk0E,CACZv6E,EACA46E,GAEA,IAAK,IAAIr6E,KAAaP,EAChB,EAAA5kE,OAAOC,OAASu/I,IAClBphJ,KAAKggJ,WAAWt3E,mBAAmB,kBAAmB3B,GAEtDP,GADAA,EAAaA,EAAW9lE,OAAQ2J,GAAMA,IAAM08D,IACpBjiB,aAAaiiB,EAAUt2C,UAGnD,OAAO+1C,CACT,CAEQ,oBAAMw6E,CACZj6E,EACAq6E,GAEA,OAAI,EAAAx/I,OAAOC,OAASu/I,QACLr6E,EAAUt2C,QAEhB,CAACs2C,EAEZ,CAEQ,YAAAs6E,CACN76E,EACA0B,EACAC,GAEA,OAAO3B,EAAW9lE,OAAQqmE,IACxB,MAAMp7C,EACJlQ,IAEA,OAAQA,GACN,IAAK,OACH,IAAK,IAAI7b,EAAImnE,EAAUnnE,EAAGA,EAAImnE,EAAUnnE,EAAImnE,EAAUnkD,EAAGhjB,IAUvD,IATc4mE,EAAWv+D,KAAMuX,GACzBA,IAAUunD,GAEZvnD,EAAM5f,GAAKA,GACXA,EAAI4f,EAAM5f,EAAI4f,EAAMoD,GACpBpD,EAAM7f,EAAI6f,EAAM1J,EAAI,GACpB0J,EAAM7f,EAAI6f,EAAM1J,GAAKixD,EAAUpnE,GAGrB,OAAO,EAEvB,OAAO,EACT,IAAK,QACH,IAAK,IAAIC,EAAImnE,EAAUnnE,EAAGA,EAAImnE,EAAUnnE,EAAImnE,EAAUnkD,EAAGhjB,IAUvD,IATc4mE,EAAWv+D,KAAMuX,GACzBA,IAAUunD,GAEZvnD,EAAM5f,GAAKA,GACXA,EAAI4f,EAAM5f,EAAI4f,EAAMoD,GACpBpD,EAAM7f,EAAIuoE,GACV1oD,EAAM7f,GAAKonE,EAAUpnE,EAAIonE,EAAUjxD,GAGzB,OAAO,EAEvB,OAAO,EACT,IAAK,MACH,IAAK,IAAInW,EAAIonE,EAAUpnE,EAAGA,EAAIonE,EAAUpnE,EAAIonE,EAAUjxD,EAAGnW,IAUvD,IATc6mE,EAAWv+D,KAAMuX,GACzBA,IAAUunD,GAEZvnD,EAAM7f,GAAKA,GACXA,EAAI6f,EAAM7f,EAAI6f,EAAM1J,GACpB0J,EAAM5f,EAAI4f,EAAMoD,EAAI,GACpBpD,EAAM5f,EAAI4f,EAAMoD,GAAKmkD,EAAUnnE,GAGrB,OAAO,EAEvB,OAAO,EACT,IAAK,SACH,IAAK,IAAID,EAAIonE,EAAUpnE,EAAGA,EAAIonE,EAAUpnE,EAAIonE,EAAUjxD,EAAGnW,IAUvD,IATc6mE,EAAWv+D,KAAMuX,GACzBA,IAAUunD,GAEZvnD,EAAM7f,GAAKA,GACXA,EAAI6f,EAAM7f,EAAI6f,EAAM1J,GACpB0J,EAAM5f,EAAIuoE,GACV3oD,EAAM5f,GAAKmnE,EAAUnnE,EAAImnE,EAAUnkD,GAGzB,OAAO,EAEvB,OAAO,EACT,QACE,OAAO,IAWb,OAAqB,IAPH,CAChB+I,EAAY,QACZA,EAAY,SACZA,EAAY,OACZA,EAAY,WACZjrB,OAAOsvI,SAASjvI,QAItB,CAEQ,eAAAkgJ,CACNz6E,EACA1wD,EACA8M,EACAw+H,EAAe,GAEf,MAAME,EAAYthJ,KAAKqhJ,aAAa76E,EAAY1wD,EAAG8M,GAEnD,IAAK,MAAM2+H,KAAYD,EACjB,EAAA1/I,OAAOC,OAASu/I,IAClB56E,EAAaA,EAAW9lE,OAAQ2J,GAAMA,IAAMk3I,IAIhD,OAAO/6E,CACT,CAEQ,uBAAM8G,CACZpC,EACA2B,EACA4zE,GAEA,IAAIjzE,EAAY,CAACX,GACbY,EAAW,CAACZ,GACZ20E,GAAa,EAEjB,KAAO/zE,EAAS1sE,OAAS,IAAMygJ,GAAY,CACzC,IAAI/hJ,EAAOguE,EAAS,GAChBhuE,IAASotE,GACX7sE,KAAKggJ,WAAWt3E,mBAAmB,iBAAkBjpE,GAEvDguE,EAASV,OAAO,EAAG,GAEnB,IAAI00E,EAAc,EAElB,MAAMC,OACU7pI,IAAd4oI,EACI3+I,KAAKgB,MAAsB,EAAhB,EAAAlB,OAAOC,OAAa,GAC/B,GAAK,EAAAD,OAAOC,OAASC,KAAK4D,IAAI,EAAG5D,KAAKyD,IAAI,EAAGk7I,IAAc,EAAI,GACrE,IAAIkB,EAAQ,EACZ,MAAMC,EAAY,IAElB,KAAOH,EAAcC,GAAaC,EAAQC,GAAW,CACnD,IAAIC,EAAQpiJ,EAAKmgJ,mBACjB,IAAK,MAAMv1I,KAAK6gE,EAAa1E,WAC3B,GACEn8D,IAAM5K,IACoB,IAA1B+tE,EAAUrmE,QAAQkD,IAClBA,EAAEs1I,cAAckC,EAAMliJ,EAAGkiJ,EAAMjiJ,GAC/B,CACAH,EAAK+nE,YAAYx9D,KAAK,IAAI8jE,EAAoB+zE,EAAMliJ,EAAGkiJ,EAAMjiJ,EAAGyK,IAChEA,EAAEm9D,YAAYx9D,KAAK,IAAI8jE,EAAoB+zE,EAAMliJ,EAAGkiJ,EAAMjiJ,EAAGH,IAE7DA,EAAKsuE,YAAY,IAAID,EAAoB+zE,EAAMliJ,EAAGkiJ,EAAMjiJ,EAAGyK,IAC3DA,EAAE0jE,YAAY,IAAID,EAAoB+zE,EAAMliJ,EAAGkiJ,EAAMjiJ,EAAGH,IAExDguE,EAASzjE,KAAKK,GACdmjE,EAAUxjE,KAAKK,GACfo3I,IACIp3I,EAAEtG,OAAS,EAAA6N,SAAS03D,OACtBk4E,GAAa,EACbxhJ,KAAKggJ,WAAWt3E,mBAAmB,aAAcr+D,IAEnD,K,CAGJs3I,G,OAGI3hJ,KAAKggJ,WAAWt4E,qBAAqB,c,CAI7C,IAAK,MAAMX,KAAamE,EAAa1E,WACE,IAAjCO,EAAUS,YAAYzmE,SACxBmqE,EAAa1E,WAAa0E,EAAa1E,WAAW9lE,OAC/C2J,GAAMA,IAAM08D,GAIrB,CAEQ,2BAAMkG,CACZ/B,EACA2B,EACAq0E,EACAT,EAAoB,IAEpB,IAAIjzE,EAAY,CAACX,GACbY,EAAW,CAACZ,GAEhB,KAAOY,EAAS1sE,OAAS,GAAKysE,EAAUzsE,OAASmgJ,GAAW,CAC1D,IAAIzhJ,EAAOguE,EAAS,GACpBA,EAASV,OAAO,EAAG,GAEnB,IAAI00E,EAAc,EAElB,MAAMK,EAAchgJ,KAAK4D,IAAI,EAAG5D,KAAKyD,IAAI,EAAGk7I,IACtCiB,EAAY,GAAK,EAAA9/I,OAAOC,OAASigJ,EAAc,EAAI,GACzD,IAAIH,EAAQ,EACZ,MAAMC,EAAY,IAElB,KACEH,EAAcC,GACdC,EAAQC,GACRp0E,EAAUzsE,OAASmgJ,GACnB,CACA,IAAIW,EAAQpiJ,EAAKmgJ,mBACjB,IAAKiC,EAAO,MAEZ,IAAK,MAAMx3I,KAAK6gE,EAAa1E,WAC3B,GACEn8D,IAAM5K,IACoB,IAA1B+tE,EAAUrmE,QAAQkD,IAClBA,EAAEs1I,cAAckC,EAAMliJ,EAAGkiJ,EAAMjiJ,GAC/B,CACAH,EAAK+nE,YAAYx9D,KAAK,IAAI8jE,EAAoB+zE,EAAMliJ,EAAGkiJ,EAAMjiJ,EAAGyK,IAChEA,EAAEm9D,YAAYx9D,KAAK,IAAI8jE,EAAoB+zE,EAAMliJ,EAAGkiJ,EAAMjiJ,EAAGH,IAC7DguE,EAASzjE,KAAKK,GACdmjE,EAAUxjE,KAAKK,GACfo3I,IACA,K,CAGJE,G,EASJ,GAJAz2E,EAAa1E,WAAa0E,EAAa1E,WAAW9lE,OAC/CqmE,GAAcA,EAAUS,YAAYzmE,OAAS,GAGT,IAAnCmqE,EAAa1E,WAAWzlE,OAC1B,MAAM,IAAIuyB,MAAM,kCAEpB,CAEQ,wBAAM45C,CACZhC,EACAw1E,GAGA,GAAuC,IAAnCx1E,EAAa1E,WAAWzlE,OAC1B,OAGF,IAAIghJ,OACYlqI,IAAd6oI,EACI5+I,KAAKgB,MAAsB,EAAhB,EAAAlB,OAAOC,OAAa,GAC/BC,KAAKgB,OACc,EAAhB,EAAAlB,OAAOC,OAAa,GAAKC,KAAK4D,IAAI,EAAG5D,KAAKyD,IAAI,EAAGm7I,KAE1D,IAAK,IAAI16I,EAAI,EAAGA,EAAI+7I,GAEqB,IAAnC72E,EAAa1E,WAAWzlE,OAFMiF,IAAK,CAMvC,IAAIipE,EAAYntE,KAAKgB,MACnB,EAAAlB,OAAOC,OAASqpE,EAAa1E,WAAWzlE,QAEtCtB,EAAOyrE,EAAa1E,WAAWyI,GAGnC,IAAKxvE,EACH,SAGF,IAAIuiJ,GAAa,EACbL,EAAQ,EACZ,MAAMC,EAAY,GAElB,IAAIK,EAAwB/2E,EAAa1E,WAAW9lE,OACjD2J,GAAMA,IAAM5K,EAAK+nE,YAAYv/D,KAAMq1C,GAAMA,EAAE99B,QAAUnV,IAGxD,MAAQ23I,GAAcL,EAAQC,GAAW,CACvC,IAAIC,EAAQpiJ,EAAKmgJ,mBACjB,IAAKiC,EACH,MAGF,IAAK,MAAMx3I,KAAK43I,EACd,GAAI53I,GAAKA,IAAM5K,GAAQ4K,EAAEs1I,cAAckC,EAAMliJ,EAAGkiJ,EAAMjiJ,GAAI,CACxDH,EAAK+nE,YAAYx9D,KAAK,IAAI8jE,EAAoB+zE,EAAMliJ,EAAGkiJ,EAAMjiJ,EAAGyK,IAChEA,EAAEm9D,YAAYx9D,KAAK,IAAI8jE,EAAoB+zE,EAAMliJ,EAAGkiJ,EAAMjiJ,EAAGH,IAE7DA,EAAKsuE,YAAY,IAAID,EAAoB+zE,EAAMliJ,EAAGkiJ,EAAMjiJ,EAAGyK,IAC3DA,EAAE0jE,YAAY,IAAID,EAAoB+zE,EAAMliJ,EAAGkiJ,EAAMjiJ,EAAGH,IAExDuiJ,GAAa,EACb,K,CAGJL,G,EAGN,CAEQ,kBAAMR,CACZj2E,EACAw1E,EAAoB,IAGpB,GAAuC,IAAnCx1E,EAAa1E,WAAWzlE,OAC1B,OAGF,IAAIghJ,EAAiBjgJ,KAAKgB,OACP,EAAhB,EAAAlB,OAAOC,OAAa,GAAKC,KAAK4D,IAAI,EAAG5D,KAAKyD,IAAI,EAAGm7I,KAEpD,IAAK,IAAI16I,EAAI,EAAGA,EAAI+7I,GAEqB,IAAnC72E,EAAa1E,WAAWzlE,OAFMiF,IAAK,CAMvC,IAAIipE,EAAYntE,KAAKgB,MACnB,EAAAlB,OAAOC,OAASqpE,EAAa1E,WAAWzlE,QAEtCtB,EAAOyrE,EAAa1E,WAAWyI,GAGnC,IAAKxvE,EACH,SAGF,IAAIuiJ,GAAa,EACbL,EAAQ,EACZ,MAAMC,EAAY,IAElB,IAAIK,EAAwB/2E,EAAa1E,WAAW9lE,OACjD2J,GAAMA,IAAM5K,EAAK+nE,YAAYv/D,KAAMq1C,GAAMA,EAAE99B,QAAUnV,IAGxD,MAAQ23I,GAAcL,EAAQC,GAAW,CACvC,IAAIC,EAAQpiJ,EAAKmgJ,mBACjB,IAAKiC,EACH,MAGF,IAAK,MAAMx3I,KAAK43I,EACd,GAAI53I,GAAKA,IAAM5K,GAAQ4K,EAAEs1I,cAAckC,EAAMliJ,EAAGkiJ,EAAMjiJ,GAAI,CACxDH,EAAK+nE,YAAYx9D,KAAK,IAAI8jE,EAAoB+zE,EAAMliJ,EAAGkiJ,EAAMjiJ,EAAGyK,IAChEA,EAAEm9D,YAAYx9D,KAAK,IAAI8jE,EAAoB+zE,EAAMliJ,EAAGkiJ,EAAMjiJ,EAAGH,IAC7DuiJ,GAAa,EACb,K,CAGJL,G,EAGN,CAEQ,kBAAMp0E,CAAarC,EAA4BxrE,GACrD,IAAKwrE,EAAa1E,WAAWv+D,KAAMoC,GAAMA,EAAEtG,OAAS,EAAA6N,SAAS03D,MAE3D,YADA4B,EAAa1E,WAAa,IAI5B,IAAI6G,EAAOnC,EAAa1E,WAAWlmE,KAAM+J,GAAMA,EAAEtG,OAAS,EAAA6N,SAAS03D,MAC/D+F,GAAc,EAKlB,IAAK,IAAIC,EAAc,EAAGA,EAJF,EAIiCA,IAAe,CACtE,IAAIG,EAAQ,IAAInD,EACd,EAAA5qE,KAAKG,KAAKwrE,EAAK1tE,EAAI,EAAG0tE,EAAK1tE,EAAI0tE,EAAKv3D,EAAI,EAAG,EAAAlU,OAAOC,MAClDwrE,EAAKztE,EALe,EAKO,EANR,EACC,EAQpB,SAKF,GAHA6vE,EAAM1rE,KAAO,EAAA6N,SAASE,WACtB29D,EAAM/9D,UAAY,QAEbw5D,EAAa1E,WAAWv+D,KAAMoC,GAAMA,EAAEqlE,SAASD,IAAS,CAC3DJ,GAAc,EACdnE,EAAa1E,WAAWx8D,KAAKylE,GAC7BA,EAAMjI,YAAYx9D,KAChB,IAAI8jE,EAAoB2B,EAAM9vE,EAAI,EAAG8vE,EAAM7vE,EAjBzB,EAiB8CytE,IAElEA,EAAK7F,YAAYx9D,KACf,IAAI8jE,EACF2B,EAAM9vE,EAAI,EACV8vE,EAAM7vE,EAtBU,EAuBhB6vE,IAIJA,EAAM1B,YACJ,IAAID,EAAoB2B,EAAM9vE,EAAI,EAAG8vE,EAAM7vE,EA5BzB,EA4B8CytE,IAElEA,EAAKU,YACH,IAAID,EACF2B,EAAM9vE,EAAI,EACV8vE,EAAM7vE,EAjCU,EAkChB6vE,IAGJ,K,EAICJ,IACHxlE,QAAQ+C,IAAI,kBACZs+D,EAAa1E,WAAa,GAE9B,CAEQ,wBAAM2G,CACZjC,EACA2B,GAEA,IAAIY,EAAW,CAACZ,GACZ8C,EAAO,GAGX,IAFA9C,EAAMv4D,SAAW,EAEVm5D,EAAS1sE,OAAS,GAAG,CAC1B,IAAItB,EAAOguE,EAAS,GACpBA,EAASV,OAAO,EAAG,GACnB4C,EAAK3lE,KAAKvK,GAEV,IAAK,IAAI69C,KAAK79C,EAAK+nE,YAAa,CAC9B,IAAIhoD,EAAQ89B,EAAE99B,MACdA,EAAMlL,SAAWxS,KAAKyD,IAAIia,EAAMlL,SAAU7U,EAAK6U,SAAW,IAC7B,IAAzBq7D,EAAKxoE,QAAQqY,IAAeiuD,EAASzjE,KAAKwV,E,EAGpD,CAEQ,qBAAM4tD,CAAgBlC,GAE5B,IAAK,MAAM7gE,KAAK6gE,EAAa1E,WACvBn8D,EAAEtG,OAAS,EAAA6N,SAAS0pB,SAClBjxB,EAAEiK,SAAW,GAAKjK,EAAEy9D,QAAU,IAAM,EAAAlmE,OAAOC,OAAS,IACtDwI,EAAEtG,KAAO,EAAA6N,SAAS23D,gBAQlBvpE,KAAKggJ,WAAWt4E,qBAAqB,QAC7C,CAGA,aAAAw6E,GACE,OAAOliJ,KAAKggJ,UACd,E,kGCp8BF,eAEA,UAKA,SAGA,MAAanqC,UAAkB,EAAAt2G,OAC7B,WAAAC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GAiBvB,KAAAuC,KAAQC,IACFpC,KAAKqC,OACT,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MACvBzC,KAAKqC,OACJrC,KAAK2C,WAAW3C,KAAK4C,WAAWR,GACpCpC,KAAK0C,aAAaN,GAClB,EAAAV,KAAKmB,QACH7C,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAIK,KAAK+C,MACd/C,KAAKJ,EAAII,KAAKgD,YAAchD,KAAKiD,MACjC,EACA,EACAjD,KAAKP,KAAKyD,WACVlD,KAAKmD,gBAGT,EAAAzB,KAAKY,IAAIc,YAGX,KAAAC,aAAgBjB,IACdpC,KAAKsD,UAAYtD,KAAKJ,GAxCtBI,KAAKP,KAAOA,EACZO,KAAKC,OAAS,EACdD,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAK2C,WAAY,EACjB3C,KAAK2D,eAAgB,EACrB3D,KAAKwB,KAAO,aACZxB,KAAK6D,eAAiB,EACtB7D,KAAK8D,eAAiB,EAExB,CAEA,QAAIC,GACF,OAAO,EAAAC,WAAWwO,IACpB,EAjBF,a,oGCVA,gBACA,UACA,UAEA,UAEA,oBAEE,WAAAhT,CAAYC,GA2CZ,KAAA0iJ,YAAc,CACZC,EACAC,EACAC,EACAC,EACA13I,EACAI,KAEA,IAAIqa,EAAmC,GASvC,OARI+8H,IAAWE,GAASH,GAAUE,GAASF,GAAUE,EAAQz3I,GAC3Dya,EAAWtb,KAAK,EAAAkyE,cAAcsmE,OAC5BH,IAAWE,EAAQt3I,GAAUm3I,GAAUE,GAASF,GAAUE,EAAQz3I,GACpEya,EAAWtb,KAAK,EAAAkyE,cAAcumE,OAC5BL,IAAWE,GAASD,GAAUE,GAASF,GAAUE,EAAQt3I,GAC3Dqa,EAAWtb,KAAK,EAAAkyE,cAAcwmE,MAC5BN,IAAWE,EAAQz3I,GAASw3I,GAAUE,GAASF,GAAUE,EAAQt3I,GACnEqa,EAAWtb,KAAK,EAAAkyE,cAAcymE,MACzBr9H,GAOD,KAAAs9H,mBAAsB7wI,IAC5B,IAAIua,EAAQ,EACZ,IAAK,IAAIrmB,EAAK8L,EAAKpS,EAAI,EAAGsG,GAAM8L,EAAKpS,EAAI,EAAGsG,IAC1C,IAAK,IAAI4F,EAAKkG,EAAKnS,EAAI,EAAGiM,GAAMkG,EAAKnS,EAAI,EAAGiM,IAExC7L,KAAKP,KAAK6K,UAAUrE,KAAM4F,aAAe,EAAAtB,OACvCtE,IAAO8L,EAAKpS,GAAKkM,IAAOkG,EAAKnS,IAE/B0sB,IAGN,OAAOA,GA7EPtsB,KAAKP,KAAOA,EACZO,KAAK6iJ,gBACP,CAEQ,cAAAA,GAEN,IAAK,IAAIljJ,EAAIK,KAAKP,KAAKkL,MAAOhL,EAAIK,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MAAOlL,IACnE,IACE,IAAIC,EAAII,KAAKP,KAAKsL,MAClBnL,EAAII,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OAChCrL,IAGEI,KAAKP,KAAKyrF,YACRvrF,EACAC,EACAI,KAAKP,KAAKkL,MAAQ,EAClB3K,KAAKP,KAAKsL,MAAQ,EAClB/K,KAAKP,KAAKoL,MAAQ,EAClB7K,KAAKP,KAAKwL,OAAS,GAGrBjL,KAAKP,KAAK6K,UAAU3K,GAAGC,GAAK,IAAI,EAAAoM,MAAMhM,KAAKP,KAAME,EAAGC,GAEpDI,KAAKP,KAAK6K,UAAU3K,GAAGC,GAAK,IAAI,EAAA2K,KAC9BvK,KAAKP,KACLE,EACAC,EACAI,KAAKmiJ,YACHxiJ,EACAC,EACAI,KAAKP,KAAKkL,MACV3K,KAAKP,KAAKsL,MACV/K,KAAKP,KAAKoL,MACV7K,KAAKP,KAAKwL,QAMtB,CAsBA,aAAA63I,CAAcjhJ,GACZ7B,KAAK+iJ,sBAAsBlhJ,EAC7B,CAiBA,qBAAAkhJ,CAAsBlhJ,GACpB,IAAImhJ,EAAY,EAAAthJ,KAAKC,UAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIE,GACxD7B,KAAKP,KAAKoL,MAAQ,GAAKhJ,IAAS,KAAKmhJ,GAAa,GACtD,IAAK,IAAIh9I,EAAI,EAAGA,EAAIg9I,EAAWh9I,IAAK,CAClC,IAAIi9I,EAASnhJ,KAAKyD,IAChB,EAAA7D,KAAKC,UAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIE,GAClD7B,KAAKP,KAAKoL,MAAQ,GAEhBq4I,EAASphJ,KAAKyD,IAChB09I,EAAS,EAAAvhJ,KAAKG,MAAM,EAAG,EAAGA,GAC1B7B,KAAKP,KAAKwL,OAAS,GAGjBtL,EAAI,EAAA+B,KAAKG,KACX7B,KAAKP,KAAKkL,MAAQ,EAClB3K,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MAAQo4I,EAAS,EAC7CphJ,GAEEjC,EAAI,EAAA8B,KAAKG,KACX7B,KAAKP,KAAKsL,MAAQ,EAClB/K,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OAASi4I,EAAS,EAC9CrhJ,GAGF,IAAK,IAAIoE,EAAKtG,EAAGsG,EAAKtG,EAAIsjJ,EAAQh9I,IAChC,IAAK,IAAI4F,EAAKjM,EAAGiM,EAAKjM,EAAIsjJ,EAAQr3I,IAAM,CACtC,IAAIiK,EAAI,IAAI,EAAAvL,KAAKvK,KAAKP,KAAMwG,EAAI4F,GAChC7L,KAAKP,KAAK6K,UAAUrE,GAAI4F,GAAMiK,EAC9B9V,KAAKP,KAAK6O,WAAWtE,KAAK8L,E,CAG9B9V,KAAKP,KAAK6O,WAAW/M,QAASwQ,IACxB/R,KAAK4iJ,mBAAmB7wI,IAAS,IACnC/R,KAAKP,KAAKqgF,WAAW/tE,EAAKpS,EAAGoS,EAAKnS,GAClCI,KAAKP,KAAK6K,UAAUyH,EAAKpS,GAAGoS,EAAKnS,GAAK,IAAI,EAAAoM,MACxChM,KAAKP,KACLsS,EAAKpS,EACLoS,EAAKnS,GAEPI,KAAKP,KAAK6O,WAAatO,KAAKP,KAAK6O,WAAW5N,OAAQoV,GAAMA,IAAM/D,K,CAIxE,CAGA,oBAAAoxI,CAAqBthJ,GACnB,IAAImhJ,EAAY,EAAAthJ,KAAKC,UAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIE,GAC/C7B,KAAKP,KAAKoL,MAAQ,IAAMhJ,IAAS,KAAKmhJ,GAAa,GACvD,IAAK,IAAIh9I,EAAI,EAAGA,EAAIg9I,EAAWh9I,IAAK,CAElC,IAAIo9I,EAAQ,EAAA1hJ,KAAKC,UAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIE,GAC3CohJ,EAASnhJ,KAAKyD,IAAIzD,KAAK4D,IAAI,EAAG09I,GAAQpjJ,KAAKP,KAAKoL,MAAQ,GACxDq4I,EAASphJ,KAAKyD,IAChBzD,KAAK4D,IAAI,EAAG09I,EAAQ,EAAA1hJ,KAAKG,MAAM,EAAG,EAAGA,IACrC7B,KAAKP,KAAKwL,OAAS,GAGjBtL,EAAI,EAAA+B,KAAKG,KACX7B,KAAKP,KAAKkL,MAAQ,EAClB3K,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MAAQo4I,EAAS,EAC7CphJ,GAEEjC,EAAI,EAAA8B,KAAKG,KACX7B,KAAKP,KAAKsL,MAAQ,EAClB/K,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OAASi4I,EAAS,EAC9CrhJ,GAIF,IAAK,IAAIoE,EAAKtG,EAAGsG,EAAKtG,EAAIsjJ,EAAQh9I,IAChC,IAAK,IAAI4F,EAAKjM,EAAGiM,EAAKjM,EAAIsjJ,EAAQr3I,IAOhC,GAJE5F,IAAOtG,GACPkM,IAAOjM,GACPqG,IAAOtG,EAAIsjJ,EAAS,GACpBp3I,IAAOjM,EAAIsjJ,EAAS,GACRrhJ,IAAS,IAAM,CAC3B,IAAIiU,EAAI,IAAI,EAAAvL,KAAKvK,KAAKP,KAAMwG,EAAI4F,GAChC7L,KAAKP,KAAK6K,UAAUrE,GAAI4F,GAAMiK,EAC9B9V,KAAKP,KAAK6O,WAAWtE,KAAK8L,E,CAMhC,MAAMutI,EAAQ,EAAA3hJ,KAAKC,UAAU,CAAC,EAAG,EAAG,EAAG,GAAIE,GAC3C,IAAK,IAAI+gB,EAAI,EAAGA,EAAIygI,EAAOzgI,IAAK,CAC9B,MAAM6J,EAAK,EAAA/qB,KAAKG,KAAKlC,EAAI,EAAGmC,KAAK4D,IAAI/F,EAAI,EAAGA,EAAIsjJ,EAAS,GAAIphJ,GACvD6qB,EAAK,EAAAhrB,KAAKG,KAAKjC,EAAI,EAAGkC,KAAK4D,IAAI9F,EAAI,EAAGA,EAAIsjJ,EAAS,GAAIrhJ,GACzD7B,KAAKP,KAAK6K,UAAUmiB,KAAMC,aAAe,EAAAniB,OAC3CvK,KAAKP,KAAKqgF,WAAWrzD,EAAIC,GACzB1sB,KAAKP,KAAK6K,UAAUmiB,GAAIC,GAAM,IAAI,EAAA1gB,MAAMhM,KAAKP,KAAMgtB,EAAIC,GACvD1sB,KAAKP,KAAK6O,WAAatO,KAAKP,KAAK6O,WAAW5N,OACzCoV,KAAQA,EAAEnW,IAAM8sB,GAAM3W,EAAElW,IAAM8sB,I,CAMrC1sB,KAAKP,KAAK6O,WAAW/M,QAASwQ,IACxB/R,KAAK4iJ,mBAAmB7wI,IAAS,IACnC/R,KAAKP,KAAKqgF,WAAW/tE,EAAKpS,EAAGoS,EAAKnS,GAClCI,KAAKP,KAAK6K,UAAUyH,EAAKpS,GAAGoS,EAAKnS,GAAK,IAAI,EAAAoM,MACxChM,KAAKP,KACLsS,EAAKpS,EACLoS,EAAKnS,GAEPI,KAAKP,KAAK6O,WAAatO,KAAKP,KAAK6O,WAAW5N,OAAQoV,GAAMA,IAAM/D,K,CAIxE,E,4FC3MF,eAEA,UAIA,SAGA,UAEA,UAEA,MAAasgG,UAAY,EAAA9yG,OACvB,WAAAC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GAsBvB,KAAAuC,KAAQC,IACFpC,KAAKqC,OACT,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MACvBzC,KAAKqC,OACJrC,KAAK2C,WAAW3C,KAAK4C,WAAWR,GAEpCpC,KAAK0C,aAAaN,GAClB,EAAAV,KAAKmB,QACH7C,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAIK,KAAK+C,MACd/C,KAAKJ,EAAII,KAAKgD,YAAchD,KAAKiD,MACjC,EACA,EACAjD,KAAKP,KAAKyD,WACVlD,KAAKmD,gBAGT,EAAAzB,KAAKY,IAAIc,YAGX,KAAAC,aAAgBjB,IACdpC,KAAKsD,UAAYtD,KAAKJ,GA9CtBI,KAAKP,KAAOA,EACZO,KAAKC,OAAS,EACdD,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAK2C,WAAY,EACjB3C,KAAK2D,eAAgB,EACrB3D,KAAKwB,KAAO,MAEZxB,KAAKgmB,SAAW,EAAA5kB,MAAM2/D,SACtB/gE,KAAK6D,eAAiB,EACtB7D,KAAK8D,eAAiB,GAEP,EAAAlC,OAAOC,MAGxB,CAEA,QAAIkC,GACF,OAAO,EAAAC,WAAWwO,IACpB,EAtBF,O,iGCZA,gBAKA,SAMA,SACA,UAEA,MAAaigC,UAAiB,EAAAlzC,OAC5B,WAAAC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GAevB,KAAAmF,KAAO,CAAChF,EAAqB+a,KACtB/a,EAAYc,WAAWuzC,YAAYomC,UACxCx6E,KAAK4kB,UAAU7f,OACf/E,KAAKC,QAAU6a,EACf,EAAA1Z,MAAM40F,OACNh2F,KAAK0iB,eACL1iB,KAAKklB,qBAEDllB,KAAKC,QAAU,GACjBD,KAAKmlB,KAAKplB,KAId,KAAAkB,mBAAqB,KACfjB,KAAK8c,QACT,EAAA1b,MAAM6kB,UAAU,EAAA7kB,MAAMupC,UAAW,KAGnC,KAAAxlB,KAAQtY,IAEN,GADA7M,KAAKqC,MAAO,EACRrC,KAAK8c,OAAQ,OAEjB9c,KAAKknB,kBACL,MAAMC,EAAannB,KAAKonB,QACxBpnB,KAAKP,KAAK4nB,aAAard,KAAKmd,GAC5BnnB,KAAK6T,kBAAkB7T,KAAKmT,cAEZ,OAAXtG,GAAmBA,EAAOhM,WAAW25E,WAAyB,OAAX3tE,IACtD7M,KAAKiC,WAGPjC,KAAKiB,sBAGP,KAAAkB,KAAQC,IACFpC,KAAKqC,OACT,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MACvBzC,KAAKqC,OACJrC,KAAK2C,WAAW3C,KAAK4C,WAAWR,GAEpCpC,KAAK0C,aAAaN,GAElB,EAAAV,KAAKmB,QACH7C,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAIK,KAAK+C,MACd/C,KAAKJ,EAAI,KAAOI,KAAKiD,MACrB,EACA,EACAjD,KAAKP,KAAKyD,WACVlD,KAAKmD,gBAGT,EAAAzB,KAAKY,IAAIc,YAGX,KAAAC,aAAgBjB,IACdpC,KAAKsD,UAAYtD,KAAKJ,GAzEtBI,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKC,OAAS,EACdD,KAAK2D,eAAgB,EACrB3D,KAAKwB,KAAO,WACZxB,KAAK6D,eAAiB,EACtB7D,KAAK8D,eAAiB,EACxB,CAEA,QAAIC,GACF,OAAO,EAAAC,WAAWyO,QACpB,EAfF,Y,kGCbA,gBAGA,UACA,UACA,UAMA,UACA,UACA,UAEA,UACA,UACA,UACA,UAGA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,QACA,UAEA,UACA,UACA,UACA,UACA,UAIA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UAYA,SACA,UAKA,UACA,SACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,UAEA,UACA,UAGM6wI,EAAwC,CAAC,EAC/C,IAAK,MAAOtlI,EAAY7D,KAAO,EAAAopI,eAAe3lI,UAC5C0lI,EAAcnpI,GAAM6D,EAAWxc,KAGjC,kBAQE,WAAAhC,CAAY4E,EAAco/I,GAA0B,GAL5C,KAAA3lG,MAAoC,GAC5C,KAAA4lG,iBAA2B,EAEnB,KAAAD,gBAA0B,EAWlC,KAAAE,cAAgB,KACd,GAAI1jJ,KAAKwjJ,eAAgB,OAEzBxjJ,KAAKoE,MAAM6J,MAAM1M,QAAS9B,IACxBO,KAAK2jJ,yBAAyBlkJ,EAAM,EAAAmC,OAAOC,QAI7C,IAAK,IAAIpC,KAAQO,KAAKoE,MAAM6J,MAC1BjO,KAAK4jJ,SAASnkJ,EAAM,EAAAmC,OAAOC,MAI7B7B,KAAKoE,MAAM6J,MAAM1M,QAAS9B,IAEtBA,EAAKsE,OAAS,EAAA6N,SAASy3D,OACvB5pE,EAAKsE,OAAS,EAAA6N,SAASE,YACvBrS,EAAKsE,OAAS,EAAA6N,SAASC,UACvBpS,EAAKsE,OAAS,EAAA6N,SAAS04D,UACvB7qE,EAAKsE,OAAS,EAAA6N,SAASy4D,UAIzBrqE,KAAK6jJ,sBAAsBpkJ,KAI7B,MAAMqkJ,EAAuB9jJ,KAAKoE,MAAM2/I,sBAAsB,MAC1DD,IAAyB9jJ,KAAKoE,MAAMy6G,YACtC7+G,KAAKgkJ,aAAaF,EAAsB,EAAAliJ,OAAOC,MAGxB,IAArB7B,KAAKoE,MAAM4J,QAEfnE,QAAQ+C,IAAI,0BAA0B5M,KAAK+vH,oBACvC/vH,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQE,SAC1Ct7B,KAAKikJ,cAAc,CACjB1jC,UAAWvgH,KAAK+vH,WAChBzwD,QAAQ,EACRkhF,UAAW,IAIXxgJ,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQG,OAUxCv7B,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQW,cAC1C/7B,KAAKikJ,cAAc,CACjB1jC,UAA6B,EAAlBvgH,KAAK+vH,WAChBzwD,QAAQ,EACR9lD,QAAS,EAAA4hB,QAAQO,YACjB6kH,UAAW,KAIXxgJ,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQO,aAC1C37B,KAAKikJ,cAAc,CACjB1jC,UAA6B,EAAlBvgH,KAAK+vH,WAChBzwD,QAAQ,EACR9lD,QAAS,EAAA4hB,QAAQU,WACjB0kH,UAAW,KAIXxgJ,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQI,QAC1Cx7B,KAAKikJ,cAAc,CACjB1jC,UAAWvgH,KAAK+vH,WAChBzwD,QAAQ,EACR9lD,QAAS,EAAA4hB,QAAQK,OACjB+kH,UAAW,KAIXxgJ,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQK,QAU5Cz7B,KAAK2gF,qBAKP,KAAAkjE,sBAAyBpkJ,IACvB,OAAQA,EAAK+Z,SACX,KAAK,EAAA4hB,QAAQG,KACXv7B,KAAKkkJ,wBAAwBzkJ,GAC7B,MACF,KAAK,EAAA27B,QAAQI,OACXx7B,KAAKmkJ,0BAA0B1kJ,GAC/B,MACF,KAAK,EAAA27B,QAAQU,WACX97B,KAAKokJ,6BAA6B3kJ,GAClC,MACF,KAAK,EAAA27B,QAAQK,OACXz7B,KAAKqkJ,0BAA0B5kJ,GAC/B,MACF,QACEO,KAAKskJ,2BAA2B7kJ,KAKtC,KAAAkhF,gBAAkB,KAEhB,GADA92E,QAAQ+C,IAAI,kBAAmB5M,KAAKoE,MAAMy6G,YACtC7+G,KAAKoE,MAAMy6G,WAAY,OAC3B7+G,KAAKoE,MAAMmgJ,aAAY,GACvBvkJ,KAAKoE,MAAMogJ,cAAa,GACxB,MAAM3pI,EAAW7a,KAAKoE,MAAMyW,SACtB8hC,EAAY38C,KAAKoE,MAAMu4C,UACxBA,GAAc9hC,GACnBA,EAAS8lE,gBAAgBhkC,IAG3B,KAAA8nG,sBAAyBtrI,IACvB,GAAyB,IAArBnZ,KAAKoE,MAAM4J,MAAa,OAC5B,MAAMvO,EAAOO,KAAKoE,MAAM6J,MAAM3N,KAAMb,GAASA,EAAKsE,OAAS,EAAA6N,SAASy3D,OACpE,IAAK5pE,EAAM,OACX,MAAMilJ,EAAajlJ,EAAKmuF,gCACxB,GAA0B,IAAtB82D,EAAW3jJ,OAIb,YAHA8I,QAAQC,KACN,qEAIJ,MAAM3B,EAAW1I,EAAK+gF,uBAAuBkkE,GAC7C,GACe,OAAbv8I,QACe0P,IAAf1P,EAASxI,QACMkY,IAAf1P,EAASvI,EAET,OAEF,MAAM+kJ,EAAK,IAAI,EAAA7gI,WACbrkB,EACAO,KAAKoE,MAAM1E,KACXyI,EAASxI,EACTwI,EAASvI,GACT,EACA,EAAAw7B,QAAQE,QACR,EAAAmgB,SAASC,KACTviC,EACA,CAAEqiC,SAAU,EAAAC,SAASC,OAGvBj8C,EAAK6K,UAAUnC,EAASxI,GAAGwI,EAASvI,GAAK+kJ,GAG3C,KAAAV,cAAiB9qI,IACf,MAAMlL,EAAQjO,KAAKoE,MAAM6J,MAAMvN,OAC5BjB,GACCA,EAAKsE,OAAS,EAAA6N,SAASy3D,OACvB5pE,EAAKsE,OAAS,EAAA6N,SAASE,YACvBrS,EAAKsE,OAAS,EAAA6N,SAASC,UACvBpS,EAAKsE,OAAS,EAAA6N,SAAS04D,UACvB7qE,EAAKsE,OAAS,EAAA6N,SAAS03D,MAGrBs7E,EAAiB5kJ,KAAKoE,MAAMy6G,WAC9B5wG,EAAMnM,KAAKgB,MAAM,EAAAlB,OAAOC,OAASoM,EAAMlN,SACvCf,KAAKoE,MAAM2/I,sBAAsB,MAErCl6I,QAAQ+C,IACN,sCAAsCg4I,EAAe7gJ,eAAe6gJ,EAAer2I,MAAMxN,UAI3F,MAAM2jJ,EAAaE,EAAeh3D,gCAElC,GAA0B,IAAtB82D,EAAW3jJ,OAEb,YADA8I,QAAQC,KAAK,4DAIf,MAAM3B,EAAWy8I,EAAepkE,uBAAuBkkE,GACvD,GACe,OAAbv8I,QACe0P,IAAf1P,EAASxI,QACMkY,IAAf1P,EAASvI,EAET,OAEFiK,QAAQ+C,IACN,mCAAmCzE,EAASxI,MAAMwI,EAASvI,MAI7D,MAAMolI,EAAM7rH,GAAMK,QACdL,EAAKK,QACLorI,EAAe52I,MAAQ,GAErB42I,EAAe52I,MAAQ,GACrB,EAAApM,OAAOC,OAAS,GAFlB,EAAAu5B,QAAQI,OAKN,EAAAJ,QAAQG,KACVspH,EACJ1rI,GAA+B,kBAAhBA,EAAKmmD,OAChB,CAAE9jB,SAAUriC,EAAKmmD,OAAS,EAAA7jB,SAASqkB,OAAS,EAAArkB,SAASC,WACrD7jC,EAEA8sI,EAAK,IAAI,EAAA7gI,WACb8gI,EACA5kJ,KAAKoE,MAAM1E,KACXyI,EAASxI,EACTwI,EAASvI,GACT,EACAolI,EACA,EAAAvpF,SAASC,KACTviC,EACA0rI,GAGFD,EAAet6I,UAAUnC,EAASxI,GAAGwI,EAASvI,GAAK+kJ,EAC/CA,EAAGhpG,SAASC,aACd/xC,QAAQ+C,IAAI,4BACZ5M,KAAKoE,MAAM8oG,cAAcy3C,KAI7B,KAAAG,eAAkBrlJ,MAgMlB,KAAAswH,SAAW,KAET,MAEMg1B,EAFiBjjJ,KAAKC,KAAK,GAAK,MAAQ/B,KAAKoE,MAAM4J,OAEvBhO,KAAKoE,MAAM6J,MAAMlN,OAEnD,OAAOe,KAAK4D,IAAIq/I,EAAU,IAo8B5B,KAAAC,cAAgB,CAACvlJ,EAAYoC,OAE7B,KAAAojJ,iBAAmB,CAACxlJ,EAAYoC,KAC9B7B,KAAKqyF,UAAU5yF,EAAM,GAAIoC,IAG3B,KAAAqjJ,gBAAkB,CAACzlJ,EAAYoC,KAChB,EAAAH,KAAKG,KAAK,EAAG,GAAIA,IAChB,GAAG7B,KAAK61F,0BAA0Bp2F,GAEhDA,EAAK+sF,0BAGP,KAAAw3D,aAAe,CAACvkJ,EAAYoC,KAC1B7B,KAAKkyF,UAAUzyF,EAAMA,EAAKuO,QAG5B,KAAAm3I,mBAAqB,CAAC1lJ,EAAYoC,KAChCpC,EAAK+sF,0BAGP,KAAA44D,gBAAkB,CAAC3lJ,EAAYoC,KAC7B,EAAAuE,QAAQqK,IACNhR,EACAA,EAAKC,KACLoC,KAAKgB,MAAMrD,EAAKkL,MAAQlL,EAAKoL,MAAQ,GACrC/I,KAAKgB,MAAMrD,EAAKsL,MAAQtL,EAAKwL,OAAS,IAExCxL,EAAK+sF,0BAGP,KAAA64D,eAAiB,CAAC5lJ,EAAYoC,KAC5B,IAAIlB,EAEJ,IAAK,IAAIhB,EAAIF,EAAKkL,MAAOhL,EAAIF,EAAKkL,MAAQlL,EAAKoL,MAAOlL,IAAK,CACzD,IAAIC,EAAIH,EAAKsL,MAAQjJ,KAAKgB,MAAMrD,EAAKwL,OAAS,GAC1CtL,IAAMF,EAAKkL,MAAQ7I,KAAKgB,MAAMrD,EAAKoL,MAAQ,IAC7ClK,EAAI,IAAI,EAAAm2G,gBAAgBr3G,EAAMA,EAAKC,KAAMC,EAAGC,EAAI,GAChDH,EAAK6K,UAAU3K,GAAGC,EAAI,GAAKe,GAE3BlB,EAAK6K,UAAU3K,GAAGC,GAAK,IAAI,EAAA2K,KAAK9K,EAAME,EAAGC,E,CAI7C,IAAID,EAAI,EAAA+B,KAAKG,KAAKpC,EAAKkL,MAAOlL,EAAKkL,MAAQlL,EAAKoL,MAAQ,EAAGhJ,GACvDjC,EAAI,EAAA8B,KAAKG,KACXpC,EAAKsL,MAAQjJ,KAAKgB,MAAMrD,EAAKwL,OAAS,GAAK,EAC3CxL,EAAKsL,MAAQtL,EAAKwL,OAAS,EAC3BpJ,GAGFpC,EAAK6K,UAAU3K,GAAGC,GAAK,IAAI,EAAAm3G,OAAOt3G,EAAME,EAAGC,EAAGe,GAE9C,IAAI2kJ,EAAa7lJ,EACdoI,gBACAnH,OACE4E,GACCA,EAAE3F,GAAKF,EAAKkL,MAAQ,GACpBrF,EAAE3F,GAAKF,EAAKkL,MAAQlL,EAAKoL,MAAQ,GACjCvF,EAAE1F,GAAKH,EAAKsL,MAAQjJ,KAAKgB,MAAMrD,EAAKwL,OAAS,GAAK,GAClD3F,EAAE1F,GAAKH,EAAKsL,MAAQtL,EAAKwL,OAAS,GAEpCs6I,EAAY,EAAA7jJ,KAAKC,UAAU,CAAC,EAAG,EAAG,EAAG,EAAG,GAAIE,GAEhD,IAAK,IAAImE,EAAI,EAAGA,EAAIu/I,EAAWv/I,IAAK,CAClC,IAAIV,EAAIggJ,EAAWv4E,OACjB,EAAArrE,KAAKG,KAAK,EAAGyjJ,EAAWvkJ,OAAS,EAAGc,GACpC,GACA,GACEyD,GAAG7F,EAAKuH,SAASgD,KAAK,IAAI,EAAAkjF,MAAMztF,EAAMA,EAAKC,KAAM4F,EAAE3F,EAAG2F,EAAE1F,G,CAG9DH,EAAK+sF,0BAGP,KAAAg5D,sBAAwB,CAAC/lJ,EAAYoC,KACnC,IAAK,IAAIlC,EAAIF,EAAKkL,MAAOhL,EAAIF,EAAKkL,MAAQlL,EAAKoL,MAAOlL,IACpD,IAAK,IAAIC,EAAIH,EAAKsL,MAAQ,EAAGnL,EAAIH,EAAKsL,MAAQtL,EAAKwL,OAAS,EAAGrL,IAC7DH,EAAK6K,UAAU3K,GAAGC,GAAK,IAAI,EAAAsb,UAAUzb,EAAME,EAAGC,EAAG,EAAA8B,KAAKG,KAAK,EAAG,EAAGA,IAGrEpC,EAAK+sF,0BAIP,KAAAi5D,aAAe,CAAChmJ,EAAYoC,KACb,EAAAH,KAAKG,KAAK,EAAG,GAAIA,GAA9B,IAGI8vF,EAAgBlyF,EAAKoI,gBAAgB9G,OACrC2vF,EAAa5uF,KAAKC,KACpB4vF,EAAgB,EAAAjwF,KAAKC,UAAU,CAAC,IAAM,GAAK,KAAOE,IAGhDpC,EAAK2E,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQG,MAC1Cv7B,KAAKyyF,aACHhzF,GACCkyF,EAAgBjB,GAAc,EAAAhvF,KAAKC,UAAU,CAAC,GAAK,GAAK,IAAME,GAC/DA,GAEJpC,EAAK+sF,0BAGP,KAAAk5D,iBAAmB,CAACjmJ,EAAYoC,KAG9B,MAAM,EAAElC,EAAC,EAAEC,GAAMH,EAAK0iF,gBACtB1iF,EAAK6K,UAAU3K,EAAI,GAAGC,EAAI,GAAK,IAAI,EAAA2a,SAAS9a,EAAMA,EAAKC,KAAMC,EAAI,EAAGC,EAAI,IAG1E,KAAA+lJ,mBAAqB,CAAClmJ,EAAYoC,KAGhC,MAAM,EAAElC,EAAC,EAAEC,GAAMH,EAAK0iF,gBACtB1iF,EAAK6K,UAAU3K,EAAI,GAAGC,EAAI,GAAK,IAAI,EAAAkkB,WACjCrkB,EACAA,EAAKC,KACLC,EAAI,EACJC,EAAI,GAGN,MAAM0yF,EAAYxwF,KAAKC,KAAqB,EAAhB,EAAAH,OAAOC,QAEnC,IAAIuI,EAAgB3K,EAAKoI,gBACrBD,EAAwC,GACzB,IAAfnI,EAAKuO,QAAapG,EAAY5H,KAAK4lJ,oBAAoBnmJ,EAAM2K,IACjEA,EAAQA,EAAM1J,OACXoL,IACElE,EAAUK,KACRE,GAAaA,EAASxI,IAAMmM,EAAKnM,GAAKwI,EAASvI,IAAMkM,EAAKlM,IAIjEwK,EAAQA,EAAM1J,OAAQoL,GAASA,EAAKnM,IAAMA,GAAKmM,EAAKlM,IAAMA,GAI1D,IAAK,IAAIoG,EAAI,EAAGA,EAAIssF,EAAWtsF,IAC7B,GAAIoE,EAAMrJ,OAAS,EAAG,CACpB,MAAMoH,EAAW1I,EAAK+gF,uBAAuBp2E,GAC7C,GAAiB,OAAbjC,EAAmB,MACvB,MAAM,EAAExI,EAAC,EAAEC,GAAMuI,EAEjB,IAAI9G,EAAQ,IAAI,EAAA/B,MAAMG,EAAMA,EAAKC,KAAMC,EAAGC,GAQ1CyB,EAAMC,QACJ,CACE,aACA,MACA,QACA,OACA,OACA,WACA,SACA,SAEF,GAGF8I,EAAM1J,OAAQoL,GAASA,EAAKnM,IAAMA,GAAKmM,EAAKlM,IAAMA,GAClDH,EAAKuH,SAASgD,KAAK3I,E,GAKzB,KAAAukJ,oBAAsB,CAACnmJ,EAAY2K,KAEjC,MAAMy7I,EAAOpmJ,EAAKsL,MAAQ,EACpB+6I,EAAermJ,EAAKkL,MAAQ,EAC5Bo7I,EAAetmJ,EAAKkL,MAAQlL,EAAKoL,MAAQ,EACzCm7I,EAAc57I,EAAM1J,OACvBoL,GACCA,EAAKlM,IAAMimJ,GAAQ/5I,EAAKnM,GAAKmmJ,GAAgBh6I,EAAKnM,GAAKomJ,GAG3D,GAA2B,IAAvBC,EAAYjlJ,OAAc,OAG9B,MACM0lE,EADShnE,EAAK0iF,gBACGxiF,EAGjBsmJ,EAAKhrI,MAAM2S,KAAK,IAAIhf,IAAIo3I,EAAYl3I,IAAKxJ,GAAMA,EAAE3F,KAAKsP,KAC1D,CAACC,EAAGC,IAAMD,EAAIC,GAEhB,GAAI82I,EAAGllJ,OAAS,EAAG,OAGnB,MAAMmlJ,EAAOD,EACVn+H,QACA7Y,KAAK,CAACC,EAAGC,IAAMrN,KAAKgG,IAAIoH,EAAIu3D,GAAW3kE,KAAKgG,IAAIqH,EAAIs3D,IAAU,GAG3D0/E,EAAiBF,EAAGvlJ,OAAQf,GAAMA,EAAIumJ,GACtCE,EAAkBH,EAAGvlJ,OAAQf,GAAMA,EAAIumJ,GACvCG,EAAa,IAAIz3I,IAAIq3I,GACrBK,EAAgBJ,EAAO,EACvBK,EAAiBL,EAAO,EAG9B,IAAIM,EAAQH,EAAWl2I,IAAIm2I,GACvBA,EACAH,EAAezlJ,OAAQf,GAAMA,GAAKumJ,EAAO,GAAGp+H,OAAO,GAAG,GACtD2+H,EAASJ,EAAWl2I,IAAIo2I,GACxBA,EACAH,EAAgB1lJ,OAAQf,GAAMA,GAAKumJ,EAAO,GAAG,QAGnCruI,IAAV2uI,GAAuBL,EAAeplJ,OAAS,IACjDylJ,EAAQL,EAAeA,EAAeplJ,OAAS,SAElC8W,IAAX4uI,GAAwBL,EAAgBrlJ,OAAS,IACnD0lJ,EAASL,EAAgB,IAG3B,IAAIx+I,EAA6C,GACjD,QAAciQ,IAAV2uI,QAAkC3uI,IAAX4uI,EACzB7+I,EAAY,CACV,CAAEjI,EAAG6mJ,EAAO5mJ,EAAGimJ,GACf,CAAElmJ,EAAGumJ,EAAMtmJ,EAAGimJ,GACd,CAAElmJ,EAAG8mJ,EAAQ7mJ,EAAGimJ,QAEb,CAML,GADAj+I,EAHeo+I,EACZl+H,QACA7Y,KAAK,CAACC,EAAGC,IAAMrN,KAAKgG,IAAIoH,EAAEvP,EAAI8mE,GAAW3kE,KAAKgG,IAAIqH,EAAExP,EAAI8mE,IACxC3+C,MAAM,EAAG,GAAGhZ,IAAKxJ,IAAM,CAAG3F,EAAG2F,EAAE3F,EAAGC,EAAGimJ,KACpDj+I,EAAU7G,OAAS,EAAG,OAC1B6G,EAAUqH,KAAK,CAACC,EAAGC,IAAMD,EAAEvP,EAAIwP,EAAExP,E,CAInC,IAAK,IAAIqG,EAAI4B,EAAU7G,OAAS,EAAGiF,EAAI,EAAGA,IAAK,CAC7C,MAAMG,EAAI,EAAAzE,KAAKG,KAAK,EAAGmE,EAAG,EAAApE,OAAOC,OAChC+F,EAAU5B,GAAI4B,EAAUzB,IAAM,CAACyB,EAAUzB,GAAIyB,EAAU5B,G,CAG1D,MAAM0gJ,EAAU,IAAI,EAAAC,UAAU,CAC5B,IAAI,EAAAxkH,MAAM1iC,EAAMmI,EAAU,GAAGjI,EAAGiI,EAAU,GAAGhI,GAC7C,IAAI,EAAA0iC,UAAU7iC,EAAMmI,EAAU,GAAGjI,EAAGiI,EAAU,GAAGhI,GACjD,IAAI,EAAAu8G,MAAM18G,EAAMmI,EAAU,GAAGjI,EAAGiI,EAAU,GAAGhI,KAE/C,IAAK,MAAM+S,KAAQ+zI,EAAQl4I,MACzBmE,EAAKw1G,SAAU,EACfx1G,EAAKo0G,MAAQ2/B,EACbjnJ,EAAK+O,MAAMxE,KAAK2I,GAElB,OAAO/K,GAGT,KAAAg/I,iBAAmB,CAACnnJ,EAAYoC,KAG9B,MAAM,EAAElC,EAAC,EAAEC,GAAMH,EAAK0iF,gBAEhBjpE,EAAczZ,EAAKuO,MAAQ,EAAI,EAAAotB,QAAQI,OAAS,EAAAJ,QAAQG,KAE9D,IAAI56B,EAAI,IAAI,EAAAmjB,WAAWrkB,EAAMA,EAAKC,KAAMC,EAAGC,GAAG,EAAMsZ,GAIpD+K,WAAW,KACTxkB,EAAK6K,UAAU3K,GAAGC,GAAKe,GAEtB,IAGL,KAAAkmJ,iBAAmB,CAACpnJ,EAAYoC,KAC9B,IAAIivB,EAAU,GACd,OAAQrxB,EAAK+Z,SACX,KAAK,EAAA4hB,QAAQG,KACXzK,EAAU,OACV,MACF,KAAK,EAAAsK,QAAQU,WACXhL,EAAU,aACV,MACF,KAAK,EAAAsK,QAAQI,OACX1K,EAAU,SACV,MACF,KAAK,EAAAsK,QAAQK,OACX3K,EAAU,SAEdrxB,EAAK+B,KAAOsvB,EACZ,MAAM,EAAEnxB,EAAC,EAAEC,GAAMH,EAAK0iF,gBACtB,IAAIznE,EAAW,IAAI,EAAAH,SAAS9a,EAAMA,EAAKC,KAAMC,EAAGC,GAChD8a,EAASC,QAAS,EAClBD,EAAS9B,YAAa,EACtBnZ,EAAK6K,UAAU3K,GAAGC,GAAK8a,EACnBjb,EAAK+Z,UAAY,EAAA4hB,QAAQG,KAC3Bv7B,KAAK61F,0BAA0Bp2F,EAAM,IAAI,EAAAgjC,QAAQhjC,EAAM,EAAG,IACvDO,KAAK61F,0BAA0Bp2F,GAEpCA,EAAK+sF,0BAGP,KAAAs6D,aAAe,CAACrnJ,EAAYoC,KAC1B7B,KAAK0vF,WAAWjwF,EAAM,EAAGoC,GACzB,MAAM,EAAElC,EAAC,EAAEC,GAAMH,EAAK0iF,gBACtB,EAAA/hD,eAAe3vB,IAAIhR,EAAMA,EAAKC,KAAMC,EAAI,EAAGC,EAAI,EAAG,IAAI,EAAAqiC,QAAQxiC,EAAM,EAAG,IACvE,EAAA2gC,eAAe3vB,IAAIhR,EAAMA,EAAKC,KAAMC,EAAI,EAAGC,EAAI,EAAG,IAAI,EAAAsiC,MAAMziC,EAAM,EAAG,IACrE,EAAA2gC,eAAe3vB,IAAIhR,EAAMA,EAAKC,KAAMC,EAAI,EAAGC,EAAI,EAAG,IAAI,EAAAwiC,MAAM3iC,EAAM,EAAG,IACrE,EAAA2gC,eAAe3vB,IAAIhR,EAAMA,EAAKC,KAAMC,EAAI,EAAGC,EAAI,EAAG,IAAI,EAAAuiC,MAAM1iC,EAAM,EAAG,IAErEA,EAAK+sF,0BAiCC,KAAAu6D,iBAAoBtnJ,IAC1B,IAAIkwF,EAAa7tF,KAAK4D,IACpB,EACA5D,KAAKgB,MAAMhB,KAAKyO,KAAK9Q,EAAKg1F,UAAY,GACpC3yF,KAAKgB,MAAMhB,KAAKyO,KAAK9Q,EAAKuO,SAE9B,GAAmB,IAAfvO,EAAKuO,MACH,EAAApM,OAAOC,OAAS,MAClB8tF,EAAa,OAEV,CAEL,MAAMsjC,EAAc,GAEd+zB,EADY,IAEH,EAAIllJ,KAAKoxH,KAAKD,GAAexzH,EAAKuO,MAAQ,KACrD,EAAApM,OAAOC,OAASmlJ,IAClBr3D,EAAa,E,CAGjB3vF,KAAK0vF,WAAWjwF,EAAMkwF,EAAY,EAAA/tF,OAAOC,OAGnC,KAAAolJ,iBAAoBxnJ,IAK1B,GAFEA,EAAK+Z,UAAY,EAAA4hB,QAAQK,QACzBh8B,EAAK2E,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQK,OAC3B,OAEf,IAAIyrH,EAAaplJ,KAAK4D,IACpB,EACA5D,KAAKgB,MAAMhB,KAAKyO,KAAK9Q,EAAKg1F,UAAY,GACpC3yF,KAAKgB,MAAMhB,KAAKyO,KAAK9Q,EAAKuO,SAIX,IAAfvO,EAAKuO,OACH,EAAApM,OAAOC,OAAS,MAClBqlJ,EAAa,IAyJnB,KAAAtD,SAAW,CAACnkJ,EAAYoC,KAEtB,OADApC,EAAK+B,KAAO,GACJ/B,EAAKsE,MACX,KAAK,EAAA6N,SAASy3D,MACO,IAAf5pE,EAAKuO,QACPhO,KAAK0lJ,iBAAiBjmJ,EAAMoC,GAC5B7B,KAAK61F,0BAA0Bp2F,IAGjCO,KAAKglJ,cAAcvlJ,EAAMoC,GACzBpC,EAAK+B,KAAO,UAAY/B,EAAKuO,MAE7B,MACF,KAAK,EAAA4D,SAAS03D,KACZtpE,KAAKgkJ,aAAavkJ,EAAMoC,GACxBpC,EAAK+B,KAAO,OACZ,MACF,KAAK,EAAAoQ,SAAS0pB,QAEV77B,EAAK2E,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQG,MACxC,EAAA35B,OAAOC,QAAU,GAEjB7B,KAAKylJ,aAAahmJ,EAAMoC,GAExB7B,KAAKklJ,gBAAgBzlJ,EAAMoC,GAE7B,MACF,KAAK,EAAA+P,SAAS64D,WACZzqE,KAAKmlJ,mBAAmB1lJ,EAAMoC,GAC9B,MAEF,KAAK,EAAA+P,SAASg4D,OACZ5pE,KAAKqlJ,eAAe5lJ,EAAMoC,GAC1B,MACF,KAAK,EAAA+P,SAASu4D,cACZnqE,KAAKwlJ,sBAAsB/lJ,EAAMoC,GACjC,MACF,KAAK,EAAA+P,SAAS23D,SACZvpE,KAAKilJ,iBAAiBxlJ,EAAMoC,GAC5B,MAEF,KAAK,EAAA+P,SAASo4D,MACZhqE,KAAKklJ,gBAAgBzlJ,EAAMoC,GAC3B,MACF,KAAK,EAAA+P,SAASw4D,QACZpqE,KAAKylJ,aAAahmJ,EAAMoC,GAC1B,KAAK,EAAA+P,SAAS2pB,KACZv7B,KAAKylJ,aAAahmJ,EAAMoC,GACxB,MACF,KAAK,EAAA+P,SAASC,SACZ7R,KAAK0lJ,iBAAiBjmJ,EAAMoC,GAC5BpC,EAAK+B,KAAO,UAAY/B,EAAKuO,MAE7B,MACF,KAAK,EAAA4D,SAASE,WACZ9R,KAAK2lJ,mBAAmBlmJ,EAAMoC,GAC9BpC,EAAK+B,KAAO,UAAY/B,EAAKuO,MAC7B,MACF,KAAK,EAAA4D,SAAS04D,SACZtqE,KAAK4mJ,iBAAiBnnJ,EAAMoC,GAC5B,MACF,KAAK,EAAA+P,SAASy4D,SACZrqE,KAAK6mJ,iBAAiBpnJ,EAAMoC,GAC5B,MACF,KAAK,EAAA+P,SAAS43D,KACZxpE,KAAK8mJ,aAAarnJ,EAAMoC,GACxB,MACF,KAAK,EAAA+P,SAASm4D,QACZ/pE,KAAKolJ,gBAAgB3lJ,EAAMoC,GAG/BpC,EAAKqxB,QAAUrxB,EAAK+B,MAx9DpBxB,KAAKoE,MAAQA,EACbpE,KAAK69C,MAAQ,GACb79C,KAAKmnJ,cAAgB,EAAAzgJ,iBAAiB0gJ,oBAGtCpnJ,KAAKqnJ,kBAAoBrnJ,KAAKsnJ,qBAAqBtnJ,KAAKoE,MAAM4J,MAChE,CA4OQ,QAAAu5I,CAAS9nJ,EAAY+nJ,EAAkBhuI,GAC7C,MAAMiuI,EAAUjuI,EACZ,EAAAkuI,gBAAgBluI,GAChB,EAAAkuI,gBAAgBjoJ,EAAK2E,MAAM8U,YAAYnV,MAC3C,IAAIqG,EAAQ3K,EAAKoI,gBAEjB,IAAK,IAAI7B,EAAI,EAAGA,EAAIwhJ,GACG,IAAjBp9I,EAAMrJ,OADkBiF,IAAK,CAGjC,MAAM2hJ,EAAe,EAAAlwI,MAAMq8G,kBAAkB2zB,EAAQ5pG,OACrD,IAAK8pG,EAAc,SAGnB,MAAMnqI,EAAOmqI,EAAanqI,MAAQ,CAAE1H,EAAG,EAAG8M,EAAG,GAGvCjH,EACO,IAAX6B,EAAK1H,GAAsB,IAAX0H,EAAKoF,EACjBnjB,EAAK+gF,uBAAuBp2E,GAC5B3K,EAAKs0F,qBAAqB3pF,EAAOoT,EAAK1H,EAAG0H,EAAKoF,GAEpD,IAAKjH,EAAK,MACV,MAAM,EAAEhc,EAAC,EAAEC,GAAM+b,EAGjB,GAAIgsI,EAAaC,OAASD,EAAaC,MAAMn3I,IAAK,CAChD,MAAMwvF,EAAO0nD,EAAaE,kBAAoB,GAC9CF,EAAaC,MAAMn3I,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,KAAMqgG,E,CAInD,IAAK,IAAI5vF,EAAK,EAAGA,EAAKmN,EAAK1H,EAAGzF,IAC5B,IAAK,IAAIC,EAAK,EAAGA,EAAKkN,EAAKoF,EAAGtS,IAAM,CAClC,MAAM63C,EAAM/9C,EAAM6zG,UAAW34G,GAAMA,EAAE3F,IAAMA,EAAI0Q,GAAM/K,EAAE1F,IAAMA,EAAI0Q,IACpD,IAAT63C,GAAY/9C,EAAM2iE,OAAO5kB,EAAK,E,EAI1C,CASQ,sBAAA2/F,CACNroJ,EACA+nJ,EACAhuI,EACAuuI,GAEA,MAAMN,EAAUjuI,EACZ,EAAAkuI,gBAAgBluI,GAChB,EAAAkuI,gBAAgBjoJ,EAAK2E,MAAM8U,YAAYnV,MAGrC6D,EADY,IAAI,EAAAogJ,cAAcvoJ,EAAMsoJ,GACdE,2BAA2BT,GAGvD,IAAIp9I,EAAQ3K,EAAKoI,gBACjB,IAAK,MAAMsqE,KAAQvqE,EAAW,CAC5B,GAAqB,IAAjBwC,EAAMrJ,OAAc,MACxB,MAAM4mJ,EAAe,EAAAlwI,MAAMq8G,kBAAkB2zB,EAAQ5pG,OACrD,IAAK8pG,EAAc,SACnB,MAAMnqI,EAAOmqI,EAAanqI,MAAQ,CAAE1H,EAAG,EAAG8M,EAAG,GAE7C,IAAIjH,EAAuC,KAC3C,GAAe,IAAX6B,EAAK1H,GAAsB,IAAX0H,EAAKoF,EAGvBjH,EADgBvR,EAAMnC,KAAM3C,GAAMA,EAAE3F,IAAMwyE,EAAKxyE,GAAK2F,EAAE1F,IAAMuyE,EAAKvyE,GAE7D,CAAED,EAAGwyE,EAAKxyE,EAAGC,EAAGuyE,EAAKvyE,GACrBH,EAAK+gF,uBAAuBp2E,OAC3B,CAGL,MAAM89I,EAAe99I,EAAM1J,OACxB4E,GACCxD,KAAKgG,IAAIxC,EAAE3F,EAAIwyE,EAAKxyE,IAAM6d,EAAK1H,GAC/BhU,KAAKgG,IAAIxC,EAAE1F,EAAIuyE,EAAKvyE,IAAM4d,EAAKoF,GAEnCjH,EAAMlc,EAAKs0F,qBACTm0D,EAAannJ,OAASmnJ,EAAe99I,EACrCoT,EAAK1H,EACL0H,EAAKoF,E,CAIT,IAAKjH,EAAK,SACV,MAAM,EAAEhc,EAAC,EAAEC,GAAM+b,EAEjB,GAAIgsI,EAAaC,OAASD,EAAaC,MAAMn3I,IAAK,CAChD,MAAMwvF,EAAO0nD,EAAaE,kBAAoB,GAC9CF,EAAaC,MAAMn3I,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,KAAMqgG,E,CAGnD,IAAK,IAAI5vF,EAAK,EAAGA,EAAKmN,EAAK1H,EAAGzF,IAC5B,IAAK,IAAIC,EAAK,EAAGA,EAAKkN,EAAKoF,EAAGtS,IAAM,CAClC,MAAM63C,EAAM/9C,EAAM6zG,UAAW34G,GAAMA,EAAE3F,IAAMA,EAAI0Q,GAAM/K,EAAE1F,IAAMA,EAAI0Q,IACpD,IAAT63C,GAAY/9C,EAAM2iE,OAAO5kB,EAAK,E,EAI1C,CAEQ,0BAAAggG,CAA2B1oJ,GACjCO,KAAKskJ,2BAA2B7kJ,EAClC,CAEQ,uBAAAykJ,CAAwBzkJ,GAC9B,MAAM+nJ,EAAWxnJ,KAAKooJ,YAAY3oJ,GAElCO,KAAK8nJ,uBAAuBroJ,EAAM+nJ,EAAU/nJ,EAAK+Z,QAAS,CACxD6uI,gBAAiB,EACjBC,UAAW,GACXC,qBAAsB,GACtBC,iBAAiB,IAInBxoJ,KAAK0xF,iBAAiBjyF,EACxB,CAEQ,yBAAA0kJ,CAA0B1kJ,GAChC,MAAM+nJ,EAAWxnJ,KAAKooJ,YAAY3oJ,EAAM,KAExCO,KAAK8nJ,uBAAuBroJ,EAAM+nJ,EAAU/nJ,EAAK+Z,QAAS,CACxD6uI,gBAAiB,EACjBC,UAAW,GACXC,qBAAsB,GACtBC,iBAAiB,IAInBxoJ,KAAK0xF,iBAAiBjyF,EACxB,CAEQ,4BAAA2kJ,CAA6B3kJ,GACnC,MAAM+nJ,EAAWxnJ,KAAKooJ,YAAY3oJ,GAClCO,KAAK8nJ,uBAAuBroJ,EAAM+nJ,EAAU/nJ,EAAK+Z,QAAS,CACxD6uI,gBAAiB,EACjBC,UAAW,GACXC,qBAAsB,GACtBC,iBAAiB,IAInBxoJ,KAAK0xF,iBAAiBjyF,EACxB,CAEQ,yBAAA4kJ,CAA0B5kJ,GAChC,MAAM+nJ,EAAWxnJ,KAAKooJ,YAAY3oJ,GAClCO,KAAK8nJ,uBAAuBroJ,EAAM+nJ,EAAU/nJ,EAAK+Z,QAAS,CACxD6uI,gBAAiB,EACjBC,UAAW,GACXC,qBAAsB,GACtBC,iBAAiB,IAInBxoJ,KAAK0xF,iBAAiBjyF,EACxB,CAEQ,WAAA2oJ,CAAY3oJ,EAAY0nJ,GAC9BA,EAAgBA,GAAiBnnJ,KAAKmnJ,cACtC,MAAMx1D,EAAgBlyF,EAAKoI,gBAAgB9G,OACrCymJ,EAAW,EAAA/vI,MAAMirB,gBAAgB,EAAGivD,EAAe,CACvDi+B,OAAQ9tH,KAAKC,KAAKolJ,EAAgBx1D,KAIpC,OAFoB7vF,KAAKwC,MAAOkjJ,EAAW71D,EAAiB,KAErD61D,CACT,CAEQ,0BAAAlD,CAA2B7kJ,GACjC,MAAM+nJ,EAAWxnJ,KAAKooJ,YAAY3oJ,GAElCO,KAAK8nJ,uBAAuBroJ,EAAM+nJ,EAAU/nJ,EAAK+Z,QAAS,CACxD6uI,gBAAiB,EACjBC,UAAW,GACXC,qBAAsB,GACtBC,iBAAiB,IAInBxoJ,KAAK0xF,iBAAiBjyF,EACxB,CAYQ,cAAA4vF,CAAe5vF,EAAYE,EAAWC,EAAW2iF,GACvD,IAAIA,IAAY,EAAAxmE,UAAUI,IAAMomE,IAAY,EAAAxmE,UAAUG,OAIlDvc,GAAKC,EAAG,CACVH,EAAKiiF,oBACL,MAAM4N,EAAe7vF,EAAK0L,SAASwD,IAAI,GAAGhP,EAAI,KAAKC,KAC7C2vF,EAAgB9vF,EAAK0L,SAASwD,IAAI,GAAGhP,EAAI,KAAKC,KAG9C4vF,GAFW/vF,EAAK6K,UAAU3K,EAAI,GAClBF,EAAK6K,UAAU3K,EAAI,IACS,IAA7B2vF,GAAclkF,YACzBqkF,GAA2C,IAA/BF,GAAejkF,YAE3Bm9I,EAAalmE,IAAY,EAAAxmE,UAAUG,KAErCszE,IACF/vF,EAAK6K,UAAU3K,EAAI,GAAGC,GAAK,IAAI,EAAAioF,UAAUpoF,EAAME,EAAI,EAAGC,EAAG6oJ,IAGvDh5D,IACFhwF,EAAK6K,UAAU3K,EAAI,GAAGC,GAAK,IAAI,EAAAioF,UAAUpoF,EAAME,EAAI,EAAGC,EAAG6oJ,G,CAG/D,CAEQ,UAAA/4D,CACNjwF,EACAkwF,EACA9tF,EACA+tF,EACAC,GAEA,GACEpwF,EAAK2E,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQI,QACxC/7B,EAAKsE,OAAS,EAAA6N,SAASE,WAEvB,OAEF,QACa+F,IAAX+3E,QACW/3E,IAAXg4E,GACApwF,EAAK6K,UAAUslF,KAAUC,aAAmB,EAAAtlF,KAI5C,YAFA9K,EAAK6K,UAAUslF,GAAQC,GAAU,IAAI,EAAAhI,UAAUpoF,EAAMmwF,EAAQC,IAK/D,IAAIxhF,EAAQ,GACZ,IAAK,IAAIpI,EAAKxG,EAAKkL,MAAQ,EAAG1E,EAAKxG,EAAKkL,MAAQlL,EAAKoL,MAAQ,EAAG5E,IAC9D,IAAK,IAAI4F,EAAKpM,EAAKsL,MAAOc,EAAKpM,EAAKsL,MAAQtL,EAAKwL,OAAS,EAAGY,IAEzDpM,EAAK6K,UAAUrE,GAAI4F,aAAe,EAAAtB,QAChC9K,EAAK6K,UAAUrE,GAAI4F,EAAK,aAAc,EAAAtB,OAExC8D,EAAMrE,KAAKvK,EAAK6K,UAAUrE,GAAI4F,IAIpC,IAAIikF,EAAc,GAElB,IAAK,IAAI7pF,EAAKxG,EAAKkL,MAAQ,EAAG1E,EAAKxG,EAAKkL,MAAQlL,EAAKoL,MAAQ,EAAG5E,IAAM,CACpE,MAAM4F,EAAKpM,EAAKsL,MAAQtL,EAAKwL,OAAS,EAEpCxL,EAAK6K,UAAUrE,GAAI4F,aAAe,EAAAtB,QAChC9K,EAAK6K,UAAUrE,GAAI4F,EAAK,aAAc,EAAAtB,OAExCulF,EAAY9lF,KAAKvK,EAAK6K,UAAUrE,GAAI4F,G,CAKxC,MAAMkkF,EAAc,EAAAruF,KAAKG,KAAK,EAAG8tF,EAAY9tF,GACvCmuF,EAAoBL,EAAaI,EAEvC,IAAK,IAAI/pF,EAAI,EAAGA,EAAI+pF,GACE,GAAhB1hF,EAAMtN,OADqBiF,IAAK,CAEpC,MAAMiqF,EAAc,EAAAvuF,KAAKG,KAAK,EAAGwM,EAAMtN,OAAS,EAAGc,GAC7CyD,EAAI+I,EAAM0+D,OAAOkjB,EAAa,GAAG,GACjCtwF,EAAI2F,EAAE3F,EACNC,EAAI0F,EAAE1F,EACZH,EAAK6K,UAAU3K,GAAGC,GAAK,IAAI,EAAAioF,UAAUpoF,EAAME,EAAGC,E,CAEhD,IAAK,IAAIoG,EAAI,EAAGA,EAAIgqF,GACQ,GAAtBF,EAAY/uF,OADqBiF,IAAK,CAE1C,MAAMiqF,EAAc,EAAAvuF,KAAKG,KAAK,EAAGiuF,EAAY/uF,OAAS,EAAGc,GACnDyD,EAAIwqF,EAAY/iB,OAAOkjB,EAAa,GAAG,GACvCtwF,EAAI2F,EAAE3F,EACNC,EAAI0F,EAAE1F,EACZH,EAAK6K,UAAU3K,GAAGC,GAAK,IAAI,EAAAioF,UAAUpoF,EAAME,EAAGC,GAAG,E,CAErD,CAGQ,cAAA8oJ,CAAejpJ,EAAYE,EAAWC,EAAW2iF,GACvD,IAAIA,IAAY,EAAAxmE,UAAUI,IAAMomE,IAAY,EAAAxmE,UAAUG,OAIlDvc,GAAKC,EAAG,CACVH,EAAKiiF,oBACL,MAAM4N,EAAe7vF,EAAK0L,SAASwD,IAAI,GAAGhP,EAAI,KAAKC,KAC7C2vF,EAAgB9vF,EAAK0L,SAASwD,IAAI,GAAGhP,EAAI,KAAKC,KAC9C4vF,GAAwC,IAA7BF,GAAclkF,WACzBqkF,GAA2C,IAA/BF,GAAejkF,YAE3Bm9I,EAAalmE,IAAY,EAAAxmE,UAAUG,KAErCszE,GAAY/vF,EAAK6K,UAAU3K,EAAI,KAAKC,aAAc,EAAA2K,OACpD9K,EAAK6K,UAAU3K,EAAI,GAAGC,GAAK,IAAI,EAAAutG,OAAO1tG,EAAME,EAAI,EAAGC,EAAG6oJ,IAGpDh5D,GAAahwF,EAAK6K,UAAU3K,EAAI,KAAKC,aAAc,EAAA2K,OACrD9K,EAAK6K,UAAU3K,EAAI,GAAGC,GAAK,IAAI,EAAAutG,OAAO1tG,EAAME,EAAI,EAAGC,EAAG6oJ,G,CAG5D,CAEQ,UAAAE,CACNlpJ,EACAynJ,EACArlJ,EACA+tF,EACAC,GAMA,GAFEpwF,EAAK+Z,UAAY,EAAA4hB,QAAQK,QACzBh8B,EAAK2E,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQK,OAC3B,OAEf,QACa5jB,IAAX+3E,QACW/3E,IAAXg4E,GACApwF,EAAK6K,UAAUslF,KAAUC,aAAmB,EAAAtlF,KAG5C,YADA9K,EAAK6K,UAAUslF,GAAQC,GAAU,IAAI,EAAAsd,OAAO1tG,EAAMmwF,EAAQC,IAI5D,IAAIxhF,EAAe,GACnB,IAAK,IAAIpI,EAAKxG,EAAKkL,MAAQ,EAAG1E,EAAKxG,EAAKkL,MAAQlL,EAAKoL,MAAQ,EAAG5E,IAC9D,IAAK,IAAI4F,EAAKpM,EAAKsL,MAAOc,EAAKpM,EAAKsL,MAAQtL,EAAKwL,OAAS,EAAGY,IAEzDpM,EAAK6K,UAAUrE,GAAI4F,aAAe,EAAAtB,QAChC9K,EAAK6K,UAAUrE,GAAI4F,EAAK,aAAc,EAAAtB,OAExC8D,EAAMrE,KAAKvK,EAAK6K,UAAUrE,GAAI4F,IAKpC,IAAIikF,EAAqB,GACzB,IAAK,IAAI7pF,EAAKxG,EAAKkL,MAAQ,EAAG1E,EAAKxG,EAAKkL,MAAQlL,EAAKoL,MAAQ,EAAG5E,IAAM,CACpE,MAAM4F,EAAKpM,EAAKsL,MAAQtL,EAAKwL,OAAS,EAEpCxL,EAAK6K,UAAUrE,GAAI4F,aAAe,EAAAtB,QAChC9K,EAAK6K,UAAUrE,GAAI4F,EAAK,aAAc,EAAAtB,OAExCulF,EAAY9lF,KAAKvK,EAAK6K,UAAUrE,GAAI4F,G,CAIxC,MAAM+8I,EAAc,EAAAlnJ,KAAKG,KAAK,EAAGqlJ,EAAYrlJ,GACvCgnJ,EAAoB3B,EAAa0B,EAEvC,IAAK,IAAI5iJ,EAAI,EAAGA,EAAI4iJ,GACG,IAAjBv6I,EAAMtN,OADqBiF,IAAK,CAEpC,MAAMiqF,EAAc,EAAAvuF,KAAKG,KAAK,EAAGwM,EAAMtN,OAAS,EAAGc,GAC7CyD,EAAI+I,EAAM0+D,OAAOkjB,EAAa,GAAG,GACjCtwF,EAAI2F,EAAE3F,EACNC,EAAI0F,EAAE1F,EACZH,EAAK6K,UAAU3K,GAAGC,GAAK,IAAI,EAAAutG,OAAO1tG,EAAME,EAAGC,E,CAG7C,IAAK,IAAIoG,EAAI,EAAGA,EAAI6iJ,GACS,IAAvB/4D,EAAY/uF,OADqBiF,IAAK,CAE1C,MAAMiqF,EAAc,EAAAvuF,KAAKG,KAAK,EAAGiuF,EAAY/uF,OAAS,EAAGc,GACnDyD,EAAIwqF,EAAY/iB,OAAOkjB,EAAa,GAAG,GACvCtwF,EAAI2F,EAAE3F,EACNC,EAAI0F,EAAE1F,EACZH,EAAK6K,UAAU3K,GAAGC,GAAK,IAAI,EAAAutG,OAAO1tG,EAAME,EAAGC,GAAG,E,CAElD,CAEQ,sBAAAkpJ,CAUNrpJ,EAAYoC,EAAoBknJ,GAChC,IAAIjzI,EAAI,EAAApU,KAAKG,KAAK,EAAG,EAAGA,GACpB+gB,EAAI,EAAAlhB,KAAKG,KAAK,EAAG,EAAGA,GACpBsuF,EAAO1wF,EAAKkL,MAAQ,EACpBylF,EAAO3wF,EAAKkL,MAAQlL,EAAKoL,MAAQiL,EAAI,EACrCu6E,EAAO5wF,EAAKsL,MAAQ,EACpBulF,EAAO7wF,EAAKsL,MAAQtL,EAAKwL,OAAS2X,EAAI,EAC1C,GAAIwtE,EAAOD,GAAQG,EAAOD,EAAM,OAChC,IAAI1wF,EAAI,EAAA+B,KAAKG,KAAKsuF,EAAMC,EAAMvuF,GAC1BjC,EAAI,EAAA8B,KAAKG,KAAKwuF,EAAMC,EAAMzuF,GAE1BqyB,GAAQ,EAEZ,IAAK,IAAIjuB,EAAKtG,EAAI,EAAGsG,EAAKtG,EAAImW,EAAI,EAAG7P,IACnC,IAAK,IAAI4F,EAAKjM,EAAI,EAAGiM,EAAKjM,EAAIgjB,EAAI,EAAG/W,IAAM,CACzC,MAAMC,EAAOrM,EAAK6K,UAAUrE,GAAI4F,IAE7BC,aAAgB,EAAAu0E,aAAev0E,EAAKF,WAErCE,aAAgB,EAAA8oB,MAChB9oB,aAAgB,EAAAigD,SAEhB73B,GAAQ,E,CAQd,GALKA,EAGHrqB,QAAQ+C,IAAI,aAAem8I,EAAUvnJ,MAFrCqI,QAAQC,KAAK,gBAAkBi/I,EAAUvnJ,MAItC0yB,EACL,IAAK,IAAIjuB,EAAKtG,EAAI,EAAGsG,EAAKtG,EAAImW,EAAI,EAAG7P,IACnC,IAAK,IAAI4F,EAAKjM,EAAI,EAAGiM,EAAKjM,EAAIgjB,EAAI,EAAG/W,IAEnC,GAAI5F,IAAOtG,EAAI,GAAKsG,IAAOtG,EAAImW,GAAKjK,IAAOjM,EAAI,GAAKiM,IAAOjM,EAAIgjB,EAAG,CAChE,MAAM9W,EAAOrM,EAAK6K,UAAUrE,GAAI4F,GAE5BC,aAAgB,EAAAu0E,aAAev0E,EAAKF,WACpCE,aAAgB,EAAAvB,MAChBuB,aAAgB,EAAA8oB,MAChB9oB,aAAgB,EAAAigD,QAElBtsD,EAAK6K,UAAUrE,GAAI4F,GAAM,IAAI,EAAAG,MAAMvM,EAAMwG,EAAI4F,G,MAE/CpM,EAAK6K,UAAUrE,GAAI4F,GAAM,IAAIk9I,EAC3BtpJ,EACAwG,EACA4F,EACA5F,IAAOtG,EACPsG,IAAOtG,EAAImW,EAAI,EACfjK,IAAOjM,EACPiM,IAAOjM,EAAIgjB,EAAI,EAIzB,CACQ,SAAAstE,CAAUzwF,EAAYoC,GAC5B7B,KAAK8oJ,uBAAuBrpJ,EAAMoC,EAAM,EAAAkqD,MAC1C,CAEQ,aAAAi9F,CAAcvpJ,EAAYoC,GAChC7B,KAAK8oJ,uBAAuBrpJ,EAAMoC,EAAM,EAAAg1G,UAC1C,CAEQ,QAAAoyC,CAASxpJ,EAAYoC,GAC3B7B,KAAK8oJ,uBAAuBrpJ,EAAMoC,EAAM,EAAA+yB,KAC1C,CAEQ,aAAA27D,CAAc9wF,EAAY+wF,EAAmB3uF,GACnD,GACEpC,EAAK2E,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQI,QACxC/7B,EAAK+Z,UAAY,EAAA4hB,QAAQI,OAEzB,OAEF,IAAIpxB,EAAQ3K,EAAKoI,gBACjB,IAAK,IAAI7B,EAAI,EAAGA,EAAIwqF,EAAWxqF,IAAK,CAClC,MAAMmC,EAAW1I,EAAK+gF,uBAAuBp2E,GAC7C,GAAiB,OAAbjC,EAAmB,MACvB,MAAM,EAAExI,EAAC,EAAEC,GAAMuI,EACjB1I,EAAK6K,UAAU3K,GAAGC,GAAK,IAAI,EAAAsb,UAAUzb,EAAME,EAAGC,E,CAElD,CAQQ,iBAAAspJ,CAAkBzpJ,EAAYixF,EAAoBl3E,GACxD,IAAoC,IAAhC,EAAA9S,iBAAiBiqF,WAAqB,OAG1C,MAAMw4D,EAAmBnpJ,KAAKopJ,2BAA2B3pJ,EAAM+Z,GAE/B,IAA5B2vI,EAAiBpoJ,QAQrBf,KAAKqpJ,qBAAqB5pJ,EAAMixF,EAAYy4D,GAG5CnpJ,KAAKspJ,kBAAkB7pJ,IAVrBoK,QAAQ+C,IACN,wCAAwC4M,GAAW/Z,EAAK2E,MAAM8U,YAAYnV,iBAAiBtE,EAAKuO,QAUtG,CAKQ,0BAAAo7I,CACN3pJ,EACA+Z,GAEA,MAAMN,EAAcM,GAAW/Z,EAAK2E,MAAM8U,YAAYnV,KAChD0jJ,EAAU,EAAAC,gBAAgBxuI,GAG1BqwI,EAAkBvpJ,KAAKqnJ,kBAGvB8B,EAAmB1B,EAAQxyG,QAC9BnmC,IAAKsD,IAAU,IACXA,EACH+H,GAAI,EAAAopI,eAAe50I,IAAIyD,EAAMw1I,UAE9BlnJ,OACE0R,GACCA,EAAM+H,IACNovI,EAAgB5zH,SAASvjB,EAAM+H,MAC9B/H,EAAMu3B,UAAY,IAAMlqC,EAAKuO,OASpC,OANAnE,QAAQ+C,IACN,SAASnN,EAAKuO,cAAckL,YAAsBqwI,EAAgBz6I,IAAKqL,GAAOmpI,EAAcnpI,IAAO,WAAWA,MAAOouD,KAAK,yBAAyB4gF,EAChJr6I,IAAK7H,GAAMq8I,EAAcr8I,EAAEkT,KAAQ,WAAWlT,EAAEkT,OAChDouD,KAAK,UAGH4gF,CACT,CAKQ,oBAAAE,CACN5pJ,EACAixF,EACA84D,GAEA,IAAIp/I,EAAQ3K,EAAKoI,gBACjB,GAAqB,IAAjBuC,EAAMrJ,OAAc,OAGxB,MAAM6vF,EAAiB,IAAIhiF,IAC3B,IAAK,MAAMoD,KAAQvS,EAAK8O,MACtB,IAAK,IAAI8B,GAAM,EAAGA,GAAM,EAAGA,IACzB,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IACzBsgF,EAAengF,IAAI,GAAGuB,EAAKrS,EAAI0Q,KAAM2B,EAAKpS,EAAI0Q,KAIpDlG,EAAQA,EAAM1J,OAAQoL,IAAU8kF,EAAezgF,IAAI,GAAGrE,EAAKnM,KAAKmM,EAAKlM,MAGrE,IAAK,IAAIoG,EAAI,EAAGA,EAAI0qF,GACG,IAAjBtmF,EAAMrJ,OADoBiF,IAAK,CAEnC,MAAMmC,EAAW1I,EAAK+gF,uBAAuBp2E,GAC7C,GAAiB,OAAbjC,EAAmB,MACvB,MAAM,EAAExI,EAAC,EAAEC,GAAMuI,EAEXshJ,EAAgB,EAAAhyI,MAAMq8G,kBAAkB01B,GAC9C,IAAKC,GAAe7B,OAAOn3I,IAAK,SAEhC,MAAMwvF,EAAOwpD,EAAc5B,kBAAoB,GAG/C,GAAwC,eAApC4B,EAAcC,kBAAoC,CACpD,MAAMt3I,EAAQ,IAAIq3I,EAAc7B,MAAMnoJ,EAAMA,EAAKC,KAAMC,EAAGC,KAAMqgG,GAC5DjgG,KAAK2pJ,iBAAiBlqJ,EAAM2S,EAAOzS,EAAGC,EAAGwK,IAC3C3K,EAAKuH,SAASgD,KAAKoI,GACnBpS,KAAK4pJ,sBAAsBnqJ,EAAME,EAAGC,EAAGwS,EAAM0D,EAAG1D,EAAMwQ,EAAGxQ,GACzDpS,KAAK6pJ,oBAAoBz/I,EAAOzK,EAAGC,EAAGwS,EAAM0D,EAAG1D,EAAMwQ,IAErD8tE,G,MAGF+4D,EAAc7B,MAAMn3I,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,KAAMqgG,GAClD71F,EAAQA,EAAM1J,OAAQ4E,KAAQA,EAAE3F,IAAMA,GAAK2F,EAAE1F,IAAMA,G,CAGvDiK,QAAQ+C,IACN,WAAW8jF,6CAAsDtmF,EAAMrJ,SAE3E,CAKQ,iBAAAuoJ,CAAkB7pJ,GAEpBA,EAAKuO,MAAQ,EAAAtH,iBAAiBojJ,mBAChC9pJ,KAAKsxF,YAAY7xF,EAAM,EAAAmC,OAAOC,MAI5BpC,EAAKuO,MAAQ,EAAAtH,iBAAiBqjJ,qBAChC/pJ,KAAKyxF,cAAchyF,EAAM,EAAAmC,OAAOC,KAEpC,CAOQ,oBAAAylJ,CAAqBt5I,GAE3B,MAAMg3H,EAAMhlI,KAAKoE,MAAM8U,YAAYnV,KAY7BimJ,EAXa,EAAAtC,gBAAgB1iB,GAAK/vF,QAGrCnmC,IAAKsD,IAAU,CACd+H,GAAI,EAAAopI,eAAe50I,IAAIyD,EAAMw1I,OAC7Bj+G,SAAUv3B,EAAMu3B,UAAY,KAE7BjpC,OAAQuG,GAAsB,iBAATA,EAAEkT,IAAmBlT,EAAE0iC,UAAY37B,GACxDc,IAAK7H,GAAMA,EAAEkT,IAGoBzZ,OACjCyZ,IAAQna,KAAKoE,MAAM1E,KAAKuqJ,mBAAmBt0H,SAASxb,IAIjD+vI,EAAuB,EAAAxjJ,iBAAiByjJ,kBAC1CroJ,KAAKyD,IAAIykJ,EAAWjpJ,OAAQ,EAAA2F,iBAAiB0jJ,uBAC7CJ,EAAWjpJ,OAETspJ,EAAkBrqJ,KAAKsqJ,kBAC3BN,EACAE,GAEFlqJ,KAAKoE,MAAM1E,KAAKuqJ,mBAAmBjgJ,QAAQqgJ,GAG3C,MAAME,EAAevqJ,KAAKoE,MAAM1E,KAAKuqJ,mBAAmBniI,QAGlD0iI,EAAgB,EAAA9jJ,iBAAiByjJ,kBACnCnqJ,KAAKyqJ,sBAAsBz8I,GAC3Bu8I,EAAaxpJ,OAEX2pJ,EAAmB1qJ,KAAKsqJ,kBAC5BC,EACAC,GAEF,OAAOvvI,MAAM2S,KAAK,IAAIhf,IAAI87I,IAAmB5iI,MAAM,EAAG0iI,EACxD,CAKO,oBAAAx4D,CAAqBhkF,GAE1B,OAAIA,IAAUhO,KAAKoE,MAAM4J,MAChBhO,KAAKqnJ,kBAGPrnJ,KAAKsnJ,qBAAqBt5I,EACnC,CAKQ,qBAAAy8I,CAAsBz8I,GAC5B,OAAiB,IAAVA,EACH,EAAAtH,iBAAiBikJ,uBACjB7oJ,KAAKC,KAAKD,KAAKyO,KAAKvC,EAAQ,IAC1B,EAAAtH,iBAAiBkkJ,sBACzB,CAKQ,iBAAAN,CAAqBO,EAAYv+H,GACvC,MAAMw+H,EAAW,IAAID,GACrB,IAAK,IAAI7kJ,EAAI8kJ,EAAS/pJ,OAAS,EAAGiF,EAAI,EAAGA,IAAK,CAC5C,MAAMG,EAAIrE,KAAKgB,MAAM,EAAAlB,OAAOC,QAAUmE,EAAI,KACzC8kJ,EAAS9kJ,GAAI8kJ,EAAS3kJ,IAAM,CAAC2kJ,EAAS3kJ,GAAI2kJ,EAAS9kJ,G,CAEtD,OAAO8kJ,EAAShjI,MAAM,EAAGhmB,KAAKyD,IAAI+mB,EAAOw+H,EAAS/pJ,QACpD,CAKQ,gBAAA4oJ,CACNlqJ,EACA2S,EACAzS,EACAC,EACAwK,GAEA,GACEgI,EAAMzS,EAAIyS,EAAM0D,EAAIrW,EAAKkL,MAAQlL,EAAKoL,OACtCuH,EAAMxS,EAAIwS,EAAMwQ,EAAInjB,EAAKsL,MAAQtL,EAAKwL,QACtCmH,EAAMzS,EAAIF,EAAKkL,OACfyH,EAAMxS,EAAIH,EAAKsL,MAEf,OAAO,EAGT,IAAK,IAAI9E,EAAK,EAAGA,EAAKmM,EAAM0D,EAAG7P,IAC7B,IAAK,IAAI4F,EAAK,EAAGA,EAAKuG,EAAMwQ,EAAG/W,IAAM,CACnC,MAAMC,EAAOrM,EAAK6K,UAAU3K,EAAIsG,KAAMrG,EAAIiM,GAC1C,IAAKC,EAAKnM,IAAMA,EAAIsG,GAAM6F,EAAKlM,IAAMA,EAAIiM,IAAOC,EAAKF,UAEnD,OADA/B,QAAQ+C,IAAI,eACL,C,CAKb,OAAO,CACT,CAKQ,qBAAAg9I,CACNnqJ,EACAE,EACAC,EACAkW,EACA8M,EACAxQ,GAEA,IAAK,IAAInM,EAAK,EAAGA,EAAK6P,EAAG7P,IACvB,IAAK,IAAI4F,EAAK,EAAGA,EAAK+W,EAAG/W,IACvBpM,EAAK6K,UAAU3K,EAAIsG,GAAIrG,EAAIiM,GAAM,IAAI,EAAAG,MAAMvM,EAAME,EAAIsG,EAAIrG,EAAIiM,GACzDpM,EAAKuH,SAASiB,KAAMhB,GAAMA,EAAEtH,IAAMA,EAAIsG,GAAMgB,EAAErH,IAAMA,EAAIiM,KAC1DpM,EAAKuH,SAAWvH,EAAKuH,SAAStG,OAC3BuG,GAAOA,EAAEtH,IAAMA,EAAIsG,GAAMgB,EAAErH,IAAMA,EAAIiM,GAAO5E,IAAMmL,GAK7D,CAKQ,mBAAAy3I,CACNz/I,EACAzK,EACAC,EACAkW,EACA8M,GAEA,IAAK,IAAI3c,EAAK,EAAGA,EAAK6P,EAAG7P,IACvB,IAAK,IAAI4F,EAAK,EAAGA,EAAK+W,EAAG/W,IAAM,CAC7B,MAAMqO,EAAQ9P,EAAM6zG,UAAW34G,GAAMA,EAAE3F,IAAMA,EAAIsG,GAAMX,EAAE1F,IAAMA,EAAIiM,IACpD,IAAXqO,GAAc9P,EAAM2iE,OAAO7yD,EAAO,E,CAG5C,CAEQ,gBAAAw3E,CAAiBjyF,EAAYypB,EAAqB,GACxD,MAAMyoE,EAAgBlyF,EAAKoI,gBAAgB9G,OACrCgqJ,GAAatrJ,EAAKg1F,SAAW9C,GAAiB,EAE9CC,EAAS9vF,KAAKyD,KACjB9F,EAAKuO,MAAQ,EAAAtH,iBAAiBskJ,4BAC7B,EAAAtkJ,iBAAiBukJ,+BACnB,EAAAvkJ,iBAAiBwkJ,mBAGbC,EAAiBrpJ,KAAKC,KAC1BD,KAAK4D,IACH,EAAA+R,MAAMirB,gBAAgB,EAAGqoH,EAAYn5D,GACrCm5D,EAAYn5D,IAKVlB,EAAa5uF,KAAKyD,IAAI4lJ,EAAgBx5D,GAE5C3xF,KAAKkpJ,kBAAkBzpJ,EAAMixF,EAAaxnE,EAAYzpB,EAAK+Z,QAC7D,CAEQ,WAAA83E,CAAY7xF,EAAYoC,EAAoBgwF,GAClD,IAAIznF,EAAQ3K,EAAKoI,gBACjB,GAAqB,IAAjBuC,EAAMrJ,OACR,OAGF,IAAIqqJ,EAAc,KAGlB,QAAoBvzI,IAAhBg6E,EACF,IAAK,IAAI7rF,EAAI,EAAGA,EAAI6rF,EAAa7rF,IAAK,CACpC,MAAMmC,EAAW1I,EAAK+gF,uBAAuBp2E,GAC7C,GAAiB,OAAbjC,EAAmB,MACvB,MAAM,EAAExI,EAAC,EAAEC,GAAMuI,EAEX2pF,EAAa9xF,KAAKgyF,qBACtBlwF,KAAK4D,IAAI,EAAGjG,EAAKuO,QACjBtN,OAAQ4E,GAAY,IAANA,GAEhB8lJ,EAAc,EAAAhlJ,QAAQqK,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,EAAGkyF,GAGjD1nF,EAAQA,EAAM1J,OAAQ4E,KAAQA,EAAE3F,IAAMA,GAAK2F,EAAE1F,IAAMA,G,KAEhD,CAEL,MAAMyrJ,EAAsBvpJ,KAAKC,KAC/BtC,EAAKg1F,SAAW,EAAA/tF,iBAAiB4kJ,wBAGnC,IAAK,IAAItlJ,EAAI,EAAGA,EAAIqlJ,EAAqBrlJ,IAAK,CAC5C,GAAInE,IAAS,EAAA6E,iBAAiB6kJ,qBAAsB,SAEpD,MAAMpjJ,EAAW1I,EAAK+gF,uBAAuBp2E,GAC7C,GAAiB,OAAbjC,EAAmB,MACvB,MAAM,EAAExI,EAAC,EAAEC,GAAMuI,EAEX2pF,EAAa9xF,KAAKgyF,qBACtBlwF,KAAK4D,IAAI,EAAGjG,EAAKuO,MAAQ,IACzBtN,OAAQ4E,GAAY,IAANA,GAEhB8lJ,EAAc,EAAAhlJ,QAAQqK,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,EAAGkyF,GAEjD1nF,EAAQA,EAAM1J,OAAQ4E,KAAQA,EAAE3F,IAAMA,GAAK2F,EAAE1F,IAAMA,G,EAGvD,OAAOwrJ,CACT,CAEQ,aAAA35D,CACNhyF,EACAoC,EACAowF,GAEA,IAAI7nF,EAAQ3K,EAAKoI,gBACjB,GAAqB,IAAjBuC,EAAMrJ,OACR,OAGF,IAAIyqJ,EAAgB,KAGpB,QAAsB3zI,IAAlBo6E,EACF,IAAK,IAAIjsF,EAAI,EAAGA,EAAIisF,EAAejsF,IAAK,CACtC,MAAMmC,EAAW1I,EAAK+gF,uBAAuBp2E,GAC7C,GAAiB,OAAbjC,EAAmB,MACvB,MAAM,EAAExI,EAAC,EAAEC,GAAMuI,EAEjBqjJ,EAAgB,EAAAruI,eAAe1M,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GAGvDwK,EAAQA,EAAM1J,OAAQ4E,KAAQA,EAAE3F,IAAMA,GAAK2F,EAAE1F,IAAMA,G,KAEhD,CAEL,MAAM6rJ,EAAwB3pJ,KAAKC,KACjCtC,EAAKg1F,SAAW,EAAA/tF,iBAAiBglJ,0BAGnC,IAAK,IAAI1lJ,EAAI,EAAGA,EAAIylJ,EAAuBzlJ,IAAK,CAC9C,GAAInE,IAAS,EAAA6E,iBAAiBilJ,uBAAwB,SAEtD,MAAMxjJ,EAAW1I,EAAK+gF,uBAAuBp2E,GAC7C,GAAiB,OAAbjC,EAAmB,MACvB,MAAM,EAAExI,EAAC,EAAEC,GAAMuI,EAEjBqjJ,EAAgB,EAAAruI,eAAe1M,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GAEvDwK,EAAQA,EAAM1J,OAAQ4E,KAAQA,EAAE3F,IAAMA,GAAK2F,EAAE1F,IAAMA,G,EAGvD,OAAO4rJ,CACT,CAEQ,SAAAt5D,CAAUzyF,EAAYuO,GAC5B,IAAoC,IAAhC,EAAAtH,iBAAiBiqF,WAAqB,OAC1C,IAAIvmF,EAAQ3K,EAAKoI,gBACjB,GAAqB,IAAjBuC,EAAMrJ,OAIV,GAAK,EAAA2F,iBAAiBklJ,cAiGf,CACL,MAAMzjJ,EAAW1I,EAAKghF,0BAA0Br2E,GAChD,GAAiB,OAAbjC,EAAmB,OACvB,MAAM,EAAExI,EAAC,EAAEC,GAAMuI,EACjB,OAAQ6F,GACN,KAAK,EACH,MAAMokF,EAAY,EAAA3U,eAAehtE,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GACzDwyF,EAAUlwE,UAAY,CACpB,SACA,YACA,aACA,MACA,QAEFkwE,EAAU1lF,WAAa,EAEvB,MAAMowE,EAAQ,EAAA3zE,WAAWsH,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GACjDk9E,EAAM56D,UAAY,CAAC,SAAU,aAC7B46D,EAAMpwE,WAAa,EAEnB,MACF,KAAK,EACc,EAAAzD,cAAcwH,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GAC9CsiB,UAAY,CACnB,SACA,YACA,aACA,MACA,QAGcliB,KAAKsxF,YAAY7xF,EAAM,EAAAmC,OAAOC,KAAM,GAE5C6K,WAAa,EACrB,MACF,KAAK,EACc1M,KAAKsxF,YAAY7xF,EAAM,EAAAmC,OAAOC,KAAM,GAE5C6K,WAAa,EAEJ1M,KAAKyxF,cAAchyF,EAAM,EAAAmC,OAAOC,KAAM,GAE9C6K,WAAa,EACvB,MACF,KAAK,EACH,MAAMm/I,EAAa,EAAApuE,eAAehtE,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GAC1DisJ,EAAW3pI,UAAY,CACrB,SACA,YACA,aACA,MACA,QAEF2pI,EAAWn/I,WAAa,EAExB,MAAMo/I,EAAa,EAAAruE,eAAehtE,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GAC1DksJ,EAAW5pI,UAAY,CACrB,SACA,YACA,aACA,MACA,QAEF4pI,EAAWp/I,WAAa,EAEL1M,KAAKyxF,cAAchyF,EAAM,EAAAmC,OAAOC,KAAM,GAE9C6K,WAAa,EACxB,MACF,KAAK,EACH,MAAMqxE,EAAS,EAAAC,YAAYvtE,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GACnDm+E,EAAO77D,UAAY,CAAC,SAAU,aAC9B67D,EAAOrxE,WAAa,E,KAzKW,CACnC,IAAIylF,EAAS,CACX,SACA,QACA,gBACA,iBACA,eACA,WAGEnkF,EAAQ,IACVmkF,EAAOnoF,KAAK,aACZmoF,EAASA,EAAOzxF,OAAQyO,GAAY,UAANA,IAE5B1P,EAAK+Z,UAAY,EAAA4hB,QAAQI,QAC3B22D,EAAOnoF,KAAK,gBAEVgE,EAAQ,IACVmkF,EAAOnoF,KAAK,UACZmoF,EAASA,EAAOzxF,OACbyO,GACO,kBAANA,GACM,mBAANA,GACM,cAANA,IAIN,MAAMk+D,EAAO,EAAA3rE,KAAKC,UAAUwwF,EAAQ,EAAAvwF,OAAOC,MAC3CgI,QAAQ+C,IAAI,SAAUulF,EAAQ,OAAQ9kB,GAEtC,MAAMllE,EACJklE,EAAKl1C,WAAW,QAAmB,WAATk1C,EACtB5tE,EAAKghF,0BAA0Br2E,GAC/B3K,EAAK+gF,uBAAuBp2E,GAClC,GAAiB,OAAbjC,EAAmB,OACvB,MAAM,EAAExI,EAAC,EAAEC,GAAMuI,EAEjB,OAAQklE,GACN,IAAK,SACH,MAAM6P,EAAUl9E,KAAKsxF,YAAY7xF,EAAM,EAAAmC,OAAOC,KAAM,GACpDq7E,EAAQh7D,UAAY,CAAC,SAAU,aAC/Bg7D,EAAQxwE,WAAa,EACrB,MACF,IAAK,QACH,MAAMowE,EAAQ,EAAA3zE,WAAWsH,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GACjDk9E,EAAM56D,UAAY,CAAC,SAAU,aAC7B46D,EAAMpwE,WAAa,EACnB,MACF,IAAK,gBACc,EAAAzD,cAAcwH,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GAC9CsiB,UAAY,CACnB,SACA,YACA,aACA,MACA,QAGF,MACF,IAAK,YACH,MAAMi7D,EAAYn9E,KAAKyxF,cAAchyF,EAAM,EAAAmC,OAAOC,KAAM,GACxDs7E,EAAUj7D,UAAY,CAAC,SAAU,aACjCi7D,EAAUzwE,WAAa,EAEvB,MACF,IAAK,iBACH,MAAM0lF,EAAY,EAAA3U,eAAehtE,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GACzDwyF,EAAUlwE,UAAY,CACpB,SACA,YACA,aACA,MACA,QAEFkwE,EAAU1lF,WAAa,EACvB,MACF,IAAK,SACH,MAAMqxE,EAAS,EAAAC,YAAYvtE,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GACnDm+E,EAAO77D,UAAY,CAAC,SAAU,aAC9B67D,EAAOrxE,WAAa,EACpB,MACF,IAAK,eACa,EAAAhD,aAAa+G,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GAC7CsiB,UAAY,CAClB,SACA,YACA,aACA,MACA,QAEF,MACF,IAAK,UACH,MAAMm8D,EAAU,EAAAC,aAAa7tE,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GACrDy+E,EAAQn8D,UAAY,CAAC,SAAU,aAC/Bm8D,EAAQ3xE,WAAa,E,CAiF7B,CAEQ,SAAA2lF,CAAU5yF,EAAY6yF,EAAmBzwF,GAE/C,IAAIuI,EAAQ3K,EAAKoI,gBACjB,IAAK,IAAI7B,EAAI,EAAGA,EAAIssF,EAAWtsF,IAAK,CAClC,MAAMmC,EAAW1I,EAAK+gF,uBAAuBp2E,GAC7C,IAAKjC,EAEH,MAEF,MAAM,EAAExI,EAAC,EAAEC,GAAMuI,EACjB1I,EAAKuH,SAASgD,KAAK,IAAI,EAAA1K,MAAMG,EAAMA,EAAKC,KAAMC,EAAGC,G,CAErD,CAEA,QAAA2yF,CAAS9yF,EAAY+yF,EAAkB3wF,GACrC,IAAIuI,EAAQ3K,EAAKoI,gBACjB,IAAK,IAAI7B,EAAI,EAAGA,EAAIvG,EAAKoI,gBAAgB9G,OAAQiF,IAAK,CACpD,MAAMmC,EAAW1I,EAAK+gF,uBAAuBp2E,GAC7C,GAAiB,OAAbjC,EAAmB,MACvB,MAAM,EAAExI,EAAC,EAAEC,GAAMuI,EACjB,EAAAi1E,KAAK3sE,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,E,CAEjC,CAEQ,YAAA6yF,CAAahzF,EAAYizF,EAAsB7wF,GACrD,IAAIuI,EAAQ3K,EAAKoI,gBACjB,IAAK,IAAI7B,EAAI,EAAGA,EAAI0sF,EAAc1sF,IAAK,CACrC,MAAMmC,EAAW1I,EAAK+gF,uBAAuBp2E,GAC7C,GAAiB,OAAbjC,EAAmB,MACvB,MAAM,EAAExI,EAAC,EAAEC,GAAMuI,EAEjB,IAAImS,EAAIzY,IACJyY,IAAM,GAAK7a,EAAKuO,OAAS,GAAK,GAChC,EAAAwkC,aAAa/hC,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GAC9B0a,IAAM,IAAM7a,EAAKuO,MAAQ,IAAM,GAAK,GAC3C,EAAA2kF,aAAaliF,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,GAClC,EAAAgzF,gBAAgBniF,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,E,CAEjD,CAEQ,iBAAAizF,CACNpzF,EACAoC,EACA+tF,EACAC,EACAl9E,GAEA,MAAMgJ,EAAMlc,EAAK+gF,uBAAuB/gF,EAAKoI,iBAC7C,GAAY,OAAR8T,EAAc,OAClB,IAAIhc,EAAIiwF,GAAkBj0E,EAAIhc,EAC1BC,EAAIiwF,GAAkBl0E,EAAI/b,EAE1BkzF,EACFrzF,EAAKuO,MAAQ,EACT,CACE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAClE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE3D,CAAC,EAAG,EAAG,GACTjK,EAAO,EAAArC,KAAKC,UAAUmxF,EAAOjxF,GACjC,GAAI8Q,EACF,EAAAytB,eAAe3vB,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,EAAG+S,QAG5C,OAAQ5O,GACN,KAAK,EACH,EAAAq8B,eAAe3vB,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,EAAG,IAAI,EAAAsiC,MAAMziC,EAAME,EAAGC,IAC7D,MACF,KAAK,EACH,EAAAwgC,eAAe3vB,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,EAAG,IAAI,EAAA4iC,OAAO/iC,EAAME,EAAGC,IAC9D,MACF,KAAK,EACH,EAAAwgC,eAAe3vB,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,EAAG,IAAI,EAAAwiC,MAAM3iC,EAAME,EAAGC,IAC7D,MACF,KAAK,EACH,EAAAwgC,eAAe3vB,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,EAAG,IAAI,EAAAuiC,MAAM1iC,EAAME,EAAGC,IAC7D,MACF,KAAK,EACH,EAAAwgC,eAAe3vB,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,EAAG,IAAI,EAAAkT,MAAMrT,EAAME,EAAGC,IAC7D,MACF,KAAK,EACH,EAAAwgC,eAAe3vB,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,EAAG,IAAI,EAAA+iC,WAAWljC,EAAME,EAAGC,IAClE,MACF,KAAK,EACH,EAAAwgC,eAAe3vB,IAAIhR,EAAMA,EAAKC,KAAMC,EAAGC,EAAG,IAAI,EAAAgjC,OAAOnjC,EAAME,EAAGC,IAGpE,CAgUQ,gBAAAmsJ,CACNtsJ,EACAsmF,EAAgD,UAEhD,MAMMimE,EAAc,EAAAtqJ,KAAKC,UANH,CACpBsqJ,KAAM,CAAC,EAAG,EAAG,GACbC,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAClBC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9BC,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEsBrmE,GAAY,EAAAnkF,OAAOC,MACpE7B,KAAK0vF,WAAWjwF,EAAMusJ,EAAa,EAAApqJ,OAAOC,KAC5C,CAGQ,gBAAAwqJ,CACN5sJ,EACAsmF,EAAgD,UAQ5B,EAAArkF,KAAKC,UANF,CACrBsqJ,KAAM,CAAC,EAAG,EAAG,GACbC,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAClBC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9BC,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEuBrmE,GAAY,EAAAnkF,OAAOC,KAEvE,CAmDQ,wBAAA8hJ,CAAyBlkJ,EAAYoC,GAC3C,MAAM+vF,EAAS,EAAAlwF,KAAKG,KAAK,EAAG,GAAIA,GAEhC,OAAQpC,EAAKsE,MACX,KAAK,EAAA6N,SAASy3D,MACO,IAAf5pE,EAAKuO,OAGPhO,KAAK+mJ,iBAAiBtnJ,GAExB,MAEF,KAAK,EAAAmS,SAAS03D,KACZ,MAAMgjF,EAAW7sJ,EAAK4rF,cACtBrrF,KAAKqvF,eAAe5vF,EAAM6sJ,EAAS3sJ,EAAG2sJ,EAAS1sJ,EAAG0sJ,EAAS/pE,SAC3DviF,KAAK+mJ,iBAAiBtnJ,GACtBO,KAAKuwF,cACH9wF,EACA,EAAAiC,KAAKC,UAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIE,GACtCA,GAEF,MAEF,KAAK,EAAA+P,SAAS0pB,QAEVt7B,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQG,MACxCv7B,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQU,YACxC97B,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQI,OAEpCo2D,EAAS,IAAInyF,EAAK0vF,QAAQg0D,qBAAqBthJ,GAE/C+vF,EAAS,IAAInyF,EAAK0vF,QAAQ2zD,cAAcjhJ,GAG1CpC,EAAK+Z,UAAY,EAAA4hB,QAAQK,SACvBm2D,EAAS,IAAI5xF,KAAKipJ,SAASxpJ,EAAMoC,GAEjC+vF,EAAS,IAAI5xF,KAAKkwF,UAAUzwF,EAAMoC,GAElC+vF,EAAS,IAAMnyF,EAAKuO,MAAQ,GAAGhO,KAAKgpJ,cAAcvpJ,EAAMoC,IAG9D7B,KAAK+mJ,iBAAiBtnJ,GAEtBO,KAAKinJ,iBAAiBxnJ,GAClBmyF,EAAS,IACX5xF,KAAKuwF,cACH9wF,EACA,EAAAiC,KAAKC,UAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIE,GACtCA,GAEJ,MAEF,KAAK,EAAA+P,SAAS64D,WACRmnB,EAAS,GAAGnyF,EAAK0vF,QAAQ2zD,cAAcjhJ,GAEb,IAA1B,EAAAH,KAAKG,KAAK,EAAG,EAAGA,IAAa7B,KAAKkwF,UAAUzwF,EAAMoC,GACtD7B,KAAK+mJ,iBAAiBtnJ,GACQ,IAA1B,EAAAiC,KAAKG,KAAK,EAAG,EAAGA,IAClB7B,KAAKuwF,cAAc9wF,EAAM,EAAAiC,KAAKC,UAAU,CAAC,EAAG,EAAG,EAAG,GAAIE,GAAOA,GAC/D,MAEF,KAAK,EAAA+P,SAAS2pB,KAEVv7B,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQG,MACxCv7B,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQU,YACxC97B,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQI,OAEpCo2D,EAAS,IAAInyF,EAAK0vF,QAAQg0D,qBAAqBthJ,GAE/C+vF,EAAS,IAAInyF,EAAK0vF,QAAQ2zD,cAAcjhJ,GAG1CpC,EAAK+Z,UAAY,EAAA4hB,QAAQK,SACvBm2D,EAAS,IAAI5xF,KAAKkwF,UAAUzwF,EAAMoC,GAElC+vF,EAAS,IAAI5xF,KAAKipJ,SAASxpJ,EAAMoC,GACjC+vF,EAAS,IAAMnyF,EAAKuO,MAAQ,GAAGhO,KAAKgpJ,cAAcvpJ,EAAMoC,IAG1D7B,KAAKoE,MAAM8U,YAAYnV,OAAS,EAAAq3B,QAAQK,QAC1Cz7B,KAAK+mJ,iBAAiBtnJ,GAExBO,KAAKinJ,iBAAiBxnJ,GAEtB,MAEF,KAAK,EAAAmS,SAASw4D,QACRwnB,EAAS,IACX5xF,KAAKuwF,cACH9wF,EACA,EAAAiC,KAAKC,UAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIE,GACtCA,GAGJ,MAEF,KAAK,EAAA+P,SAAS23D,SAId,KAAK,EAAA33D,SAASm4D,QACZ/pE,KAAK+mJ,iBAAiBtnJ,GACtB,MAEF,KAAK,EAAAmS,SAASC,SACZ7R,KAAK+rJ,iBAAiBtsJ,EAAM,UAC5B,MAEF,KAAK,EAAAmS,SAASE,WACZ9R,KAAK0vF,WAAWjwF,EAAM,EAAGoC,EAAMpC,EAAKkL,MAAQ,EAAGlL,EAAKsL,OACpD,MAEF,KAAK,EAAA6G,SAAS04D,SAId,KAAK,EAAA14D,SAASu4D,cACZnqE,KAAK+rJ,iBAAiBtsJ,EAAM,UAC5B,MAEF,KAAK,EAAAmS,SAAS43D,KACZxpE,KAAK0vF,WAAWjwF,EAAM,EAAGoC,GACzB,MAEF,KAAK,EAAA+P,SAASo4D,MACR4nB,EAAS,GAAM,GAAG5xF,KAAKkwF,UAAUzwF,EAAMoC,GACvC+vF,EAAS,GAAM,GAAG5xF,KAAKipJ,SAASxpJ,EAAMoC,GAC1C7B,KAAK+mJ,iBAAiBtnJ,GAClBmyF,EAAS,IACX5xF,KAAKuwF,cACH9wF,EACA,EAAAiC,KAAKC,UAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIE,GACtCA,GAQV,CA+EA,yBAAAg0F,CAA0Bp2F,EAAYkT,GACpC,MAAM+iF,EAAaj2F,EAAKg2F,eACxB,GAA0B,IAAtBC,EAAW30F,OAAc,OAG7B,MAAM+0F,EAAe,EAAAp0F,KAAKC,UAAU+zF,EAAY,EAAA9zF,OAAOC,MACvD,IAAKi0F,EAAc,OAGnB,MAAMC,EAAkBt2F,EAAKm2F,gBAAgBE,GAC7C,IAAKC,EAAiB,OAEtB,MAAM,EAAEp2F,EAAC,EAAEC,GAAMm2F,EAGjB/1F,KAAK6yF,kBAAkBpzF,EAAM,EAAAmC,OAAOC,KAAMlC,EAAGC,EAAG+S,GAEhDlT,EAAK6K,UAAU3K,GAAGC,GAAKk2F,CACzB,E,+GCnlEF,eACA,UAEA,MAAapgF,UAA+B,EAAAmjB,SAQ1C,WAAAr5B,CAAYG,EAAWC,GACrBC,QASF,KAAAsC,KAAQC,IACFpC,KAAKqC,OACT,EAAAX,KAAKwE,OAAOpE,KAAKgB,MAAM9C,KAAKuD,OAAQ,EAAG,EAAG,EAAGvD,KAAKL,EAAGK,KAAKJ,EAAII,KAAK8sC,EAAG,EAAG,GACzE9sC,KAAK8sC,GAAK9sC,KAAK+sC,GAAK3qC,EACpBpC,KAAK+sC,IAAM,GACX/sC,KAAKuD,OAAS,GAAMnB,EAChBpC,KAAKuD,MAAQ,IAAGvD,KAAKqC,MAAO,KAdhCrC,KAAKL,EAAIA,EACTK,KAAKJ,EAAIA,EACTI,KAAKqC,MAAO,EACZrC,KAAKuD,MAAQ,EACbvD,KAAK8sC,EAAI,EACT9sC,KAAK+sC,GAAK,EACZ,EAhBF,0B,8FCHA,eAEA,UAIA,SAEA,UACA,UACA,UACA,MAAaogD,UAAc,EAAA5tF,OACzB,WAAAC,CAAYC,EAAYC,EAAYC,EAAWC,GAC7CC,MAAMJ,EAAMC,EAAMC,EAAGC,GAqBvB,KAAAqB,mBAAqB,KACfjB,KAAK8c,QACT,EAAA1b,MAAM6kB,UAAU,EAAA7kB,MAAMupC,UAAW,KAGnC,KAAAxoC,KAAQC,IACFpC,KAAKqC,OACT,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,MACvBzC,KAAKqC,OACJrC,KAAK2C,WAAW3C,KAAK4C,WAAWR,GAEpCpC,KAAK0C,aAAaN,GAClB,EAAAV,KAAKmB,QACH7C,KAAKkB,MACLlB,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAIK,KAAK+C,MACd/C,KAAKJ,EAAII,KAAKgD,YAAchD,KAAKiD,MACjC,EACA,EACAjD,KAAKP,KAAKyD,WACVlD,KAAKmD,gBAGT,EAAAzB,KAAKY,IAAIc,YAGX,KAAAC,aAAgBjB,IACdpC,KAAKsD,UAAYtD,KAAKJ,GAlDtBI,KAAKP,KAAOA,EACZO,KAAKC,OAAS,EACdD,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAK2C,WAAY,EACjB3C,KAAK2D,eAAgB,EAErB3D,KAAKwB,KAAO,QACZxB,KAAK6D,eAAiB,EACtB7D,KAAK8D,eAAiB,GACtB9D,KAAKmgB,QAAS,EAEV,EAAAve,OAAOC,OAAS,KAClB7B,KAAKK,MAAM2J,KAAK,IAAI,EAAA4+B,MAAM5oC,KAAKP,KAAMO,KAAKL,EAAGK,KAAKJ,GACtD,CAEA,QAAImE,GACF,OAAO,EAAAC,WAAWwO,IACpB,EArBF,S,oGCXA,gBACA,UACA,SACA,UAEA,MAAapR,EAkEX,mBAAOmrJ,GACL,MAAMp2I,EACJD,UAAUC,WAAaD,UAAU+xC,QAAWx2B,OAAe+6H,MAK7D,OAJAprJ,EAAMkuB,SACJ,iEAAiEg0B,KAC/DntC,GAEG/U,EAAMkuB,QACf,CAEA,iCAAam9H,GACX,IAAIrrJ,EAAMsrJ,oBAEV,IACM,EAAAl7H,OAAOlvB,KAA4B,cAArB,EAAAkvB,OAAOlvB,IAAI4R,cACrB,EAAAsd,OAAOlvB,IAAI4tB,SACjB9uB,EAAMsrJ,qBAAsB,EAC5B7iJ,QAAQ+C,IAAI,wB,CAEd,MAAOujB,GACPtmB,QAAQC,KAAK,iCAAkCqmB,E,CAEnD,CAEA,6BAAOw8H,GACL,MAQMjzE,EAAS,CAAC,aAAc,QAAS,WACjCkzE,EAAU,KATI9+G,iBACZ1sC,EAAMqrJ,uBACRrrJ,EAAM6xB,YAAc,EAAA5D,aAAa4B,cACnC7vB,EAAM6xB,YAAa,EACnB,EAAAzB,OAAOgmE,MAAK,KAMdq1D,GACAnzE,EAAOn4E,QAASw1D,IACd5K,SAASt0B,oBAAoBk/B,EAAO61F,MAIxClzE,EAAOn4E,QAASw1D,IACd5K,SAASr1B,iBAAiBigC,EAAO61F,EAAS,CAAE5tD,MAAM,KAEtD,CAEA,iBAAOpvD,GACLxuC,EAAM6xB,YAAc7xB,EAAM6xB,WACtB7xB,EAAM6xB,WACR,EAAAzB,OAAOgmE,MAAK,IAEZ,EAAAhmE,OAAOgmE,MAAK,GACRp2F,EAAMkuB,UACRluB,EAAMqrJ,uBAGZ,CA0TA,qBAAOlrE,CACLlxD,EACAy8H,EAAmB1rJ,EAAM2rJ,SAASC,cAElC,GAAI5rJ,EAAM6xB,WAAY,OAAO,KAE7B,IAEE,GACE7xB,EAAM6rJ,iBAAiBzvI,KAAO,IAC9BsvI,EAAW1rJ,EAAM2rJ,SAASG,OAE1B,OAAO,KAGT,IAAIn8H,EAAyB,KAuB7B,OAnBEA,EADE,EAAA1B,aAAa4B,cAAgB7vB,EAAMkuB,SAC3B,EAAAD,aAAauE,YAAYvD,GAEzBA,EAAMyD,OAGd/C,IACF3vB,EAAM6rJ,iBAAiBx8I,IAAIsgB,GAG3BV,EAAM2uE,KAAK,MAAO,KAChB59F,EAAM6rJ,iBAAiBj5H,OAAOjD,KAIhC9M,WAAW,KACT7iB,EAAM6rJ,iBAAiBj5H,OAAOjD,IAC7B,MAGEA,C,CACP,MAAOZ,GAEP,OADAtmB,QAAQsmB,MAAM,uBAAwBA,GAC/B,I,CAEX,CA6UA,gBAAOgxD,CAAU9wD,GACfA,EAAMonE,MACR,CAEA,0BAAO01D,CAAoB98H,GACzB,EAAAhB,aAAa0E,aAAa1D,GAC1BrwB,KAAKmhF,UAAU9wD,EACjB,CAEA,cAAO4D,GACL7yB,EAAM6rJ,iBAAiB/4H,QACvB,EAAA1C,OAAOkmE,QACT,EAxzBF,U,IA2BS,EAAAzmE,aAAuB,EACvB,EAAAgC,YAAsB,EAsBtB,EAAAg6H,iBAAgC,IAAIr+I,IAE3B,EAAAm+I,SAAW,CACzBK,QAAS,EACTC,UAAW,EACXL,aAAc,EACdE,OAAQ,EACRI,SAAU,GAGL,EAAAh+H,UAAoB,EACpB,EAAAo9H,qBAA+B,EAC/B,EAAAa,cAA+B,KAC/B,EAAAC,YAA6B,KAC7B,EAAAC,eAAgC,KA4DhC,EAAAC,WAAa5/G,UAClB,GAAI1sC,EAAM6vB,YAAa,OACvB7vB,EAAM6vB,aAAc,EAEpB7vB,EAAMmrJ,eACFnrJ,EAAMkuB,UACRluB,EAAMurJ,yBAGJ,EAAAt9H,aAAa4B,cACf7vB,EAAM6xB,YAAa,GAIrB,MAAM06H,EAAkB,CACtBC,EACAjoF,EACA/yC,EAAiB,EACjBi7H,EAAwB,IAEjBloF,EAAQ72D,IAAK9I,GACX,IAAI,EAAAisB,KAAK,CACd3B,IAAK,CAAC,GAAGs9H,IAAW5nJ,SACpB4sB,OAAQA,EACR4oE,SAAS,EACTN,OAAO,EACPI,KAAMuyD,KAKNC,EAAa,CACjBx9H,EACAsC,EAAiB,EACjBwoE,GAAgB,EAChByyD,EAAwB,IAEjB,IAAI,EAAA57H,KAAK,CACd3B,IAAK,CAACA,GACNsC,OAAQA,EACR4oE,SAAS,EACTJ,KAAMA,EACNF,OAAO,EACPI,KAAMuyD,IAIV,IAEEzsJ,EAAM2sJ,WAAaD,EACjB,6BACA,KACA,EACA,GAEF1sJ,EAAM4sJ,eAAiBF,EACrB,gCACA,GACA,EACA,GAEF1sJ,EAAM6sJ,UAAYH,EAAW,6BAA8B,IAAK,EAAO,GACvE1sJ,EAAM8sJ,UAAYP,EAAgB,oBAAqB,CAAC,EAAG,GAAI,EAAK,GAEpEvsJ,EAAM+sJ,qBAAuBR,EAC3B,mCACA,CAAC,EAAG,EAAG,GACP,EACA,GAEFvsJ,EAAMgtJ,qBAAuBT,EAC3B,mCACA,CAAC,EAAG,EAAG,EAAG,GACV,EACA,GAEFvsJ,EAAMitJ,oBAAsBV,EAC1B,kCACA,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,EACA,GAEFvsJ,EAAMktJ,eAAiBX,EACrB,wCACA,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,EACA,GAIFvsJ,EAAMmtJ,YAAcZ,EAClB,wBACA,CAAC,EAAG,EAAG,EAAG,GACV,GACA,GAEFvsJ,EAAMotJ,UAAYb,EAChB,uBACA,CAAC,EAAG,EAAG,EAAG,GACV,GACA,GAEFvsJ,EAAMqtJ,WAAa,CAACX,EAAW,0BAA2B,IAAK,EAAO,IACtE1sJ,EAAMstJ,WAAaf,EACjB,wBACA,CAAC,EAAG,EAAG,GACP,GACA,GAEFvsJ,EAAMutJ,gBAAkBhB,EACtB,6BACA,CAAC,EAAG,EAAG,GACP,GACA,GAEFvsJ,EAAMwtJ,YAAcjB,EAClB,wBACA,CAAC,EAAG,GACJ,GACA,GAEFvsJ,EAAMytJ,YAAclB,EAClB,wBACA,CAAC,GACD,IACA,GAIFvsJ,EAAM0tJ,gBAAkBhB,EACtB,iCACA,IACA,EACA,GAEF1sJ,EAAM2tJ,YAAcpB,EAClB,wBACA,CAAC,EAAG,GACJ,GACA,GAIFvsJ,EAAM4tJ,YAAcrB,EAClB,sBACA,CAAC,EAAG,EAAG,GACP,GACA,GAEFvsJ,EAAM6tJ,iBAAmBtB,EACvB,sBACA,CAAC,EAAG,EAAG,EAAG,GACV,EACA,GAEFvsJ,EAAM8tJ,mBAAqBpB,EACzB,2BACA,IACA,EACA,GAEF1sJ,EAAM+tJ,eAAiBrB,EACrB,8BACA,GACA,EACA,GAEF1sJ,EAAMguJ,cAAgBtB,EACpB,6BACA,KACA,EACA,GAEF1sJ,EAAMiuJ,WAAavB,EAAW,0BAA2B,IAAK,EAAO,GACrE1sJ,EAAMkuJ,YAAcxB,EAClB,2BACA,KACA,EACA,GAEF1sJ,EAAMmuJ,UAAYzB,EAChB,+BACA,MACA,EACA,GAEF1sJ,EAAMouJ,YAAc1B,EAClB,8BACA,KACA,EACA,GAEF1sJ,EAAMquJ,YAAc9B,EAClB,wBACA,CAAC,EAAG,GACJ,GACA,GAGFvsJ,EAAMsuJ,aAAe/B,EACnB,4BACA,CAAC,EAAG,EAAG,EAAG,GACV,GACA,GAEFvsJ,EAAMuuJ,eAAiB7B,EACrB,kCACA,GACA,EACA,GAIF1sJ,EAAMwuJ,aAAejC,EAAgB,sBAAuB,CAAC,GAAI,GAAK,GACtEvsJ,EAAMyuJ,eAAiBlC,EACrB,oBACA,CAAC,EAAG,GACJ,GACA,GAIFvsJ,EAAM0uJ,eAAiBnC,EACrB,2BACA,CAAC,EAAG,EAAG,GACP,GACA,GAEFvsJ,EAAM2uJ,WAAapC,EACjB,2BACA,CAAC,EAAG,GACJ,IACA,GAEFvsJ,EAAM4uJ,WAAarC,EACjB,uBACA,CAAC,EAAG,GACJ,EACA,GAEFvsJ,EAAM6uJ,kBAAoBtC,EACxB,uBACA,CAAC,EAAG,GACJ,GACA,GAEFvsJ,EAAM8uJ,iBAAmBpC,EACvB,4BACA,IACA,EACA,GAEF1sJ,EAAM+uJ,mBAAqBxC,EACzB,yBACA,CAAC,EAAG,GACJ,IACA,GAGFvsJ,EAAMgvJ,WAAazC,EACjB,0BACA,CAAC,EAAG,GACJ,GACA,GAEFvsJ,EAAMivJ,cAAgBvC,EACpB,2BACA,IACA,EACA,GAEF1sJ,EAAMkvJ,cAAgBxC,EACpB,+BACA,IACA,EACA,GAEF1sJ,EAAMmvJ,eAAiBzC,EACrB,gCACA,IACA,EACA,GAIF1sJ,EAAM+6C,YAAc2xG,EAAW,wBAAyB,KAAM,EAAM,GACpE1sJ,EAAMi7C,UAAYyxG,EAAW,sBAAuB,KAAM,EAAM,GAChE1sJ,EAAMovJ,WAAa1C,EACjB,iCACA,GACA,EACA,GAEF1sJ,EAAMqvJ,aAAe3C,EACnB,mCACA,IACA,EACA,GAEF1sJ,EAAMsvJ,UAAY5C,EAChB,gCACA,IACA,EACA,GAGFjkJ,QAAQ+C,IAAI,iC,CACZ,MAAOujB,GACPtmB,QAAQsmB,MAAM,wBAAyBA,E,GAiDpC,EAAA+5E,oBAAuBhxF,IAC5B,GAAI9X,EAAM6xB,WAAY,OACtB,IAAI5C,EAAQjvB,EAAM+sJ,qBACE,IAAhBj1I,IAAmBmX,EAAQjvB,EAAMgtJ,sBACjB,IAAhBl1I,IAAmBmX,EAAQjvB,EAAMitJ,qBAErC,IAAIhwH,EAAI,EAAA38B,KAAKC,UAAU0uB,EAAO,EAAAzuB,OAAOC,MACrC,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASM,YAGjC,EAAAsD,cAAgB,KACrB,GAAIvvJ,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAMktJ,eAAgB,EAAA1sJ,OAAOC,MACpD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASM,YAGjC,EAAAp0H,MAAQ,KACb,GAAI73B,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAMmtJ,YAAa,EAAA3sJ,OAAOC,MACjD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASG,SAGjC,EAAA3mJ,IAAM,CAACqqJ,GAAgB,KAC5B,GAAIxvJ,EAAM6xB,WAAY,OAEtB,IAAIiuE,EAAS9/F,EAAMotJ,UAAU1mI,MAAM8oI,EAAO,EAAI,EAAGA,EAAO,EAAI,GAE5D3sI,WAAW,KACT,IAAIoa,EAAI,EAAA38B,KAAKC,UAAUu/F,EAAQ,EAAAt/F,OAAOC,MACtC,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASG,SACrC,MAGE,EAAAnoJ,KAAO,KACZ,GAAI3D,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAMqtJ,WAAY,EAAA7sJ,OAAOC,MAChD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASO,WAGjC,EAAAj9C,WAAa,KACdjvG,EAAM6xB,YACV,EAAKsuD,eAAengF,EAAM0tJ,gBAAiB1tJ,EAAM2rJ,SAASO,WAGrD,EAAAjsJ,MAAQ,KACb,GAAID,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAM4tJ,YAAa,EAAAptJ,OAAOC,MACjD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASC,eAGjC,EAAAjsF,SAAW,KAChB,GAAI3/D,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAM0uJ,eAAgB,EAAAluJ,OAAOC,MACpD,EAAKokB,UACH,IAAM,EAAKs7D,eAAeljD,EAAGj9B,EAAM2rJ,SAASC,cAC5C,MAIG,EAAA1oH,WAAa,KAClB,GAAIljC,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAM6tJ,iBAAkB,EAAArtJ,OAAOC,MACtD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASC,eAGjC,EAAAh3D,KAAO,KACZ,GAAI50F,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAMsuJ,aAAc,EAAA9tJ,OAAOC,MAClD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASC,eAGjC,EAAAriH,UAAY,KACbvpC,EAAM6xB,YACVhP,WAAW,KACT,EAAKs9D,eAAengF,EAAMuuJ,eAAgBvuJ,EAAM2rJ,SAASC,eACxD,MAGE,EAAAj0H,KAAO,KACR33B,EAAM6xB,YACV,EAAKsuD,eAAengF,EAAM6sJ,UAAW7sJ,EAAM2rJ,SAASO,WAG/C,EAAAzlC,cAAgB,KACjBzmH,EAAM6xB,YACV,EAAKsuD,eAAengF,EAAM8tJ,mBAAoB9tJ,EAAM2rJ,SAASC,eAGxD,EAAA7iC,UAAY,KACb/oH,EAAM6xB,YACV,EAAKsuD,eAAengF,EAAM+tJ,eAAgB/tJ,EAAM2rJ,SAASC,eAGpD,EAAAhjJ,KAAO,KACZ,GAAI5I,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAM4uJ,WAAY,EAAApuJ,OAAOC,MAChD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASC,eAGjC,EAAApiH,WAAa,KACdxpC,EAAM6xB,aAEV7xB,EAAMovJ,WAAW59H,OAAO,IACxB,EAAK2uD,eAAengF,EAAMovJ,WAAYpvJ,EAAM2rJ,SAASO,YAGhD,EAAAxxG,OAAS,KACd,GAAI16C,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAMwuJ,aAAc,EAAAhuJ,OAAOC,MAClD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASC,eAGjC,EAAAptE,cAAgB,CAAC1lE,EAAgB,KACtC,IAAI9Y,EAAM6xB,WAEV,IAEM7xB,EAAMosJ,aACRpsJ,EAAMi7C,UAAUo7C,KAAKr2F,EAAMosJ,aAI7BpsJ,EAAMosJ,YAAcpsJ,EAAMi7C,UAAUvoB,OAGhC1yB,EAAMkuB,WAAaluB,EAAMsrJ,qBAC3BtrJ,EAAMqrJ,sB,CAER,MAAOt8H,GACPtmB,QAAQsmB,MAAM,4BAA6BA,E,GAIxC,EAAAwvD,gBAAkB,CAACzlE,EAAgB,KACxC,IAAI9Y,EAAM6xB,WAEV,IAEM7xB,EAAMmsJ,eACRnsJ,EAAM+6C,YAAYs7C,KAAKr2F,EAAMmsJ,eAI/BnsJ,EAAMmsJ,cAAgBnsJ,EAAM+6C,YAAYroB,OAGpC1yB,EAAMkuB,WAAaluB,EAAMsrJ,qBAC3BtrJ,EAAMqrJ,sB,CAER,MAAOt8H,GACPtmB,QAAQsmB,MAAM,8BAA+BA,E,GAI1C,EAAA0vD,UAAY,MACbz+E,EAAMmsJ,eAAiBnsJ,EAAMosJ,eAC/BpsJ,EAAM+6C,YAAYs7C,KAAKr2F,EAAMmsJ,eAC7BnsJ,EAAMi7C,UAAUo7C,KAAKr2F,EAAMosJ,eAIxB,EAAAr/C,SAAW,KAChB,GAAI/sG,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAMyuJ,eAAgB,EAAAjuJ,OAAOC,MACpD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASC,eAGjC,EAAA6D,YAAc,KACnB,IAAIzvJ,EAAM6xB,WAEV,IAGK7xB,EAAMqsJ,gBACNrsJ,EAAMqvJ,aAAa5vD,QAAQz/F,EAAMqsJ,kBAElCrsJ,EAAMqsJ,eAAiBrsJ,EAAMqvJ,aAAa38H,O,CAE5C,MAAO3D,GACPtmB,QAAQsmB,MAAM,+BAAgCA,E,GAI3C,EAAA2gI,YAAc,KACf1vJ,EAAMqsJ,iBACRrsJ,EAAMqvJ,aAAah5D,KAAKr2F,EAAMqsJ,gBAC9BrsJ,EAAMqsJ,eAAiB,OAIpB,EAAAsD,SAAW,KACZ3vJ,EAAM6xB,aAEV7xB,EAAMmvJ,eAAez8H,OAErB1yB,EAAMmvJ,eAAevxD,KAAK,MAAO,KAC/B59F,EAAMkvJ,cAAcx8H,WAIjB,EAAAk9H,SAAW,KAChB5vJ,EAAMkvJ,cAAc74D,OACpBr2F,EAAMmvJ,eAAe94D,QAGhB,EAAAw5D,SAAW,KACZ7vJ,EAAM6xB,YACV,EAAKsuD,eAAengF,EAAMsvJ,UAAWtvJ,EAAM2rJ,SAASG,SAG/C,EAAAgE,SAAW,KAChB,GAAI9vJ,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAMgvJ,WAAY,EAAAxuJ,OAAOC,MAChD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASO,WAGjC,EAAAnzH,cAAgB,KACjB/4B,EAAM6xB,YACV,EAAKhN,UAAU,KACb,EAAKs7D,eAAengF,EAAMotJ,UAAU,GAAIptJ,EAAM2rJ,SAASG,SACtD,MAGE,EAAAhzE,UAAY,KACjB,GAAI94E,EAAM6xB,WAAY,OACtB,EAAKsuD,eAAengF,EAAM2sJ,WAAY3sJ,EAAM2rJ,SAASG,QACrD,IAAI7uH,EAAIj9B,EAAM2tJ,YAAY,GAC1B,EAAKxtE,eAAeljD,EAAGj9B,EAAM2rJ,SAASG,SAGjC,EAAAh0H,UAAY,KACjB,GAAI93B,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAMstJ,WAAY,EAAA9sJ,OAAOC,MAChD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASG,SAGjC,EAAAvgG,eAAiB,KACtB,GAAIvrD,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAMutJ,gBAAiB,EAAA/sJ,OAAOC,MACrD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASG,SAGjC,EAAA30H,aAAe,KAChBn3B,EAAM6xB,YACV,EAAKsuD,eAAengF,EAAMguJ,cAAehuJ,EAAM2rJ,SAASC,eAGnD,EAAAnhG,UAAY,KACbzqD,EAAM6xB,YACV,EAAKsuD,eAAengF,EAAMiuJ,WAAYjuJ,EAAM2rJ,SAASC,eAGhD,EAAAjjC,SAAW,KAChB,GAAI3oH,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAM2uJ,WAAY,EAAAnuJ,OAAOC,MAChD,EAAKokB,UACH,IAAM,EAAKs7D,eAAeljD,EAAGj9B,EAAM2rJ,SAASC,cAC5C,MAIG,EAAAvoI,UAAY,KACjB,GAAIrjB,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAMwtJ,YAAa,EAAAhtJ,OAAOC,MACjD,EAAKokB,UAAU,IAAM,EAAKs7D,eAAeljD,EAAGj9B,EAAM2rJ,SAASO,UAAW,MAGjE,EAAAn1F,QAAU,KACf,GAAI/2D,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAM8sJ,UAAW,EAAAtsJ,OAAOC,MAC/C,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASC,eAGjC,EAAAhjD,UAAY,KACjB,GAAI5oG,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAMytJ,YAAa,EAAAjtJ,OAAOC,MACjD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASG,SAGjC,EAAApjD,WAAa,KACd1oG,EAAM6xB,YACV,EAAKsuD,eAAengF,EAAMkuJ,YAAaluJ,EAAM2rJ,SAASC,eAGjD,EAAAhjC,SAAW,KACZ5oH,EAAM6xB,YACV,EAAKhN,UAAU,KACb,EAAKs7D,eAAengF,EAAMmuJ,UAAWnuJ,EAAM2rJ,SAASC,eACnD,MAGE,EAAArjD,WAAa,KACdvoG,EAAM6xB,YACV,EAAKsuD,eAAengF,EAAMouJ,YAAapuJ,EAAM2rJ,SAASC,eAGjD,EAAA31F,gBAAkB,KACvB,GAAIj2D,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAM6uJ,kBAAmB,EAAAruJ,OAAOC,MACvD,EAAK0/E,eAAeljD,EAAGj9B,EAAM2rJ,SAASC,eAGjC,EAAA11F,gBAAkB,KACnBl2D,EAAM6xB,YACV,EAAKsuD,eAAengF,EAAM8uJ,iBAAkB9uJ,EAAM2rJ,SAASC,eAGtD,EAAAv1F,iBAAmB,KACxB,GAAIr2D,EAAM6xB,WAAY,OACtB,IAAIoL,EAAI,EAAA38B,KAAKC,UAAUP,EAAM+uJ,mBAAoB,EAAAvuJ,OAAOC,MACxD,EAAKokB,UACH,IAAM,EAAKs7D,eAAeljD,EAAGj9B,EAAM2rJ,SAASC,cAC5C,MAIG,EAAA32F,UAAY,KACjB,GAAIj1D,EAAM6xB,WAAY,OACtB,IAAInd,EAAI1U,EAAM2tJ,YAAY,GACtB1wH,EAAIj9B,EAAMquJ,YAAY,GAC1B,EAAKluE,eAAezrE,EAAG1U,EAAM2rJ,SAASG,QACtC,EAAKjnI,UAAU,KACb,EAAKs7D,eAAeljD,EAAGj9B,EAAM2rJ,SAASG,SACrC,KACH,EAAK3rE,eAAezrE,EAAG1U,EAAM2rJ,SAASG,SAGjC,EAAAjnI,UAAY,CAAC61E,EAAoBr4D,KACtCxf,WAAW63E,EAAQr4D,G,iGC3yBvB,gBAGA,UAGA,MAAas3E,UAAiB,EAAAz7F,OAE5B,WAAA9f,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GAQlB,KAAA04B,MAASzrB,IACP7M,KAAKmxJ,eAAetkJ,IAEtB,KAAAskJ,eAAkBtkJ,IAChB,IAAIY,EAAczN,KAAKoE,MAAM1E,KAAKuO,MAAMvN,OACrCjB,GAASA,EAAKsE,OAAS,EAAA6N,SAASE,YAEnCjI,QAAQ+C,IAAI,cAAea,GAC3B,MAAM2vG,EAAa3vG,EAAYA,EAAY1M,OAAS,GACpDf,KAAKoE,MAAM1E,KAAKuO,MAAM1M,QAAS+Y,IAC7BA,EAAEpM,SAAU,EACZoM,EAAEonE,sBAGJ07B,EAAW19G,KAAK2uG,uBAAuBxhG,EAAQuwG,EAAW7uG,MAAM,GAAI,GACpE1B,EAAOlN,EAAIy9G,EAAWzyG,MAAQ,EAC9BkC,EAAOjN,EAAIw9G,EAAWryG,MAAQ,EAE9B,IACE8B,EAAOiC,IAAIkB,kBACXnD,EAAOiC,IAAIpB,a,CACX,MAAM,GAEV,KAAArJ,eAAiB,IACR,2BA/BPrE,KAAKssB,MAAQ,EACbtsB,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EAEbnB,KAAK2f,WAAY,CACnB,EATF,Y,kJCTA,gBACA,UACA,UACA,QACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAGA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,SAGA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,WACA,WACA,WACA,WACA,WACA,WAGa,EAAA4jI,eAAmC,IAAIj2I,IAAI,CACtD,CAAC,EAAA9E,UAAW,GACZ,CAAC,EAAAC,UAAW,GACZ,CAAC,EAAAC,YAAa,GACd,CAAC,EAAAC,WAAY,GACb,CAAC,EAAAC,kBAAmB,GACpB,CAAC,EAAAC,YAAa,GACd,CAAC,EAAAC,UAAW,GACZ,CAAC,EAAAC,YAAa,GACd,CAAC,EAAAC,mBAAoB,GACrB,CAAC,EAAAC,cAAe,IAChB,CAAC,EAAAE,WAAY,IACb,CAAC,EAAAC,YAAa,IACd,CAAC,EAAAC,eAAgB,IACjB,CAAC,EAAAC,gBAAiB,IAClB,CAAC,EAAAC,kBAAmB,IACpB,CAAC,EAAAC,WAAY,IACb,CAAC,EAAAC,YAAa,IACd,CAAC,EAAAlB,UAAW,IACZ,CAAC,EAAAmB,aAAc,IACf,CAAC,EAAAC,YAAa,IACd,CAAC,EAAAC,UAAW,MAGd,oBAGE,WAAApK,CAAYuE,GACV/D,KAAK+D,KAAOA,EACZ/D,KAAKi1B,KAAOj1B,KAAK+D,IACnB,GA8BF,MAAaqtJ,GACX,UAAO3gJ,GAEP,EAHF,cAMA,MAAMi3I,GAAoD,CACxD,CAAC,EAAAtsH,QAAQE,SAAU,CACjBuiB,MAAO,CACL,CAAE+pG,MAAO,EAAA16D,MAAO6mC,OAAQ,GACxB,CAAE6zB,MAAO,EAAA3+E,OAAQ8qD,OAAQ,GACzB,CAAE6zB,MAAO,EAAAn9G,UAAWspF,OAAQ,IAAM8zB,iBAAkB,CAAC,IACrD,CAAED,MAAO,EAAAn9G,UAAWspF,OAAQ,IAAM8zB,iBAAkB,CAAC,IACrD,CAAED,MAAO,EAAAltE,QAASq5C,OAAQ,KAC1B,CAAE6zB,MAAO,EAAAz6D,MAAO4mC,OAAQ,GACxB,CAAE6zB,MAAO,EAAAv1C,IAAK0hB,OAAQ,GACtB,CAAE6zB,MAAO,EAAAx6D,YAAa2mC,OAAQ,GAC9B,CAAE6zB,MAAO,EAAAhzC,UAAWmf,OAAQ,IAC5B,CAAE6zB,MAAO,EAAAj0C,KAAMogB,OAAQ,IACvB,CAAE6zB,MAAO,EAAA5zC,OAAQ+f,OAAQ,MACzB,CAAE6zB,MAAO,EAAAtoJ,MAAOy0H,OAAQ,MACxB,CAAE6zB,MAAO,EAAAzzC,UAAW4f,OAAQ,KAC5B,CAAE6zB,MAAO,EAAA/0I,QAASkhH,OAAQ,MAE5B9+E,QAAS,CAEP,CAAE2yG,MAAO,EAAAp/I,UAAWurH,OAAQ,EAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAAl/I,YAAaqrH,OAAQ,IAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAj/I,WAAYorH,OAAQ,EAAKpqF,SAAU,GAC5C,CAAEi+G,MAAO,EAAAn+I,YAAasqH,OAAQ,EAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAp+I,WAAYuqH,OAAQ,EAAKpqF,SAAU,GAC5C,CAAEi+G,MAAO,EAAAr/I,UAAWwrH,OAAQ,EAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAAh+I,UAAWmqH,OAAQ,IAAMpqF,SAAU,GAG5C,CAAEi+G,MAAO,EAAAh/I,kBAAmBmrH,OAAQ,GAAKpqF,SAAU,GACnD,CAAEi+G,MAAO,EAAA9+I,UAAWirH,OAAQ,GAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAA7+I,YAAagrH,OAAQ,GAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAA5+I,mBAAoB+qH,OAAQ,GAAKpqF,SAAU,GACpD,CAAEi+G,MAAO,EAAAx+I,YAAa2qH,OAAQ,GAAKpqF,SAAU,GAG7C,CAAEi+G,MAAO,EAAA/+I,YAAakrH,OAAQ,GAAKpqF,SAAU,GAC7C,CACEi+G,MAAO,EAAA3+I,cACP8qH,OAAQ,GACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,IAEnB,CAAEglI,MAAO,EAAAz+I,WAAY4qH,OAAQ,GAAKpqF,SAAU,GAC5C,CACEi+G,MAAO,EAAAv+I,eACP0qH,OAAQ,GACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,IAEnB,CAAEglI,MAAO,EAAAt+I,gBAAiByqH,OAAQ,GAAKpqF,SAAU,GACjD,CAAEi+G,MAAO,EAAAr+I,kBAAmBwqH,OAAQ,GAAKpqF,SAAU,GACnD,CACEi+G,MAAO,EAAAl+I,aACPqqH,OAAQ,GACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,MAIvB,CAAC,EAAAwY,QAAQG,MAAO,CACdsiB,MAAO,CACL,CAAE+pG,MAAOwJ,GAAUr9B,OAAQ,GAC3B,CAAE6zB,MAAO,EAAAp1G,aAAcuhF,OAAQ,GAC/B,CAAE6zB,MAAO,EAAAj1D,aAAcohC,OAAQ,IAC/B,CAAE6zB,MAAO,EAAAh1D,gBAAiBmhC,OAAQ,KAClC,CAAE6zB,MAAO,EAAAryC,eAAgBwe,OAAQ,KACjC,CAAE6zB,MAAO,EAAAnyC,eAAgBse,OAAQ,KACjC,CAAE6zB,MAAO,EAAAnuE,cAAes6C,OAAQ,KAChC,CAAE6zB,MAAO,EAAAz6D,MAAO4mC,OAAQ,IACxB,CAAE6zB,MAAO,EAAA36D,KAAM8mC,OAAQ,IACvB,CAAE6zB,MAAO,EAAAhzC,UAAWmf,OAAQ,IAC5B,CAAE6zB,MAAO,EAAAv1C,IAAK0hB,OAAQ,IACtB,CAAE6zB,MAAO,EAAAtoJ,MAAOy0H,OAAQ,KAE1B9+E,QAAS,CAEP,CAAE2yG,MAAO,EAAAp/I,UAAWurH,OAAQ,IAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAAn+I,YAAasqH,OAAQ,IAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAj/I,WAAYorH,OAAQ,GAAKpqF,SAAU,GAG5C,CAAEi+G,MAAO,EAAA/+I,YAAakrH,OAAQ,EAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAA5+I,mBAAoB+qH,OAAQ,GAAKpqF,SAAU,GACpD,CAAEi+G,MAAO,EAAAh/I,kBAAmBmrH,OAAQ,GAAKpqF,SAAU,GACnD,CAAEi+G,MAAO,EAAAj+I,YAAaoqH,OAAQ,GAAKpqF,SAAU,GAG7C,CACEi+G,MAAO,EAAA3+I,cACP8qH,OAAQ,IACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,IAEnB,CAAEglI,MAAO,EAAAr+I,kBAAmBwqH,OAAQ,GAAKpqF,SAAU,KAIvD,CAAC,EAAAvO,QAAQI,QAAS,CAChBqiB,MAAO,CACL,CAAE+pG,MAAOwJ,GAAUr9B,OAAQ,GAC3B,CAAE6zB,MAAO,EAAAn9G,UAAWspF,OAAQ,KAAO8zB,iBAAkB,CAAC,IACtD,CAAED,MAAO,EAAAn9G,UAAWspF,OAAQ,KAAO8zB,iBAAkB,CAAC,IACtD,CAAED,MAAO,EAAAltE,QAASq5C,OAAQ,KAC1B,CAAE6zB,MAAO,EAAAj0C,KAAMogB,OAAQ,GACvB,CAAE6zB,MAAO,EAAA5zC,OAAQ+f,OAAQ,KACzB,CAAE6zB,MAAO,EAAAhzC,UAAWmf,OAAQ,IAC5B,CAAE6zB,MAAO,EAAA36D,KAAM8mC,OAAQ,IACvB,CAAE6zB,MAAO,EAAAtoJ,MAAOy0H,OAAQ,KACxB,CAAE6zB,MAAO,EAAAjqE,aAAco2C,OAAQ,KAC/B,CAAE6zB,MAAO,EAAA/pE,KAAMk2C,OAAQ,IACvB,CAAE6zB,MAAO,EAAAr9F,UAAWwpE,OAAQ,IAC5B,CAAE6zB,MAAO,GAAA/xC,UAAWke,OAAQ,KAE9B9+E,QAAS,CAEP,CAAE2yG,MAAO,EAAAjqE,aAAco2C,OAAQ,IAAKpqF,SAAU,GAC9C,CAAEi+G,MAAO,EAAAn/I,UAAWsrH,OAAQ,IAAMpqF,SAAU,GAC5C,CAAEi+G,MAAO,EAAAj+I,YAAaoqH,OAAQ,GAAKpqF,SAAU,GAI7C,CAAEi+G,MAAO,EAAAp/I,UAAWurH,OAAQ,GAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAAl/I,YAAaqrH,OAAQ,GAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAj/I,WAAYorH,OAAQ,GAAKpqF,SAAU,GAG5C,CAAEi+G,MAAO,EAAAh/I,kBAAmBmrH,OAAQ,GAAKpqF,SAAU,GAEnD,CACEi+G,MAAO,EAAAl+I,aACPqqH,OAAQ,GACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,MAIvB,CAAC,EAAAwY,QAAQS,QAAS,CAChBgiB,MAAO,CACL,CAAE+pG,MAAOwJ,GAAUr9B,OAAQ,GAC3B,CAAE6zB,MAAO,EAAA3+E,OAAQ8qD,OAAQ,GACzB,CAAE6zB,MAAO,EAAAn9G,UAAWspF,OAAQ,EAAG8zB,iBAAkB,CAAC,IAClD,CAAED,MAAO,EAAAn9G,UAAWspF,OAAQ,EAAG8zB,iBAAkB,CAAC,IAClD,CAAED,MAAO,EAAAz6D,MAAO4mC,OAAQ,GACxB,CAAE6zB,MAAO,EAAAhzC,UAAWmf,OAAQ,IAC5B,CAAE6zB,MAAO,EAAAj0C,KAAMogB,OAAQ,KACvB,CAAE6zB,MAAO,EAAAv1C,IAAK0hB,OAAQ,KACtB,CAAE6zB,MAAO,EAAA36D,KAAM8mC,OAAQ,KACvB,CAAE6zB,MAAO,EAAAtoJ,MAAOy0H,OAAQ,MAE1B9+E,QAAS,CAEP,CAAE2yG,MAAO,EAAAl/I,YAAaqrH,OAAQ,IAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAn/I,UAAWsrH,OAAQ,IAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAAp+I,WAAYuqH,OAAQ,EAAKpqF,SAAU,GAC5C,CAAEi+G,MAAO,EAAA5+I,mBAAoB+qH,OAAQ,IAAKpqF,SAAU,GAGpD,CAAEi+G,MAAO,EAAAp/I,UAAWurH,OAAQ,GAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAAj/I,WAAYorH,OAAQ,EAAKpqF,SAAU,GAC5C,CAAEi+G,MAAO,EAAAn+I,YAAasqH,OAAQ,GAAKpqF,SAAU,GAG7C,CAAEi+G,MAAO,EAAAr+I,kBAAmBwqH,OAAQ,GAAKpqF,SAAU,GACnD,CAAEi+G,MAAO,EAAAh/I,kBAAmBmrH,OAAQ,GAAKpqF,SAAU,KAGvD,CAAC,EAAAvO,QAAQM,SAAU,CACjBmiB,MAAO,CACL,CAAE+pG,MAAOwJ,GAAUr9B,OAAQ,GAC3B,CAAE6zB,MAAO,EAAAz6D,MAAO4mC,OAAQ,IACxB,CAAE6zB,MAAO,EAAA16D,MAAO6mC,OAAQ,GACxB,CAAE6zB,MAAO,EAAA36D,KAAM8mC,OAAQ,IACvB,CAAE6zB,MAAO,EAAAtoJ,MAAOy0H,OAAQ,KAE1B9+E,QAAS,CAEP,CAAE2yG,MAAO,EAAAp/I,UAAWurH,OAAQ,EAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAA/+I,YAAakrH,OAAQ,IAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAx+I,YAAa2qH,OAAQ,EAAKpqF,SAAU,GAC7C,CACEi+G,MAAO,EAAAv+I,eACP0qH,OAAQ,IACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,IAInB,CAAEglI,MAAO,EAAA5+I,mBAAoB+qH,OAAQ,GAAKpqF,SAAU,GACpD,CAAEi+G,MAAO,EAAAr+I,kBAAmBwqH,OAAQ,GAAKpqF,SAAU,GACnD,CAAEi+G,MAAO,EAAA9+I,UAAWirH,OAAQ,GAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAA7+I,YAAagrH,OAAQ,GAAKpqF,SAAU,GAG7C,CACEi+G,MAAO,EAAA3+I,cACP8qH,OAAQ,GACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,MAIvB,CAAC,EAAAwY,QAAQK,QAAS,CAChBoiB,MAAO,CACL,CAAE+pG,MAAOwJ,GAAUr9B,OAAQ,GAC3B,CAAE6zB,MAAO,EAAA16D,MAAO6mC,OAAQ,GACxB,CAAE6zB,MAAO,EAAA3+E,OAAQ8qD,OAAQ,GACzB,CAAE6zB,MAAO,EAAAz6D,MAAO4mC,OAAQ,KACxB,CAAE6zB,MAAO,EAAAx6D,YAAa2mC,OAAQ,IAC9B,CAAE6zB,MAAO,EAAAv1C,IAAK0hB,OAAQ,IACtB,CAAE6zB,MAAO,EAAAtoJ,MAAOy0H,OAAQ,IACxB,CAAE6zB,MAAO,EAAA3xC,WAAY8d,OAAQ,IAC7B,CAAE6zB,MAAO,EAAA/hF,WAAYkuD,OAAQ,KAC7B,CAAE6zB,MAAO,EAAAr1G,WAAYwhF,OAAQ,KAC7B,CAAE6zB,MAAO,EAAAl6C,aAAcqmB,OAAQ,KAC/B,CAAE6zB,MAAO,EAAA/xI,aAAck+G,OAAQ,GAAKv2G,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,KAEvDqyB,QAAS,CAEP,CAAE2yG,MAAO,EAAAx+I,YAAa2qH,OAAQ,EAAKpqF,SAAU,GAC7C,CACEi+G,MAAO,EAAAv+I,eACP0qH,OAAQ,GACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,IAEnB,CAAEglI,MAAO,EAAAr/I,UAAWwrH,OAAQ,IAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAA9+I,UAAWirH,OAAQ,EAAGpqF,SAAU,GACzC,CAAEi+G,MAAO,EAAA7+I,YAAagrH,OAAQ,EAAGpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAAz+I,WAAY4qH,OAAQ,GAAKpqF,SAAU,GAC5C,CAAEi+G,MAAO,EAAAh+I,UAAWmqH,OAAQ,KAAOpqF,SAAU,GAG7C,CAAEi+G,MAAO,EAAA5+I,mBAAoB+qH,OAAQ,IAAMpqF,SAAU,GACrD,CAAEi+G,MAAO,EAAAr+I,kBAAmBwqH,OAAQ,IAAMpqF,SAAU,GAGpD,CAAEi+G,MAAO,EAAAh/I,kBAAmBmrH,OAAQ,GAAKpqF,SAAU,GACnD,CAAEi+G,MAAO,EAAAt+I,gBAAiByqH,OAAQ,GAAKpqF,SAAU,GACjD,CAAEi+G,MAAO,EAAA/+I,YAAakrH,OAAQ,GAAKpqF,SAAU,KAGjD,CAAC,EAAAvO,QAAQO,aAAc,CACrBkiB,MAAO,CACL,CAAE+pG,MAAOwJ,GAAUr9B,OAAQ,GAC3B,CAAE6zB,MAAO,GAAA1+E,UAAW6qD,OAAQ,GAC5B,CAAE6zB,MAAO,EAAA3+E,OAAQ8qD,OAAQ,GACzB,CAAE6zB,MAAO,GAAA9mF,QAASizD,OAAQ,GAC1B,CAAE6zB,MAAO,GAAArvB,SAAUxE,OAAQ,GAC3B,CAAE6zB,MAAO,EAAAtoJ,MAAOy0H,OAAQ,KACxB,CAAE6zB,MAAO,GAAA1vF,WAAY67D,OAAQ,KAC7B,CAAE6zB,MAAO,EAAA/hF,WAAYkuD,OAAQ,IAC7B,CAAE6zB,MAAO,EAAAr1G,WAAYwhF,OAAQ,IAC7B,CAAE6zB,MAAO,EAAAl6C,aAAcqmB,OAAQ,KAEjC9+E,QAAS,CAEP,CAAE2yG,MAAO,EAAA9+I,UAAWirH,OAAQ,IAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAA7+I,YAAagrH,OAAQ,IAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAx+I,YAAa2qH,OAAQ,IAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAr/I,UAAWwrH,OAAQ,IAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAAz+I,WAAY4qH,OAAQ,IAAMpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAh+I,UAAWmqH,OAAQ,KAAOpqF,SAAU,GAG7C,CAAEi+G,MAAO,EAAAh/I,kBAAmBmrH,OAAQ,GAAKpqF,SAAU,GACnD,CAAEi+G,MAAO,EAAAt+I,gBAAiByqH,OAAQ,IAAMpqF,SAAU,GAGlD,CACEi+G,MAAO,EAAAv+I,eACP0qH,OAAQ,IACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,IAEnB,CAAEglI,MAAO,EAAAr+I,kBAAmBwqH,OAAQ,GAAKpqF,SAAU,KAGvD,CAAC,EAAAvO,QAAQQ,aAAc,CACrBiiB,MAAO,CAAC,CAAE+pG,MAAOwJ,GAAUr9B,OAAQ,IACnC9+E,QAAS,IAEX,CAAC,EAAA7Z,QAAQU,YAAa,CACpB+hB,MAAO,CACL,CAAE+pG,MAAOwJ,GAAUr9B,OAAQ,GAC3B,CAAE6zB,MAAO,EAAA7yC,iBAAkBgf,OAAQ,IAEnC,CAAE6zB,MAAO,EAAAtoJ,MAAOy0H,OAAQ,KACxB,CAAE6zB,MAAO,GAAAz+E,cAAe4qD,OAAQ,GAChC,CAAE6zB,MAAO,EAAAh1D,gBAAiBmhC,OAAQ,MAClC,CAAE6zB,MAAO,EAAAryC,eAAgBwe,OAAQ,MACjC,CAAE6zB,MAAO,EAAAnyC,eAAgBse,OAAQ,MACjC,CAAE6zB,MAAO,EAAAnuE,cAAes6C,OAAQ,OAElC9+E,QAAS,CAGP,CAAE2yG,MAAO,EAAA5+I,mBAAoB+qH,OAAQ,GAAKpqF,SAAU,GACpD,CAAEi+G,MAAO,EAAA7+I,YAAagrH,OAAQ,GAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAh/I,kBAAmBmrH,OAAQ,GAAKpqF,SAAU,GACnD,CAAEi+G,MAAO,EAAAx+I,YAAa2qH,OAAQ,GAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAA9+I,UAAWirH,OAAQ,GAAKpqF,SAAU,GAG3C,CAAEi+G,MAAO,EAAAr+I,kBAAmBwqH,OAAQ,GAAKpqF,SAAU,GACnD,CACEi+G,MAAO,EAAAv+I,eACP0qH,OAAQ,GACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,IAEnB,CACEglI,MAAO,EAAA3+I,cACP8qH,OAAQ,IACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,IAEnB,CAAEglI,MAAO,EAAA7+I,YAAagrH,OAAQ,GAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAA/+I,YAAakrH,OAAQ,GAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAt+I,gBAAiByqH,OAAQ,GAAKpqF,SAAU,GACjD,CAAEi+G,MAAO,EAAAp+I,WAAYuqH,OAAQ,GAAKpqF,SAAU,GAC5C,CAAEi+G,MAAO,EAAAz+I,WAAY4qH,OAAQ,IAAMpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAn+I,YAAasqH,OAAQ,GAAKpqF,SAAU,KAGjD,CAAC,EAAAvO,QAAQW,cAAe,CACtB8hB,MAAO,CACL,CAAE+pG,MAAO,GAAA1+E,UAAW6qD,OAAQ,GAC5B,CAAE6zB,MAAO,EAAA3+E,OAAQ8qD,OAAQ,GACzB,CAAE6zB,MAAO,EAAAn9G,UAAWspF,OAAQ,IAAM8zB,iBAAkB,CAAC,IACrD,CAAED,MAAO,EAAAn9G,UAAWspF,OAAQ,IAAM8zB,iBAAkB,CAAC,IACrD,CAAED,MAAO,EAAAltE,QAASq5C,OAAQ,KAC1B,CAAE6zB,MAAO,EAAAz6D,MAAO4mC,OAAQ,GACxB,CAAE6zB,MAAO,GAAA9mF,QAASizD,OAAQ,GAC1B,CAAE6zB,MAAO,GAAArvB,SAAUxE,OAAQ,GAC3B,CAAE6zB,MAAO,EAAAhzC,UAAWmf,OAAQ,IAC5B,CAAE6zB,MAAO,EAAAj0C,KAAMogB,OAAQ,IACvB,CAAE6zB,MAAO,EAAA5zC,OAAQ+f,OAAQ,MACzB,CAAE6zB,MAAO,EAAAtoJ,MAAOy0H,OAAQ,MACxB,CAAE6zB,MAAO,GAAA1vF,WAAY67D,OAAQ,KAC7B,CAAE6zB,MAAO,EAAA/0I,QAASkhH,OAAQ,MAE5B9+E,QAAS,CAEP,CAAE2yG,MAAO,EAAAp/I,UAAWurH,OAAQ,EAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAAl/I,YAAaqrH,OAAQ,IAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAj/I,WAAYorH,OAAQ,EAAKpqF,SAAU,GAC5C,CAAEi+G,MAAO,EAAAn+I,YAAasqH,OAAQ,EAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAAp+I,WAAYuqH,OAAQ,EAAKpqF,SAAU,GAC5C,CAAEi+G,MAAO,EAAAr/I,UAAWwrH,OAAQ,EAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAAh+I,UAAWmqH,OAAQ,IAAMpqF,SAAU,GAG5C,CAAEi+G,MAAO,EAAAh/I,kBAAmBmrH,OAAQ,GAAKpqF,SAAU,GACnD,CAAEi+G,MAAO,EAAA9+I,UAAWirH,OAAQ,GAAKpqF,SAAU,GAC3C,CAAEi+G,MAAO,EAAA7+I,YAAagrH,OAAQ,GAAKpqF,SAAU,GAC7C,CAAEi+G,MAAO,EAAA5+I,mBAAoB+qH,OAAQ,GAAKpqF,SAAU,GACpD,CAAEi+G,MAAO,EAAAx+I,YAAa2qH,OAAQ,GAAKpqF,SAAU,GAG7C,CAAEi+G,MAAO,EAAA/+I,YAAakrH,OAAQ,GAAKpqF,SAAU,GAC7C,CACEi+G,MAAO,EAAA3+I,cACP8qH,OAAQ,GACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,IAEnB,CAAEglI,MAAO,EAAAz+I,WAAY4qH,OAAQ,GAAKpqF,SAAU,GAC5C,CACEi+G,MAAO,EAAAv+I,eACP0qH,OAAQ,GACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,IAEnB,CAAEglI,MAAO,EAAAt+I,gBAAiByqH,OAAQ,GAAKpqF,SAAU,GACjD,CAAEi+G,MAAO,EAAAr+I,kBAAmBwqH,OAAQ,GAAKpqF,SAAU,GACnD,CACEi+G,MAAO,EAAAl+I,aACPqqH,OAAQ,GACRpqF,SAAU,EACV+/G,kBAAmB,aACnBlsI,KAAM,CAAE1H,EAAG,EAAG8M,EAAG,OAMhB,EAAA8kI,gBAAAA,E,kGCjhBT,gBAGA,UAEA,UACA,UACA,SAEA,MAAaxsI,UAAkB,EAAA2Z,KAM7B,WAAAr1B,CAAYC,EAAYE,EAAWC,EAAW+vG,GAC5C9vG,MAAMJ,EAAME,EAAGC,GASjB,KAAAwX,KAAO,KAKL,GAJApX,KAAK2vG,YACD3vG,KAAK2vG,WAAa,IAAG3vG,KAAK2vG,UAAY,GAC1C3vG,KAAKmb,GAAwB,IAAnBnb,KAAK2vG,UAEX3vG,KAAKmb,GACP,IAAK,MAAMnV,KAAKhG,KAAKP,KAAKC,KAAK+O,QAE3BzO,KAAKP,OACHO,KAAKP,KAAKC,KAAKuO,MAAMjO,KAAKP,KAAKC,KAAK+O,QAAQzI,GAAGkM,UACjDlS,KAAKP,KAAKC,KAAK+O,QAAQzI,GAAGrG,IAAMK,KAAKL,GACrCK,KAAKP,KAAKC,KAAK+O,QAAQzI,GAAGpG,IAAMI,KAAKJ,GAErCI,KAAKP,KAAKC,KAAK+O,QAAQzI,GAAGjB,KAAK,GAAK,cAInB,IAAnB/E,KAAK2vG,WACP3vG,KAAKP,KAAKyK,YAAYF,KACpB,IAAI,EAAAG,WAAWnK,KAAKP,KAAKC,KAAMM,KAAKL,EAAGK,KAAKJ,EAAGI,KAAKL,EAAGK,KAAKJ,GAAG,KAIrE,KAAAu9C,QAAU,KACR,GAAIn9C,KAAKmb,GACP,IAAK,MAAMlU,KAAKjH,KAAKP,KAAKuH,SACpBC,EAAEtH,IAAMK,KAAKL,GAAKsH,EAAErH,IAAMI,KAAKJ,GACjCqH,EAAElC,KAAK,KAAM,IAMrB,KAAAgf,eAAkB3R,IACZpS,KAAKmb,MAAQ/I,aAAiB,EAAA86E,OAAS96E,aAAiB,EAAA62D,SAC1D72D,EAAMrN,KAAK,KAAM,IAGrB,KAAA5C,KAAQC,IAEN,EAAAV,KAAKszB,SACH,EACAh1B,KAAKi1B,KACL,EACA,EACAj1B,KAAKL,EACLK,KAAKJ,EACL,EACA,EACAI,KAAKP,KAAKyD,WACVlD,KAAKmD,eAGP,IAAIkuJ,EAAgB,EACpBrxJ,KAAKsF,GAAKlD,EACLpC,KAAKmb,IAAyB,IAAnBnb,KAAK2vG,YACf7tG,KAAKgB,MAAM9C,KAAKsF,GAAK,GAAM,IAAG+rJ,EAAgB,OAC9CvvJ,KAAKgB,MAAM9C,KAAKsF,GAAK,GAAM,IAAG+rJ,GAAiB,QAErD,IAAIvrH,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/BzH,EAAI,EAAIyH,EAAOhkC,KAAKgB,MAAM9C,KAAKuD,SAEd,IAAnBvD,KAAK2vG,WACe,IAAnB3vG,KAAK2vG,WAAsD,IAAnC7pE,EAAOhkC,KAAKgB,MAAM9C,KAAKuD,WAEhD86B,EAAI,GAEN,EAAA38B,KAAKmB,QACHw7B,EACA,EACA,EACA,EACAr+B,KAAKL,EAAI0xJ,EACTrxJ,KAAKJ,EACL,EACA,EACAI,KAAKP,KAAKyD,WACVlD,KAAKmD,eAEP,EAAAzB,KAAKmB,QACHw7B,EACA,EACA,EACA,EACAr+B,KAAKL,EAAI0xJ,EACTrxJ,KAAKJ,EAAI,EACT,EACA,EACAI,KAAKP,KAAKyD,WACVlD,KAAKmD,YAAY,EAAG,GAAG,IAGrBnD,KAAKmb,IAAMnb,KAAKuD,MAAQuiC,EAAO/kC,OAAS,IACtC+kC,EAAOhkC,KAAKgB,MAAM9C,KAAKuD,QAAU,EAAGvD,KAAKuD,OAAS,GAAMnB,EACvDpC,KAAKuD,OAAS,GAAMnB,GAEtBpC,KAAKmb,KAAInb,KAAKuD,MAAQ,IAxGZvD,KAAK2vG,UAAhBA,GACkB,EACtB3vG,KAAKmb,IAAK,EACVnb,KAAKuD,MAAQ,EACbvD,KAAKsF,EAAI,EACTtF,KAAKwB,KAAO,YACd,EAdF,a,iGCJA,gBACA,UACA,UACA,SACA,UAEA,MAAasuE,UAAiB,EAAAjwD,WAE5B,WAAArgB,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GASlB,KAAA6f,MAAQ,CAAC5S,EAAgBykJ,KAGvB,OAFAzkJ,EAAOhM,UAAU8qD,aAAa2lG,EAAK,GACnCzkJ,EAAOhM,UAAU23B,WAAWx4B,MACpBsxJ,EAAI9vJ,MACV,IAAK,UACHqL,EAAOhM,UAAU4gC,QAAQ,IAAI,EAAA45E,YAAYr7G,KAAKoE,MAAOpE,KAAKL,EAAGK,KAAKJ,IAClE,MACF,IAAK,SACHiN,EAAOhM,UAAU4gC,QAAQ,IAAI,EAAAuuC,WAAWhwE,KAAKoE,MAAOpE,KAAKL,EAAGK,KAAKJ,IACjE,MACF,IAAK,QACHiN,EAAOhM,UAAU4gC,QAAQ,IAAI,EAAA7hB,UAAU5f,KAAKoE,MAAOpE,KAAKL,EAAGK,KAAKJ,IAChE,MACF,IAAK,SACHiN,EAAOhM,UAAU4gC,QAAQ,IAAI,EAAA4rB,WAAWrtD,KAAKoE,MAAOpE,KAAKL,EAAGK,KAAKJ,IAGrEI,KAAKoE,MAAM1E,KAAKo1B,YAAY,qCAxB5B90B,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKwB,KAAOsuE,EAAShrE,SACrB9E,KAAK2f,WAAY,EACjB3f,KAAKie,YAAc,sDACrB,EAVF,aACS,EAAAnZ,SAAW,W,gGCZpB,gBAMA,UAEA,MAAam9B,UAAgB,EAAA7f,OAE3B,WAAA5iB,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GAOlB,KAAAu5B,WAAa,CAACC,EAAcC,KAC1B,IAAIk4H,EAAQ,EAAIn4H,EAAOp5B,KAAKs5B,QAAQ35B,EAChC6xJ,EAAQ,EAAIn4H,EAAOr5B,KAAKs5B,QAAQ15B,EAChC6xJ,EAAQ,EAAIr4H,EAAO,EAAIp5B,KAAKs5B,QAAQ35B,EACpC+xJ,EAAQ,EAAIr4H,EAAO,EAAIr5B,KAAKs5B,QAAQ15B,EACpC8tB,EAAQ,EAEZ,IACG1tB,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAASo+D,WAAWl3C,EAAMC,IACxDr5B,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAAS5H,UAAU8uB,GAAMC,GAAMztB,UAE5D,OAAO,GAEN5L,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAASo+D,WAAWihF,EAAOC,IACzDxxJ,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAAS5H,UAAUinJ,GAAOC,GAAO5lJ,UAE9D8hB,EAAQ,EAEP1tB,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAASo+D,WAAWmhF,EAAOC,KACzD1xJ,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAAS5H,UAAUmnJ,GAAOC,GAAO9lJ,YAE9D8hB,EAAQ,GAEV,IAAI6iD,EAAqB,GACrBC,EAAgB,EAChBC,EAAmB,EACnBC,EAAsB,EAE1B,IAAK,IAAIzpE,KAAKjH,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAASlL,SAClD,GAAIC,EAAEvD,SAAU,CACd,GAAIuD,EAAE0b,QAAQyW,EAAMC,GAAO,OAAO,EAC9BpyB,EAAE0b,QAAQ4uI,EAAOC,IAAU9jI,GAAS,IACtC6iD,EAAmBvmE,KAAK,CAAEoI,MAAOnL,EAAGsO,KAAM,IAC1Ci7D,EAAgB,GAEdvpE,EAAE0b,QAAQ8uI,EAAOC,IAAUhkI,GAAS,IACtC6iD,EAAmBvmE,KAAK,CAAEoI,MAAOnL,EAAGsO,KAAM,IAC1Ci7D,EAAgB1uE,KAAKyD,IAAIirE,EAAe,G,MAEjCvpE,EAAEjG,aACPiG,EAAE0b,QAAQyW,EAAMC,IAAS3L,GAAS,IACpC+iD,EAAmB,EACnBF,EAAmBvmE,KAAK,CAAEoI,MAAOnL,EAAGsO,KAAM,KAExCtO,EAAE0b,QAAQ4uI,EAAOC,IAAU9jI,GAAS,IACtC+iD,EAAmB3uE,KAAKyD,IAAIkrE,EAAkB,GAC9CF,EAAmBvmE,KAAK,CAAEoI,MAAOnL,EAAGsO,KAAM,KAExCtO,EAAE0b,QAAQ8uI,EAAOC,IAAUhkI,GAAS,IACtC+iD,EAAmB3uE,KAAKyD,IAAIkrE,EAAkB,GAC9CF,EAAmBvmE,KAAK,CAAEoI,MAAOnL,EAAGsO,KAAM,OAGxCtO,EAAE0b,QAAQyW,EAAMC,IAAS3L,GAAS,IACpCgjD,EAAsB,GAEpBzpE,EAAE0b,QAAQ4uI,EAAOC,IAAU9jI,GAAS,IACtCgjD,EAAsB5uE,KAAKyD,IAAImrE,EAAqB,IAElDzpE,EAAE0b,QAAQ8uI,EAAOC,IAAUhkI,GAAS,IACtCgjD,EAAsB5uE,KAAKyD,IAAImrE,EAAqB,KAK1D,IAAIlrD,EAAUisI,EACVhsI,EAAUisI,EAEd,GACEhhF,EAAsBD,GACtBC,EAAsBF,EAEtB,OAAO,EAGT,GAAIC,GAAoBD,EAAe,CACrC,IAAK,MAAMlzB,KAAKizB,EAAoB,CAClC,IAAItpE,EAAIq2C,EAAElrC,MAEA,IADFkrC,EAAE/nC,KACGtO,EAAElC,KAAK/E,KAAKs5B,QAAS,IAC7BryB,EAAElC,KAAK/E,KAAKs5B,QAAS,E,CAG5Bt5B,KAAKgmB,WACLhmB,KAAKs5B,QAAQub,SAASzb,EAAMC,GAE5B,EAAAwT,gBAAgBY,QACdztC,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAC7BlS,KAAKs5B,QAAQ35B,EAAI,GACjBK,KAAKs5B,QAAQ15B,EACb4lB,EAAU,GACVC,EACA,SAEF,EAAAonB,gBAAgBY,QACdztC,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAC7BlS,KAAKs5B,QAAQ35B,EAAI,GACjBK,KAAKs5B,QAAQ15B,EACb4lB,EAAU,GACVC,EACA,WAEF,IAAIorD,EAAK,IAAI,EAAAhkC,gBACX7sC,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAC7B,IAAOknB,EAAOp5B,KAAKs5B,QAAQ35B,GAAK,GAChC,IAAO05B,EAAOr5B,KAAKs5B,QAAQ15B,GAC3B,EACA,EACA,EACA,EACA,EACA,QACA,GASF,OAPAixE,EAAG7jC,gBAAkB,GACrBhtC,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAASuD,UAAUzL,KAAK6mE,GAErD7wE,KAAKN,KAAKuO,MAAMjO,KAAKs5B,QAAQpnB,SAASkF,KAAKpX,KAAKs5B,SAChDt5B,KAAKqc,YAAY+c,EAAMC,GACvBr5B,KAAK+sD,WAEE,C,CAET,OAAO,GAhIP/sD,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKwB,KAAO,SACd,EARF,YACS,EAAAsD,SAAW,S,kGCVpB,gBAEA,UACA,SACA,UACA,UAGA,UACA,UAEA,MAAa2D,UAAkB,EAAApC,MAkB7B,WAAA7G,CAAYC,EAAYC,EAAYC,EAAWC,EAAWW,GACxDV,MAAMJ,EAAMC,EAAMC,EAAGC,GA6BvB,KAAA2G,IAAM,IACGvG,KAAK8a,OAGd,KAAAxT,SAAW,KAOT,GANAtH,KAAKuH,MAAQvH,KAAKL,EAClBK,KAAKwH,MAAQxH,KAAKJ,EAClBI,KAAKkB,MAAQ,EACblB,KAAK0uG,YAAc,EACnB1uG,KAAKorB,eAAiB,IAEjBprB,KAAKqC,KAAM,CACd,GAAIrC,KAAKyH,cAAgB,EAEvB,YADAzH,KAAKyH,gBAGP,GAAKzH,KAAKoM,YAGH,GAAIpM,KAAKoM,WAAY,CAE1B,GADApM,KAAKkB,MAAQ,EACTlB,KAAKP,KAAKsb,eAAiB/a,KAAKuU,aAGlC,GAFAvU,KAAKsM,WAAaxK,KAAK4D,IAAI,EAAG1F,KAAKsM,WAAa,GAChDtM,KAAK0H,QACD1H,KAAK0H,MAAQ,GAAM,EAAG,CACxB1H,KAAKkrB,UAAW,EACLlrB,KAAKL,EACLK,KAAKJ,EADhB,IAEIob,EAAmBC,QAEvB,IAAK,MAAMhU,KAAKjH,KAAKP,KAAKuH,SACpBC,IAAMjH,MACRgb,EAAiBhR,KAAK,CAAErK,EAAGsH,EAAEtH,EAAGC,EAAGqH,EAAErH,IAIzC,IAAK,IAAIqG,EAAKjG,KAAKL,EAAI,EAAGsG,GAAMjG,KAAKL,EAAI,EAAGsG,IAC1C,IAAK,IAAI4F,EAAK7L,KAAKJ,EAAI,EAAGiM,GAAM7L,KAAKJ,EAAI,EAAGiM,IAExC7L,KAAKP,KAAK6K,UAAUrE,GAAI4F,aAAe,EAAAqP,WACtClb,KAAKP,KAAK6K,UAAUrE,GAAI4F,GAAkBsP,IAG3CH,EAAiBhR,KAAK,CAAErK,EAAGsG,EAAIrG,EAAGiM,IAKxC,IAAIuP,EAAO,GACX,IAAK,IAAIzb,EAAI,EAAGA,EAAIK,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MAAOlL,IAAK,CAC1Dyb,EAAKzb,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAII,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OAAQrL,IAClDI,KAAKP,KAAK6K,UAAU3K,IAAMK,KAAKP,KAAK6K,UAAU3K,GAAGC,GACnDwb,EAAKzb,GAAGC,GAAKI,KAAKP,KAAK6K,UAAU3K,GAAGC,GACjCwb,EAAKzb,GAAGC,IAAK,C,CAGtB,IAAI+uG,EAAiB,CACnBhvG,EAAGK,KAAKuU,aAAa5U,EACrBC,EAAGI,KAAKuU,aAAa3U,GAEnByQ,EAAKrQ,KAAKuU,aAAa5U,EAAIK,KAAKL,EAChC2Q,EAAKtQ,KAAKuU,aAAa3U,EAAII,KAAKJ,EACpC,GACU,IAAPyQ,GAAYC,GAAM,GAClBD,GAAM,GAAY,IAAPC,GACJ,IAAPD,GAAYC,IAAO,GACnBD,IAAO,GAAY,IAAPC,EACb,CACA,IAAIqhJ,EAAY3xJ,KAAKuU,aAAa5U,EAAI0Q,EAClCuhJ,EAAY5xJ,KAAKuU,aAAa3U,EAAI0Q,EAEpCtQ,KAAKP,KAAK6K,UAAUqnJ,IACpB3xJ,KAAKP,KAAK6K,UAAUqnJ,GAAWC,KAE1B5xJ,KAAKP,KAAK6K,UAAUqnJ,GAAWC,GAAWhmJ,YAC7C+iG,EAAiB,CACfhvG,EAAGgyJ,EACH/xJ,EAAGgyJ,I,CAKX,IAAIv2I,EAAQ,EAAAC,MAAMC,MAAMC,OACtBJ,EACApb,KACA2uG,EACA3zF,GACA,GACA,GACA,OACAnD,OACAA,GACA,EACA7X,KAAKg7B,eAIP,GAAI3f,EAAM,GAAI,CACZ,IAAIe,GAAY,EAChB,IAAK,MAAMpW,KAAKhG,KAAKN,KAAK+O,QAEtBzO,KAAKN,KAAKuO,MAAMjO,KAAKN,KAAK+O,QAAQzI,GAAGkM,WAAalS,KAAKP,MACvDO,KAAKN,KAAK+O,QAAQzI,GAAGrG,IAAM0b,EAAM,GAAGM,IAAIhc,GACxCK,KAAKN,KAAK+O,QAAQzI,GAAGpG,IAAMyb,EAAM,GAAGM,IAAI/b,IAExCI,KAAKN,KAAK+O,QAAQzI,GAAGjB,KAAK/E,KAAKuG,MAAOvG,KAAKwB,MAC3CxB,KAAK+C,OAAS,KAAO/C,KAAKL,EAAIK,KAAKN,KAAK+O,QAAQzI,GAAGrG,GACnDK,KAAKiD,OAAS,KAAOjD,KAAKJ,EAAII,KAAKN,KAAK+O,QAAQzI,GAAGpG,GAEjDI,KAAKN,KAAK+O,QAAQzI,KAClBhG,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,gBAE5BxX,KAAKN,KAAK2c,YAAY,EAAIrc,KAAK+C,MAAO,EAAI/C,KAAKiD,OACjDmZ,GAAY,GAGhB,IAAKA,GACCf,EAAMta,OAAS,EAAG,CACpB,IAAI2a,EAAQL,EAAM,GAAGM,IAAIhc,EACrBic,EAAQP,EAAM,GAAGM,IAAI/b,EACzBI,KAAKwV,QAAQkG,EAAOE,GACpB5b,KAAKsc,UAAUtc,KAAKuH,MAAOvH,KAAKwH,OAE5BxH,KAAKsvG,UACPtvG,KAAKuD,MAAQ,EACbvD,KAAKorB,eAAiB,GAEpBprB,KAAKL,EAAI+b,EAAO1b,KAAKyb,UAAY,EAAAM,UAAUC,MACtChc,KAAKL,EAAI+b,EAAO1b,KAAKyb,UAAY,EAAAM,UAAUE,KAC3Cjc,KAAKJ,EAAIgc,EAAO5b,KAAKyb,UAAY,EAAAM,UAAUG,KAC3Clc,KAAKJ,EAAIgc,IAAO5b,KAAKyb,UAAY,EAAAM,UAAUI,G,EAI1Dnc,KAAKkrB,UAAW,C,MAEhBlrB,KAAKuc,kBACLvc,KAAKkrB,UAAW,EAChBlrB,KAAKkB,MAAQ,EACblB,KAAKuD,MAAQ,EACbvD,KAAK0uG,YAAc,EACnB1uG,KAAKorB,eAAiB,GAI1B,IAAI5O,GAED,IADDC,OAAOC,OAAO1c,KAAKN,KAAKid,gBAAgBxV,QAAQnH,KAAKuU,cAEvD,IAAKvU,KAAK4c,OAASJ,EAAqB,CACtC,IAAInS,EAAIrK,KAAKqU,gBACb,IAAU,IAANhK,EAAa,CACf,IAAKiK,EAAUzH,GAAUxC,EAEvBiK,GAAY,IACXkI,GACClI,EAAWtU,KAAK6c,eAAe7c,KAAKuU,gBAElC1H,IAAW7M,KAAKuU,eAClBvU,KAAKuU,aAAe1H,EACpB7M,KAAK8b,WAAWjP,GACZA,IAAW7M,KAAKN,KAAK+O,QAAQzO,KAAKN,KAAK8X,iBACzCxX,KAAKsM,WAAa,GAChBtM,KAAK0H,MAAQ,GAAM,GACrB1H,KAAKuc,kB,SAnJfvc,KAAKkB,MAAQ,GACblB,KAAK2V,e,GA4JX,KAAA8+B,KAAQryC,IAEN,GAAIpC,KAAKsvG,QAAS,CAChB,IAAInpG,EAAIrE,KAAK4D,IAAI5D,KAAKgG,IAAI9H,KAAK+C,OAAQjB,KAAKgG,IAAI9H,KAAKiD,QACjDkD,EAAI,IACNnG,KAAKuvG,aAAe,GAEtBvvG,KAAK00B,MACH5yB,KAAKq3C,IAAKhzC,EAAInG,KAAKuvG,aAAgBztG,KAAKyrC,IAAMvtC,KAAKm7B,WACjDn7B,KAAK00B,MAAQ,KAAQ10B,KAAK00B,OAAS,MACrC10B,KAAK00B,MAAQ,EACb10B,KAAKuvG,aAAe,GAElBvvG,KAAK00B,MAAQ10B,KAAKm7B,aAAYn7B,KAAK00B,MAAQ10B,KAAKm7B,W,GAIxD,KAAA5e,gBAAkB,KAChB,MACM1P,EAAiB7M,KAAKkkB,YACtB6I,EAAa/sB,KAAKgtB,iBAClBC,EAAWjtB,KAAKktB,eAChBC,EAAcntB,KAAKgd,kBACnBvB,EAAYzb,KAAKyb,UACjB2R,EAAaptB,KAAKqtB,YAClBC,EAAYttB,KAAKutB,oBAEjBC,EAAkB,CACtBC,EACAC,KAEoBD,EAChB,CACE,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,IAEN,CACE,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,EAAG,KAEQE,QAAQ,EAAEtd,EAAIC,KAC/B2K,MAAM2S,KAAK,CAAE7sB,OAAQ2sB,GAAS,CAACG,EAAG7nB,IAAM,EAAEA,EAAI,GAAKqK,GAAKrK,EAAI,GAAKsK,KAI/Dwd,EAAmB,CACvB,CAAC,EAAA/R,UAAUE,MAAO,EAAE,EAAG,GACvB,CAAC,EAAAF,UAAUC,OAAQ,CAAC,EAAG,GACvB,CAAC,EAAAD,UAAUI,IAAK,CAAC,GAAI,GACrB,CAAC,EAAAJ,UAAUG,MAAO,CAAC,EAAG,IAGxB,IAAI3D,EAAsB,GAC1B,GAAI4U,EAAa,CACf,MAAO9c,EAAIC,GAAMwd,EAAiBrS,GAClClD,EAAU0C,MAAM2S,KAAK,CAAE7sB,OAAQqsB,GAAc,CAACS,EAAG7nB,IAAM,EACpDA,EAAI,GAAKqK,GACTrK,EAAI,GAAKsK,G,MAGRyc,GAAYxU,EAAQvO,QAAQwjB,GAAgB,EAAMJ,IAClDH,GAAU1U,EAAQvO,QAAQwjB,GAAgB,EAAOF,IAGvD,MAAMS,EAAqBxV,EACxBzJ,IAAI,EAAEuB,EAAIC,MAAQ,CACjB3Q,EAAG0Q,EACHzQ,EAAG0Q,EACHgE,SAAU,EAAAmD,MAAMnD,SAASjE,EAAIC,EAAIzD,EAAOlN,EAAIK,KAAKL,EAAGkN,EAAOjN,EAAII,KAAKJ,MAErEqP,KAAK,CAACC,EAAGC,IAAMD,EAAEoF,SAAWnF,EAAEmF,UAE3B0Z,EAAYlsB,KAAKC,KAAiC,IAA5BgsB,EAAmBhtB,QACxBgtB,EAAmBjG,MAAM,EAAGkG,GAEpCzsB,QAAQ,EAAG5B,IAAGC,QAC3B,MAAM4lB,EAAUxlB,KAAKL,EAAIA,EACnB8lB,EAAUzlB,KAAKJ,EAAIA,EACzB,GAAII,KAAK0rB,mBAAmBlG,EAASC,GAAU,CAC7C,MAAMwI,EAAa,IAAI,EAAA9jB,WACrBnK,KAAKN,KACL8lB,EACAC,EACAzlB,KAAKL,EACLK,KAAKJ,GACL,GACA,EACAI,MAEFA,KAAKP,KAAKyK,YAAYF,KAAKikB,E,KAMjC,KAAA9rB,KAAQC,IACN,IAAIpC,KAAKqC,KAAT,CAGA,GAFA,EAAAX,KAAKY,IAAIC,OACT,EAAAb,KAAKY,IAAIE,YAAcxC,KAAKyC,OACvBzC,KAAKqC,KAAM,CACdrC,KAAK0C,aAAaN,GAClBpC,KAAKuD,OAASvD,KAAKorB,eAAiBhpB,EAChCpC,KAAKuD,OAASvD,KAAK0uG,cACrB1uG,KAAKuD,MAAQ,GAEf,IAAIizD,EAAUx2D,KAAKirB,OAAOjrB,KAAKkrB,SAAUlrB,KAAKuD,OAAO5D,EACvCK,KAAKirB,OAAOjrB,KAAKkrB,SAAUlrB,KAAKuD,OAAO3D,EAClC,IAAfI,KAAK+C,OAA8B,IAAf/C,KAAKiD,MAC3BjD,KAAKsvG,SAAU,EAEftvG,KAAKsvG,SAAU,EAEbtvG,KAAKsvG,SACPtvG,KAAK0uG,YAAc,GACnB1uG,KAAKorB,eAAiB,KAEtBprB,KAAK0uG,YAAc,EACnB1uG,KAAKorB,eAAiB,IAEpBprB,KAAK2C,WAAW3C,KAAK4C,WAAWR,GACpC,EAAAV,KAAKuK,QACHjM,KAAKkB,OACa,KAAflB,KAAKkB,OAAiBlB,KAAKkrB,SAAoC,EAAzBppB,KAAKgB,MAAM9C,KAAKuD,QACzDvD,KAAKmB,MACL,EACA,EACAnB,KAAKL,EAAI62D,EAAUx2D,KAAK+C,MACxB/C,KAAKJ,EAAII,KAAKgD,YAAchD,KAAKiD,MAAQjD,KAAK00B,MAC9C,EACA,EACA10B,KAAKkM,eACLlM,KAAKmD,c,CAGJnD,KAAK8c,SACH9c,KAAKoM,YACRpM,KAAKqM,eAAejK,GAElBpC,KAAKsM,WAAa,GACpBtM,KAAKuM,gBAAgBnK,IAGzB,EAAAV,KAAKY,IAAIc,SA9CY,GA9SrBpD,KAAK0H,MAAQ,EACb1H,KAAKuD,MAAQ,EACbvD,KAAKC,OAAS,EACdD,KAAKyG,UAAY,EACjBzG,KAAKwM,iBAAmB,EACxBxM,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,GACbnB,KAAKoM,YAAa,EAClBpM,KAAK4c,OAAQ,EACb5c,KAAK+c,mBAAqB,UAC1B/c,KAAK0uG,YAAc,EACnB1uG,KAAKk3D,WAAa,EAClBl3D,KAAKorB,eAAiB,GACtBprB,KAAK2vG,UAAY,EACjB3vG,KAAKsvG,SAAU,EACftvG,KAAKuvG,aAAe,EACpBvvG,KAAKO,KAAOA,GAAc,IAAI,EAAAkmB,KAAKzmB,KAAKP,KAAMO,KAAKL,EAAGK,KAAKJ,GAC3DI,KAAKwB,KAAO,OACZxB,KAAKgtB,kBAAmB,EACxBhtB,KAAKktB,gBAAiB,EACtBltB,KAAKm7B,WAAa,EAClBn7B,KAAK6D,eAAiB,EACtB7D,KAAK8D,eAAiB,GACtB9D,KAAKmmC,WAAa,GACd5lC,IAAMP,KAAKO,KAAOA,GACtBP,KAAKsB,QAAQ,CAAC,SAAU,aAAc,OAAQ,OAAQ,UACxD,EA9CF,cAcS,EAAAsU,WAAqB,EACrB,EAAA1U,MAAgB,GAChB,EAAAC,MAAgB,E,iGCnBzB,gBAEA,MAAa05G,UAAiB,EAAA12G,MAE5B,WAAA3E,CAAY4E,EAAazE,EAAWC,GAClCC,MAAMuE,EAAOzE,EAAGC,GAChBI,KAAKuE,KAAO,IACZvE,KAAKkB,MAAQ,GACblB,KAAKmB,MAAQ,EACbnB,KAAKwB,KAAO,YACZxB,KAAKwE,QAAU,IACfxE,KAAK4E,OAAS,EACd5E,KAAK2f,WAAY,EACjB3f,KAAK0E,cAAgB,EACrB1E,KAAK0E,cAAgB,IAErB1E,KAAK0T,MAAQ,CAAC,EAAG,GAAI,GACvB,EAfF,aACS,EAAA5O,SAAW,W,gJCXpB,gBACA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UAOA,UAGA,UACA,UACA,UACA,SAEA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,IAAYg0D,EAOA/8C,GAPZ,SAAY+8C,GACV,2BACA,qCACA,mDACA,0CACD,CALD,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAOtB,SAAY/8C,GACV,mBACA,eACA,qBACA,mBACA,+BACA,yBACA,2BACA,6BACA,sBACD,CAVD,CAAYA,EAAA,EAAAA,YAAA,EAAAA,UAAS,KAYrB,MAAa81I,EAMX,WAAAryJ,CAAYsxB,GAHJ,KAAAghI,YAA+B,KAC/B,KAAAC,aAAuB,EAG7B/xJ,KAAK8wB,QAAUA,EACf9wB,KAAKwxH,UAAYvsH,KAAKC,KACxB,CAGA,eAAA8sJ,CAAgBC,GACd,OAAIjyJ,KAAK8xJ,aAAe9xJ,KAAK+xJ,cAAgBE,IAI7CjyJ,KAAK8xJ,YAAc9xJ,KAAKkyJ,SAASlyJ,KAAK8wB,QAASmhI,GAC/CjyJ,KAAK+xJ,YAAcE,GAJVjyJ,KAAK8xJ,WAMhB,CAEQ,QAAAI,CAASt8H,EAAcq8H,GAC7B,GAAa,KAATr8H,EAAa,MAAO,CAAC,IAEzB,MAAMu8H,EAAQv8H,EAAKnF,MAAM,KACnB2kB,EAAkB,GACxB,IAAIg9G,EAAc,GAElB,IAAK,MAAMC,KAAQF,EAAO,CACxB,MAAMG,EAA2B,KAAhBF,EAAqBC,EAAOD,EAAc,IAAMC,EAE7D3wJ,EAAK4oB,YAAYgoI,GAAUznJ,OAASonJ,EACtCG,EAAcE,EAEM,KAAhBF,GACFh9G,EAAMprC,KAAKooJ,GACXA,EAAcC,GAGdj9G,EAAMprC,KAAKqoJ,E,CASjB,MAJoB,KAAhBD,GACFh9G,EAAMprC,KAAKooJ,GAGNh9G,EAAMr0C,OAAS,EAAIq0C,EAAQ,CAAC,GACrC,CAGA,UAAAmgB,GACEv1D,KAAK8xJ,YAAc,KACnB9xJ,KAAK+xJ,aAAe,CACtB,EAxDF,gBAyFA,MAAMQ,EAAQ,GACd,IAAIC,EAAM,GAEV,MAAa9wJ,EAGX,iBAAIqhF,GAEF,OADKrhF,EAAK+wJ,iBAAgB/wJ,EAAK+wJ,eAAiB,IAAI,EAAAC,eAC7ChxJ,EAAK+wJ,cACd,CAuHA,WAAAjzJ,GA3GA,KAAAka,cAAwB,OAEf,KAAAlC,cAAgB,cAqBjB,KAAAm7I,iBAA2B,EAInC,KAAAn7G,kBAA4B,EAC5B,KAAAoB,oBAA8B,EAE9B,KAAAD,QAAU,QAIV,KAAAi6G,aAAuB,GAqBf,KAAAC,iBAAmB,EAInB,KAAAC,cAAwB,EACxB,KAAAC,kBAA4B,EAOpC,KAAAC,kBAA4B,EAC5B,KAAA56F,uBAAoD,KACpD,KAAAhL,uBAAkD,KAElD,KAAA6lG,IAAc,EAAAC,KAAK5nD,eACX,KAAA6nD,sBAAoD,KAsBpD,KAAAC,aAA8B,KACrB,KAAAC,uBAAyB,KAClC,KAAAC,UAAW,EACX,KAAAC,YAAa,EAEb,KAAAC,cAAwB,EACxB,KAAAC,eAAmC,KAE3C,KAAAr1F,UAAiB,KACjB,KAAAR,iBAA2B,EAE3B,KAAA3mB,eAAiC,KA6QjC,KAAAy8G,YAAe1lJ,IAEbhO,KAAKsZ,aAAetL,EACpBhO,KAAKyO,QAAQzO,KAAKwX,eAAexJ,MAAQA,GAG3C,KAAAg0E,YAAeviF,IACTA,GAAQA,EAAK2E,QACfpE,KAAKoE,MAAQ3E,EAAK2E,OAEhBpE,KAAKoE,MAAM6J,MAAMlN,OAAS,IAC5Bf,KAAKiO,MAAQjO,KAAKoE,MAAM6J,MACxBjO,KAAKy8C,UAAY,IAAInvC,IAAItN,KAAKiO,MAAMa,IAAKwL,GAAM,CAACA,EAAET,SAAUS,OAIhE,KAAA6sF,YAAehtF,GACNna,KAAKy8C,WAAW9tC,IAAIwL,GAG7B,KAAAw5I,aAAgBx5I,GACPna,KAAKy/G,YAAY9wG,IAAIwL,GAG9B,KAAAy5I,cAAiBxvJ,IACfpE,KAAKy/G,WAAWrvG,IAAIhM,EAAMyV,SAAUzV,IAGtC,KAAAyvJ,cAAiB5lJ,IACfjO,KAAKiO,MAAQA,EACbjO,KAAKy8C,UAAY,IAAInvC,IAAIW,EAAMa,IAAKwL,GAAM,CAACA,EAAET,SAAUS,MAGzD,KAAAw5I,mBAAsB35I,IACpB,MAAM1a,EAAOO,KAAKy8C,UAAU9tC,IAAIwL,GAKhC,OAJI1a,IACFO,KAAKP,KAAOA,EACZO,KAAKgiF,YAAYviF,IAEZA,GAGT,KAAAs0J,UAAY,KACV/zJ,KAAK6M,OAAS7M,KAAKyO,QAAQzO,KAAKwX,gBAGlC,KAAAsrD,QAAWqP,IAET,EAAAnZ,MAAM6B,mBAAmB95D,OAAS,EAClC,EAAAi4D,MAAMyc,iBAAiB10E,OAAS,EAChC,EAAAi4D,MAAMwc,mBAAmBz0E,OAAS,EAClC,EAAAi4D,MAAMa,wBAAwB94D,OAAS,EACvC,EAAAi4D,MAAMY,yBAAyB74D,OAAS,EACxC,EAAAi4D,MAAM0c,oBAAoB30E,OAAS,EACnC,EAAAi4D,MAAM2c,kBAAkB50E,OAAS,EAEjC,EAAAqY,aAAaqyC,aACbzrD,KAAKsZ,aAAe,EACpBtZ,KAAKiqJ,mBAAqB,GAC1BjqJ,KAAK+N,OAAS,GACd/N,KAAKw3C,kBAAmB,EACxBx3C,KAAK44C,oBAAqB,EAI1B54C,KAAK03C,gBAAkBzyC,KAAKC,MAG3BlF,KAAa0Z,cAAgB,OAK9B1Z,KAAKg0J,gBAAgB7hF,GAErB,IACE,MAAM,aAAE3iC,GAAiB,EAAQ,MACjCA,EAAaxvC,K,CACb,MAAM,CAERA,KAAK64D,WAAaC,EAAW0uC,iBAE7BxnG,KAAK+iF,cAAczQ,eAAe,EAAA0sC,GAAG7sC,KAAMnyE,OAiB7C,KAAA00E,gBAAmBl/C,IAGjB,GAFA9zB,EAAKyvB,eAAgB,EAEhBnxB,KAAKi8D,QAUV,GAAKj8D,KAAKs8D,SAsCRt8D,KAAKm+D,YAAY5oC,eAAeC,OAtCd,CAClB,OAAQA,EAAIzM,eACV,IAAK,IAGH,OAFA,EAAA3nB,MAAMwuC,kBACN5vC,KAAK80B,YAAY,EAAA1zB,MAAM6xB,WAAa,cAAgB,iBAGtD,IAAK,IAEH,YADAjzB,KAAKs8D,UAAW,GAGlB,IAAK,IAIH,OAHAt8D,KAAKs8D,UAAW,EAChBt8D,KAAKm+D,YAAYjqC,aACjBl0B,KAAKm+D,YAAY5oC,eAAeC,GAGlC,IAAK,IAEH,YADA,EAAAmqF,eAAes0C,mBAAqB,GAEtC,IAAK,IAEH,YADA,EAAAt0C,eAAes0C,mBAAqB,GAEtC,IAAK,IAEH,YADA,EAAAt0C,eAAes0C,mBAAqB,GAEtC,IAAK,IAEH,YADA,EAAAt0C,eAAes0C,mBAAqB,KAEtC,IAAK,IAEH,YADA,EAAAt0C,eAAes0C,mBAAqB,GAKzBj0J,KAAKyO,QAAQzO,KAAKwX,eAC1Bu5B,aAAa+tB,kBAAkBtpC,E,KA9CxC,CAEE,GAAIx1B,KAAK49D,gBACP,OAEF59D,KAAK69D,gBAAiB,C,GA+C1B,KAAA5hB,yBAA2B,CACzBpvC,EACAw9G,KAEAx9G,EAAOiC,IAAIS,aACP86G,aAAkB,EAAAvmG,aAAeumG,EAAO3xG,YAAY2xG,EAAOrxG,WAE/D,MAAMk7I,EAAU7pC,EAAO3xG,WAEvB,IAAIy7I,EACC9pC,EAAe5vG,mBAClB05I,EAAgB,IAAM9pC,EAAe5vG,kBACrC5Q,QAAQ+C,IACN,qDAAqDunJ,EAAcx0J,MAAMw0J,EAAcv0J,sBAAuBs0J,GAAiBr6I,aAI/H7Z,KAAKyO,QAAQzO,KAAKwX,iBAAmB3K,IACvCA,EAAOqF,QAAUgiJ,EAAQ/5I,GACxBtN,EAAeu6F,QAAU8sD,EAAQr6I,SAGlC7Z,KAAKo0J,UAAYp0J,KAAKP,KACtBO,KAAKo0J,UAAUtzE,aAGjB9gF,KAAK0zJ,YAAYQ,EAAQlmJ,OAEzBhO,KAAK64D,WAAaC,EAAWkD,qBAC7Bh8D,KAAKq0J,oBAAsBpvJ,KAAKC,MAChClF,KAAKs0J,oBAAsBjqC,EAEvB8pC,GACDD,EAAgBh4G,0BAA4Bi4G,EAC7CtqJ,QAAQ+C,IACN,yEAA0EsnJ,GAAiBr6I,aAG7FhQ,QAAQ+C,IACN,qEAAsEsnJ,GAAiBr6I,aAK7F,KAAAw0F,uBAAyB,CAACxhG,EAAgBmF,EAAYswE,KACpDtwE,EAAK6uE,WAAWphF,KAAKyO,SAAU,EAE9BrB,EAAeu6F,QAAUp1F,EAAKvS,KAAKoa,SACpC,IAEE,MAAMsuC,EAAMnoD,KAAKiO,OAAO9G,QAAQ6K,EAAKvS,WACzBoY,IAARswC,GAAqBA,GAAO,IAAGt7C,EAAOqF,QAAUi2C,E,CACpD,MAAM,CAER,GAAInoD,KAAKyO,QAAQzO,KAAKwX,iBAAmB3K,EAAQ,CAC/C7M,KAAK64D,WAAaC,EAAWiD,cAC7B/7D,KAAKq0J,oBAAsBpvJ,KAAKC,MAChC,MAAMqvJ,EAASviJ,EAAKuwE,UAAYvwE,EAAK6uE,WAAW0B,QAEhD,IAAIxtE,EAAO/U,KAAKyO,QAAQzO,KAAKwX,eAAe7X,EACxCqV,EAAOhV,KAAKyO,QAAQzO,KAAKwX,eAAe5X,EAE5CI,KAAKo0J,UAAYp0J,KAAKP,KACtBO,KAAKo0J,UAAUtzE,YAGf9gF,KAAKP,KAAOuS,EAAKvS,KAEjBuS,EAAKvS,KAAK4iF,sBAAsBx1E,EAAQmF,EAAMswE,GAE9CtiF,KAAKw0J,aACFx0J,KAAKyO,QAAQzO,KAAKwX,eAAe7X,EAAIoV,GAAQ,EAAA5G,cAAcgR,SAC9Dnf,KAAKy0J,aACFz0J,KAAKyO,QAAQzO,KAAKwX,eAAe5X,EAAIoV,GAAQ,EAAA7G,cAAcgR,SAE9Dnf,KAAK00J,kBAAmB,EACxB10J,KAAK20J,gBAAiB,EACtB30J,KAAK40J,wBAA0BtyE,EAE7BtwE,aAAgB,EAAA6R,MAChB,CAAC9H,EAAUC,MAAOD,EAAUE,MAAM0Z,SAAS3jB,EAAKuwE,UAChDgyE,EAEAv0J,KAAK20J,gBAAiB,EAEtB3iJ,aAAgB,EAAA6R,MAChB7R,EAAKuwE,UAAYxmE,EAAUG,MAC3Bq4I,IAEAv0J,KAAK00J,kBAAmB,E,MAE1B1iJ,EAAKvS,KAAK4iF,sBAAsBx1E,EAAQmF,EAAMswE,GAEhDz1E,EAAOiC,IAAIpB,eAGb,KAAAmnJ,IAAOrjC,IACL,GAAIxxH,KAAKo/F,OAGP,YADA3tE,OAAOF,sBAAsBvxB,KAAK60J,KAIpC,IAAK70J,KAAK80J,uBAGR,OAFA90J,KAAK80J,uBAAyBtjC,OAC9B//F,OAAOF,sBAAsBvxB,KAAK60J,KAKpC,IAGIzyJ,EAAmB,IAHTovH,EAAYxxH,KAAK80J,wBAGF,IAc7B,IARIpzJ,EAAKU,QAAOA,EAAQV,EAAKU,OACzBA,EAJa,GAKfA,EALe,GAMNA,EALM,IAMfA,EANe,GAUVmwJ,EAAMxxJ,OAAS,GAAKwxJ,EAAM,IAAM/gC,EAAY,KACjD+gC,EAAMr6H,QAERq6H,EAAMvoJ,KAAKwnH,GACXghC,EAAMD,EAAMxxJ,OAGVe,KAAKgB,MAAM0uH,GAAa,IAAO,KAC/B1vH,KAAKgB,MAAM9C,KAAK80J,wBAA0B,IAAO,MAEjD90J,KAAK68C,SAIL/6C,KAAKgB,MAAM0uH,GACX1vH,KAAKgB,MAAM9C,KAAK80J,wBAA0B,KAE1C90J,KAAK+0J,oBAKP/0J,KAAKmC,KAAKC,EAAQ,EAAA+L,cAAcwmC,gBAAkB,GAGlDljB,OAAOF,sBAAsBvxB,KAAK60J,KAGlC70J,KAAK80J,uBAAyBtjC,GAGhC,KAAA30E,OAAS,KAkBP,GAjBA78C,KAAK+0J,oBACL,EAAA/7F,MAAMkgB,iBAGDl5E,KAAK+iF,cAActQ,eAEI,IAAxB,EAAAzZ,MAAM4c,eACN3wE,KAAKC,MAAQ,EAAA8zD,MAAM4c,cAAgB,EAAAznE,cAAcunH,iBAEjD,EAAA18D,MAAMwd,UAAU,CACdC,QAAQ,EACRjhD,IAAK,EAAAwjC,MAAM6c,gBAMZ71E,KAAK+iF,cAActQ,eAEpB,EAAAzZ,MAAM2D,WACN,EAAA3D,MAAM4D,kBACsB,IAA5B,EAAA5D,MAAMgE,mBACN/3D,KAAKC,MAAQ,EAAA8zD,MAAMgE,kBAAoB,EAAA7uD,cAAcunH,gBACrD,CAEA,MAAM7oH,EAAS7M,KAAKyO,QAAQzO,KAAKwX,gBAE/B3K,GACAA,EAAOnN,KAAKm5D,aAAeC,EAAWC,UACrClsD,EAAOxK,MACPwK,EAAO2tC,KAAKr6C,MACZ0M,EAAO4kC,eACP5kC,EAAOnN,KAAKi8D,gBAAgB1E,SAG7BpqD,EAAO6xD,gBACP,EAAA1F,MAAMgE,kBAAoB/3D,KAAKC,M,CAMrC,GAAI,EAAA8zD,MAAMsgB,iBAA2C,IAAxB,EAAAtgB,MAAMogB,cAAqB,CACtD,MAAM47E,EAAiB/vJ,KAAKC,MAAQ,EAAA8zD,MAAMogB,cAE1C,GAAK,EAAApgB,MAAMugB,oBAQT,GAAIy7E,EAAiB,EAAA7mJ,cAAcwnH,uBAAwB,CAEzD,OAAQ,EAAA38D,MAAMqgB,oBACZ,KAAKt9D,EAAUE,KACb,EAAA+8C,MAAMc,oBACN,MACF,KAAK/9C,EAAUC,MACb,EAAAg9C,MAAMiB,qBACN,MACF,KAAKl+C,EAAUI,GACb,EAAA68C,MAAMkB,kBACN,MACF,KAAKn+C,EAAUG,KACb,EAAA88C,MAAMmB,oBAGV,EAAAnB,MAAMogB,cAAgBn0E,KAAKC,K,OAtBzB8vJ,EAAiB,EAAA7mJ,cAAcynH,2BACjC,EAAA58D,MAAMugB,oBAAqB,EAC3B,EAAAvgB,MAAMogB,cAAgBn0E,KAAKC,M,CA0CjC,GAjBIlF,KAAK64D,aAAeC,EAAWiD,eAE/B92D,KAAKC,MAAQlF,KAAKq0J,qBAClB,EAAA7uJ,eAAes/B,wBAEf9kC,KAAK64D,WAAaC,EAAWC,UAG7B/4D,KAAK64D,aAAeC,EAAWkD,sBAE/B/2D,KAAKC,MAAQlF,KAAKq0J,qBAClB,EAAA7uJ,eAAeu/B,+BAEf/kC,KAAK64D,WAAaC,EAAWC,SAC7B/4D,KAAKyO,QAAQzO,KAAKwX,eAAe1I,IAAIpB,eAGrC1N,KAAK64D,aAAeC,EAAW0uC,iBACjC,IAAK,MAAMxhG,KAAKhG,KAAKyO,QAAS,CAI5B,GAHAzO,KAAKyO,QAAQzI,GAAG62C,SAId78C,KAAK64D,aAAeC,EAAWiD,eAC/B/7D,KAAK64D,aAAeC,EAAWkD,qBAC/B,CACA,MAAMnvD,EAAS7M,KAAKyO,QAAQzI,IACd6G,EAAe8sB,QACxB9sB,EAAe8sB,UAChB35B,KAAK+N,OAAOlB,EAAOmB,OAAOC,MAAMpB,EAAOqF,UACtC2qC,Q,CAGP,GAAI78C,KAAKyO,QAAQzI,GAAG3D,KAClB,IAAK,MAAM8D,KAAKnG,KAAKyO,QACnBzO,KAAKyO,QAAQtI,GAAG9D,MAAO,C,GAOjC,KAAA4yJ,KAAO,CAAC/lJ,EAAWC,EAAW7J,KACpB,EAAIA,GAAK4J,EAAI5J,EAAI6J,EAG3B,KAAA2lB,YAAehE,IACb9wB,KAAKuiH,KAAKv4G,KAAK,IAAI6nJ,EAAY/gI,KAIzB,KAAAokI,oBAAuB/iF,IAE7B,GAAI,QAAQ7uB,KAAK6uB,GACf,OAAOtqD,SAASsqD,GAIlB,IAAI87C,EAAO,EACX,IAAK,IAAIjoH,EAAI,EAAGA,EAAImsE,EAAKpxE,OAAQiF,IAE/BioH,GAAQA,GAAQ,GAAKA,EADR97C,EAAKwwB,WAAW38F,GAE7BioH,GAAcA,EAIhB,OAAOnsH,KAAKgG,IAAImmH,IAGlB,KAAA1gB,eAAkBC,IAEhB,IAAIjrC,EAAU,GAId,IALAirC,EAAUA,EAAQ93E,eAKNyC,WAAW,OACrB,GAAIq1E,EAAQr1E,WAAW,QAAS,CAC9B,MAAMg9H,EAAY3nD,EAAQ1lF,MAAM,GAAGmQ,OAC7Bm9H,EAAap1J,KAAKk1J,oBAAoBC,GAC5Cn1J,KAAK80B,YACH,gCAAgCqgI,MAAcC,MAEhDp1J,KAAK8iE,QAAQsyF,E,KACQ,QAAZ5nD,GACTxtG,KAAK8iE,eAKT,OAAQ0qC,GACN,IAAK,SACHxtG,KAAK80B,YACH,kCAAkC90B,KAAKP,KAAKqsF,2BAA2B,SAEzE,MACF,IAAK,YACH9rF,KAAK80B,YACH,0BAA4B90B,KAAKiqJ,mBAAmBlpJ,QAEtD,MACF,IAAK,MACH,MAAMs0J,EAAUr1J,KAAKoE,MAAMkxJ,WAAWt1J,KAAKP,MAC3C,GAAI41J,EAAS,CACXr1J,KAAK80B,YAAY,aAAaugI,EAAQl7I,MACtCk7I,EAAQnnJ,SAAU,EAClBmnJ,EAAQ3zE,oBACR1hF,KAAKquG,uBACHruG,KAAKyO,QAAQzO,KAAKwX,eAClB69I,EAAQ9mJ,MAAM,GACd,GAEF,MAAMzC,EAAOupJ,EAAQ70E,uBAAuB60E,EAAQxtJ,iBACpD7H,KAAKyO,QAAQzO,KAAKwX,eAAe7X,EAAImM,EAAKnM,EAC1CK,KAAKyO,QAAQzO,KAAKwX,eAAe5X,EAAIkM,EAAKlM,EAC1Cy1J,EAAQ1zI,iBACR3hB,KAAK80B,YAAY,qB,CAEnB,MAEF,IAAK,QACH90B,KAAK80B,YAAY,UAAU90B,KAAKoE,MAAMyV,YACtC,MACF,IAAK,OACH,IAAI07I,EACJ,IAAK,MAAM91J,KAAQO,KAAKoE,MAAM6J,MAC5B,GAAIxO,EAAKsE,OAAS,EAAA6N,SAASE,WACzB,IAAK,IAAInS,EAAIF,EAAKkL,MAAOhL,EAAIF,EAAKkL,MAAQlL,EAAKoL,MAAOlL,IACpD,IAAK,IAAIC,EAAIH,EAAKsL,MAAOnL,EAAIH,EAAKsL,MAAQtL,EAAKwL,OAAQrL,IACrD,GAAIH,EAAK6K,UAAU3K,GAAGC,aAAc,EAAAkkB,WAAY,CAC9CyxI,EAAa91J,EAAK6K,UAAU3K,GAAGC,GAC/B,K,CAMN21J,IACFA,EAAW91J,KAAKyO,SAAU,EAC1BqnJ,EAAW91J,KAAKiiF,oBAChB1hF,KAAKquG,uBACHruG,KAAKyO,QAAQzO,KAAKwX,eAClB+9I,EAAW91J,KAAK8O,MAAM,GACtB,GAEFgnJ,EAAW55G,SAASwkB,aACpBngE,KAAKyO,QAAQzO,KAAKwX,eAAe7X,EAAI41J,EAAW51J,EAChDK,KAAKyO,QAAQzO,KAAKwX,eAAe5X,EAAI21J,EAAW31J,EAChD21J,EAAW91J,KAAKkiB,iBAChB3hB,KAAK80B,YAAY,uBAEnB,MACF,IAAK,UACH,EAAAtvB,eAAem/B,qBAAuB,EACtC3kC,KAAK80B,YACH,8BAA8B,EAAAtvB,eAAem/B,uBAE/C,MACF,IAAK,YACC,EAAAn/B,eAAem/B,oBAAsB,IACvC,EAAAn/B,eAAem/B,qBAAuB,GAExC3kC,KAAK80B,YACH,8BAA8B,EAAAtvB,eAAem/B,uBAE/C,MACF,IAAK,QACH,IACE,MAAM,cAAEg+B,GAAkB,EAAQ,MAClCA,EAAc3iE,MACdA,KAAK80B,YACH,yD,CAEF,MAAO7tB,GACPjH,KAAK80B,YAAY,sB,CAEnB,MAEF,IAAK,QACH,IACE,MAAM,gBAAE8tC,GAAoB,EAAQ,MACpCA,EAAgB5iE,MAChBA,KAAK80B,YACH,yD,CAEF,MAAO7tB,GACPjH,KAAK80B,YAAY,sB,CAEnB,MAEF,IAAK,SACH90B,KAAK80B,YAAY,sBACjB90B,KAAK+iF,cAAchQ,OAAO/yE,MAC1B,MACF,IAAK,aAAc,CACjB,MAAMyR,EAAKzR,KAAK+iF,cAAsB/tC,aACtCh1C,KAAK80B,YACHrjB,EACI,yBAAyBA,EAAE6a,eAAe7a,EAAE0gE,mBAAmB1gE,EAAEwgE,wBAAwBxgE,EAAEygE,YAC3F,8BAEN,K,CAEF,IAAK,cACFlyE,KAAK+iF,cAAsBpQ,mBAC5B3yE,KAAK80B,YAAY,0BACjB,MACF,IAAK,UACH,EAAA3mB,cAAcC,gBAAkB,EAAAD,cAAcC,eAC9CvE,QAAQ+C,IAAI,yBAAyB,EAAAuB,cAAcC,kBACnD,MACF,IAAK,MACH,EAAAD,cAAcC,gBAAkB,EAAAD,cAAcC,eAC9CvE,QAAQ+C,IAAI,yBAAyB,EAAAuB,cAAcC,kBACnDpO,KAAK8iE,UACL,MACF,IAAK,OACH,IAAK,MAAM98D,KAAKhG,KAAKyO,QACnBzO,KAAKyO,QAAQzI,GAAG3D,MAAO,EAEzB,MACF,IAAK,UACH,IAAK,MAAM2D,KAAKhG,KAAKyO,QACnBzO,KAAKyO,QAAQzI,GAAGtG,KAAKD,KAAKuH,SAASzF,QAAS0F,IAC1CA,EAAEke,SAGN,MACF,IAAK,OACHnlB,KAAKP,KAAK8yF,SAAS,EAAG,IAAM,EAAA3wF,OAAOC,QACnC,MACF,IAAK,MACH,EAAAsM,cAAcipH,qCAAoC,GAClD,MACF,IAAK,MACH,EAAAjpH,cAAcypH,YACd53H,KAAKw1J,WACL,MACF,IAAK,MAIH,MACF,IAAK,QACH,EAAArnJ,cAAcwqD,qCAAoC,GAClD,MACF,IAAK,SACH,EAAAxqD,cAAcmZ,iBAAmB,EAAAnZ,cAAcmZ,gBAC/Ci7C,EAAU,EAAAp0D,cAAcmZ,gBAAkB,UAAY,WACtDtnB,KAAK80B,YAAY,0BAA0BytC,KAC3C,IACE,MAAM,aAAE7zB,GAAiB,EAAQ,MACjCA,EAAa1uC,K,CACb,MAAM,CACR,MACF,IAAK,QACH,EAAAmO,cAAc+nH,gBAAkB,EAAA/nH,cAAc+nH,eAC9C3zD,EAAU,EAAAp0D,cAAc+nH,eAAiB,UAAY,WACrDl2H,KAAK80B,YAAY,8BAA8BytC,KAC/C,MACF,IAAK,MACH,EAAAp0D,cAAc83E,qBAAuB,EAAA93E,cAAc83E,oBACnD1jB,EAAU,EAAAp0D,cAAc83E,oBAAsB,UAAY,WAC1DjmF,KAAK80B,YAAY,8BAA8BytC,KAC/C,MACF,IAAK,QACH,EAAA77D,iBAAiBiqF,YAAc,EAAAjqF,iBAAiBiqF,WAChD3wF,KAAK8iE,UACLP,EAAU,EAAA77D,iBAAiBiqF,WAAa,UAAY,WACpD3wF,KAAK80B,YAAY,wBAAwBytC,KACzC,MACF,IAAK,QACH,EAAA77D,iBAAiB+uJ,iBAAmB,EAAA/uJ,iBAAiB+uJ,gBACrDlzF,EAAU,EAAA77D,iBAAiB+uJ,gBAAkB,UAAY,WACzDz1J,KAAK80B,YAAY,yCAAyCytC,KAC1D,MACF,IAAK,SACH,EAAAp0D,cAAcoZ,8BACX,EAAApZ,cAAcoZ,6BACjBg7C,EAAU,EAAAp0D,cAAcoZ,6BACpB,UACA,WACJvnB,KAAK80B,YAAY,uBAAuBytC,KACxC,MAEF,IAAK,QAGH,GADA,EAAAp0D,cAAcupH,wBACV,EAAAvpH,cAAc64E,eAChB,IACE,MAAM,kBAAEv5B,GAAsB,EAAQ,MACtCA,EAAkBjU,cAClBx5C,KAAK80B,YAAY,sC,CACjB,MAAO7tB,GACPjH,KAAK80B,YACH,iEAEF,EAAA3mB,cAAc64E,gBAAiB,C,KAE5B,CAEL,IACE,MAAM,kBAAEv5B,GAAsB,EAAQ,MACtCA,EAAkBjU,cAAc+b,c,CAChC,MAAM,CACRv1D,KAAK80B,YAAY,uB,CAEnB,MAEF,IAAK,KACH,EAAA3mB,cAAcwpH,2BACd,MACF,IAAK,UACH33H,KAAK01J,4BACL,MACF,IAAK,WACH11J,KAAKmzJ,sBAAwB,KAC7BnzJ,KAAK80B,YAAY,mCACjB,MACF,IAAK,OACH,EAAAqlB,cAAcw7G,SAASpzF,SAAW,EAAApoB,cAAcw7G,SAASpzF,QACzDA,EAAU,EAAApoB,cAAcw7G,SAASpzF,QAAU,UAAY,WACvDviE,KAAK80B,YAAY,yBAAyBytC,KAC1C,MACF,IAAK,OACH,IACMviE,KAAK+iF,cAActQ,cACrBzyE,KAAK80B,YAAY,+BAEjB90B,KAAKyzJ,gBAAiB,IAAA57G,iBAAgB73C,MACtCA,KAAK80B,YAAY,kCACjBjrB,QAAQ+C,IAAI,oBAAqB5M,KAAKyzJ,gB,CAExC,MAAOtjI,GACPnwB,KAAK80B,YAAY,4BAA8B3E,EAAMW,SACrDjnB,QAAQsmB,MAAM,cAAeA,E,CAE/B,MAEF,IAAK,OACH,IAAKnwB,KAAKyzJ,eAIR,YAHAzzJ,KAAK80B,YACH,wDAIJ,IAEE,MAAMk/C,EAAkBv3D,OAAO+2C,KAAKxzD,KAAKyO,UACzC,IAAAwlE,eAAcj0E,KAAMg0E,EAAiBh0E,KAAKyzJ,gBAAgB,GAC1DzzJ,KAAK80B,YAAY,mCACjBjrB,QAAQ+C,IAAI,oB,CACZ,MAAOujB,GACPnwB,KAAK80B,YAAY,6BAA+B3E,EAAMW,SACtDjnB,QAAQsmB,MAAM,cAAeA,E,CAE/B,MAEF,IAAK,WACH,IAAKnwB,KAAKyzJ,eAER,YADAzzJ,KAAK80B,YAAY,8BAGnB90B,KAAK80B,YACH,uBAAuB90B,KAAKyzJ,eAAethF,gBAAgBnyE,KAAKyzJ,eAAervJ,MAAM4J,mBAAmByO,OAAO+2C,KAAKxzD,KAAKyzJ,eAAehlJ,SAAS1N,UAEnJ8I,QAAQ+C,IAAI,4BAA6B5M,KAAKyzJ,gBAC9C,MAEF,IAAK,cACHzzJ,KAAK80B,YACH,yBAAyB90B,KAAK+Y,SAASo5D,gBAAgBnyE,KAAKoE,MAAM4J,mBAAmByO,OAAO+2C,KAAKxzD,KAAKyO,SAAS1N,UAEjH8I,QAAQ+C,IAAI,8BAA+B,CACzCulE,KAAMnyE,KAAK+Y,SAASo5D,KACpBnkE,MAAOhO,KAAKoE,MAAM4J,MAClBS,QAASgO,OAAO+2C,KAAKxzD,KAAKyO,SAC1BR,MAAOjO,KAAKiO,MAAMlN,SAEpB,MAEF,IAAK,WAEH,IACE,GAAIf,KAAK+iF,cAActQ,cAAe,CACpCzyE,KAAK80B,YAAY,8BACjB,K,CAEF90B,KAAKyzJ,gBAAiB,IAAA57G,iBAAgB73C,MACtC,MAAM41J,EAAiB51J,KAAKyO,QAAQzO,KAAKwX,eAAevX,OAClD41J,EAAY71J,KAAKyO,QAAQzO,KAAKwX,eAAe7X,EAC7Cm2J,EAAY91J,KAAKyO,QAAQzO,KAAKwX,eAAe5X,EAGnDI,KAAKyO,QAAQzO,KAAKwX,eAAevX,OAAS6B,KAAK4D,IAC7C,EACA1F,KAAKyO,QAAQzO,KAAKwX,eAAevX,OAAS,GAE5CD,KAAKyO,QAAQzO,KAAKwX,eAAe7X,GAAK,EACtCK,KAAKyO,QAAQzO,KAAKwX,eAAe5X,GAAK,EAEtCI,KAAK80B,YACH,0BAA0B8gI,QAAqB51J,KAAKyO,QAAQzO,KAAKwX,eAAevX,iBAAiB41J,KAAaC,UAAkB91J,KAAKyO,QAAQzO,KAAKwX,eAAe7X,KAAKK,KAAKyO,QAAQzO,KAAKwX,eAAe5X,MAEzMI,KAAK80B,YAAY,wC,CACjB,MAAO3E,GACPnwB,KAAK80B,YAAY,uBAAyB3E,EAAMW,SAChDjnB,QAAQsmB,MAAM,mBAAoBA,E,CAEpC,MACF,QACE,GAAIq9E,EAAQr1E,WAAW,UACrBn4B,KAAKP,KAAK6gF,YAAYktB,EAAQ1lF,MAAM,SAC/B,GAAI0lF,EAAQr1E,WAAW,QAC5B,KAAOn4B,KAAKP,KAAKoI,gBAAgB9G,OAAS,GACxCf,KAAKP,KAAK6gF,YAAYktB,EAAQ1lF,MAAM,MA+F9C,KAAAiuI,SAAW,KACT,IAAI79B,EAAYzmG,OAAO+S,WAGvB,IAAK,IAAIx+B,EAAI,EAAAmI,cAAcqnH,UAAWxvH,GAAK,EAAAmI,cAAconH,UAAWvvH,IAClE,GAAIkyH,EAAYlyH,EAHJ,IAIV,OAAOA,EAGX,OAAO,EAAAmI,cAAconH,WAGvB,KAAA73D,cAAgB,KACd,EAAAvvD,cAAc0pH,iBACd73H,KAAKw1J,WAEL,EAAAx8F,MAAMye,4BAGR,KAAA9Z,cAAgB,KACd,EAAAxvD,cAAc2pH,iBACd93H,KAAKw1J,WAEL,EAAAx8F,MAAMye,4BAGR,KAAAu+E,YAAe5zJ,IACT,EAAA+L,cAAcsnH,eAEd,EAAAtnH,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,OACzChtC,KAAKgG,IAAI,EAAAqG,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,QAAU,KAE5D,EAAA3gC,cAAc0gC,aACV,EAAA1gC,cAAc2gC,MAAQ,EAAA3gC,cAAc0gC,YAAczsC,EAAS,IAG/D,EAAA+L,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,OACzChtC,KAAKgG,IAAI,EAAAqG,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,QAAU,KAE5D,EAAA3gC,cAAc0gC,aACV,EAAA1gC,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,OAAS1sC,EAAS,IAI/D,EAAA+L,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,OACzChtC,KAAKgG,IAAI,EAAAqG,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,QAAU,KAE5D,EAAA3gC,cAAc0gC,YAAczsC,EAAQ,IAGpC,EAAA+L,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,OACzChtC,KAAKgG,IAAI,EAAAqG,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,QAAU,KAE5D,EAAA3gC,cAAc0gC,YAAczsC,EAAQ,IAElCN,KAAKgG,IAAI,EAAAqG,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,QAAU,MAC9D,EAAA3gC,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,QAI3C,EAAA3gC,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,MAG3C9uC,KAAKw1J,WAEL,EAAAx8F,MAAMye,4BAGR,KAAAs9E,kBAAoB,KAClBrzJ,EAAKY,IAAI6rD,OAAO8nG,aAAa,QAAS,GAAG,EAAA9nJ,cAAc2C,SACvDpP,EAAKY,IAAI6rD,OAAO8nG,aAAa,SAAU,GAAG,EAAA9nJ,cAAc6C,WAG1D,KAAAwkJ,SAAW,UAEgB39I,IAAvB7X,KAAKwX,eACLxX,KAAKyO,UAAUzO,KAAKwX,gBACpBxX,KAAKyO,UAAUzO,KAAKwX,gBAAgBgjC,MAEpCx6C,KAAKyO,QAAQzO,KAAKwX,eAAegjC,KAAKwoB,kBAExChjE,KAAKsvB,SACH,qFAAqFg0B,KACnFptC,UAAUC,WAGd,EAAAhI,cAAcs5E,MACZ,oBAAoBnkC,KAAKptC,UAAUC,aAClCD,UAAUC,UAAUwf,SAAS,mBAI9B,SAAS2tB,KAAKptC,UAAUC,aAAe,SAASmtC,KAAKptC,UAAUC,aAE/D,EAAAhI,cAAc64E,gBAAiB,EAEH,OAAxB,EAAA74E,cAAc2gC,QAChB,EAAA3gC,cAAcmZ,iBAAkB,IAKR,OAAxB,EAAAnZ,cAAc2gC,QAChB,EAAA3gC,cAAc2gC,MAAQ,EAAA3gC,cAAc4pH,WAAW/3H,KAAKsvB,UACpD,EAAAnhB,cAAc0gC,WAAa,EAAA1gC,cAAc2gC,OAE3C,IAGIonH,EAAgBp0J,KAAKgB,MACvB2uB,OAAO+S,WAAa,EAAAr2B,cAAc6nH,cAEhCmgC,EAAiBr0J,KAAKgB,MACxB2uB,OAAOgT,YAAc,EAAAt2B,cAAc8nH,eAGrC,GAAIj2H,KAAKsvB,SAAU,CACbtvB,KAAKsvB,UAAUzlB,QAAQ+C,IAAI,mBAC/B,EAAAuB,cAAcknH,aAAe,GAC7B,EAAAlnH,cAAcmhB,UAAW,EACzB,EAAA9pB,eAAem/B,oBAAsB,EACrC,EAAAn/B,eAAe6/B,sBAAwB,EACvC,EAAAl3B,cAAc64E,gBAAiB,EAI/B,MAAMovE,EAAe,EAAAjoJ,cAAc0gC,WApBnB,EAqBhBntC,EAAKqP,MAAQjP,KAAKyD,IAAI2wJ,EAAeC,EAAgBC,E,KAChD,CACL,EAAAjoJ,cAAcmhB,UAAW,EAGzB,MAAM8mI,EAAe,EAAAjoJ,cAAc0gC,WA1BnB,EA2BhBntC,EAAKqP,MAAQjP,KAAKyD,IAAI2wJ,EAAeC,EAAgBC,E,CAIpC,IAAf10J,EAAKqP,QAEPmlJ,EAAgBzkI,OAAO+S,WAAa,EAAAr2B,cAAc6nH,aAClDmgC,EAAiB1kI,OAAOgT,YAAc,EAAAt2B,cAAc8nH,cAEpDv0H,EAAKqP,MAAQjP,KAAK4D,IAChB,EACA5D,KAAKyD,IAAI2wJ,EAAeC,EAAgB,KAM5Cz0J,EAAKqP,OADqB,EACQ0gB,OAAO0mG,iBAGzC,EAAA3yH,eAAekZ,SAAW5c,KAAKgB,MAC7B2uB,OAAO+S,WAAa9iC,EAAKqP,MAAQ,EAAA5C,cAAcgR,UAEjD,EAAA3Z,eAAeoZ,SAAW9c,KAAKgB,MAC7B2uB,OAAOgT,YAAc/iC,EAAKqP,MAAQ,EAAA5C,cAAcgR,UAIlD,EAAAhR,cAAc2C,MAAQhP,KAAKgB,MAAM2uB,OAAO+S,WAAa9iC,EAAKqP,OAC1D,EAAA5C,cAAc6C,OAASlP,KAAKgB,MAAM2uB,OAAOgT,YAAc/iC,EAAKqP,OAG5DrP,EAAKY,IAAI6rD,OAAO8nG,aAAa,QAAS,GAAG,EAAA9nJ,cAAc2C,SACvDpP,EAAKY,IAAI6rD,OAAO8nG,aAAa,SAAU,GAAG,EAAA9nJ,cAAc6C,UAGxDtP,EAAKY,IAAI6rD,OAAO8nG,aACd,QACA,UAAU,EAAA9nJ,cAAc2C,MAAQpP,EAAKqP,oBACnC,EAAA5C,cAAc6C,OAAStP,EAAKqP,2bAchC,MAAMslJ,EAAe,EAAAloJ,cAAc2C,MAAQ,GACvCulJ,IAAiBr2J,KAAKwzJ,gBACxBxzJ,KAAKuiH,KAAKhhH,QAASkgG,GAAQA,EAAIlsC,cAC/Bv1D,KAAKwzJ,cAAgB6C,IAIzB,KAAAh6I,YAAc,CAACouF,EAAgBvxD,EAAgBtwB,GAAiB,KAC9D,GAAI,EAAAza,cAAcihC,qBAAsB,CACtC,IAAIknH,EAAS1tI,EAAQ9mB,KAAK4D,KAAK,EAAG5D,KAAKyD,IAAI,EAAGklG,IAAWA,EACrD8rD,EAAS3tI,EAAQ9mB,KAAK4D,KAAK,EAAG5D,KAAKyD,IAAI,EAAG2zC,IAAWA,EAEzDl5C,KAAKw2J,mBAAoB,EACzBx2J,KAAKm1F,cAAgBmhE,EACrBt2J,KAAKq1F,cAAgBkhE,EACrBv2J,KAAKy2J,cAAgB30J,KAAKgG,IAAIwuJ,GAC9Bt2J,KAAK02J,cAAgB50J,KAAKgG,IAAIyuJ,IAC1BD,EAAS,GAAKC,EAAS,KAAGv2J,KAAK22J,WAAc,EAAI70J,KAAKyrC,GAAM,IAC5D+oH,EAAS,GAAKC,EAAS,KAAGv2J,KAAK22J,WAAa70J,KAAKyrC,GAAK,GAC1DvtC,KAAK42J,kBAAoB3xJ,KAAKC,K,GAIlC,KAAA2xJ,UAAY,CAACz0J,EAAeunF,GAA2B,KACrD,GAAK,EAAAx7E,cAAc+nH,gBAKZ,GAAI,EAAA/nH,cAAc+nH,eAAgB,CAEvC,MAAM4gC,EAAc92J,KAAKiO,MACtBvN,OAAQ4Z,GAAMA,EAAEzB,SAAW7Y,KAAK0Z,eAChCoO,QACA7Y,KAAK,CAACC,EAAGC,IACUD,EAAEnE,MAAQmE,EAAEjE,QACZkE,EAAEpE,MAAQoE,EAAElE,SAIlC,IAAK,MAAMxL,KAAQq3J,GAEfr3J,IAASO,KAAKP,MAAQA,EAAKw3D,QAAWx3D,EAAKyO,SAAWzO,EAAKmlF,YAE3DnlF,EAAK0C,KAAKC,GAEV3C,EAAKiqF,aAAatnF,EAAOunF,G,MAtBI,CAEjC,IAAK3pF,KAAKP,MAAQO,KAAKP,KAAKoZ,SAAW7Y,KAAK0Z,cAAe,OAC3D1Z,KAAKP,KAAK0C,KAAKC,GACfpC,KAAKP,KAAKiqF,aAAatnF,GAAO,E,GAyBlC,KAAA20J,sBAAyB30J,IACvB,IAAK,MAAM3C,KAAQO,KAAKiO,MAClBxO,EAAKoZ,SAAW7Y,KAAK0Z,gBACNja,IAASO,KAAKP,MAAQA,EAAKw3D,QAAUx3D,EAAKyO,WAGzD,EAAAC,cAAcmZ,kBACb,EAAAnZ,cAAcoZ,8BAEf9nB,EAAK+nF,iBACP/nF,EAAKmnF,iBACLnnF,EAAK6pF,eAAelnF,IAGxB,IAAK,MAAM3C,KAAQO,KAAKiO,MAClBxO,EAAKoZ,SAAW7Y,KAAK0Z,gBAEvBja,IAASO,KAAKP,MAASA,EAAKw3D,QAAUx3D,EAAKyO,UAE3CzO,EAAKirF,cAActoF,IAgGzB,KAAA40J,gBAAmB50J,IACjB,IAAI60J,EAAc,yBAoBlB,GAlBAv1J,EAAKY,IAAIE,YAAcxC,KAAK6yJ,iBACvB7yJ,KAAKi8D,SAAYj8D,KAAK69D,gBAGf79D,KAAKi8D,SAAWj8D,KAAK69D,iBAC/B79D,KAAK6yJ,kBAA4B,KAARzwJ,EACrBpC,KAAK6yJ,kBAAoB,IAC3B7yJ,KAAK6yJ,iBAAmB,EACxB7yJ,KAAKi8D,SAAU,EACf,EAAA76D,MAAMyvJ,iBAPR7wJ,KAAK6yJ,iBAAmB,EACpB7yJ,KAAK6yJ,kBAAoB,IAAG7yJ,KAAK6yJ,iBAAmB,IAU1DnxJ,EAAKY,IAAIoP,UAAY,QACrBhQ,EAAKY,IAAIqP,SAAS,EAAG,EAAG,EAAAxD,cAAc2C,MAAO,EAAA3C,cAAc6C,QAC3DtP,EAAKY,IAAIoP,UAAY,EAAAlM,eAAe8/B,iBAG/BtlC,KAAK49D,iBAAoB59D,KAAK69D,eAejC79D,KAAKo+D,WAAWj8D,WAfiC,CACjDT,EAAK2c,SACH44I,EACA,EAAA9oJ,cAAc2C,MAAQ,EAAIpP,EAAK4oB,YAAY2sI,GAAapsJ,MAAQ,EAChE,EAAAsD,cAAc6C,OAAS,EAAItP,EAAKg0C,cAAgB,GAElD,IAAIF,EAAgB,gCAChBx1C,KAAKsvB,WAAUkmB,EAAgB,gBACnC9zC,EAAK2c,SACHm3B,EACA,EAAArnC,cAAc2C,MAAQ,EAAIpP,EAAK4oB,YAAYkrB,GAAe3qC,MAAQ,EAClE,EAAAsD,cAAc6C,OAAS,EAAItP,EAAKg0C,cAAgB,E,CAOpDh0C,EAAKY,IAAIE,YAAc,GAGzB,KAAA00J,cAAiB90J,IACf,IAAI6wJ,EAAMjzJ,KAAKizJ,IAEfvxJ,EAAKY,IAAIoP,UAAY,QACrBhQ,EAAKY,IAAIqP,SAAS,EAAG,EAAG,EAAAxD,cAAc2C,MAAO,EAAA3C,cAAc6C,QAC3DtP,EAAKY,IAAIoP,UAAY,EAAAlM,eAAe8/B,iBAEpC5jC,EAAK2c,SACH40I,EACA,EAAA9kJ,cAAc2C,MAAQ,EAAIpP,EAAK4oB,YAAY2oI,GAAKpoJ,MAAQ,EACxD,EAAAsD,cAAc6C,OAAS,EAAItP,EAAKg0C,cAAgB,IAIpD,KAAAvzC,KAAQC,IAsBN,GArBI,EAAA+L,cAAc0gC,aAAe,EAAA1gC,cAAc2gC,QAC7C9uC,KAAKg2J,YAAY5zJ,GACjBpC,KAAKw1J,YAIP9zJ,EAAKY,IAAIiqD,UAAU,EAAG,EAAG,EAAAp+C,cAAc2C,MAAO,EAAA3C,cAAc6C,QAC5DtP,EAAKY,IAAIC,OAGTb,EAAKY,IAAIsQ,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,GAErClR,EAAKY,IAAIE,YAAc,EACvBd,EAAKY,IAAIqO,yBAA2B,cACpCjP,EAAKY,IAAIoP,UAAY,QACrBhQ,EAAKY,IAAIqP,SAAS,EAAG,EAAG,EAAAxD,cAAc2C,MAAO,EAAA3C,cAAc6C,QAMvDhR,KAAK64D,aAAeC,EAAWiD,cAAe,CAChD/7D,KAAKm1F,aAAe,EACpBn1F,KAAKq1F,aAAe,EACpBr1F,KAAKw2J,mBAAoB,EAEzB,IAAIW,EAAer1J,KAAKgB,MACtB9C,KAAKi1J,MACFhwJ,KAAKC,MAAQlF,KAAKq0J,qBACjB,EAAA7uJ,eAAes/B,sBACjB,GACC9kC,KAAKw0J,cAGN4C,EAAet1J,KAAKgB,MACtB9C,KAAKi1J,MACFhwJ,KAAKC,MAAQlF,KAAKq0J,qBACjB,EAAA7uJ,eAAes/B,sBACjB,GACC9kC,KAAKy0J,cAGN4C,EAAgBF,EAAen3J,KAAKw0J,YACpC8C,EAAgBF,EAAep3J,KAAKy0J,YAEpC8C,GACDv3J,KAAKyO,QAAQzO,KAAKwX,eAAe7X,EAChCK,KAAKyO,QAAQzO,KAAKwX,eAAezU,MACjC,IACF,EAAAoL,cAAcgR,SACZq4I,GACDx3J,KAAKyO,QAAQzO,KAAKwX,eAAe5X,EAChCI,KAAKyO,QAAQzO,KAAKwX,eAAevU,MACjC,IACF,EAAAkL,cAAcgR,SAEhBzd,EAAKY,IAAIuO,WACN/O,KAAKwC,MAAMizJ,EAAWF,EAAgB,GAAM,EAAAlpJ,cAAc2C,QAC1DhP,KAAKwC,MAAMkzJ,EAAWF,EAAgB,GAAM,EAAAnpJ,cAAc6C,SAG7D,IAAIymJ,EAAgB31J,KAAKgB,MACvB9C,KAAKi1J,MACFhwJ,KAAKC,MAAQlF,KAAKq0J,qBACjB,EAAA7uJ,eAAes/B,sBACjB,EACA,EAAA32B,cAAcgR,WAIdu4I,EAAkBL,EAClBM,EAAkBL,EAElBt3J,KAAK20J,eACH30J,KAAK40J,wBAA0B,GACjCuC,GAAgBM,EAChBC,GAAmBD,EAAgB,EAAAtpJ,cAAcgR,WAEjDg4I,GAAgBM,EAChBC,GAAmBD,EAAgB,EAAAtpJ,cAAcgR,UAE1Cnf,KAAK00J,kBACd0C,GAAgBK,EAChBE,GAAmBF,EAAgB,EAAAtpJ,cAAcgR,WAEjDi4I,GAAgBK,EAChBE,GAAmBF,EAAgB,EAAAtpJ,cAAcgR,UAGjCrd,KAAKgB,MACpB,GAAKmC,KAAKC,MAAQlF,KAAKq0J,qBACtB,EAAA7uJ,eAAes/B,uBAGnBpjC,EAAKY,IAAIuO,UAAUsmJ,EAAcC,GAC5B,EAAAjpJ,cAAc+nH,iBACjBl2H,KAAKo0J,UAAUjyJ,KAAKC,GACpBpC,KAAKo0J,UAAU1qE,aAAatnF,GAC5BpC,KAAKo0J,UAAUxtE,iBACf5mF,KAAKo0J,UAAU7pE,UAAUnoF,GACzBpC,KAAKo0J,UAAU1pE,cAActoF,IAmB/BV,EAAKY,IAAIuO,WAAWsmJ,GAAeC,GAEnC11J,EAAKY,IAAIuO,UAAU6mJ,EAAiBC,GAEhC,EAAAxpJ,cAAc+nH,iBAChBl2H,KAAK62J,UAAUz0J,GAAO,GAEtBV,EAAKY,IAAIuO,WAAW6mJ,GAAkBC,GACtCj2J,EAAKY,IAAIuO,UAAUwmJ,EAAeC,GAClCt3J,KAAKyO,QAAQzO,KAAKwX,eAAerV,KAAKC,GAEtCV,EAAKY,IAAIuO,WAAWwmJ,GAAgBC,GACpC51J,EAAKY,IAAIuO,UAAU6mJ,EAAiBC,GAEpC33J,KAAK+2J,sBAAsB30J,IAG7B,IACE,IAAIzC,EAAIK,KAAKP,KAAKkL,MAAQ,EAC1BhL,GAAKK,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MACjClL,IAEA,IACE,IAAIC,EAAII,KAAKP,KAAKsL,MAAQ,EAC1BnL,GAAKI,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OACjCrL,KAQJ8B,EAAKY,IAAIuO,WAAW6mJ,GAAkBC,GAEtCj2J,EAAKY,IAAIuO,UACP/O,KAAKwC,MAAMizJ,EAAWF,EAAgB,GAAM,EAAAlpJ,cAAc2C,OAC1DhP,KAAKwC,MAAMkzJ,EAAWF,EAAgB,GAAM,EAAAnpJ,cAAc6C,SAG5DhR,KAAKyO,QAAQzO,KAAKwX,eAAes9B,QAAQ1yC,GACzCpC,KAAKgzJ,kBAAmB,C,MAGnB,GAAIhzJ,KAAK64D,aAAeC,EAAWkD,qBAAsB,CAC9D,IAAIu7F,GACDv3J,KAAKyO,QAAQzO,KAAKwX,eAAe7X,EAChCK,KAAKyO,QAAQzO,KAAKwX,eAAezU,MACjC,IACF,EAAAoL,cAAcgR,SACZq4I,GACDx3J,KAAKyO,QAAQzO,KAAKwX,eAAe5X,EAChCI,KAAKyO,QAAQzO,KAAKwX,eAAevU,MACjC,IACF,EAAAkL,cAAcgR,SAEhBzd,EAAKY,IAAIuO,WACN/O,KAAKwC,MAAMizJ,EAAW,GAAM,EAAAppJ,cAAc2C,QAC1ChP,KAAKwC,MAAMkzJ,EAAW,GAAM,EAAArpJ,cAAc6C,SAG7C,IAAI4mJ,EAAa,EACbC,EAAc/1J,KAAKgB,OACnB,GAAQ80J,IAAe3yJ,KAAKC,MAAQlF,KAAKq0J,qBACzC,EAAA7uJ,eAAeu/B,8BAQnB,GALArjC,EAAKY,IAAIuO,UACP/O,KAAKwC,MAAMizJ,EAAW,GAAM,EAAAppJ,cAAc2C,OAC1ChP,KAAKwC,MAAMkzJ,EAAW,GAAM,EAAArpJ,cAAc6C,SAGxC6mJ,EAAc,GAIhB,GAHA73J,KAAK62J,UAAUz0J,GACfpC,KAAK+2J,sBAAsB30J,IAEtB,EAAA+L,cAAc+nH,eACjB,IACE,IAAIv2H,EAAIK,KAAKP,KAAKkL,MAAQ,EAC1BhL,GAAKK,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MACjClL,IAEA,IACE,IAAIC,EAAII,KAAKP,KAAKsL,MAAQ,EAC1BnL,GAAKI,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OACjCrL,IAEA8B,EAAKwE,OAAO,EAAI2xJ,EAAa,GAAI,EAAG,EAAGl4J,EAAGC,EAAG,EAAG,QAIjD,GAAIi4J,GAAe,EAAID,IACxB53J,KAAKs0J,sBAGPt0J,KAAKP,KAAOO,KAAKs0J,oBAAoB57I,WAGrC1Y,KAAKP,KAAKsiF,WAAW/hF,KAAKyO,QAAQzO,KAAKwX,gBACvCxX,KAAKs0J,oBAAsB,MAG7Bt0J,KAAK62J,UAAUz0J,GACfpC,KAAK+2J,sBAAsB30J,IAKtB,EAAA+L,cAAc+nH,gBACjB,IACE,IAAIv2H,EAAIK,KAAKP,KAAKkL,MAAQ,EAC1BhL,GAAKK,KAAKP,KAAKkL,MAAQ3K,KAAKP,KAAKoL,MACjClL,IAEA,IACE,IAAIC,EAAII,KAAKP,KAAKsL,MAAQ,EAC1BnL,GAAKI,KAAKP,KAAKsL,MAAQ/K,KAAKP,KAAKwL,OACjCrL,IAEA8B,EAAKwE,OAAO2xJ,GAAe,EAAID,GAAa,GAAI,EAAG,EAAGj4J,EAAGC,EAAG,EAAG,GAOvEI,KAAKknE,eAAe,gB,MACf,GAAIlnE,KAAK64D,aAAeC,EAAW0uC,iBACxCxnG,KAAK+Y,SAAS5W,KAAKC,QACd,GAAIpC,KAAK64D,aAAeC,EAAWC,SAAU,CAGlD/4D,KAAK83J,gBAAgB11J,GAErB,MAAM,QAAE8yF,EAAO,QAAEE,GAAYp1F,KAAK+3J,YAAY31J,GAE9CV,EAAKY,IAAIuO,WAAWqkF,GAAUE,GAC9Bp1F,KAAK62J,UAAUz0J,GACfpC,KAAK+2J,sBAAsB30J,GAO3BV,EAAKY,IAAIuO,UAAUqkF,EAASE,GAE5Bp1F,KAAKP,KAAK4D,aAAajB,GACvBpC,KAAKyO,QAAQzO,KAAKwX,eAAes9B,QAAQ1yC,E,CAG3CpC,KAAKg4J,SAAS51J,GAGV,EAAA+L,cAAcoc,gBAAe7oB,EAAKY,IAAIE,YAAc,IACxDd,EAAKY,IAAIoP,UAAY,EAAAlM,eAAe8/B,iBACpC5jC,EAAK2c,SACH,EAAAlQ,cAAc0wC,QACd,EAAA1wC,cAAc2C,MAAQpP,EAAK4oB,YAAY,EAAAnc,cAAc0wC,SAASh0C,MAAQ,EACtE,GAEFnJ,EAAKY,IAAIE,YAAc,EAGnB,EAAA2L,cAAcoc,gBAAe7oB,EAAKY,IAAIE,YAAc,IACxDd,EAAKY,IAAIoP,UAAY,EAAAlM,eAAe8/B,iBACpC5jC,EAAK2c,SAASm0I,EAAM,MAAO,EAAG,GAC9B9wJ,EAAKY,IAAIE,YAAc,EAClBxC,KAAKi8D,SAAWj8D,KAAK64D,aAAeC,EAAW0uC,kBAClDxnG,KAAKg3J,gBAAwB,GAAR50J,GAInBpC,KAAKmzJ,uBACPnzJ,KAAKmzJ,sBAAsBhxJ,KAAK,GAAI,GAAI,GAG1C,EAAAo3C,YAAYC,cAAcr3C,KAAKC,EAAOpC,KAAKsvB,UAC3C5tB,EAAKY,IAAIc,WAGX,KAAA40J,SAAY51J,IACV,MAEM61J,EAAiB,EAAA9pJ,cAAc8vD,wBACjCn8D,KAAKC,KAAK/B,KAAK2yJ,iBAAmBjxJ,EAAKqP,OACvC,EACEmnJ,EACJ,EAAA/pJ,cAAc6C,OAAStP,EAAKg0C,cAAgB,GAAKuiH,EAC7CE,EAAen4J,KAAKyO,UAAUzO,KAAKwX,gBAAgB3W,UAAUuc,OAC/D,IACA,EACEg7I,EAAiB,EAAAjqJ,cAAc2C,MAAQ,EACvCunJ,EAAc32J,EAAKg0C,cAAgB,EAEzC,IAAI4iH,EAD0B,EAG9B,GAAIt4J,KAAKs8D,SAAU,CACjB56D,EAAKY,IAAIoP,UAAY,QACjB,EAAAvD,cAAcoc,gBAAe7oB,EAAKY,IAAIE,YAAc,KACxDd,EAAKY,IAAIqP,SAAS,EAAG,EAAG,EAAAxD,cAAc2C,MAAO,EAAA3C,cAAc6C,QAE3DtP,EAAKY,IAAIE,YAAc,EACvBd,EAAKY,IAAIoP,UAAY,QACrBhQ,EAAK2c,SAASre,KAAKm+D,YAAYvoC,KAtBlB,EAsBgCsiI,GAC7C,MAAM7vD,EAAU3mG,EAAK4oB,YACnBtqB,KAAKm+D,YAAYvoC,KAAKC,UAAU,EAAG71B,KAAKm+D,YAAYroC,SACpDjrB,MACFnJ,EAAKY,IAAIqP,SA1BI,EA0Bc02F,EAAS6vD,EAAe,EAAGx2J,EAAKg0C,c,CAI7D,IAAI6iH,EAAc,EAClB,MAAMC,EAA2B,GAEjC,IAAK,IAAIxyJ,EAAI,EAAGA,EAAIhG,KAAKuiH,KAAKxhH,OAAQiF,IAAK,CACzC,MACMyyJ,EADQz4J,KAAKuiH,KAAKv8G,GAAGgsJ,gBAAgBoG,GACfr3J,OAASs3J,EACrCG,EAAexuJ,KAAKyuJ,GACpBF,GAAeE,C,CAIjB,IAAIzzF,EAAWkzF,EACXl4J,KAAKs8D,WACP0I,GAAYqzF,GAGd,IAAK,IAAIryJ,EAAIhG,KAAKuiH,KAAKxhH,OAAS,EAAGiF,GAAK,EAAGA,IAAK,CAC9C,MAAM8qB,EAAU9wB,KAAKuiH,KAAKv8G,GACpBovC,EAAQtkB,EAAQkhI,gBAAgBoG,GAChCK,EAAgBD,EAAexyJ,GAG/B0yJ,EAAMzzJ,KAAKC,MAAQ4rB,EAAQ0gG,UACjC,IAAI/uH,EAAQ,EAEPzC,KAAKs8D,WAEN75D,EADEi2J,GAAO,EAAAvqJ,cAAc0nH,iBACf,EAAA1nH,cAAcoc,cAAgB4tI,EAAe,EAErDO,GACA,EAAAvqJ,cAAc0nH,iBAAmB,EAAA1nH,cAAc2nH,eAEvC,EAAA3nH,cAAcoc,cAClB4tI,GACC,GACEO,EAAM,EAAAvqJ,cAAc0nH,kBACnB,EAAA1nH,cAAc2nH,gBAClB,EAEI,GAIZ,IAAI6iC,EAAwB,EAC5B,GAAIl2J,EAAQ,EAAG,CAEbf,EAAKY,IAAIoP,UAAY,QAIrBhQ,EAAKY,IAAIE,YAAcC,EAGvB,IAAIm2J,EAAQ5zF,EACZ,GAAIhlE,KAAKs8D,SAAU,CACjB,IAAK,IAAIu8F,EAAYzjH,EAAMr0C,OAAS,EAAG83J,GAAa,EAAGA,IACrDn3J,EAAK2c,SAAS+2B,EAAMyjH,GAtFb,EAsFiCD,GACxCA,GAASP,EAEXM,EAAwBvjH,EAAMr0C,M,KACzB,CACL,MAAM2uG,EAAU5tG,KAAK4D,IAAI,EAAG4yJ,GACtBQ,EAAYh3J,KAAKyD,IAAI6vC,EAAMr0C,OAAQ2uG,GACnC5oF,EAAasuB,EAAMr0C,OAAS+3J,EAClC,IACE,IAAID,EAAYzjH,EAAMr0C,OAAS,EAC/B83J,GAAa/xI,EACb+xI,IAEAn3J,EAAK2c,SAAS+2B,EAAMyjH,GAnGb,EAmGiCD,GACxCA,GAASP,EAEXM,EAAwBG,EACxBR,GAAkBQ,C,EAWtB,GANI94J,KAAKs8D,SACP0I,GAAYyzF,EAEZzzF,GAAY2zF,EAAwBN,GAGjCr4J,KAAKs8D,UAAYg8F,GAAkB,EACtC,K,CAKJ52J,EAAKY,IAAIE,YAAc,GAkBzB,KAAAu2J,aAAe,CAACvzI,EAAiBC,KAC/B,IAAIyvE,EAAUpzF,KAAKwC,OAChBkhB,EAAU,IAAO,EAAArX,cAAcgR,SAAW,GAAM,EAAAhR,cAAc2C,OAE7DskF,EAAUtzF,KAAKwC,OAChBmhB,EAAU,IAAO,EAAAtX,cAAcgR,SAAW,GAAM,EAAAhR,cAAc6C,QAEjEhR,KAAKg5J,cAAgB9jE,EACrBl1F,KAAKi5J,cAAgB7jE,GAGvB,KAAA8jE,aAAgB92J,IACd,MAAMiO,EAAKrQ,KAAKg5J,cAAgBh5J,KAAKk1F,QAC/B5kF,EAAKtQ,KAAKi5J,cAAgBj5J,KAAKo1F,QAErC,IAAIszB,EAAQ,EAAAv6G,cAAcinH,aAEtBp1H,KAAKgzJ,mBACPtqC,EAAQ,EACR1oH,KAAKgzJ,kBAAmB,GAGtBhzJ,KAAK27D,gBAAgB1E,OAGvByxD,EAAQ1oH,KAAK27D,gBAAgBG,KAAO,GAAM,MACjCh6D,KAAKgG,IAAIuI,GAAM,KAAOvO,KAAKgG,IAAIwI,GAAM,OAE9Co4G,EAAQ,IAGL5mH,KAAKgG,IAAIuI,GAAM,GAAKvO,KAAKgG,IAAIwI,GAAM,IAAgB,IAAVo4G,GAC5C1oH,KAAKk1F,SAAW7kF,EAAKq4G,EAAQtmH,EAC7BpC,KAAKo1F,SAAW9kF,EAAKo4G,EAAQtmH,IAE7BpC,KAAKk1F,QAAUl1F,KAAKg5J,cACpBh5J,KAAKo1F,QAAUp1F,KAAKi5J,gBAKxB,KAAAlB,YAAe31J,IACb,IAAIyK,EAAS7M,KAAKyO,QAAQzO,KAAKwX,eAS/B,OAPAxX,KAAK+4J,aAAalsJ,EAAOlN,EAAIkN,EAAO9J,MAAO8J,EAAOjN,EAAIiN,EAAO5J,OAC7DjD,KAAKm5J,sBAAsB/2J,GAC3BpC,KAAKk5J,aAAa92J,GAKX,CACL8yF,QAJqBpzF,KAAKwC,MAAMtE,KAAKk1F,QAAUl1F,KAAKm1F,cAKpDC,QAJqBtzF,KAAKwC,MAAMtE,KAAKo1F,QAAUp1F,KAAKq1F,gBAQxD,KAAAyiE,gBAAmB11J,IACZpC,KAAKw2J,mBAKVx2J,KAAKy2J,cAAgB,IAAOr0J,EAC5BpC,KAAK02J,cAAgB,IAAOt0J,EAC5BpC,KAAKm1F,aAAerzF,KAAKq3C,IAAIn5C,KAAK22J,WAAa70J,KAAKyrC,IAAMvtC,KAAKy2J,aAC/Dz2J,KAAKq1F,aAAevzF,KAAKq3C,IAAIn5C,KAAK22J,WAAa70J,KAAKyrC,IAAMvtC,KAAK02J,aAC/D12J,KAAK22J,YAAc,IAAOv0J,EAGxBN,KAAKgG,IAAI9H,KAAKy2J,cAAgB,IAC9B30J,KAAKgG,IAAI9H,KAAK02J,cAAgB,IAE9B12J,KAAKo5J,oBAdLp5J,KAAKo5J,oBAkBD,KAAAA,iBAAmB,KACzBp5J,KAAKy2J,aAAe,EACpBz2J,KAAK02J,aAAe,EACpB12J,KAAK22J,WAAa,EAClB32J,KAAKm1F,aAAe,EACpBn1F,KAAKq1F,aAAe,EACpBr1F,KAAKw2J,mBAAoB,GAG3B,KAAA2C,sBAAyB/2J,IAEvB,IAAKpC,KAAK27D,gBAAgB1E,OAAQ,OAClC,MAAMyxD,EAAQ1oH,KAAK27D,gBAAgBG,KAAO,GAAK,EAE5C97D,KAAK27D,gBAAgBp4D,MAAQvD,KAAK27D,gBAAgBn4B,SAAYklF,EAEnD,IACZ1oH,KAAK+4J,aAAa/4J,KAAK27D,gBAAgBh8D,EAAGK,KAAK27D,gBAAgB/7D,GAEjEI,KAAK27D,gBAAgBp4D,OAASnB,GAASpC,KAAK27D,gBAAgBG,KAAO,GAAK,GACpE97D,KAAK27D,gBAAgBp4D,MAAQvD,KAAK27D,gBAAgBn4B,WACpDxjC,KAAK27D,gBAAgB1E,QAAS,IAIlC,KAAAoiG,oBAAsB,KAChBr5J,KAAK27D,gBAAgB1E,SACvBj3D,KAAK27D,gBAAgB1E,QAAS,EAE9Bj3D,KAAKk1F,QAAUl1F,KAAKg5J,cACpBh5J,KAAKo1F,QAAUp1F,KAAKi5J,gBAIxB,KAAA1sE,qBAAuB,CAAC5sF,EAAWC,EAAW4jC,KAE5CxjC,KAAK27D,gBAAgB1E,QAAS,EAC9Bj3D,KAAK27D,gBAAgBh8D,EAAIA,EACzBK,KAAK27D,gBAAgB/7D,EAAIA,EACzBI,KAAK27D,gBAAgBn4B,SAAWA,EAChCxjC,KAAK27D,gBAAgBp4D,MAAQ,EAC7BvD,KAAK27D,gBAAgBG,MAAO,EAC5B,MAAMw9F,EAAUt5J,KAAKsvB,SACjB,+BACA,gDACJtvB,KAAK80B,YAAYwkI,IAGnB,KAAApyF,eAAiB,CAACtxC,EAAc2jI,GAAc,KACxCA,IACF73J,EAAKY,IAAIoP,UAAY,eACrBhQ,EAAKY,IAAIqP,SAAS,EAAG,EAAG,EAAAxD,cAAc2C,MAAO,EAAA3C,cAAc6C,SAE7D,MAAMwoJ,EAAWx5J,KAAKy5J,kBAChBC,EAAah4J,EAAK4oB,YAAYsL,EAAO4jI,GAE3C93J,EAAKY,IAAIoP,UAAY,qBACrBhQ,EAAK2c,SACHuX,EAAO4jI,EACP,EAAArrJ,cAAc2C,MAAQ,EAAI4oJ,EAAW7uJ,MAAQ,EAC7C,EAAAsD,cAAc6C,OAAS,EAAI0oJ,EAAWzuJ,OAAS,IAInD,KAAAwuJ,gBAAkB,KACZx0J,KAAKC,MAAQlF,KAAK+yJ,kBAAoB,MACxC/yJ,KAAK+yJ,kBAAoB9tJ,KAAKC,MAC9BlF,KAAK8yJ,eAAiB9yJ,KAAK8yJ,cAAgB,GAAK,GAE3C,IAAIr8E,OAAOz2E,KAAK8yJ,gBAqVjB,KAAA6G,iBAAmB,KAEzB35J,KAAKozJ,aAAe3hI,OAAOxN,WAAW,KAEpCjkB,KAAKszJ,SAAW,EAAAlyJ,MAAM6xB,WACtBjzB,KAAKuzJ,WAAavzJ,KAAKi8D,QAGvB,EAAA76D,MAAM6xB,YAAa,EAEnBjzB,KAAKo/F,QAAS,EAGdp/F,KAAK80B,YAAY,kCAChB90B,KAAKqzJ,yBAGF,KAAAuG,kBAAoB,KAEtB55J,KAAKozJ,eACPjvF,aAAankE,KAAKozJ,cAClBpzJ,KAAKozJ,aAAe,MAIlBpzJ,KAAKo/F,SACP,EAAAh+F,MAAM6xB,WAAajzB,KAAKszJ,SACxBtzJ,KAAKi8D,QAAUj8D,KAAKuzJ,WACpBvzJ,KAAKo/F,QAAS,EAGdp/F,KAAK80B,YAAY,kBAl+EnB90B,KAAK6Z,SAAW,EAAAwU,YAAYrV,SAAS,KACrChZ,KAAKy8C,UAAY,IAAInvC,IACrBtN,KAAKy/G,WAAa,IAAInyG,IAEtBmkB,OAAOqF,iBAAiB,OAAQ,KAC9B,IAAIq3B,EAAShC,SAAS+qB,eAAe,cACrCx1E,EAAKY,IAAO6rD,EAA6B7B,WAAW,KAAM,CACxD7pD,OAAO,IAIT,MAAMo3J,EAAkB1tG,SAASC,cAAc,SAC/CytG,EAAgB91J,KAAO,OACvB81J,EAAgBC,aAAe,MAC/BD,EAAgBE,eAAiB,MACjCF,EAAgBziI,MAAMjvB,SAAW,WACjC0xJ,EAAgBziI,MAAMC,KAAO,UAK7B,MAAM2iI,EAAc7tG,SAASC,cAAc,SAC3C4tG,EAAYj2J,KAAO,OACnBi2J,EAAYF,aAAe,MAC3BE,EAAYD,eAAiB,MAC5BC,EAAoBC,YAAc,MACnCD,EAAYE,YAAa,EACzBF,EAAYG,UAAY,OACxBH,EAAY5iI,MAAMjvB,SAAW,WAC7B6xJ,EAAY5iI,MAAMC,KAAO,UAGzB80B,SAAS2lE,KAAKC,YAAYioC,GAE1B7tG,SAASr1B,iBACP,QACA,KACE+iI,EAAgBxjI,SAElB,CAAE2oE,MAAM,IAGVh/F,KAAKuiH,KAAO,GACZviH,KAAKm+D,YAAc,IAAI,EAAAi8F,QAAQJ,GAC/Bh6J,KAAKm+D,YAAYpnC,iBAAiB,KAC5B/2B,KAAKm+D,YAAYvoC,KAAK70B,OAAS,GACjCf,KAAKuiH,KAAKv4G,KAAK,IAAI6nJ,EAAY7xJ,KAAKm+D,YAAYvoC,OAChD51B,KAAKm+D,YAAYjqC,SAEjBl0B,KAAKs8D,UAAW,IAGpBt8D,KAAKm+D,YAAYlnC,kBAAkB,KACjCj3B,KAAKs8D,UAAW,IAElBt8D,KAAKq6J,WAAa,GAClBr6J,KAAKs6J,kBAAoB,EAEzB54J,EAAKq/E,eAAiB,CAAC,EACvBr/E,EAAKs/E,wBAA0B,CAAC,EAEhC,IAAIu5E,EAAkB,EAGtB74J,EAAK84J,QAAU,IAAIjvF,MACnB7pE,EAAK84J,QAAQ/uF,OAAS,KACpB8uF,KAEF74J,EAAK84J,QAAQlqI,IAAMmqI,EACnB/4J,EAAKg5J,OAAS,IAAInvF,MAClB7pE,EAAKg5J,OAAOjvF,OAAS,KACnB8uF,KAEF74J,EAAKg5J,OAAOpqI,IAAMqqI,EAClBj5J,EAAKk5J,OAAS,IAAIrvF,MAClB7pE,EAAKk5J,OAAOnvF,OAAS,KACnB8uF,KAEF74J,EAAKk5J,OAAOtqI,IAAMuqI,EAClBn5J,EAAKo5J,QAAU,IAAIvvF,MACnB7pE,EAAKo5J,QAAQrvF,OAAS,KACpB8uF,KAEF74J,EAAKo5J,QAAQxqI,IAAMyqI,EACnBr5J,EAAKs5J,MAAQ,IAAIzvF,MACjB7pE,EAAKs5J,MAAMvvF,OAAS,KAClB8uF,KAEF74J,EAAKs5J,MAAM1qI,IAAM2qI,EACjBv5J,EAAKw5J,UAAY,IAAI3vF,MACrB7pE,EAAKw5J,UAAUzvF,OAAS,KACtB8uF,KAEF74J,EAAKw5J,UAAU5qI,IAAM6qI,EAErBn7J,KAAK64D,WAAaC,EAAW0uC,iBAG7BxnG,KAAKk1F,QAAU,EACfl1F,KAAKo1F,QAAU,EACfp1F,KAAKg5J,cAAgB,EACrBh5J,KAAKi5J,cAAgB,EAErB,IAAImC,EAAuB,KACzB,GAAIb,EA1CgB,EA2ClB9oI,OAAOxN,WAAWm3I,EAAsB,SACnC,CAwDL,GArDA15J,EAAKqP,MAAQ,EAAA5C,cAAc2gC,MAE3Bqd,SAASr1B,iBACP,aACA,SAAU7vB,GACJA,EAAE8wB,QAAUo2B,GACdlnD,EAAEqvB,gBAEN,GACA,GAEF61B,SAASr1B,iBACP,WACA,SAAU7vB,GACJA,EAAE8wB,QAAUo2B,GACdlnD,EAAEqvB,gBAEN,GACA,GAEF61B,SAASr1B,iBACP,YACA,SAAU7vB,GACJA,EAAE8wB,QAAUo2B,GACdlnD,EAAEqvB,gBAEN,GACA,GAGF61B,SAASr1B,iBAAiB,aAAc,EAAAkiC,MAAM5iC,iBAAkB,CAC9DojD,SAAS,IAEXrtB,SAASr1B,iBAAiB,YAAa,EAAAkiC,MAAM6f,gBAAiB,CAC5DW,SAAS,IAEXrtB,SAASr1B,iBAAiB,WAAY,EAAAkiC,MAAMigB,eAAgB,CAC1DO,SAAS,IAGX,EAAAxgB,MAAM0b,gBAAmBl/C,IACvBx1B,KAAK00E,gBAAgBl/C,IAGvB/D,OAAOF,sBAAsBvxB,KAAK60J,KAClC70J,KAAKw1J,WACL/jI,OAAOqF,iBAAiB,SAAU92B,KAAKw1J,UACvC/jI,OAAOqF,iBAAiB,oBAAqB,KAE3C7S,WAAWjkB,KAAKw1J,SAAU,OAIxB,EAAArnJ,cAAc8vD,wBAChB,IACE,MAAMo9F,EAAM5pI,OAAe6pI,eAC3B,GAAID,GAAqC,mBAAxBA,EAAGvkI,iBAAiC,CACnD,MAAMykI,EAAiB,KAErB,MAAMC,EAAU/pI,OAAOgT,YACjBg3H,EAAUJ,EAAGpwJ,OACbqF,EAAKxO,KAAK4D,IACd,EACA81J,EAAUC,GAAWJ,EAAGK,WAAa,IAEvC17J,KAAK2yJ,iBAAmBriJ,GAE1B+qJ,EAAGvkI,iBAAiB,SAAUykI,GAC9BF,EAAGvkI,iBAAiB,SAAUykI,E,KACzB,CAEL,IAAII,EAAWlqI,OAAOgT,YACtBhT,OAAOqF,iBAAiB,SAAU,KAChC,MAAMy0D,EAAU95D,OAAOgT,YACvBzkC,KAAK2yJ,iBAAmB7wJ,KAAK4D,IAAI,EAAGi2J,EAAWpwE,GAC3CA,EAAUowE,IAAUA,EAAWpwE,I,EAGvC,MAAM,MAERvrF,KAAK2yJ,iBAAmB,EAK1B3yJ,KAAKyO,QAAU,CAAC,EAChBzO,KAAK2c,eAAiB,CAAC,EACvB3c,KAAKs8D,UAAW,EAChBt8D,KAAK27D,gBAAkB,IAAI,EAAAigG,gBAAgB,EAAG,EAAG,IAAM,EAAG,GAAG,GAC7D57J,KAAKi3C,eAAiB,IAAI,EAAAmT,eAGtB,EAAAj8C,cAAc8vD,yBAChB,EAAAjF,MAAM6B,mBAAmB7wD,KAAK,CAACrK,EAAWC,KACxC,IAAKI,KAAKsvB,SAAU,OAEpB,MAAM2yF,EAAcjiH,KAAKyO,UAAUzO,KAAKwX,eACpCyqG,GAAeA,EAAY5/G,MAE3BrC,KAAKs8D,UACLt8D,KAAKk+D,qBAAqBv+D,EAAGC,KAC/BI,KAAKs8D,UAAW,EAChBt8D,KAAKm+D,YAAY9nC,QACjB,EAAA2iC,MAAM4D,kBAAmB,KAK/B58D,KAAKm1F,aAAe,EACpBn1F,KAAKq1F,aAAe,EACpBr1F,KAAKy2J,aAAe,EACpBz2J,KAAK02J,aAAe,EACpB12J,KAAK22J,WAAc,EAAI70J,KAAKyrC,GAAM,EAClCvtC,KAAK42J,kBAAoB,EACzB52J,KAAK0gE,gBAAiB,EACtB1gE,KAAKw2J,mBAAoB,EACzBx2J,KAAK+N,OAAS,GACd/N,KAAKiqJ,mBAAqB,GAE1BjqJ,KAAK8iE,UAEL,IACE,MAAM,UAAEpzB,GAAc,EAAQ,MAE9B,GADkBA,EAAU,gBACf,CACX,MAAM,KAAEg7D,GAAS,EAAQ,MACzB1qG,KAAKo+D,UAAY,IAAIssC,EAAK,CAAEhrG,KAAMM,KAAMihE,iBAAiB,IACzDjhE,KAAKo+D,UAAU6E,iBACfjjE,KAAKo+D,UAAUgG,WACfpkE,KAAK49D,iBAAkB,C,EAEzB,MAAM,C,GAGZw9F,MAEF,EAAA/rI,aAAa2B,aAEb,EAAA5vB,MAAMssJ,aAEN1tJ,KAAKi8D,SAAU,EACfj8D,KAAKyd,iBAAmB,KAExBzd,KAAKytG,sBAEL,EAAA5oF,eAAe1J,GAAG,EAAA4J,OAAOmsD,yBAA0B,KACjDlxE,KAAK64D,WAAaC,EAAW0uC,mBAE/B,EAAA3iF,eAAe1J,GAAG,EAAA4J,OAAOosD,2BAA4B,KACnDnxE,KAAK64D,WAAaC,EAAWC,UAMjC,CAuFQ,eAAAi7F,CAAgB7hF,GAEtB,EAAA6sC,GAAA,KAAU7sC,GAAyB,WAAhBrwE,KAAK0hF,WAA2B,EACnD,EAAAw7B,GAAA,YAAiB,EAAAA,GAAG7sC,MACpB,IAAA8B,eAAcj0E,KAAM,CAACA,KAAKwX,eAAgB,EAAAwnG,IAAI,GAE9C,IACE,MAAM,aAAExvE,GAAiB,EAAQ,MACjCA,EAAaxvC,K,CACb,MAAM,CACRA,KAAK64D,WAAaC,EAAW0uC,iBAC7BxnG,KAAK+iF,cAAczQ,eAAe,EAAA0sC,GAAG7sC,KAAMnyE,KAC7C,CAusBQ,mBAAAytG,GAEN,EAAA5oF,eAAe1J,GAAG,cAAenb,KAAKutG,eAAexO,KAAK/+F,OAC1D,IAEE,MAAM67J,EAAa,KACjB,IACE,MAAM,cAAEl5F,GAAkB,EAAQ,MAElCA,EAAc3iE,K,CACd,MAAM,GAEVyxB,OAAOqF,iBAAiB,eAAgB+kI,GACxC1vG,SAASr1B,iBAAiB,mBAAoB,KACX,WAA7Bq1B,SAAS2vG,iBAA8BD,MAE7CpqI,OAAOqF,iBAAiB,WAAY+kI,GACpCpqI,OAAOqF,iBAAiB,SAAU,KAChC,IACE,MAAM,MAAE11B,GAAU,EAAQ,MAC1BA,EAAM6yB,W,CACN,MAAM,IAGVxC,OAAOqF,iBAAiB,WAAY+kI,GACpCpqI,OAAOqF,iBAAiB,aAAc+kI,E,CACtC,MAAM,CACV,CAEQ,yBAAAnG,GAEN,MAAMqG,EAA+C,CACnD,SACA,QACA,WAEI93G,EAAU83G,EAASj6J,KAAKgB,MAAM,EAAAlB,OAAOC,OAASk6J,EAASh7J,SAGvDgvH,EAAW,EAAIjuH,KAAKgB,MAAsB,GAAhB,EAAAlB,OAAOC,QACjCgJ,EAAQ,GAAK/I,KAAKgB,MAAsB,GAAhB,EAAAlB,OAAOC,QAC/BoJ,EAAS,GAAKnJ,KAAKgB,MAAsB,GAAhB,EAAAlB,OAAOC,QAEhC4wH,EAAY,EAAAnD,oBAAoBkD,oBACpC3nH,EACAI,EACA8kH,EACA,EAAAnuH,OAAOC,KACPoiD,GAII+3G,EAAavpC,EAAUE,qBACvBspC,EAAoBD,EACtB,yBACA,4BAGJh8J,KAAKmzJ,sBAAwB1gC,EAE7BzyH,KAAK80B,YACH,aAAai7F,YAAmB9rE,gBAAsBg4G,KAExDj8J,KAAK80B,YAAY,2DAGjB,MAIMy8F,EAAW,GAAGttE,KAAWp5C,KAASI,KAAU8kH,WAJhC,IAAI9qH,MACnBwsH,cACA3pG,MAAM,EAAG,IACTo8B,QAAQ,QAAS,WAGpBuuE,EAAUnB,QAAQC,GAClBvxH,KAAK80B,YAAY,kCAAkCy8F,KACnDvxH,KAAK80B,YAAY,mDAGb,EAAA3mB,cAAcC,gBAChBvE,QAAQ+C,IAAI,2BAA4B,CACtCq3C,UACAy1G,WAAY,GAAG7uJ,KAASI,IACxB8kH,WACAisC,aACA/tJ,MAAOwkH,EAAUC,YAGvB,CAq0BO,oBAAAx0D,CAAqBv+D,EAAWC,GAErC,MAEMs8J,EADcx6J,EAAKg0C,cAAgB,EACH,EAGhC0iH,EAAiB,EAAAjqJ,cAAc2C,MAAQ,EACvCumB,EAAOv1B,KAAK4D,IAAI,EAAGy2J,GACnB7kI,EAAQx1B,KAAKyD,IAAI,EAAA4I,cAAc2C,MAHtB,EAGsCsnJ,GAC/C5gI,EAAS,EAAArpB,cAAc6C,OARd,EASTumB,EAAMz1B,KAAK4D,IAAI,EAAG8xB,EAAS0kI,EAAkB,IACnD,OAAOv8J,GAAK03B,GAAQ13B,GAAK23B,GAAS13B,GAAK23B,GAAO33B,GAAK43B,CACrD,CA4gBA,OAAA8xF,GACE73F,OAAOoG,oBAAoB,OAAQ73B,KAAK25J,kBACxCloI,OAAOoG,oBAAoB,QAAS73B,KAAK45J,mBACrC55J,KAAKozJ,cACPjvF,aAAankE,KAAKozJ,aAEtB,EA1mFF,SAEiB,EAAAX,eAAuC,KAgD/C,EAAAthI,eAAgB,EA0CP,EAAAirI,QACd,qDACc,EAAAC,cAAgB,CAC9B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE1D,EAAA3mH,cAAgB,EACzB,EAAA4mH,iBAAmB,GAGnB,EAAAz6J,KAAO,CAAC0D,EAAaG,EAAa7D,IACnC6D,EAAMH,EAAYA,EACfzD,KAAKgB,MAAMjB,KAAU6D,EAAMH,EAAM,GAAKA,GAGxC,EAAA5D,UAAY,CAACmxF,EAAcjxF,IACzBixF,EAAMpxF,EAAKG,KAAK,EAAGixF,EAAM/xF,OAAS,EAAGc,IAm6CvC,EAAAyoB,YAAesL,IACpB,IAAI9f,EAAI,EACR,IAAK,MAAMymJ,KAAU3mI,EAAKF,cACxB,GAAe,MAAX6mI,EAAgBzmJ,GAAK,OAEvB,IAAK,IAAI9P,EAAI,EAAGA,EAAItE,EAAK06J,QAAQr7J,OAAQiF,IACnCtE,EAAK06J,QAAQp2J,KAAOu2J,IACtBzmJ,GAAKpU,EAAK26J,cAAcr2J,GAAK,GAIrC,MAAO,CAAE6E,MAAOiL,EAAG7K,OAAQvJ,EAAKg0C,gBAG3B,EAAAr3B,SAAW,CAACuX,EAAcj2B,EAAWC,EAAWqyJ,KAIrD,GAHAtyJ,EAAImC,KAAKwC,MAAM3E,GACfC,EAAIkC,KAAKwC,MAAM1E,GAEsB,IAAjC8B,EAAK46J,iBAAiBv7J,OAExB,IAAK,IAAIiF,EAAI,EAAGA,EAAItE,EAAK26J,cAAct7J,OAAQiF,IACnC,IAANA,EAAStE,EAAK46J,iBAAiB,GAAK,EAEtC56J,EAAK46J,iBAAiBt2J,GACpBtE,EAAK46J,iBAAiBt2J,EAAI,GAAKtE,EAAK26J,cAAcr2J,EAAI,GAAK,MAE5D,CACL,IAAI0zJ,EAAah4J,EAAK4oB,YAAYsL,GAClC,GAAI8jI,EAAW7uJ,MAAQ,EAAG,CACxB,IAAI2qB,EAAMI,EAAOl0B,EAAKY,IAAIoP,UAE1B,GAAKhQ,EAAKs/E,wBAAwBxrD,GAqChC9zB,EAAKY,IAAIoqD,UAAUhrD,EAAKs/E,wBAAwBxrD,GAAM71B,EAAGC,OArCnB,CACtC8B,EAAKs/E,wBAAwBxrD,GAAO22B,SAASC,cAAc,UAC3D1qD,EAAKs/E,wBAAwBxrD,GAAK3qB,MAAQ6uJ,EAAW7uJ,MACrDnJ,EAAKs/E,wBAAwBxrD,GAAKvqB,OAASyuJ,EAAWzuJ,OACtD,IAAIuxJ,EAAK96J,EAAKs/E,wBAAwBxrD,GAAK82B,WAAW,MAElDmwG,EAAW,EACf,IAAK,MAAMF,KAAU3mI,EAAKF,cACxB,GAAe,MAAX6mI,EAAgBE,GAAY,OAE9B,IAAK,IAAIz2J,EAAI,EAAGA,EAAItE,EAAK06J,QAAQr7J,OAAQiF,IACnCtE,EAAK06J,QAAQp2J,KAAOu2J,IACtBC,EAAG9vG,UACDhrD,EAAKw5J,UACLx5J,EAAK46J,iBAAiBt2J,GAAK,EAC3B,EACAtE,EAAK26J,cAAcr2J,GACnBtE,EAAKg0C,cACL+mH,EACA,EACA/6J,EAAK26J,cAAcr2J,GACnBtE,EAAKg0C,eAEP+mH,GAAY/6J,EAAK26J,cAAcr2J,GAAK,GAI5Cw2J,EAAG9qJ,UAAYhQ,EAAKY,IAAIoP,UACxB8qJ,EAAG7rJ,yBAA2B,YAC9B6rJ,EAAG7qJ,SACD,EACA,EACAjQ,EAAKs/E,wBAAwBxrD,GAAK3qB,MAClCnJ,EAAKs/E,wBAAwBxrD,GAAKvqB,QAEpCvJ,EAAKY,IAAIoqD,UAAUhrD,EAAKs/E,wBAAwBxrD,GAAM71B,EAAGC,E,KAQ1D,EAAA4qB,gBAAkB,CACvBoL,EACAj2B,EACAC,EACAkjB,EACA45I,KAEAh7J,EAAKY,IAAIoP,UAAYoR,EACrB,IAAK,IAAI7c,GAAM,EAAGA,GAAM,EAAGA,IACzB,IAAK,IAAI4F,GAAM,EAAGA,GAAM,EAAGA,IACzBnK,EAAK2c,SAASuX,EAAMj2B,EAAIsG,EAAIrG,EAAIiM,GAGpCnK,EAAKY,IAAIoP,UAAYgrJ,EACrBh7J,EAAK2c,SAASuX,EAAMj2B,EAAGC,IAoqBlB,EAAA+8J,WAAa,CAClBvsJ,EACAwsJ,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAj6J,EAAa,QACbunF,EAAe,EACfnzE,GAAkB,EAClB0xE,KAEAtnF,EAAKY,IAAIC,OAGT,MAAM66J,EAAa9lJ,EACf,EAAAnJ,cAAcmnH,oBACd,EAAAnnH,cAAcknH,aAQlB,IAAI7/F,EAx0EgB,EACtBplB,EACAwsJ,EACAC,EACAC,EACAC,EACA38I,EACAld,EACA8lF,IAGE54E,EAAIkgB,IACJ,IACAssI,EACA,IACAC,EACA,IACAC,EACA,IACAC,EACA,IACA38I,EACA,IACAld,EACA,UACC8lF,GAAW,QA+yEFq0E,CACRjtJ,EACAwsJ,EACAC,EACAC,EACAC,EAZFtyE,EAGE3oF,KAAKwC,MAAMmmF,EAAe3oF,KAAK4D,IAAI03J,EAAY,KAC/Ct7J,KAAK4D,IAAI03J,EAAY,IAUrBl6J,EACA8lF,GAGF,IAAKtnF,EAAKq/E,eAAevrD,GAAM,CAE7B9zB,EAAKq/E,eAAevrD,GAAO22B,SAASC,cAAc,UAClD1qD,EAAKq/E,eAAevrD,GAAK3qB,MAAQ/I,KAAKwC,MAAMw4J,EAAK,EAAA3uJ,cAAcgR,UAC/Dzd,EAAKq/E,eAAevrD,GAAKvqB,OAASnJ,KAAKwC,MAAMy4J,EAAK,EAAA5uJ,cAAcgR,UAChE,IAAIm+I,EAAQ57J,EAAKq/E,eAAevrD,GAAK82B,WAAW,MAkDhD,GAhDAgxG,EAAM/wG,UACJ,EACA,EACA7qD,EAAKq/E,eAAevrD,GAAK3qB,MACzBnJ,EAAKq/E,eAAevrD,GAAKvqB,QAI3BqyJ,EAAM3sJ,yBAA2B,cACjC2sJ,EAAM5wG,UACJt8C,EACAtO,KAAKwC,MAAMs4J,EAAK,EAAAzuJ,cAAcgR,UAC9Brd,KAAKwC,MAAMu4J,EAAK,EAAA1uJ,cAAcgR,UAC9Brd,KAAKwC,MAAMw4J,EAAK,EAAA3uJ,cAAcgR,UAC9Brd,KAAKwC,MAAMy4J,EAAK,EAAA5uJ,cAAcgR,UAC9B,EACA,EACArd,KAAKwC,MAAMw4J,EAAK,EAAA3uJ,cAAcgR,UAC9Brd,KAAKwC,MAAMy4J,EAAK,EAAA5uJ,cAAcgR,WAIhCm+I,EAAM96J,YAAcioF,EACpB6yE,EAAM5rJ,UAAYxO,EAClBo6J,EAAM3rJ,SACJ,EACA,EACAjQ,EAAKq/E,eAAevrD,GAAK3qB,MACzBnJ,EAAKq/E,eAAevrD,GAAKvqB,QAE3BqyJ,EAAM96J,YAAc,EAGpB86J,EAAM3sJ,yBAA2B,iBAEjC2sJ,EAAM5wG,UACJt8C,EACAtO,KAAKwC,MAAMs4J,EAAK,EAAAzuJ,cAAcgR,UAC9Brd,KAAKwC,MAAMu4J,EAAK,EAAA1uJ,cAAcgR,UAC9Brd,KAAKwC,MAAMw4J,EAAK,EAAA3uJ,cAAcgR,UAC9Brd,KAAKwC,MAAMy4J,EAAK,EAAA5uJ,cAAcgR,UAC9B,EACA,EACArd,KAAKwC,MAAMw4J,EAAK,EAAA3uJ,cAAcgR,UAC9Brd,KAAKwC,MAAMy4J,EAAK,EAAA5uJ,cAAcgR,WAI5B6pE,EAAS,CACX,MAAMlzE,EAAIhU,KAAKwC,MAAMw4J,EAAK,EAAA3uJ,cAAcgR,UAClCyD,EAAI9gB,KAAKwC,MAAMy4J,EAAK,EAAA5uJ,cAAcgR,UACxC,IAAIkqE,EAA8B,KAClC,OAAQL,GACN,IAAK,OACHK,EAAOi0E,EAAMviH,qBAAqB,EAAG,EAAGjlC,EAAG,GAC3CuzE,EAAKpuC,aAAa,EAAG,iBACrBouC,EAAKpuC,aAAa,EAAG,iBACrB,MACF,IAAK,QACHouC,EAAOi0E,EAAMviH,qBAAqB,EAAG,EAAGjlC,EAAG,GAC3CuzE,EAAKpuC,aAAa,EAAG,iBACrBouC,EAAKpuC,aAAa,EAAG,iBACrB,MACF,IAAK,KACHouC,EAAOi0E,EAAMviH,qBAAqB,EAAG,EAAG,EAAGn4B,GAC3CymE,EAAKpuC,aAAa,EAAG,iBACrBouC,EAAKpuC,aAAa,EAAG,iBACrB,MACF,IAAK,OACHouC,EAAOi0E,EAAMviH,qBAAqB,EAAG,EAAG,EAAGn4B,GAC3CymE,EAAKpuC,aAAa,EAAG,iBACrBouC,EAAKpuC,aAAa,EAAG,iBAGrBouC,IACFi0E,EAAM3sJ,yBAA2B,iBACjC2sJ,EAAM5rJ,UAAY23E,EAClBi0E,EAAM3rJ,SAAS,EAAG,EAAGmE,EAAG8M,G,EAM9BlhB,EAAKY,IAAIoqD,UACPhrD,EAAKq/E,eAAevrD,GACpB1zB,KAAKwC,MAAM04J,EAAK,EAAA7uJ,cAAcgR,UAC9Brd,KAAKwC,MAAM24J,EAAK,EAAA9uJ,cAAcgR,UAC9Brd,KAAKwC,MAAM44J,EAAK,EAAA/uJ,cAAcgR,UAC9Brd,KAAKwC,MAAM64J,EAAK,EAAAhvJ,cAAcgR,WAGhCzd,EAAKY,IAAIc,WAOJ,EAAA4xB,SAAW,CAChB4nI,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAj6J,EAAa,QACbunF,EAAe,EACfzB,KAEAtnF,EAAKi7J,WACHj7J,EAAK84J,QACLoC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAj6J,EACAunF,GACA,EACAzB,IAQG,EAAAnmF,QAAU,CACf+5J,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAj6J,EAAa,QACbunF,EAAe,EACfzB,KAEAtnF,EAAKi7J,WACHj7J,EAAKg5J,OACLkC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAj6J,EACAunF,GACA,EACAzB,IAQG,EAAA/8E,QAAU,CACf2wJ,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAj6J,EAAa,QACbunF,EAAe,EACfzB,KAEAtnF,EAAKi7J,WACHj7J,EAAKk5J,OACLgC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAj6J,EACAunF,GACA,EACAzB,IAQG,EAAAu/B,SAAW,CAChBq0C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAj6J,EAAa,QACbunF,EAAe,EACfzB,KAEAtnF,EAAKi7J,WACHj7J,EAAKo5J,QACL8B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAj6J,EACAunF,GACA,EACAzB,IAQG,EAAA9iF,OAAS,CACd02J,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAj6J,EAAa,QACbunF,EAAe,EACfzB,KAEAtnF,EAAKi7J,WACHj7J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","sources":["webpack://Turnarchist/./src/entity/object/chest.ts","webpack://Turnarchist/./src/item/light/lantern.ts","webpack://Turnarchist/./src/drawable/healthbar.ts","webpack://Turnarchist/./src/entity/enemy/spawner.ts","webpack://Turnarchist/./src/gui/map.ts","webpack://Turnarchist/./src/entity/object/furnace.ts","webpack://Turnarchist/./src/entity/enemy/wizardEnemy.ts","webpack://Turnarchist/./src/entity/object/fallenPillar.ts","webpack://Turnarchist/./src/utility/deviceDetector.ts","webpack://Turnarchist/./src/drawable/hitWarning.ts","webpack://Turnarchist/./src/level/sidePathManager.ts","webpack://Turnarchist/./src/entity/enemy/armoredzombieEnemy.ts","webpack://Turnarchist/./src/game/bestiary.ts","webpack://Turnarchist/./src/item/resource/bluegem.ts","webpack://Turnarchist/./src/item/jewelry/amberRing.ts","webpack://Turnarchist/./src/entity/entity.ts","webpack://Turnarchist/./src/sound/reverb.ts","webpack://Turnarchist/./src/entity/enemy/bigSkullEnemy.ts","webpack://Turnarchist/./src/tile/pool.ts","webpack://Turnarchist/./src/game/textbox.ts","webpack://Turnarchist/./src/item/backpack.ts","webpack://Turnarchist/./src/tile/fountainTile.ts","webpack://Turnarchist/./src/particle/particle.ts","webpack://Turnarchist/./src/item/usable/greenPotion.ts","webpack://Turnarchist/./src/item/weapon/scythe.ts","webpack://Turnarchist/./src/item/weapon/greataxe.ts","webpack://Turnarchist/./src/entity/enemy/pawnEnemy.ts","webpack://Turnarchist/./src/constants/environmentTypes.ts","webpack://Turnarchist/./src/utility/astarclass.ts","webpack://Turnarchist/./src/entity/object/vendingMachine.ts","webpack://Turnarchist/./src/lighting/lighting.ts","webpack://Turnarchist/./src/tile/spike.ts","webpack://Turnarchist/./src/item/resource/coal.ts","webpack://Turnarchist/./src/item/coin.ts","webpack://Turnarchist/./src/level/levelConstants.ts","webpack://Turnarchist/./src/particle/attackAnimation.ts","webpack://Turnarchist/./src/projectile/wizardFireball.ts","webpack://Turnarchist/./src/entity/enemy/mummyEnemy.ts","webpack://Turnarchist/./src/item/dropTable.ts","webpack://Turnarchist/./src/item/tool/hammer.ts","webpack://Turnarchist/./src/item/resource/redgem.ts","webpack://Turnarchist/./src/entity/object/tombStone.ts","webpack://Turnarchist/./src/api/utils.ts","webpack://Turnarchist/./src/item/bestiaryBook.ts","webpack://Turnarchist/./src/item/light/light.ts","webpack://Turnarchist/./src/particle/genericParticle.ts","webpack://Turnarchist/./src/api/index.ts","webpack://Turnarchist/./src/game/settingsPersistence.ts","webpack://Turnarchist/./src/player/playerMovement.ts","webpack://Turnarchist/./src/particle/imageParticle.ts","webpack://Turnarchist/./src/gui/xpCounter.ts","webpack://Turnarchist/./src/entity/object/rookStatue.ts","webpack://Turnarchist/./src/entity/resource/coalResource.ts","webpack://Turnarchist/./src/player/playerRenderer.ts","webpack://Turnarchist/./src/tile/upLadder.ts","webpack://Turnarchist/./src/tile/decorations/decoration.ts","webpack://Turnarchist/./src/lighting/lightSource.ts","webpack://Turnarchist/./node_modules/ua-parser-js/src/main/ua-parser.js","webpack://Turnarchist/./src/gui/feedbackButton.ts","webpack://Turnarchist/./src/entity/object/succulent.ts","webpack://Turnarchist/./src/game/stats.ts","webpack://Turnarchist/./src/item/resource/goldOre.ts","webpack://Turnarchist/./src/projectile/stunAnimation.ts","webpack://Turnarchist/./src/tile/chasm.ts","webpack://Turnarchist/./src/item/weapon/dualdagger.ts","webpack://Turnarchist/./src/item/armor.ts","webpack://Turnarchist/./src/item/weapon/shieldRightFragment.ts","webpack://Turnarchist/./src/item/jewelry/garnetRing.ts","webpack://Turnarchist/./src/item/resource/orangegem.ts","webpack://Turnarchist/./src/gui/webglBlurRenderer.ts","webpack://Turnarchist/./src/entity/enemy/crusherEnemy.ts","webpack://Turnarchist/./src/event/eventBus.ts","webpack://Turnarchist/./src/entity/object/fishingSpot.ts","webpack://Turnarchist/./src/gui/guiButton.ts","webpack://Turnarchist/./src/entity/object/darkPillar.ts","webpack://Turnarchist/./src/item/usable/fish.ts","webpack://Turnarchist/./src/item/weapon/scytheBlade.ts","webpack://Turnarchist/./src/player/playerInputHandler.ts","webpack://Turnarchist/./src/entity/enemy/bishopEnemy.ts","webpack://Turnarchist/./src/tile/lockable.ts","webpack://Turnarchist/./src/entity/object/darkPot.ts","webpack://Turnarchist/./src/gui/menu.ts","webpack://Turnarchist/./src/tile/trapdoor.ts","webpack://Turnarchist/./src/entity/object/pawnStatue.ts","webpack://Turnarchist/./src/level/generationVisualizer.ts","webpack://Turnarchist/./src/entity/enemy/armoredSkullEnemy.ts","webpack://Turnarchist/./src/entity/enemy/zombieEnemy.ts","webpack://Turnarchist/./src/entity/object/barrel.ts","webpack://Turnarchist/./src/entity/object/darkCrate.ts","webpack://Turnarchist/./src/entity/object/obsidianBlock.ts","webpack://Turnarchist/./src/level/pngPartitionGenerator.ts","webpack://Turnarchist/./src/item/resource/goldBar.ts","webpack://Turnarchist/./src/item/usable/spellbookPage.ts","webpack://Turnarchist/./src/item/jewelry/zirconRing.ts","webpack://Turnarchist/./src/tile/floor.ts","webpack://Turnarchist/./src/item/weapon/slingshot.ts","webpack://Turnarchist/./src/tile/downLadder.ts","webpack://Turnarchist/./src/particle/xpPopup.ts","webpack://Turnarchist/./src/drawable/shadow.ts","webpack://Turnarchist/./src/particle/keyPathParticle.ts","webpack://Turnarchist/./src/item/goldenKey.ts","webpack://Turnarchist/./src/game/replayManager.ts","webpack://Turnarchist/./src/game/input.ts","webpack://Turnarchist/./src/entity/enemy/kingEnemy.ts","webpack://Turnarchist/./src/entity/resource/amberResource.ts","webpack://Turnarchist/./src/event/eventEmitter.ts","webpack://Turnarchist/./src/item/weapon/spellbook.ts","webpack://Turnarchist/./src/projectile/playerFireball.ts","webpack://Turnarchist/./src/entity/object/pumpkin.ts","webpack://Turnarchist/./src/item/weapon/weapon.ts","webpack://Turnarchist/./src/item/usable/weaponFragments.ts","webpack://Turnarchist/./src/room/room.ts","webpack://Turnarchist/./src/entity/enemy/fireWizard.ts","webpack://Turnarchist/./src/item/bombItem.ts","webpack://Turnarchist/./node_modules/howler/dist/howler.js","webpack://Turnarchist/./src/item/usable/hourglass.ts","webpack://Turnarchist/./src/item/usable/shrooms.ts","webpack://Turnarchist/./src/player/player.ts","webpack://Turnarchist/./src/tips.ts","webpack://Turnarchist/./src/projectile/enemyShield.ts","webpack://Turnarchist/./src/entity/enemy/occultistEnemy.ts","webpack://Turnarchist/./src/item/woodenShield.ts","webpack://Turnarchist/./src/entity/downladderMaker.ts","webpack://Turnarchist/./src/tile/window.ts","webpack://Turnarchist/./src/item/entitySpawner.ts","webpack://Turnarchist/./src/entity/object/bishopStatue.ts","webpack://Turnarchist/./src/tile/door.ts","webpack://Turnarchist/./src/entity/object/crate.ts","webpack://Turnarchist/./src/item/usable/heart.ts","webpack://Turnarchist/./src/item/tool/fishingRod.ts","webpack://Turnarchist/./src/entity/enemy/bigFrogEnemy.ts","webpack://Turnarchist/./src/item/usable/weaponPoison.ts","webpack://Turnarchist/./src/game/gameState.ts","webpack://Turnarchist/./src/entity/enemy/knightEnemy.ts","webpack://Turnarchist/./src/entity/enemy/exalterEnemy.ts","webpack://Turnarchist/./src/entity/resource/emeraldResource.ts","webpack://Turnarchist/./src/item/usable/usable.ts","webpack://Turnarchist/./src/item/light/torch.ts","webpack://Turnarchist/./src/particle/damageNumber.ts","webpack://Turnarchist/./src/entity/enemy/energyWizard.ts","webpack://Turnarchist/./src/level/levelValidator.ts","webpack://Turnarchist/./src/item/item.ts","webpack://Turnarchist/./src/entity/object/decoBlock.ts","webpack://Turnarchist/./src/item/resource/greengem.ts","webpack://Turnarchist/./src/level/levelParametersGenerator.ts","webpack://Turnarchist/./src/entity/object/bush.ts","webpack://Turnarchist/./src/item/weapon/scytheHandle.ts","webpack://Turnarchist/./src/entity/object/tree.ts","webpack://Turnarchist/./src/item/resource/ironOre.ts","webpack://Turnarchist/./src/entity/resource/goldResource.ts","webpack://Turnarchist/./src/projectile/explosion.ts","webpack://Turnarchist/./src/item/key.ts","webpack://Turnarchist/./src/globalStateManager/IdGenerator.ts","webpack://Turnarchist/./node_modules/uuid/dist/max.js","webpack://Turnarchist/./node_modules/uuid/dist/nil.js","webpack://Turnarchist/./node_modules/uuid/dist/regex.js","webpack://Turnarchist/./node_modules/uuid/dist/validate.js","webpack://Turnarchist/./node_modules/uuid/dist/parse.js","webpack://Turnarchist/./node_modules/uuid/dist/stringify.js","webpack://Turnarchist/./node_modules/uuid/dist/rng.js","webpack://Turnarchist/./node_modules/uuid/dist/v1.js","webpack://Turnarchist/./node_modules/uuid/dist/v1ToV6.js","webpack://Turnarchist/./node_modules/uuid/dist/md5.js","webpack://Turnarchist/./node_modules/uuid/dist/v35.js","webpack://Turnarchist/./node_modules/uuid/dist/v3.js","webpack://Turnarchist/./node_modules/uuid/dist/native.js","webpack://Turnarchist/./node_modules/uuid/dist/v4.js","webpack://Turnarchist/./node_modules/uuid/dist/sha1.js","webpack://Turnarchist/./node_modules/uuid/dist/v5.js","webpack://Turnarchist/./node_modules/uuid/dist/v6.js","webpack://Turnarchist/./node_modules/uuid/dist/v6ToV1.js","webpack://Turnarchist/./node_modules/uuid/dist/v7.js","webpack://Turnarchist/./node_modules/uuid/dist/version.js","webpack://Turnarchist/./src/tile/spawnfloor.ts","webpack://Turnarchist/./src/tile/wallTorch.ts","webpack://Turnarchist/./src/item/weapon/dagger.ts","webpack://Turnarchist/./src/level/levelImageGenerator.ts","webpack://Turnarchist/./src/utility/utils.ts","webpack://Turnarchist/./src/event/events.ts","webpack://Turnarchist/./src/game/gameConstants.ts","webpack://Turnarchist/./src/entity/object/darkVase.ts","webpack://Turnarchist/./node_modules/axios/dist/browser/axios.cjs","webpack://Turnarchist/./src/entity/enemy/rookEnemy.ts","webpack://Turnarchist/./src/entity/resource/obsidianResource.ts","webpack://Turnarchist/./src/item/usable/bluePotion.ts","webpack://Turnarchist/./src/entity/enemy/queenEnemy.ts","webpack://Turnarchist/./src/item/weapon/sword.ts","webpack://Turnarchist/./src/item/weapon/shieldLeftFragment.ts","webpack://Turnarchist/./src/entity/resource/zirconResource.ts","webpack://Turnarchist/./src/game/savePersistence.ts","webpack://Turnarchist/./src/tile/magmaPool.ts","webpack://Turnarchist/./src/player/playerActionProcessor.ts","webpack://Turnarchist/./src/entity/enemy/enemy.ts","webpack://Turnarchist/./src/level/partitionGenerator.ts","webpack://Turnarchist/./src/entity/object/smallBush.ts","webpack://Turnarchist/./src/room/roomBuilder.ts","webpack://Turnarchist/./src/entity/object/pot.ts","webpack://Turnarchist/./src/entity/resource/resource.ts","webpack://Turnarchist/./src/room/roomPopulator.ts","webpack://Turnarchist/./src/particle/wizardTeleportParticle.ts","webpack://Turnarchist/./src/entity/object/block.ts","webpack://Turnarchist/./src/sound/sound.ts","webpack://Turnarchist/./src/item/godStone.ts","webpack://Turnarchist/./src/level/environment.ts","webpack://Turnarchist/./src/tile/spiketrap.ts","webpack://Turnarchist/./src/item/jewelry/goldRing.ts","webpack://Turnarchist/./src/item/weapon/shotgun.ts","webpack://Turnarchist/./src/entity/enemy/frogEnemy.ts","webpack://Turnarchist/./src/item/light/glowBugs.ts","webpack://Turnarchist/./src/game.ts","webpack://Turnarchist/./src/gui/hoverText.ts","webpack://Turnarchist/./src/room/propClusterer.ts","webpack://Turnarchist/./src/entity/enemy/skullEnemy.ts","webpack://Turnarchist/./src/entity/object/sprout.ts","webpack://Turnarchist/./src/entity/object/pottedPlant.ts","webpack://Turnarchist/./src/entity/resource/rockResource.ts","webpack://Turnarchist/./src/inventory/inventory.ts","webpack://Turnarchist/./src/projectile/beamEffect.ts","webpack://Turnarchist/./src/gui/linkButton.ts","webpack://Turnarchist/./src/tile/tile.ts","webpack://Turnarchist/./src/item/light/candle.ts","webpack://Turnarchist/./src/drawable/drawable.ts","webpack://Turnarchist/./src/game/cameraAnimation.ts","webpack://Turnarchist/./src/entity/enemy/crabEnemy.ts","webpack://Turnarchist/./src/item/weapon/spear.ts","webpack://Turnarchist/./src/game/gameplaySettings.ts","webpack://Turnarchist/./src/entity/enemy/glowBugEnemy.ts","webpack://Turnarchist/./src/projectile/enemySpawnAnimation.ts","webpack://Turnarchist/./src/entity/enemy/beetleEnemy.ts","webpack://Turnarchist/./src/entity/enemy/bigZombieEnemy.ts","webpack://Turnarchist/./src/item/equippable.ts","webpack://Turnarchist/./src/tile/passageway.ts","webpack://Turnarchist/./src/entity/object/mushrooms.ts","webpack://Turnarchist/./src/gui/muteButton.ts","webpack://Turnarchist/./src/level/levelGenerator.ts","webpack://Turnarchist/./src/projectile/projectile.ts","webpack://Turnarchist/./src/entity/resource/garnetResource.ts","webpack://Turnarchist/./src/gui/mouseCursor.ts","webpack://Turnarchist/./src/tile/coffinTile.ts","webpack://Turnarchist/./src/item/weapon/warhammer.ts","webpack://Turnarchist/./src/item/jewelry/emeraldRing.ts","webpack://Turnarchist/./src/tile/insideLevelDoor.ts","webpack://Turnarchist/./src/tile/button.ts","webpack://Turnarchist/./src/tile/wall.ts","webpack://Turnarchist/./src/tile/bones.ts","webpack://Turnarchist/./src/entity/object/bomb.ts","webpack://Turnarchist/./src/entity/object/chestLayer.ts","webpack://Turnarchist/./src/entity/enemy/bigKnightEnemy.ts","webpack://Turnarchist/./src/level/level.ts","webpack://Turnarchist/./src/item/usable/weaponBlood.ts","webpack://Turnarchist/./src/gui/postProcess.ts","webpack://Turnarchist/./src/item/resource/geode.ts","webpack://Turnarchist/./src/utility/random.ts","webpack://Turnarchist/./src/item/resource/ironBar.ts","webpack://Turnarchist/./src/utility/cookies.ts","webpack://Turnarchist/./src/entity/enemy/wardenEnemy.ts","webpack://Turnarchist/./src/item/itemGroup.ts","webpack://Turnarchist/./src/entity/resource/ironResource.ts","webpack://Turnarchist/./src/entity/object/candelabra.ts","webpack://Turnarchist/./src/item/tool/pickaxe.ts","webpack://Turnarchist/./src/item/usable/apple.ts","webpack://Turnarchist/./src/entity/enemy/chargeEnemy.ts","webpack://Turnarchist/./src/item/resource/stone.ts","webpack://Turnarchist/./src/entity/enemy/spiderEnemy.ts","webpack://Turnarchist/webpack/bootstrap","webpack://Turnarchist/webpack/runtime/amd options","webpack://Turnarchist/webpack/runtime/define property getters","webpack://Turnarchist/webpack/runtime/global","webpack://Turnarchist/webpack/runtime/hasOwnProperty shorthand","webpack://Turnarchist/webpack/runtime/make namespace object","webpack://Turnarchist/webpack/runtime/publicPath","webpack://Turnarchist/webpack/startup"],"sourcesContent":["import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Entity } from \"../entity\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { EntityType } from \"../entity\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Player } from \"../../player/player\";\r\nimport { ChestLayer } from \"./chestLayer\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class Chest extends Entity {\r\n  frame: number;\r\n  opening: boolean;\r\n  dropX: number;\r\n  dropY: number;\r\n  layer: ChestLayer;\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n\r\n    this.tileX = 4;\r\n    this.tileY = 0;\r\n    this.health = 3;\r\n    this.name = \"chest\";\r\n    this.frame = 0;\r\n    this.opening = false;\r\n    this.dropX = 0;\r\n    this.dropY = 0;\r\n    this.drop = null;\r\n    this.destroyable = false;\r\n    this.pushable = false;\r\n    this.chainPushable = false;\r\n    this.interactable = true;\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 26;\r\n    /*\r\n    this.layer = new ChestLayer(\r\n      this.room,\r\n      this.game,\r\n      this.x,\r\n      this.y,\r\n    );\r\n    this.room.entities.push(this.layer);\r\n    */\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.CHEST;\r\n  }\r\n\r\n  interact = (playerHitBy: Player) => {\r\n    if (this.health === 3 && !this.opening) {\r\n      this.health -= 1;\r\n      this.open();\r\n      return;\r\n    }\r\n\r\n    if (this.health !== 2) return;\r\n\r\n    // Try to pick up items\r\n    const pickedUpDrop = this.drops.find((drop) => {\r\n      drop.onPickup(playerHitBy);\r\n      return drop.pickedUp;\r\n    });\r\n\r\n    if (pickedUpDrop) {\r\n      this.drops = this.drops.filter((d) => d !== pickedUpDrop);\r\n    }\r\n\r\n    const full = playerHitBy.inventory.isFull();\r\n    if (this.drops.length === 0 || full) {\r\n      this.health -= 1;\r\n      this.destroyable = true;\r\n    }\r\n  };\r\n  uniqueKillBehavior = () => {\r\n    if (this.health === 3) {\r\n      this.open();\r\n    }\r\n  };\r\n\r\n  private open = () => {\r\n    this.tileX = 0;\r\n    this.tileY = 2;\r\n\r\n    this.opening = true;\r\n    Sound.chest();\r\n\r\n    if (this.drop === null)\r\n      this.getDrop(\r\n        [\"consumable\", \"gem\", \"coin\", \"tool\", \"light\", \"weapon\", \"shield\"],\r\n        true,\r\n      );\r\n\r\n    this.drops.forEach((drop) => {\r\n      if (drop.name === \"coin\") {\r\n        let stack = Game.randTable(\r\n          [\r\n            1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6,\r\n            6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 11, 12, 13, 14, 15,\r\n            100,\r\n          ],\r\n          Random.rand,\r\n        );\r\n        if (Random.rand() < 0.01) stack *= Math.ceil(Random.rand() * 10);\r\n        drop.stackCount = stack;\r\n        //drop.stack = stack;\r\n      }\r\n    });\r\n    this.dropLoot();\r\n    this.drops.forEach((drop) => {\r\n      drop.animateFromChest();\r\n    });\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    if (this.opening) {\r\n      if (this.tileX <= 6) {\r\n        this.tileX += 0.15 * delta;\r\n      } else {\r\n        this.opening = false;\r\n      }\r\n    }\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      Game.drawObj(\r\n        Math.floor(this.tileX),\r\n        Math.floor(this.tileY),\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y - 1;\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Equippable } from \"../equippable\";\r\nimport { Candle } from \"./candle\";\r\nimport { Torch } from \"./torch\";\r\nimport { Coal } from \"../resource/coal\";\r\nimport { Light } from \"./light\";\r\n\r\nexport class Lantern extends Light {\r\n  fuelCap: number;\r\n  static itemName = \"lantern\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.fuel = 250;\r\n    this.tileX = 29;\r\n    this.tileY = 0;\r\n    this.fuelCap = 250;\r\n    this.name = \"lantern\";\r\n    this.canRefuel = true;\r\n    this.maxBrightness = 20;\r\n    this.minBrightness = 5;\r\n    this.radius = 7;\r\n    this.broken = this.fuel <= 0 ? true : false;\r\n  }\r\n\r\n  getDescription = () => {\r\n    const percentage = Math.round((this.fuel / this.fuelCap) * 100);\r\n    return `LANTERN - Fuel: ${percentage}%, Capacity: ${this.fuelCap / 50}`;\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\n\r\nexport class HealthBar {\r\n  hurtTimer: number;\r\n  shouldDraw: boolean;\r\n\r\n  constructor() {\r\n    this.hurtTimer = 0;\r\n  }\r\n\r\n  hurt = () => {\r\n    this.hurtTimer = Date.now();\r\n  };\r\n\r\n  draw = (\r\n    delta: number,\r\n    hearts: number,\r\n    maxHearts: number,\r\n    x: number,\r\n    y: number,\r\n    flashing: boolean,\r\n  ) => {\r\n    let t = Math.min(\r\n      LevelConstants.HEALTH_BAR_TOTALTIME,\r\n      Math.max(Date.now() - this.hurtTimer, 0),\r\n    );\r\n    if (t <= LevelConstants.HEALTH_BAR_TOTALTIME) {\r\n      let fullHearts = Math.floor(hearts);\r\n\r\n      let halfHearts = Math.ceil(hearts - fullHearts);\r\n\r\n      let emptyHearts = maxHearts - fullHearts - halfHearts;\r\n\r\n      // I wouldn't normally use magic numbers here, but these are hardcoded based on the tileset\r\n      //   (which isn't really parameterizable)\r\n      let drawWidth = Math.round(\r\n        Math.min(\r\n          9,\r\n          Math.min(0.05 * (LevelConstants.HEALTH_BAR_TOTALTIME - t), 0.05 * t),\r\n        ),\r\n      );\r\n      let drawHeight =\r\n        Math.round(\r\n          Math.min(\r\n            0.5,\r\n            Math.min(\r\n              0.003 * (LevelConstants.HEALTH_BAR_TOTALTIME - t),\r\n              0.003 * t,\r\n            ),\r\n          ) * 16,\r\n        ) / 16.0;\r\n      let width = (drawWidth * (maxHearts - 1) + 8) / 16.0;\r\n      let xxStart = 0.5 + -width / 2;\r\n      for (let i = 0; i < Math.ceil(0.5 * maxHearts); i++) {\r\n        let tileX = 0;\r\n        if (!flashing) tileX = 1.5;\r\n        else if (i < fullHearts) tileX = 0;\r\n        else if (i < fullHearts + halfHearts) tileX = 0.5;\r\n        else tileX = 1;\r\n        let xx = (drawWidth * i) / 16.0 + xxStart;\r\n        Game.drawFX(\r\n          tileX,\r\n          8,\r\n          0.5,\r\n          0.5,\r\n          x + xx,\r\n          y - 1 - drawHeight / 2,\r\n          0.5,\r\n          drawHeight,\r\n        );\r\n        xx += 9.0 / 16.0;\r\n\r\n        let j = maxHearts - i - 1;\r\n        if (j !== i) {\r\n          let tileX = 0;\r\n          if (!flashing) tileX = 1.5;\r\n          else if (j < fullHearts) tileX = 0;\r\n          else if (j < fullHearts + halfHearts) tileX = 0.5;\r\n          else tileX = 1;\r\n          let xx = (drawWidth * j) / 16.0 + xxStart;\r\n          Game.drawFX(\r\n            tileX,\r\n            8,\r\n            0.5,\r\n            0.5,\r\n            x + xx,\r\n            y - 1 - drawHeight / 2,\r\n            0.5,\r\n            drawHeight,\r\n          );\r\n          xx += 9.0 / 16.0;\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Floor } from \"../../tile/floor\";\r\nimport { HitWarning } from \"../../drawable/hitWarning\";\r\nimport { SkullEnemy } from \"./skullEnemy\";\r\nimport { EnemySpawnAnimation } from \"../../projectile/enemySpawnAnimation\";\r\nimport { KnightEnemy } from \"./knightEnemy\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { EnergyWizardEnemy } from \"./energyWizard\";\r\nimport { ZombieEnemy } from \"./zombieEnemy\";\r\nimport { BishopEnemy } from \"./bishopEnemy\";\r\nimport { CrabEnemy } from \"./crabEnemy\";\r\nimport { ChargeEnemy } from \"./chargeEnemy\";\r\nimport { BigKnightEnemy } from \"./bigKnightEnemy\";\r\nimport { BigSkullEnemy } from \"./bigSkullEnemy\";\r\nimport { FrogEnemy } from \"./frogEnemy\";\r\nimport { FireWizardEnemy } from \"./fireWizard\";\r\nimport { QueenEnemy } from \"./queenEnemy\";\r\nimport { ArmoredzombieEnemy } from \"./armoredzombieEnemy\";\r\nimport { RookEnemy } from \"./rookEnemy\";\r\nimport { RoomType } from \"../../room/room\";\r\nimport { ArmoredSkullEnemy } from \"./armoredSkullEnemy\";\r\nimport { GameplaySettings } from \"../../game/gameplaySettings\";\r\nimport { SpiderEnemy } from \"./spiderEnemy\";\r\nimport { MummyEnemy } from \"./mummyEnemy\";\r\nimport { PawnEnemy } from \"./pawnEnemy\";\r\nimport { BeetleEnemy } from \"./beetleEnemy\";\r\nimport { BigFrogEnemy } from \"./bigFrogEnemy\";\r\nimport { Wall } from \"../../tile/wall\";\r\nimport { KingEnemy } from \"./kingEnemy\";\r\n\r\nexport class Spawner extends Enemy {\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  enemySpawnType: number;\r\n  enemyTable: number[];\r\n  spawnFrequency: number;\r\n  spawnOffset: number;\r\n  nextSpawnTick: number;\r\n  static tileX: number = 6;\r\n  static tileY: number = 4;\r\n\r\n  constructor(\r\n    room: Room,\r\n    game: Game,\r\n    x: number,\r\n    y: number,\r\n    enemyTable: number[] = [\r\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 20,\r\n    ],\r\n  ) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.health = 4;\r\n    this.maxHealth = 4;\r\n    this.defaultMaxHealth = 4;\r\n    this.tileX = 6;\r\n    this.tileY = 4;\r\n    this.seenPlayer = true;\r\n    this.spawnFrequency = 4;\r\n    this.room.currentSpawnerCount++;\r\n    this.enemyTable = enemyTable; //enemyTable.filter((t) => t !== 7);\r\n    const randSpawnType = Game.randTable(this.enemyTable, Random.rand);\r\n    this.enemySpawnType = randSpawnType;\r\n    this.spawnOffset = 0;\r\n    this.nextSpawnTick = 0;\r\n    this.dropChance = 1;\r\n    this.chainPushable = false;\r\n    this.destroyableByOthers = false;\r\n    this.getDrop([\"reaper\"], false);\r\n    /*\r\n    switch (this.enemySpawnType) {\r\n      case 0:\r\n        this.getDrop([\"consumable\"], true);\r\n        break;\r\n      case 1:\r\n        this.getDrop([\"gem\"], true);\r\n        break;\r\n      case 2:\r\n        this.getDrop([\"consumable\"], true);\r\n        break;\r\n      case 3:\r\n        this.getDrop([\"gem\"], true);\r\n        break;\r\n      case 4:\r\n        this.getDrop([\"gem\"], true);\r\n        break;\r\n      case 5:\r\n        this.getDrop([\"consumable\"], true);\r\n        break;\r\n      case 6:\r\n        this.getDrop([\"gem\"], true);\r\n        break;\r\n      case 7:\r\n        this.getDrop([\"gem\"], true);\r\n        break;\r\n      case 8:\r\n        this.getDrop([\"gem\"], true);\r\n        break;\r\n      case 9:\r\n        this.getDrop([\"equipment\", \"weapon\", \"tool\"], true);\r\n        break;\r\n      case 10:\r\n        this.getDrop([\"weapon\"], true);\r\n        break;\r\n      case 11:\r\n        this.getDrop([\"weapon\"], true);\r\n        break;\r\n      case 12:\r\n        this.getDrop([\"weapon\"], true);\r\n        break;\r\n      case 13:\r\n        this.getDrop([\"weapon\"], true);\r\n        break;\r\n      case 14:\r\n        this.getDrop([\"weapon\"], true);\r\n        break;\r\n      case 16:\r\n        this.getDrop([\"weapon\", \"equipment\"], true);\r\n        break;\r\n    }*/\r\n    this.name = \"reaper\";\r\n    console.log(\"spawner created spawner type\", this.enemySpawnType);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return 1;\r\n  };\r\n\r\n  setSpawnFrequency = (maxHealth: number = 1) => {\r\n    if (GameplaySettings.UNLIMITED_SPAWNERS) {\r\n      this.spawnFrequency = 4;\r\n    } else {\r\n      this.spawnFrequency = Math.min(12, 4 * this.room.currentSpawnerCount);\r\n    }\r\n    if (GameplaySettings.THROTTLE_SPAWNERS) {\r\n      this.spawnFrequency = 3 + maxHealth;\r\n    }\r\n\r\n    const spawners = this.room.entities.filter((e) => e instanceof Spawner);\r\n    this.spawnOffset = (spawners.indexOf(this) + 1) * 4;\r\n  };\r\n\r\n  bleed = () => {};\r\n  poison = () => {};\r\n  //alertNearbyEnemies = () => {};\r\n\r\n  behavior = () => {\r\n    let shouldSpawn = true;\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      this.tileX = 6;\r\n      if (\r\n        (this.ticks + this.spawnOffset) % this.spawnFrequency === 0 &&\r\n        this.ticks >= this.nextSpawnTick\r\n      ) {\r\n        let positions = this.room\r\n          .getEmptyTiles()\r\n          .filter(\r\n            (t) => Math.abs(t.x - this.x) <= 1 && Math.abs(t.y - this.y) <= 1,\r\n          );\r\n        if (this.enemySpawnType === 8) {\r\n          const offLimits = [\r\n            { x: this.x, y: this.y },\r\n            { x: this.x + 1, y: this.y + 1 },\r\n            { x: this.x - 1, y: this.y - 1 },\r\n            { x: this.x + 1, y: this.y - 1 },\r\n            { x: this.x - 1, y: this.y + 1 },\r\n          ];\r\n          positions = positions.filter(\r\n            (t) => !offLimits.some((o) => o.x === t.x && o.y === t.y),\r\n          );\r\n        }\r\n        if (positions.length > 0) {\r\n          this.tileX = 7;\r\n\r\n          const position = Game.randTable(positions, Random.rand);\r\n\r\n          let spawned: Enemy;\r\n\r\n          const spawnPos = this.mutatePositionForBigEnemy(\r\n            position.x,\r\n            position.y,\r\n          );\r\n\r\n          switch (this.enemySpawnType) {\r\n            case 0: // legacy Pawn mapping\r\n              spawned = new PawnEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 1:\r\n              spawned = new CrabEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 2:\r\n              spawned = new FrogEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 3:\r\n              spawned = new ZombieEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 4:\r\n              spawned = new SkullEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 5:\r\n              spawned = new EnergyWizardEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 6:\r\n              spawned = new ChargeEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 7:\r\n              spawned = new RookEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 8:\r\n              spawned = new BishopEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 9:\r\n              spawned = new ArmoredzombieEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 10:\r\n              spawned = new BigSkullEnemy(\r\n                this.room,\r\n                this.game,\r\n                spawnPos.x,\r\n                spawnPos.y,\r\n              );\r\n              this.clearSpaceForBigEnemy(spawnPos.x, spawnPos.y);\r\n              break;\r\n            case 11:\r\n              spawned = new QueenEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 12:\r\n              spawned = new KnightEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 13:\r\n              spawned = new BigKnightEnemy(\r\n                this.room,\r\n                this.game,\r\n                spawnPos.x,\r\n                spawnPos.y,\r\n              );\r\n              this.clearSpaceForBigEnemy(spawnPos.x, spawnPos.y);\r\n              break;\r\n            case 14:\r\n              spawned = new FireWizardEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 15:\r\n              spawned = new ArmoredSkullEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 16:\r\n              spawned = new MummyEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 17:\r\n              spawned = new SpiderEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 18:\r\n              spawned = new PawnEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 19:\r\n              spawned = new BigFrogEnemy(\r\n                this.room,\r\n                this.game,\r\n                spawnPos.x,\r\n                spawnPos.y,\r\n              );\r\n              this.clearSpaceForBigEnemy(spawnPos.x, spawnPos.y);\r\n              break;\r\n            case 20:\r\n              spawned = new BeetleEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            case 21:\r\n              spawned = new KingEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n            default:\r\n              console.warn(\r\n                \"spawner tried to spawn unknown enemy type\",\r\n                this.enemySpawnType,\r\n              );\r\n              spawned = new ZombieEnemy(\r\n                this.room,\r\n                this.game,\r\n                position.x,\r\n                position.y,\r\n              );\r\n              break;\r\n          }\r\n\r\n          this.setSpawnFrequency(spawned?.maxHealth ?? 1);\r\n          this.nextSpawnTick = this.ticks + this.spawnFrequency;\r\n\r\n          if (shouldSpawn) {\r\n            this.room.projectiles.push(\r\n              new EnemySpawnAnimation(\r\n                this.room,\r\n                spawned,\r\n                position.x,\r\n                position.y,\r\n              ),\r\n            );\r\n            this.room.hitwarnings.push(\r\n              new HitWarning(this.game, position.x, position.y, this.x, this.y),\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      this.ticks++;\r\n    }\r\n  };\r\n\r\n  mutatePositionForBigEnemy = (x: number, y: number) => {\r\n    // Evaluate the full 2x2 footprint: (x,y), (x+1,y), (x,y+1), (x+1,y+1)\r\n    const tiles = [\r\n      { x, y },\r\n      { x: x + 1, y },\r\n      { x, y: y + 1 },\r\n      { x: x + 1, y: y + 1 },\r\n    ];\r\n\r\n    // If none of the 2x2 tiles are walls, keep position\r\n    const hasAnyWall = tiles.some(\r\n      (p) => this.room.roomArray[p.x]?.[p.y] instanceof Wall,\r\n    );\r\n    if (!hasAnyWall) return { x, y };\r\n\r\n    // Determine inward nudge based on any wall on room edges or outer walls\r\n    let nx = x;\r\n    let ny = y;\r\n    const leftEdge = this.room.roomX;\r\n    const rightEdge = this.room.roomX + this.room.width - 1;\r\n    const topEdge = this.room.roomY;\r\n    const bottomEdge = this.room.roomY + this.room.height - 1;\r\n\r\n    const anyLeftWall = tiles.some((p) => {\r\n      const t = this.room.roomArray[p.x]?.[p.y];\r\n      if (p.x === leftEdge) return true;\r\n      if (t instanceof Wall) return t.wallInfo?.()?.isLeftWall === true;\r\n      return false;\r\n    });\r\n    const anyRightWall = tiles.some((p) => {\r\n      const t = this.room.roomArray[p.x]?.[p.y];\r\n      if (p.x === rightEdge) return true;\r\n      if (t instanceof Wall) return t.wallInfo?.()?.isRightWall === true;\r\n      return false;\r\n    });\r\n    const anyTopWall = tiles.some((p) => {\r\n      const t = this.room.roomArray[p.x]?.[p.y];\r\n      if (p.y === topEdge) return true;\r\n      if (t instanceof Wall) return t.wallInfo?.()?.isTopWall === true;\r\n      return false;\r\n    });\r\n    const anyBottomWall = tiles.some((p) => {\r\n      const t = this.room.roomArray[p.x]?.[p.y];\r\n      if (p.y === bottomEdge) return true;\r\n      if (t instanceof Wall) return t.wallInfo?.()?.isBottomWall === true;\r\n      return false;\r\n    });\r\n\r\n    if (anyLeftWall) nx = Math.min(x + 1, rightEdge - 1);\r\n    if (anyRightWall) nx = Math.max(x - 1, leftEdge + 1);\r\n    if (anyTopWall) ny = Math.min(y + 1, bottomEdge - 1);\r\n    if (anyBottomWall) ny = Math.max(y - 1, topEdge + 1);\r\n\r\n    // Validate 2x2 stays inside room interior bounds\r\n    nx = Math.max(nx, leftEdge);\r\n    nx = Math.min(nx, rightEdge - 1);\r\n    ny = Math.max(ny, topEdge);\r\n    ny = Math.min(ny, bottomEdge - 1);\r\n\r\n    // Prefer non-solid top-left if available\r\n    const topLeft = this.room.roomArray[nx]?.[ny];\r\n    if (!topLeft || (topLeft as any).isSolid?.() !== true) {\r\n      return { x: nx, y: ny };\r\n    }\r\n    return { x, y };\r\n  };\r\n\r\n  clearSpaceForBigEnemy = (x: number, y: number) => {\r\n    for (let xx = 0; xx < 2; xx++) {\r\n      for (let yy = 0; yy < 2; yy++) {\r\n        let tile = this.room.roomArray[x + xx][y + yy];\r\n        if (tile instanceof Wall) {\r\n          const wallInfo = tile.wallInfo();\r\n          if (wallInfo?.isInnerWall) {\r\n            this.room.roomArray[x + xx][y + yy] = new Floor(\r\n              this.room,\r\n              x + xx,\r\n              y + yy,\r\n            ); // remove any walls\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  uniqueKillBehavior = () => {\r\n    this.room.currentSpawnerCount--;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    if (!this.dying) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Room, RoomType } from \"../room/room\";\r\nimport { Entity, EntityType } from \"../entity/entity\";\r\nimport { Wall } from \"../tile/wall\";\r\nimport { Player } from \"../player/player\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\n\r\nexport class Map {\r\n  game: Game;\r\n  mapData: any[] = [];\r\n  oldMapData: any[] = [];\r\n  depth: number;\r\n  scale: number;\r\n\r\n  offsetX: number = 0;\r\n  offsetY: number = 0;\r\n  softOffsetX: number = 0;\r\n  softOffsetY: number = 0;\r\n  player: Player;\r\n\r\n  // Fog of war properties - now stored per mapGroup\r\n  seenTilesByMapGroup: globalThis.Map<string, Set<string>> =\r\n    new globalThis.Map();\r\n  visibilityRadius: number = 4;\r\n\r\n  constructor(game: Game, player: Player) {\r\n    this.game = game;\r\n    this.scale = 1;\r\n    this.player = player;\r\n    //this.depth = player.game.level.depth\r\n  }\r\n\r\n  // Add helper method to collect down ladders from room array\r\n  getDownLaddersFromRoom = (room: Room): any[] => {\r\n    const downLadders: any[] = [];\r\n\r\n    // Safely iterate through the room array to find down ladders\r\n    if (room.roomArray) {\r\n      for (let x = room.roomX; x < room.roomX + room.width; x++) {\r\n        for (let y = room.roomY; y < room.roomY + room.height; y++) {\r\n          // Check bounds to avoid undefined access\r\n          if (room.roomArray[x] && room.roomArray[x][y]) {\r\n            const tile = room.roomArray[x][y];\r\n            // Check if tile is a DownLadder instance\r\n            if (\r\n              tile &&\r\n              tile.constructor &&\r\n              tile.constructor.name === \"DownLadder\"\r\n            ) {\r\n              downLadders.push(tile);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return downLadders;\r\n  };\r\n\r\n  saveMapData = () => {\r\n    this.clearMap();\r\n    const currentMapGroup = this.game.room.mapGroup.toString();\r\n\r\n    for (const room of this.game.levels[this.player.depth].rooms) {\r\n      if (\r\n        currentMapGroup === room.mapGroup.toString() &&\r\n        (room.entered === true || GameConstants.DEVELOPER_MODE)\r\n      ) {\r\n        this.mapData.push({\r\n          room: room,\r\n          walls: room.innerWalls,\r\n          doors: room.doors,\r\n          entities: room.entities,\r\n          items: room.items,\r\n          players: this.game.players,\r\n          downLadders: this.getDownLaddersFromRoom(room), // Add down ladders to map data\r\n          seenTiles:\r\n            this.seenTilesByMapGroup.get(currentMapGroup) || new Set<string>(), // Add seen tiles to map data\r\n        });\r\n      }\r\n    }\r\n\r\n    const enteredRooms = this.mapData\r\n      .map((data) => data.room)\r\n      .filter((room) => room.entered);\r\n\r\n    if (enteredRooms.length > 0) {\r\n      const sortedByX = [...enteredRooms].sort((a, b) => a.roomX - b.roomX);\r\n      const sortedByY = [...enteredRooms].sort((a, b) => a.roomY - b.roomY);\r\n\r\n      const maxX = sortedByX[sortedByX.length - 1].roomX;\r\n      const minY = sortedByY[0].roomY;\r\n\r\n      this.offsetX = maxX;\r\n      this.offsetY = minY;\r\n    } else {\r\n      this.offsetX = 0;\r\n      this.offsetY = 0;\r\n    }\r\n  };\r\n\r\n  clearMap = () => {\r\n    this.mapData = [];\r\n  };\r\n\r\n  saveOldMap = () => {\r\n    this.oldMapData = [...this.mapData];\r\n  };\r\n\r\n  renderMap = (delta: number) => {\r\n    Game.ctx.save(); // Save the current canvas state\r\n\r\n    this.setInitialCanvasSettings(1);\r\n    this.translateCanvas(0);\r\n    for (const data of this.mapData) {\r\n      this.drawRoom(data, delta);\r\n    }\r\n    /*for (const data of this.oldMapData) {\r\n      this.drawRoom(data);\r\n    }*/\r\n    this.resetCanvasTransform();\r\n\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n  updateOffsetXY = () => {\r\n    let diffX = this.offsetX - this.softOffsetX;\r\n    let diffY = this.offsetY - this.softOffsetY;\r\n\r\n    if (Math.abs(diffX) > 0.01) {\r\n      this.softOffsetX += diffX * 0.1;\r\n      this.softOffsetX = this.softOffsetX;\r\n    } else this.softOffsetX = this.offsetX;\r\n    if (Math.abs(diffY) > 0.01) {\r\n      this.softOffsetY += diffY * 0.1;\r\n      this.softOffsetY = this.softOffsetY;\r\n    } else this.softOffsetY = this.offsetY;\r\n  };\r\n\r\n  // Fog of war methods\r\n  updateSeenTiles = () => {\r\n    const playerX = Math.floor(this.player.x);\r\n    const playerY = Math.floor(this.player.y);\r\n    const currentMapGroup = this.game.room.mapGroup.toString();\r\n\r\n    // Get or create seen tiles set for current map group\r\n    if (!this.seenTilesByMapGroup.has(currentMapGroup)) {\r\n      this.seenTilesByMapGroup.set(currentMapGroup, new Set<string>());\r\n    }\r\n    const seenTiles = this.seenTilesByMapGroup.get(currentMapGroup)!;\r\n\r\n    // Add tiles within circular radius around player to seen tiles\r\n    for (let dx = -this.visibilityRadius; dx <= this.visibilityRadius; dx++) {\r\n      for (let dy = -this.visibilityRadius; dy <= this.visibilityRadius; dy++) {\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        if (distance <= this.visibilityRadius) {\r\n          const tileKey = `${playerX + dx},${playerY + dy}`;\r\n          seenTiles.add(tileKey);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  isTileSeen = (x: number, y: number): boolean => {\r\n    const currentMapGroup = this.game.room.mapGroup.toString();\r\n    const seenTiles = this.seenTilesByMapGroup.get(currentMapGroup);\r\n    if (!seenTiles) return false;\r\n\r\n    const tileKey = `${Math.floor(x)},${Math.floor(y)}`;\r\n    return seenTiles.has(tileKey);\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    this.updateSeenTiles(); // Update fog of war\r\n    this.updateOffsetXY();\r\n    this.renderMap(delta);\r\n  };\r\n\r\n  setInitialCanvasSettings = (alpha: number) => {\r\n    Game.ctx.globalAlpha = alpha;\r\n    Game.ctx.globalCompositeOperation = \"source-over\";\r\n  };\r\n\r\n  translateCanvas = (offset: number) => {\r\n    Game.ctx.translate(\r\n      Math.floor(0.95 * GameConstants.WIDTH) -\r\n        //this.game.room.roomX -\r\n        //Math.floor(0.5 * this.game.room.width) +\r\n        15 * this.scale -\r\n        Math.floor(this.softOffsetX),\r\n      Math.floor(0.05 * GameConstants.HEIGHT) -\r\n        //this.game.room.roomY -\r\n        //Math.floor(0.5 * this.game.room.height) -\r\n        1 * this.scale -\r\n        offset -\r\n        Math.floor(this.softOffsetY),\r\n    );\r\n  };\r\n\r\n  drawRoom = (data, delta: number) => {\r\n    //this.drawUnderRoomPlayers(data.players, delta);\r\n\r\n    this.drawRoomOutline(data.room);\r\n\r\n    this.drawRoomWalls(data.walls);\r\n    this.drawRoomDoors(data.doors);\r\n    this.drawRoomEntities(data.entities);\r\n    this.drawRoomItems(data.items);\r\n    this.drawRoomPlayers(data.players, delta);\r\n    this.drawRoomDownLadders(data.downLadders);\r\n\r\n    // Render fog of war on top of everything\r\n    this.drawFogOfWar(data.room);\r\n  };\r\n\r\n  // Add fog of war overlay method\r\n  drawFogOfWar = (room) => {\r\n    const s = this.scale;\r\n    Game.ctx.save();\r\n    Game.ctx.fillStyle = \"#1a1a1a\";\r\n\r\n    // Use the seen tiles from the current mapData if available\r\n    const currentMapGroup = this.game.room.mapGroup.toString();\r\n    let seenTiles = this.seenTilesByMapGroup.get(currentMapGroup);\r\n\r\n    // If we have mapData, use the seen tiles from there (for consistency)\r\n    if (this.mapData.length > 0 && this.mapData[0].seenTiles) {\r\n      seenTiles = this.mapData[0].seenTiles;\r\n    }\r\n\r\n    // Draw fog over all tiles in the room that haven't been seen\r\n    for (let x = room.roomX; x < room.roomX + room.width; x++) {\r\n      for (let y = room.roomY; y < room.roomY + room.height; y++) {\r\n        const tileKey = `${Math.floor(x)},${Math.floor(y)}`;\r\n        if (!seenTiles || !seenTiles.has(tileKey)) {\r\n          Game.ctx.fillRect(x * s, y * s, 1 * s, 1 * s);\r\n        }\r\n      }\r\n    }\r\n\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawRoomOutline = (level) => {\r\n    const s = this.scale;\r\n    Game.ctx.fillStyle = \"#5A5A5A\";\r\n    Game.ctx.fillRect(\r\n      level.roomX * s + 0,\r\n      level.roomY * s + 0,\r\n      level.width * s - 0,\r\n      level.height * s - 0,\r\n    );\r\n    if (level.type === RoomType.UPLADDER) Game.ctx.fillStyle = \"#101460\";\r\n    if (level.type === RoomType.DOWNLADDER) Game.ctx.fillStyle = \"#601410\";\r\n    Game.ctx.fillStyle = \"black\";\r\n    Game.ctx.fillRect(\r\n      level.roomX * s + 1,\r\n      level.roomY * s + 1,\r\n      level.width * s - 2,\r\n      level.height * s - 2,\r\n    );\r\n  };\r\n\r\n  drawRoomWalls = (walls) => {\r\n    const s = this.scale;\r\n    Game.ctx.save(); // Save the current canvas state\r\n    for (const wall of walls) {\r\n      Game.ctx.fillStyle = \"#404040\";\r\n      Game.ctx.fillRect(wall.x * s, wall.y * s, 1 * s, 1 * s);\r\n    }\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  drawRoomDoors = (doors) => {\r\n    const s = this.scale;\r\n    Game.ctx.save(); // Save the current canvas state\r\n    for (const door of doors) {\r\n      if (door.opened === false) Game.ctx.fillStyle = \"#5A5A5A\";\r\n      if (door.opened === true) {\r\n        Game.ctx.fillStyle = \"black\";\r\n        Game.ctx.fillRect(door.x * s, door.y * s, 1 * s, 1 * s);\r\n      }\r\n      Game.ctx.fillStyle = \"#5A5A5A\"; // Reset to default after each door\r\n    }\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  drawRoomPlayers = (players, delta: number) => {\r\n    const s = this.scale;\r\n    Game.ctx.save(); // Save the current canvas state\r\n    for (const i in players) {\r\n      Game.ctx.fillStyle = \"white\";\r\n      if (\r\n        this.game.levels[players[i].depth].rooms[players[i].levelID]\r\n          .mapGroup === this.game.room.mapGroup\r\n      ) {\r\n        Game.ctx.fillRect(players[i].x * s, players[i].y * s, 1 * s, 1 * s);\r\n      }\r\n    }\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  drawUnderRoomPlayers = (players, delta: number) => {\r\n    const s = this.scale;\r\n    Game.ctx.save(); // Save the current canvas state\r\n    for (const i in players) {\r\n      this.game.rooms[players[i].levelID].mapGroup === this.game.room.mapGroup;\r\n      {\r\n        if (Math.floor(Date.now() / 300) % 2) {\r\n          Game.ctx.fillStyle = \"#4D8C8C\";\r\n          // Draw 3x3 outline box around player\r\n          Game.ctx.fillRect(\r\n            (players[i].x - 1) * s,\r\n            (players[i].y - 1) * s,\r\n            1 * s,\r\n            1 * s,\r\n          ); // Top left\r\n          Game.ctx.fillRect(\r\n            players[i].x * s,\r\n            (players[i].y - 1) * s,\r\n            1 * s,\r\n            1 * s,\r\n          ); // Top middle\r\n          Game.ctx.fillRect(\r\n            (players[i].x + 1) * s,\r\n            (players[i].y - 1) * s,\r\n            1 * s,\r\n            1 * s,\r\n          ); // Top right\r\n          Game.ctx.fillRect(\r\n            (players[i].x - 1) * s,\r\n            players[i].y * s,\r\n            1 * s,\r\n            1 * s,\r\n          ); // Middle left\r\n          Game.ctx.fillRect(\r\n            (players[i].x + 1) * s,\r\n            players[i].y * s,\r\n            1 * s,\r\n            1 * s,\r\n          ); // Middle right\r\n          Game.ctx.fillRect(\r\n            (players[i].x - 1) * s,\r\n            (players[i].y + 1) * s,\r\n            1 * s,\r\n            1 * s,\r\n          ); // Bottom left\r\n          Game.ctx.fillRect(\r\n            players[i].x * s,\r\n            (players[i].y + 1) * s,\r\n            1 * s,\r\n            1 * s,\r\n          ); // Bottom middle\r\n          Game.ctx.fillRect(\r\n            (players[i].x + 1) * s,\r\n            (players[i].y + 1) * s,\r\n            1 * s,\r\n            1 * s,\r\n          ); // Bottom right\r\n        }\r\n      }\r\n    }\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  drawRoomEntities = (entities) => {\r\n    const s = this.scale;\r\n    Game.ctx.save(); // Save the current canvas state\r\n    for (const enemy of entities) {\r\n      this.setEntityColor(enemy);\r\n      Game.ctx.fillRect(enemy.x * s, enemy.y * s, 1 * s, 1 * s);\r\n    }\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  drawRoomDownLadders = (downLadders) => {\r\n    const s = this.scale;\r\n    Game.ctx.save(); // Save the current canvas state\r\n    for (const downLadder of downLadders) {\r\n      Game.ctx.fillStyle = \"#00FFFF\";\r\n      Game.ctx.fillRect(downLadder.x * s, downLadder.y * s, 1 * s, 1 * s);\r\n    }\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  setEntityColor = (enemy) => {\r\n    // No need to save/restore here as only fillStyle is being set\r\n    if (enemy.type === EntityType.ENEMY) {\r\n      Game.ctx.fillStyle = \"yellow\";\r\n    }\r\n    if (enemy.type === EntityType.PROP) {\r\n      Game.ctx.fillStyle = \"#847e87\";\r\n    }\r\n    if (enemy.type === EntityType.RESOURCE) {\r\n      Game.ctx.fillStyle = \"#5a595b\";\r\n    }\r\n    if (enemy.type === EntityType.FRIENDLY) {\r\n      Game.ctx.fillStyle = \"cyan\";\r\n    }\r\n  };\r\n\r\n  drawRoomItems = (items) => {\r\n    const s = this.scale;\r\n    Game.ctx.save(); // Save the current canvas state\r\n    for (const item of items) {\r\n      let x = item.x;\r\n      let y = item.y;\r\n      Game.ctx.fillStyle = \"#ac3232\";\r\n      if (!item.pickedUp) {\r\n        Game.ctx.fillRect(item.x * s, item.y * s, 1 * s, 1 * s);\r\n      }\r\n    }\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  resetCanvasTransform = () => {\r\n    Game.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Shrooms } from \"../../item/usable/shrooms\";\r\nimport { EntityType } from \"../entity\";\r\nimport { LightSource } from \"../../lighting/lightSource\";\r\nimport { Spellbook } from \"../../item/weapon/spellbook\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Candle } from \"../../item/light/candle\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Torch } from \"../../item/light/torch\";\r\n\r\nexport class Furnace extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 2;\r\n    this.tileY = 4;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"furnace\";\r\n    this.drops.push(new Torch(this.room, this.x, this.y));\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 25;\r\n    this.bloomColor = \"#FFA500\";\r\n    this.hasBloom = true;\r\n    this.bloomAlpha = 1;\r\n    this.softBloomAlpha = 0;\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      7,\r\n      [200, 30, 1],\r\n      4,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Floor } from \"../../tile/floor\";\r\nimport { Bones } from \"../../tile/bones\";\r\nimport { DeathParticle } from \"../../particle/deathParticle\";\r\nimport { WizardTeleportParticle } from \"../../particle/wizardTeleportParticle\";\r\nimport { WizardFireball } from \"../../projectile/wizardFireball\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { LightSource } from \"../../lighting/lightSource\";\r\n\r\nexport enum WizardState {\r\n  idle,\r\n  attack,\r\n  justAttacked,\r\n  teleport,\r\n}\r\n\r\nexport abstract class WizardEnemy extends Enemy {\r\n  static difficulty: number = 3;\r\n  ticks: number;\r\n  state: WizardState;\r\n  frame: number;\r\n  seenPlayer: boolean;\r\n  projectileColor: [number, number, number];\r\n  readonly ATTACK_RADIUS = 5;\r\n  static tileX: number = 6;\r\n  static tileY: number = 0;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 6;\r\n    this.tileY = 0;\r\n    this.frame = 0;\r\n    this.state = WizardState.attack;\r\n    this.seenPlayer = false;\r\n    this.alertTicks = 0;\r\n    this.name = \"wizard bomber\";\r\n    if (drop) this.drop = drop;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  newLightSource = (\r\n    x: number,\r\n    y: number,\r\n    radius: number,\r\n    color: [number, number, number],\r\n    brightness: number,\r\n  ) => {\r\n    this.lightSource = new LightSource(x, y, radius, color, brightness);\r\n  };\r\n\r\n  addLightSource = (lightSource: LightSource) => {\r\n    this.room.lightSources.push(lightSource);\r\n  };\r\n\r\n  removeLightSource = (lightSource: LightSource) => {\r\n    this.room.lightSources = this.room.lightSources.filter(\r\n      (ls) => ls !== lightSource,\r\n    );\r\n  };\r\n\r\n  hit = (): number => {\r\n    return 1;\r\n  };\r\n\r\n  withinAttackingRangeOfPlayer = (): boolean => {\r\n    let withinRange = false;\r\n    for (const i in this.game.players) {\r\n      if (\r\n        (this.x - this.game.players[i].x) ** 2 +\r\n          (this.y - this.game.players[i].y) ** 2 <=\r\n        this.ATTACK_RADIUS ** 2\r\n      ) {\r\n        withinRange = true;\r\n      }\r\n    }\r\n    return withinRange;\r\n  };\r\n\r\n  shuffle = (a) => {\r\n    let j, x, i;\r\n    for (i = a.length - 1; i > 0; i--) {\r\n      j = Math.floor(Random.rand() * (i + 1));\r\n      x = a[i];\r\n      a[i] = a[j];\r\n      a[j] = x;\r\n    }\r\n    return a;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n        switch (this.state) {\r\n          case WizardState.attack:\r\n            const nearestPlayerInfo = this.nearestPlayer();\r\n            if (nearestPlayerInfo !== false) {\r\n              const [distance, targetPlayer] = nearestPlayerInfo;\r\n              const attackLength = 20;\r\n\r\n              const offsets = this.calculateProjectileOffsets(\r\n                targetPlayer.x,\r\n                targetPlayer.y,\r\n                10,\r\n              );\r\n\r\n              this.attemptProjectilePlacement(\r\n                [\r\n                  { x: -1, y: 0 },\r\n                  { x: -2, y: 0 },\r\n                  { x: 1, y: 0 },\r\n                  { x: 2, y: 0 },\r\n                  { x: 0, y: -1 },\r\n                  { x: 0, y: -2 },\r\n                  { x: 0, y: 1 },\r\n                  { x: 0, y: 2 },\r\n                ],\r\n                WizardFireball,\r\n                false,\r\n              );\r\n            }\r\n            this.state = WizardState.justAttacked;\r\n            break;\r\n          case WizardState.justAttacked:\r\n            this.state = WizardState.idle;\r\n            break;\r\n          case WizardState.teleport:\r\n            let oldX = this.x;\r\n            let oldY = this.y;\r\n            let min = 100000;\r\n            let bestPos;\r\n            let emptyTiles = this.shuffle(this.room.getEmptyTiles());\r\n            emptyTiles = emptyTiles.filter(\r\n              (tile) =>\r\n                !this.room.projectiles.some(\r\n                  (projectile) =>\r\n                    projectile.x === tile.x && projectile.y === tile.y,\r\n                ),\r\n            );\r\n\r\n            let optimalDist = Game.randTable(\r\n              [2, 2, 3, 3, 3, 3, 3],\r\n              Random.rand,\r\n            );\r\n            // pick a random player to target\r\n            let player_ids = [];\r\n            for (const i in this.game.players) player_ids.push(i);\r\n            let target_player_id = Game.randTable(player_ids, Random.rand);\r\n            for (let t of emptyTiles) {\r\n              let newPos = t;\r\n              let dist =\r\n                Math.abs(newPos.x - this.game.players[target_player_id].x) +\r\n                Math.abs(newPos.y - this.game.players[target_player_id].y);\r\n              if (Math.abs(dist - optimalDist) < Math.abs(min - optimalDist)) {\r\n                min = dist;\r\n                bestPos = newPos;\r\n              }\r\n            }\r\n            if (bestPos) {\r\n              this.tryMove(bestPos.x, bestPos.y);\r\n              this.drawX = this.x - oldX;\r\n              this.drawY = this.y - oldY;\r\n              this.frame = 0; // trigger teleport animation\r\n              this.room.particles.push(new WizardTeleportParticle(oldX, oldY));\r\n              if (this.withinAttackingRangeOfPlayer()) {\r\n                this.state = WizardState.attack;\r\n              } else {\r\n                this.state = WizardState.idle;\r\n              }\r\n            }\r\n            break;\r\n          case WizardState.idle:\r\n            this.state = WizardState.teleport;\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n\r\n      if (this.state === WizardState.attack) this.tileX = 7;\r\n      else this.tileX = 6;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      if (this.frame >= 0) {\r\n        Game.drawMob(\r\n          Math.floor(this.frame) + 6,\r\n          2,\r\n          1,\r\n          2,\r\n          this.x,\r\n          this.y - 1.5,\r\n          1,\r\n          2,\r\n          this.softShadeColor,\r\n          this.shadeAmount(),\r\n        );\r\n        this.frame += 0.2 * delta;\r\n        if (this.frame > 11) this.frame = -1;\r\n      } else {\r\n        Game.drawMob(\r\n          this.tileX,\r\n          this.tileY,\r\n          1,\r\n          2,\r\n          this.x - this.drawX,\r\n          this.y - 1.3 - this.drawY,\r\n          1,\r\n          2,\r\n          this.softShadeColor,\r\n          this.shadeAmount(),\r\n        );\r\n      }\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { WeaponFragments } from \"../../item/usable/weaponFragments\";\r\nimport { Coin } from \"../../item/coin\";\r\n\r\nexport class FallenPillar extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 0;\r\n    this.tileY = 6;\r\n    this.hasShadow = true;\r\n    this.pushable = false;\r\n    this.w = 2;\r\n    this.name = \"fallen pillar\";\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 25;\r\n    this.hasShadow = false;\r\n    this.chainPushable = false;\r\n    //this.drawYOffset = 0.1;\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        2,\r\n        1,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY + 0.75,\r\n        2,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import * as UAParser from \"ua-parser-js\";\r\n\r\nexport interface DeviceInfo {\r\n  os: UAParser.IOS;\r\n  browser: UAParser.IBrowser;\r\n  device: UAParser.IDevice;\r\n  orientation: OrientationType;\r\n}\r\n\r\nexport const getDeviceInfo = (): DeviceInfo => {\r\n  const parser = new UAParser.UAParser(navigator.userAgent);\r\n  const result = parser.getResult();\r\n  const { browser, device, os } = result;\r\n\r\n  return {\r\n    os,\r\n    browser,\r\n    device,\r\n    orientation: screen.orientation.type,\r\n  };\r\n};\r\n","import { Game } from \"../game\";\r\nimport { Drawable } from \"./drawable\";\r\nimport { Room } from \"../room/room\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Utils } from \"../utility/utils\";\r\n\r\nexport enum HitWarningDirection {\r\n  North,\r\n  NorthEast,\r\n  East,\r\n  SouthEast,\r\n  South,\r\n  SouthWest,\r\n  West,\r\n  NorthWest,\r\n  Center,\r\n}\r\n\r\nexport class HitWarning extends Drawable {\r\n  x: number;\r\n  y: number;\r\n  dead: boolean;\r\n  static frame = 0;\r\n  private game: Game;\r\n  parent: Entity | null = null;\r\n  private _pointerDir: HitWarningDirection | null = null;\r\n  private _pointerOffset: { x: number; y: number } | null = null;\r\n  private tileX: number;\r\n  private tileY: number;\r\n  private eX: number;\r\n  private eY: number;\r\n  private offsetY: number;\r\n  private pointerOffset: { x: number; y: number };\r\n  private isEnemy: Boolean;\r\n  private dirOnly: Boolean;\r\n  private alpha: number = 0;\r\n  private ticks: number;\r\n  private tickedForDeath = false;\r\n\r\n  constructor(\r\n    game: Game,\r\n    x: number,\r\n    y: number,\r\n    eX?: number,\r\n    eY?: number,\r\n    isEnemy?: Boolean,\r\n    dirOnly: Boolean = false,\r\n    parent: Entity | null = null,\r\n  ) {\r\n    super();\r\n    this.x = x;\r\n    this.y = y;\r\n    this.dead = false;\r\n    this.game = game;\r\n    this.parent = parent;\r\n    this.tileX = 0;\r\n    this.tileY = 22;\r\n    this.eX = eX;\r\n    this.eY = eY;\r\n    this.offsetY = 0.2;\r\n    this.dirOnly = dirOnly;\r\n\r\n    this.isEnemy = isEnemy !== undefined ? isEnemy : true;\r\n    this.pointerOffset = this.getPointerOffset();\r\n    this.removeOverlapping();\r\n  }\r\n\r\n  tick = () => {\r\n    if (this.tickedForDeath) this.dead = true;\r\n    this.tickedForDeath = true;\r\n  };\r\n\r\n  static updateFrame = (delta: number) => {\r\n    HitWarning.frame += 0.125 * delta;\r\n    if (HitWarning.frame >= 2) HitWarning.frame = 0;\r\n  };\r\n\r\n  removeOverlapping = () => {\r\n    for (const entity of this.game.room.entities) {\r\n      if (\r\n        entity.x === this.x &&\r\n        entity.y === this.y &&\r\n        entity.pushable === false\r\n      ) {\r\n        this.dead = true;\r\n        break;\r\n      }\r\n    }\r\n    for (const door of this.game.room.doors) {\r\n      if (door.x === this.x && door.y === this.y) {\r\n        this.dead = true;\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  getPointerDir(): HitWarningDirection {\r\n    if (this._pointerDir === null) {\r\n      const dx = this.eX - this.x;\r\n      const dy = this.eY - this.y;\r\n\r\n      if (dx === 0 && dy === 0) {\r\n        this._pointerDir = HitWarningDirection.Center;\r\n      } else if (dx === 0) {\r\n        this._pointerDir =\r\n          dy < 0 ? HitWarningDirection.South : HitWarningDirection.North;\r\n      } else if (dy === 0) {\r\n        this._pointerDir =\r\n          dx < 0 ? HitWarningDirection.East : HitWarningDirection.West;\r\n      } else if (dx < 0) {\r\n        this._pointerDir =\r\n          dy < 0\r\n            ? HitWarningDirection.SouthEast\r\n            : HitWarningDirection.NorthEast;\r\n      } else {\r\n        this._pointerDir =\r\n          dy < 0\r\n            ? HitWarningDirection.SouthWest\r\n            : HitWarningDirection.NorthWest;\r\n      }\r\n\r\n      this.tileX = 0 + 2 * this._pointerDir;\r\n    }\r\n    return this._pointerDir;\r\n  }\r\n\r\n  private getPointerOffset(): { x: number; y: number } {\r\n    if (this._pointerOffset === null) {\r\n      const offsets = {\r\n        [HitWarningDirection.North]: { x: 0, y: 0.5 },\r\n        [HitWarningDirection.South]: { x: 0, y: -0.6 },\r\n        [HitWarningDirection.West]: { x: 0.6, y: 0 },\r\n        [HitWarningDirection.East]: { x: -0.6, y: 0 },\r\n        [HitWarningDirection.NorthEast]: { x: -0.5, y: 0.5 },\r\n        [HitWarningDirection.NorthWest]: { x: 0.5, y: 0.5 },\r\n        [HitWarningDirection.SouthEast]: { x: -0.5, y: -0.5 },\r\n        [HitWarningDirection.SouthWest]: { x: 0.5, y: -0.5 },\r\n        [HitWarningDirection.Center]: { x: 0, y: -0.25 },\r\n      };\r\n\r\n      this._pointerOffset = offsets[this.getPointerDir()];\r\n    }\r\n    return this._pointerOffset;\r\n  }\r\n\r\n  fadeHitwarnings = (delta: number) => {\r\n    if (!this.tickedForDeath) {\r\n      if (this.alpha < 1) this.alpha += 0.03 * delta;\r\n      if (this.alpha > 1) this.alpha = 1;\r\n    } else {\r\n      if (this.alpha > 0) this.alpha -= 0.03 * delta;\r\n      if (this.alpha < 0) this.alpha = 0;\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    this.fadeHitwarnings(delta);\r\n    if (\r\n      Math.abs(this.x - this.game.players[this.game.localPlayerID].x) <= 1 &&\r\n      Math.abs(this.y - this.game.players[this.game.localPlayerID].y) <= 1\r\n    ) {\r\n      Game.ctx.globalAlpha = this.alpha;\r\n      if (\r\n        this.isEnemy &&\r\n        Utils.distance(\r\n          this.x,\r\n          this.y,\r\n          this.game.players[this.game.localPlayerID].x,\r\n          this.game.players[this.game.localPlayerID].y,\r\n        ) <= 1\r\n      ) {\r\n        // Red Arrow that only renders one square away\r\n\r\n        Game.drawFX(\r\n          this.tileX + Math.floor(HitWarning.frame),\r\n          this.tileY,\r\n          1,\r\n          1,\r\n          this.x + this.pointerOffset.x,\r\n          this.y + this.pointerOffset.y - this.offsetY,\r\n          1,\r\n          1,\r\n        );\r\n      }\r\n      if (false) {\r\n        // removed for now because unneeded and overlaps poorly with top layer x\r\n        // Red X that only renders one square away\r\n        Game.drawFX(\r\n          18 + Math.floor(HitWarning.frame),\r\n          5,\r\n          1,\r\n          1,\r\n          this.x,\r\n          this.y - this.offsetY + 0,\r\n          1,\r\n          1,\r\n        );\r\n      }\r\n      Game.ctx.globalAlpha = 1;\r\n    }\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.fadeHitwarnings(delta);\r\n\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    if (this.isEnemy && this.getPointerDir() !== HitWarningDirection.North) {\r\n      //white arrow top layer\r\n      Game.drawFX(\r\n        this.tileX + Math.floor(HitWarning.frame),\r\n        this.tileY + 1,\r\n        1,\r\n        1,\r\n        this.x + this.pointerOffset.x,\r\n        this.y + this.pointerOffset.y - this.offsetY,\r\n        1,\r\n        1,\r\n      );\r\n    }\r\n    if (\r\n      Utils.distance(\r\n        this.x,\r\n        this.y,\r\n        this.game.players[this.game.localPlayerID].x,\r\n        this.game.players[this.game.localPlayerID].y,\r\n      ) <= 1\r\n    ) {\r\n      if (!this.dirOnly) {\r\n        // Red X that renders 1 square away for top layer\r\n        Game.drawFX(\r\n          18 + Math.floor(HitWarning.frame),\r\n          6,\r\n          1,\r\n          1,\r\n          this.x,\r\n          this.y - this.offsetY + 0,\r\n          1,\r\n          1,\r\n        );\r\n      }\r\n    }\r\n    Game.ctx.globalAlpha = 1;\r\n  };\r\n}\r\n","import type { Game } from \"../game\";\r\nimport type { Room } from \"../room/room\";\r\nimport { UpLadder } from \"../tile/upLadder\";\r\nimport type { DownLadder } from \"../tile/downLadder\";\r\nimport { statsTracker } from \"../game/stats\";\r\nimport { EnvType } from \"../constants/environmentTypes\";\r\n\r\nexport interface SidePathOptions {\r\n  caveRooms?: number;\r\n  mapWidth?: number;\r\n  mapHeight?: number;\r\n  locked?: boolean;\r\n  envType?: EnvType;\r\n  linearity?: number;\r\n  branching?: number; // 0..1 probability of adding a second branch door\r\n  loopiness?: number; // 0..1 scale for number of loop connections\r\n}\r\n\r\n/**\r\n * Centralized manager for creating and wiring up sidepaths (rope caves).\r\n *\r\n * Responsibilities:\r\n * - Deterministic pathId creation per down-ladder coordinate\r\n * - Invoke level generation for sidepaths and receive the linked room\r\n * - Merge newly generated sidepath rooms into the level\r\n * - Link all up-ladders in the sidepath back to the correct parent room/ladder\r\n * - Provide helpers to switch current active path before transitioning\r\n */\r\nexport class SidePathManager {\r\n  private game: Game;\r\n\r\n  constructor(game: Game) {\r\n    this.game = game;\r\n  }\r\n\r\n  /**\r\n   * Generate the sidepath for a given `DownLadder` if it doesn't already exist.\r\n   * Populates `downLadder.linkedRoom` and links up-ladders appropriately.\r\n   */\r\n  async generateFor(downLadder: DownLadder): Promise<void> {\r\n    if (downLadder.linkedRoom) return;\r\n\r\n    const targetDepth = downLadder.room.depth + (downLadder.isSidePath ? 0 : 1);\r\n    const pathId = this.getDeterministicPathId(downLadder);\r\n\r\n    await this.game.levelgen.generate(\r\n      this.game,\r\n      targetDepth,\r\n      downLadder.isSidePath,\r\n      (linkedRoom) => this.handleLinkedRoom(downLadder, linkedRoom),\r\n      downLadder.environment,\r\n      false,\r\n      pathId,\r\n      downLadder.opts,\r\n    );\r\n\r\n    statsTracker.recordSidePathEntered({\r\n      depth: this.game.currentDepth,\r\n      sidePath: downLadder.linkedRoom.envType,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Switches the active path to the sidepath associated with this down ladder\r\n   * (to ensure subsequent transitions and spawns align with the right path).\r\n   */\r\n  switchToPathBeforeTransition(downLadder: DownLadder): void {\r\n    if (downLadder.isSidePath && downLadder.linkedRoom) {\r\n      (this.game as any).currentPathId =\r\n        (downLadder.linkedRoom as any).pathId ||\r\n        (this.game as any).currentPathId ||\r\n        \"main\";\r\n    }\r\n  }\r\n\r\n  private getDeterministicPathId(d: DownLadder): string {\r\n    if (!d.isSidePath) return \"main\";\r\n    const parentPid: string = (this.game as any).currentPathId || \"main\";\r\n    const roomAnchor = `${d.room.depth}:${d.room.roomX},${d.room.roomY}`;\r\n    const tileAnchor = `${d.x},${d.y}`;\r\n    const coordPid = `sp:${parentPid}:${roomAnchor}:${tileAnchor}`;\r\n    const legacyGid: string =\r\n      ((d as any).globalId as string) ||\r\n      `${(d.room as any).globalId}:${d.x},${d.y}`;\r\n    // Prefer coordinate-based pid; fall back to legacy GID-based for old saves\r\n    return coordPid || legacyGid || \"main\";\r\n  }\r\n\r\n  private handleLinkedRoom(downLadder: DownLadder, linkedRoom: Room): void {\r\n    if (downLadder.isSidePath) {\r\n      this.handleSidePathRooms(linkedRoom);\r\n    }\r\n\r\n    downLadder.linkedRoom = linkedRoom;\r\n    this.linkUpLadders(downLadder);\r\n  }\r\n\r\n  /**\r\n   * Merge rooms belonging to the newly created sidepath's mapGroup into the generated level.\r\n   */\r\n  private handleSidePathRooms(linkedRoom: Room): void {\r\n    const level = linkedRoom.level;\r\n    const sidePathRooms = this.game.rooms.filter(\r\n      (room) => room.mapGroup === linkedRoom.mapGroup,\r\n    );\r\n    const startingId = level.rooms.length;\r\n    sidePathRooms.forEach((room, index) => {\r\n      room.id = startingId + index;\r\n      level.rooms.push(room);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * For sidepaths, ensure ALL up ladders in this sidepath mapGroup link back to the correct parent room.\r\n   * For main path, link the first up ladder in the generated room.\r\n   */\r\n  private linkUpLadders(downLadder: DownLadder): void {\r\n    if (!downLadder.linkedRoom) return;\r\n\r\n    if (downLadder.isSidePath) {\r\n      const level = downLadder.linkedRoom.level;\r\n      const groupId = downLadder.linkedRoom.mapGroup;\r\n      const groupRooms = level.rooms.filter((r) => r.mapGroup === groupId);\r\n      for (const room of groupRooms) {\r\n        for (let x = room.roomX; x < room.roomX + room.width; x++) {\r\n          for (let y = room.roomY; y < room.roomY + room.height; y++) {\r\n            const tile = room.roomArray[x]?.[y];\r\n            if (tile instanceof UpLadder) {\r\n              this.setUpLadderLink(downLadder, tile as UpLadder);\r\n              if (\r\n                !downLadder.entryUpLadderPos &&\r\n                room === downLadder.linkedRoom\r\n              ) {\r\n                downLadder.entryUpLadderPos = {\r\n                  x: (tile as any).x,\r\n                  y: (tile as any).y,\r\n                };\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // Non-sidepath: link the first up ladder in the generated room\r\n      for (\r\n        let x = downLadder.linkedRoom.roomX;\r\n        x < downLadder.linkedRoom.roomX + downLadder.linkedRoom.width;\r\n        x++\r\n      ) {\r\n        for (\r\n          let y = downLadder.linkedRoom.roomY;\r\n          y < downLadder.linkedRoom.roomY + downLadder.linkedRoom.height;\r\n          y++\r\n        ) {\r\n          const tile = downLadder.linkedRoom.roomArray[x]?.[y];\r\n          if (tile instanceof UpLadder) {\r\n            this.setUpLadderLink(downLadder, tile as UpLadder);\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private setUpLadderLink(downLadder: DownLadder, upLadder: UpLadder): void {\r\n    if (downLadder.isSidePath) {\r\n      upLadder.linkedRoom = downLadder.room;\r\n      (upLadder as any).isRope = true;\r\n      // Record the exact parent down-ladder tile to spawn on when going back up\r\n      (upLadder as any).exitDownLadderPos = {\r\n        x: downLadder.x,\r\n        y: downLadder.y,\r\n      };\r\n    } else {\r\n      upLadder.linkedRoom = this.game.levels[downLadder.room.depth].exitRoom;\r\n    }\r\n  }\r\n}\r\n","// src/entity/enemy/armoredzombieEnemy.ts\r\nimport { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\n\r\nexport class ArmoredzombieEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  static difficulty: number = 2;\r\n  static tileX: number = 17;\r\n  static tileY: number = 8;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 2;\r\n    this.maxHealth = 2;\r\n    this.defaultMaxHealth = 2;\r\n    this.tileX = 17;\r\n    this.tileY = 8;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.deathParticleColor = \"#ffffff\";\r\n    this.name = \"armored zombie\";\r\n    this.forwardOnlyAttack = true;\r\n    this.armored = true;\r\n\r\n    if (drop) this.drop = drop;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      this.ticks++;\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n            }\r\n          }\r\n          for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n              if (\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                // don't walk on active spiketraps\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n\r\n          let grid = [];\r\n          for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n            grid[x] = [];\r\n            for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n              if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                grid[x][y] = this.room.roomArray[x][y];\r\n              else grid[x][y] = false;\r\n            }\r\n          }\r\n          let moves = astar.AStar.search(\r\n            grid,\r\n            this,\r\n            this.targetPlayer,\r\n            disablePositions,\r\n            false,\r\n            false,\r\n            true,\r\n            this.direction,\r\n          );\r\n          if (moves.length > 0) {\r\n            let moveX = moves[0].pos.x;\r\n            let moveY = moves[0].pos.y;\r\n            let oldDir = this.direction;\r\n            let player = this.targetPlayer;\r\n            this.facePlayer(player);\r\n            if (moveX > oldX) this.direction = Direction.RIGHT;\r\n            else if (moveX < oldX) this.direction = Direction.LEFT;\r\n            else if (moveY > oldY) this.direction = Direction.DOWN;\r\n            else if (moveY < oldY) this.direction = Direction.UP;\r\n            if (oldDir == this.direction) {\r\n              let hitPlayer = false;\r\n              for (const i in this.game.players) {\r\n                if (\r\n                  this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                  this.game.players[i].x === moveX &&\r\n                  this.game.players[i].y === moveY &&\r\n                  oldDir == this.direction\r\n                ) {\r\n                  this.game.players[i].hurt(this.hit(), this.name);\r\n                  this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                  this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                  if (\r\n                    this.game.players[i] ===\r\n                    this.game.players[this.game.localPlayerID]\r\n                  )\r\n                    this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n                }\r\n              }\r\n              if (!hitPlayer) {\r\n                this.tryMove(moveX, moveY);\r\n                this.setDrawXY(oldX, oldY);\r\n\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (this.direction == Direction.LEFT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.RIGHT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.DOWN) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.UP) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          this.makeHitWarnings();\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.makeHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.tileX = 27;\r\n      this.tileY = 8;\r\n      if (this.health <= 1 || this.dying) {\r\n        this.tileX = 17;\r\n        this.tileY = 8;\r\n      }\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX + (this.tileX === 5 ? Math.floor(this.frame) : 0),\r\n        this.tileY + this.direction * 2,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Player } from \"../player/player\";\r\nimport { Input } from \"./input\";\r\nimport { MouseCursor } from \"../gui/mouseCursor\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\nimport { GameConstants } from \"./gameConstants\";\r\nimport { Enemy } from \"../entity/enemy/enemy\";\r\nimport { CrabEnemy } from \"../entity/enemy/crabEnemy\";\r\nimport { FrogEnemy } from \"../entity/enemy/frogEnemy\";\r\nimport { ZombieEnemy } from \"../entity/enemy/zombieEnemy\";\r\nimport { SkullEnemy } from \"../entity/enemy/skullEnemy\";\r\nimport { EnergyWizardEnemy } from \"../entity/enemy/energyWizard\";\r\nimport { ChargeEnemy } from \"../entity/enemy/chargeEnemy\";\r\nimport { RookEnemy } from \"../entity/enemy/rookEnemy\";\r\nimport { BishopEnemy } from \"../entity/enemy/bishopEnemy\";\r\nimport { ArmoredzombieEnemy } from \"../entity/enemy/armoredzombieEnemy\";\r\nimport { BigSkullEnemy } from \"../entity/enemy/bigSkullEnemy\";\r\nimport { QueenEnemy } from \"../entity/enemy/queenEnemy\";\r\nimport { KnightEnemy } from \"../entity/enemy/knightEnemy\";\r\nimport { BigKnightEnemy } from \"../entity/enemy/bigKnightEnemy\";\r\nimport { FireWizardEnemy } from \"../entity/enemy/fireWizard\";\r\nimport { Spawner } from \"../entity/enemy/spawner\";\r\nimport { OccultistEnemy } from \"../entity/enemy/occultistEnemy\";\r\n\r\n//enemy typeof to class map\r\nconst enemyClassMap = {\r\n  CrabEnemy: CrabEnemy,\r\n  FrogEnemy: FrogEnemy,\r\n  ZombieEnemy: ZombieEnemy,\r\n  SkullEnemy: SkullEnemy,\r\n  EnergyWizardEnemy: EnergyWizardEnemy,\r\n  ChargeEnemy: ChargeEnemy,\r\n  RookEnemy: RookEnemy,\r\n  BishopEnemy: BishopEnemy,\r\n  ArmoredzombieEnemy: ArmoredzombieEnemy,\r\n  BigSkullEnemy: BigSkullEnemy,\r\n  QueenEnemy: QueenEnemy,\r\n  KnightEnemy: KnightEnemy,\r\n  BigKnightEnemy: BigKnightEnemy,\r\n  FireWizardEnemy: FireWizardEnemy,\r\n  Spawner: Spawner,\r\n  OccultistEnemy: OccultistEnemy,\r\n};\r\n\r\ninterface BestiaryEntry {\r\n  name: string;\r\n  description: string;\r\n  tileX: number;\r\n  tileY: number;\r\n}\r\n\r\nexport class Bestiary {\r\n  game: Game;\r\n  player: Player;\r\n  isOpen: boolean = false;\r\n  openTime: number = Date.now();\r\n  entries: Array<BestiaryEntry>;\r\n  seenEnemies: Set<typeof Enemy>;\r\n  frame: number = 0;\r\n  activeEntryIndex: number = 0;\r\n  // Static variables for logbook button position\r\n  private buttonY: number;\r\n  private buttonX: number;\r\n\r\n  constructor(game: Game, player: Player) {\r\n    this.game = game;\r\n    this.player = player;\r\n    this.entries = [];\r\n    this.activeEntryIndex = 0;\r\n    this.buttonX = Math.round(\r\n      (Math.round(GameConstants.WIDTH / 2) + 3) / GameConstants.TILESIZE,\r\n    );\r\n    this.buttonY = Math.round(10);\r\n    this.seenEnemies = new Set();\r\n  }\r\n\r\n  /**\r\n   * Opens the logbook window.\r\n   */\r\n  open = () => {\r\n    if (this.seenEnemies.size === 0)\r\n      this.seenEnemies = this.game.tutorialListener.seenEnemies;\r\n    this.isOpen = true;\r\n    this.openTime = Date.now();\r\n  };\r\n\r\n  /**\r\n   * Closes the logbook window.\r\n   */\r\n  close = () => {\r\n    this.isOpen = false;\r\n  };\r\n\r\n  entryUp = () => {\r\n    this.activeEntryIndex =\r\n      (this.activeEntryIndex - 1 + this.entries.length) % this.entries.length;\r\n  };\r\n\r\n  entryDown = () => {\r\n    this.activeEntryIndex = (this.activeEntryIndex + 1) % this.entries.length;\r\n  };\r\n\r\n  /**\r\n   * Toggles the logbook window's open state.\r\n   */\r\n  toggleOpen = () => {\r\n    this.isOpen ? this.close() : this.open();\r\n  };\r\n\r\n  /**\r\n   * Adds a new entry to the logbook.\r\n   * @param enemy The enemy to add.\r\n   */\r\n  addEntry = (enemy: typeof Enemy) => {\r\n    const enemyClass = enemyClassMap[enemy.name];\r\n    this.entries.push({\r\n      name: enemy.name,\r\n      description: enemyClass.prototype.description,\r\n      tileX: enemyClass.prototype.tileX,\r\n      tileY: enemyClass.prototype.tileY,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Draws the logbook interface.\r\n   * @param delta The time delta since the last frame.\r\n   */\r\n  draw = (delta: number) => {\r\n    if (!this.isOpen) return;\r\n    Game.ctx.save();\r\n\r\n    // Draw semi-transparent background\r\n    Game.ctx.fillStyle = \"rgba(0, 0, 0, 0.8)\";\r\n    Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n\r\n    // Define dimensions similar to Inventory\r\n    const s = Math.min(18, (18 * (Date.now() - this.openTime)) / 100); // example scaling\r\n    const b = 2; // border\r\n    const g = -2; // gap\r\n    const ob = 1; // outer border\r\n    const width = 5 * (s + 2 * b + g) - g; // assuming 5 columns\r\n    const height = 4 * (s + 2 * b + g) - g; // assuming 4 rows\r\n\r\n    const startX = Math.round(0.5 * GameConstants.WIDTH - 0.5 * width) - ob;\r\n    const startY = Math.round(0.5 * GameConstants.HEIGHT - 0.5 * height) - ob;\r\n\r\n    // Draw main logbook background\r\n    Game.ctx.fillStyle = \"white\";\r\n    Game.ctx.fillRect(startX, startY, width + 2 * ob, height + 2 * ob);\r\n\r\n    // Draw logbook entries\r\n    Game.ctx.fillStyle = \"black\";\r\n    const padding = 10;\r\n\r\n    if (this.entries.length === 0) {\r\n      Game.fillText(\"No enemies seen yet\", startX + padding, startY + padding);\r\n    } else {\r\n      this.entries.forEach((entry, index) => {\r\n        Game.fillText(\r\n          entry.name,\r\n          startX + padding,\r\n          startY + padding + index * 20,\r\n        );\r\n      });\r\n\r\n      this.drawEnemySprite(\r\n        this.entries[this.activeEntryIndex].tileX,\r\n        this.entries[this.activeEntryIndex].tileY,\r\n        delta,\r\n      );\r\n    }\r\n    // Draw logbook button\r\n    this.drawLogbookButton(delta);\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawEnemySprite = (tileX: number, tileY: number, delta: number) => {\r\n    this.frame += Math.round(0.1 * delta * 10) / 10;\r\n    if (this.frame >= 4) this.frame = 0;\r\n\r\n    Game.drawMob(tileX, tileY, 1, 1, 1, 1, 1, 1, \"Black\", 0);\r\n  };\r\n\r\n  /**\r\n   * Draws the logbook button on the screen.\r\n   * @param delta The time delta since the last frame.\r\n   */\r\n  drawLogbookButton = (delta: number) => {\r\n    Game.ctx.save();\r\n    this.buttonX = LevelConstants.SCREEN_W - 2;\r\n    this.buttonY = LevelConstants.SCREEN_H - 2.25;\r\n    Game.drawFX(0, 0, 2, 2, this.buttonX, this.buttonY, 2, 2);\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  /**\r\n   * Handles mouse down events.\r\n   * @param x The x-coordinate of the mouse.\r\n   * @param y The y-coordinate of the mouse.\r\n   * @param button The mouse button pressed.\r\n   */\r\n  handleMouseDown = (x: number, y: number, button: number) => {\r\n    if (button !== 0) return; // Only respond to left click\r\n\r\n    if (this.isPointInLogbookButton(x, y)) {\r\n      this.toggleOpen();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles mouse up events.\r\n   * @param x The x-coordinate of the mouse.\r\n   * @param y The y-coordinate of the mouse.\r\n   * @param button The mouse button released.\r\n   */\r\n  handleMouseUp = (x: number, y: number, button: number) => {\r\n    // Implement if needed\r\n  };\r\n\r\n  /**\r\n   * Handles hold detection.\r\n   */\r\n  onHoldDetected = () => {\r\n    // Implement if needed\r\n  };\r\n\r\n  /**\r\n   * Checks if a point is within the logbook button bounds.\r\n   * @param x The x-coordinate to check.\r\n   * @param y The y-coordinate to check.\r\n   * @returns True if the point is within the button bounds, else false.\r\n   */\r\n  isPointInLogbookButton = (x: number, y: number): boolean => {\r\n    const tX = x / GameConstants.TILESIZE;\r\n    const tY = y / GameConstants.TILESIZE;\r\n    return (\r\n      tX >= this.buttonX &&\r\n      tX <= this.buttonX + 2 &&\r\n      tY >= this.buttonY &&\r\n      tY <= this.buttonY + 2\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Updates the logbook state each game tick.\r\n   */\r\n  tick = () => {\r\n    if (this.isOpen) {\r\n      // Update logbook-related logic here\r\n    }\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { GoldRing } from \"../jewelry/goldRing\";\r\nimport { Usable } from \"../usable/usable\";\r\n\r\nexport class BlueGem extends Usable {\r\n  static itemName = \"zircon\";\r\n\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 13;\r\n    this.tileY = 0;\r\n    this.name = BlueGem.itemName;\r\n    this.canUseOnOther = true;\r\n\r\n    this.stackable = true;\r\n  }\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (other.name === \"gold ring\") {\r\n      let goldRing = other as GoldRing;\r\n      goldRing.embed(player, this);\r\n    }\r\n  };\r\n\r\n  getDescription = (): string => {\r\n    return \"A gem of zircon. Embed it into a gold ring to imbue it with magic.\";\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Equippable } from \"../equippable\";\r\n\r\nexport class AmberRing extends Equippable {\r\n  static itemName = \"amber ring\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 14;\r\n    this.tileY = 2;\r\n    this.name = AmberRing.itemName;\r\n    this.stackable = false;\r\n    this.description = \"A ring of amber\";\r\n  }\r\n}\r\n","import { Direction, Game } from \"../game\";\r\nimport { Room } from \"../room/room\";\r\nimport { Player } from \"../player/player\";\r\nimport { HealthBar } from \"../drawable/healthbar\";\r\nimport { Drawable } from \"../drawable/drawable\";\r\nimport { Item } from \"../item/item\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { HitWarning } from \"../drawable/hitWarning\";\r\nimport { Projectile } from \"../projectile/projectile\";\r\nimport { Utils } from \"../utility/utils\";\r\nimport type { LightSource } from \"../lighting/lightSource\";\r\nimport { DamageNumber } from \"../particle/damageNumber\";\r\nimport { DownLadder } from \"../tile/downLadder\";\r\nimport { Door } from \"../tile/door\";\r\nimport { Wall } from \"../tile/wall\";\r\nimport { IdGenerator } from \"../globalStateManager/IdGenerator\";\r\nimport { globalEventBus } from \"../event/eventBus\";\r\nimport { EVENTS } from \"../event/events\";\r\nimport { Shadow } from \"../drawable/shadow\";\r\n\r\nimport { DropTable } from \"../item/dropTable\";\r\nimport { Weapon } from \"../item/weapon/weapon\";\r\nimport { EnemyShield } from \"../projectile/enemyShield\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { ImageParticle } from \"../particle/imageParticle\";\r\nimport { Coin } from \"../item/coin\";\r\nimport { Random } from \"../utility/random\";\r\nimport { XPPopup } from \"../particle/xpPopup\";\r\nimport { Tile } from \"../tile/tile\";\r\nimport { BeamEffect } from \"../projectile/beamEffect\";\r\nimport { Lighting } from \"../lighting/lighting\";\r\n\r\nexport enum EntityDirection {\r\n  DOWN,\r\n  UP,\r\n  RIGHT,\r\n  LEFT,\r\n}\r\n\r\nexport enum EntityType {\r\n  ENEMY,\r\n  FRIENDLY,\r\n  RESOURCE,\r\n  PROP,\r\n  CHEST,\r\n}\r\n\r\nexport interface entityData {\r\n  name: string;\r\n  location: { x: number; y: number };\r\n}\r\n\r\nexport interface bloomData {\r\n  blurAmount: number;\r\n  color: string;\r\n  xOffset: number;\r\n  yOffset: number;\r\n  size: number;\r\n  alpha: number;\r\n}\r\n\r\nexport class Entity extends Drawable {\r\n  globalId: string;\r\n  room: Room;\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n  direction: Direction;\r\n  drawX: number;\r\n  drawY: number;\r\n  dead: boolean;\r\n  game: Game;\r\n  health: number;\r\n  maxHealth: number;\r\n  defaultMaxHealth: number;\r\n  protected tileX: number;\r\n  protected tileY: number;\r\n  protected hasShadow: boolean;\r\n  skipNextTurns: number;\r\n  //TODO: change these to functions? for enemies that switch states\r\n  destroyable: boolean; // can the player destroy this enemy?\r\n  destroyableByOthers: boolean; // can other entities destroy this enemy?\r\n  pushable: boolean; // can the player push this enemy? (true for crates/barrels, false for regular mobs)\r\n  chainPushable: boolean; // can the player pushing another enemy push this enemy? (default true)\r\n  interactable: boolean; // can the player interact\r\n  protected deathParticleColor: string;\r\n  healthBar: HealthBar;\r\n  drop: Item;\r\n  protected sleepingZFrame = 0;\r\n  alertTicks: number;\r\n  protected exclamationFrame: number;\r\n  lastX: number;\r\n  lastY: number;\r\n  protected hitBy: Player;\r\n  protected crushX: number;\r\n  protected crushY: number;\r\n  protected crushVertical: boolean;\r\n  protected crushed: boolean;\r\n  rumbling: boolean;\r\n  protected animationSpeed: number;\r\n  drawYOffset: number;\r\n  name: string;\r\n  protected orthogonalAttack: boolean;\r\n  protected diagonalAttack: boolean;\r\n  protected forwardOnlyAttack: boolean;\r\n  protected attackRange: number;\r\n  protected diagonalAttackRange: number;\r\n  lightSource: LightSource;\r\n  drawMoveSpeed: number;\r\n  unconscious: boolean;\r\n  hitWarnings: HitWarning[];\r\n  imageParticleX: number = 0;\r\n  imageParticleY: number = 26;\r\n  dropChance: number = 1;\r\n  isEnemy: boolean;\r\n  shielded: boolean;\r\n  buffed: boolean;\r\n  buffedBefore: boolean;\r\n  //shieldHealth: number;\r\n  frame: number;\r\n  shield: EnemyShield;\r\n  shieldedBefore: boolean;\r\n  //shadeColor: string;\r\n  shadeMultiplier: number = 1;\r\n  hurting: boolean;\r\n  hurtFrame: number;\r\n  softShadeColor: string;\r\n  shadeColor: string;\r\n  dying: boolean;\r\n  dyingFrame: number;\r\n  alpha: number;\r\n  cloned: boolean;\r\n  hasBloom: boolean;\r\n  bloomColor: string = \"#FFFFFF\";\r\n  bloomAlpha: number = 1;\r\n  softBloomAlpha: number = 1;\r\n  bloomSize: number = 1;\r\n  bloomOffsetY: number = 0;\r\n  target: { x: number; y: number };\r\n  moving: boolean;\r\n  dropTable: string[];\r\n  drops: Item[];\r\n  opaque: boolean = false;\r\n  opacity: number = 0;\r\n  hasHitParticles: boolean = true;\r\n  hasDamageNumbers: boolean = true;\r\n  armored: boolean = false;\r\n  justHurt: boolean = false;\r\n  stunned: boolean = false;\r\n  collidable: boolean = true;\r\n  canDestroyOthers: boolean = false;\r\n  canCrushOthers: boolean = false;\r\n  beamIds: string[] = [];\r\n  // Shadow rendering resources moved to Shadow class\r\n\r\n  private _imageParticleTiles: { x: number; y: number };\r\n  hitSound: () => void;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super();\r\n    this.globalId = IdGenerator.generate(\"EN\");\r\n\r\n    // Check if we're in cloning mode\r\n    const isCloning = (this.constructor as any).__isCloning;\r\n\r\n    // Set cloned status immediately if we're cloning\r\n    if (isCloning) {\r\n      this.cloned = true;\r\n    } else this.cloned = false;\r\n\r\n    // Only set the absolute minimum required properties if cloning\r\n    this.room = room;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.w = 1;\r\n    this.h = 1;\r\n    this.game = game;\r\n    this.drawX = 0;\r\n    this.drawY = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 0;\r\n    this.tileY = 0;\r\n    this.hasShadow = true;\r\n    this.skipNextTurns = 0;\r\n    this.direction = Direction.DOWN;\r\n    this.destroyable = true;\r\n    this.destroyableByOthers = true;\r\n    this.pushable = false;\r\n    this.chainPushable = true;\r\n    this.interactable = false;\r\n    this.healthBar = new HealthBar();\r\n    this.alertTicks = 0;\r\n    this.exclamationFrame = 0;\r\n    this.lastX = x;\r\n    this.lastY = y;\r\n    this.hitBy = null;\r\n    this.crushX = 1;\r\n    this.crushY = 1;\r\n    this.crushVertical = false;\r\n    this.crushed = false;\r\n    this.rumbling = false;\r\n    this.animationSpeed = 0.1;\r\n    this.drawYOffset = 1.175;\r\n    this.hitWarnings = [];\r\n    this.orthogonalAttack = false;\r\n    this.diagonalAttack = false;\r\n    this.forwardOnlyAttack = false;\r\n    this.attackRange = 1;\r\n    this.diagonalAttackRange = 1;\r\n    this.drawMoveSpeed = 0.9;\r\n    this.unconscious = false;\r\n    this.dropChance = 0.02;\r\n    this.isEnemy = false;\r\n    this.shielded = false;\r\n    this.shield = null;\r\n    this.frame = 0;\r\n    this.shieldedBefore = false;\r\n    this._imageParticleTiles = { x: 0, y: 0 };\r\n    this.hitSound = null;\r\n    this.shadeColor = this.room.shadeColor;\r\n    this.hurting = false;\r\n    this.hurtFrame = 0;\r\n    this.softShadeColor = \"#000000\";\r\n    this.dying = false;\r\n    this.dyingFrame = 30;\r\n    this.alpha = 1;\r\n    this.dead = false;\r\n    this.hasBloom = false;\r\n    this.bloomColor = \"#FFFFFF\";\r\n    this.moving = false;\r\n    this.dropTable = [];\r\n    this.drops = [];\r\n    this.canDestroyOthers = false;\r\n    this.canCrushOthers = false;\r\n    this.beamIds = [];\r\n    if (this.drop) this.drops.push(this.drop);\r\n  }\r\n\r\n  static add<\r\n    T extends new (\r\n      room: Room,\r\n      game: Game,\r\n      x: number,\r\n      y: number,\r\n      ...rest: any[]\r\n    ) => Entity,\r\n  >(this: T, room: Room, game: Game, x: number, y: number, ...rest: any[]) {\r\n    // Safety checks: verify tile exists and is not solid\r\n    if (!room.roomArray[x] || !room.roomArray[x][y]) {\r\n      console.warn(`Cannot add entity: tile at (${x}, ${y}) does not exist`);\r\n      return null;\r\n    }\r\n\r\n    if (room.roomArray[x][y].isSolid()) {\r\n      console.warn(`Cannot add entity: tile at (${x}, ${y}) is solid`);\r\n      return null;\r\n    }\r\n\r\n    const entity = new this(room, game, x, y, ...rest);\r\n    room.entities.push(entity);\r\n    return entity;\r\n  }\r\n\r\n  static cloneEntity(original: Entity): Entity {\r\n    // Set a temporary flag on the constructor to indicate we're cloning\r\n    (original.constructor as any).__isCloning = true;\r\n\r\n    // Create minimal clone\r\n    const cloned = new (original.constructor as typeof Entity)(\r\n      original.room,\r\n      original.game,\r\n      original.x,\r\n      original.y,\r\n    );\r\n\r\n    // Remove the temporary flag\r\n    delete (original.constructor as any).__isCloning;\r\n\r\n    // Copy only properties needed for death animation\r\n    Object.assign(cloned, {\r\n      cloned: true,\r\n      dead: false,\r\n      dying: true,\r\n      drawableY: original.drawableY,\r\n      tileX: original.tileX,\r\n      tileY: original.tileY,\r\n      frame: original.frame,\r\n      direction: original.direction,\r\n      drawX: original.drawX,\r\n      drawY: original.drawY,\r\n      alpha: original.alpha,\r\n      shadeColor: original.shadeColor,\r\n      shadeMultiplier: original.shadeMultiplier,\r\n      softShadeColor: original.softShadeColor,\r\n      hasBloom: original.hasBloom,\r\n      bloomColor: original.bloomColor,\r\n      bloomAlpha: 1,\r\n      softBloomAlpha: 1,\r\n      dyingFrame: 30,\r\n    });\r\n\r\n    // Add to room's dead entities\r\n    original.room.deadEntities.push(cloned);\r\n\r\n    return cloned;\r\n  }\r\n\r\n  /**\r\n   * Clones the current entity without adding it to deadEntities.\r\n   */\r\n  clone(): Entity {\r\n    const cloned = Entity.cloneEntity(this);\r\n    cloned.dead = false; // Explicitly set as not dead\r\n    cloned.dying = true; // Ensure the clone is in a dying state\r\n\r\n    return cloned;\r\n  }\r\n\r\n  hoverText = (): string => {\r\n    return this.name;\r\n  };\r\n\r\n  get imageParticleTiles() {\r\n    return this._imageParticleTiles;\r\n  }\r\n\r\n  applyShield = (shieldHealth: number = 1, loading: boolean = false) => {\r\n    if (!this.shieldedBefore || loading) {\r\n      this.shield = new EnemyShield(this, this.x, this.y, shieldHealth);\r\n      this.shielded = true;\r\n      this.shieldedBefore = true;\r\n      if (!loading) {\r\n        this.health += shieldHealth;\r\n        this.maxHealth = this.defaultMaxHealth + shieldHealth;\r\n      }\r\n\r\n      this.shadeColor = \"purple\";\r\n      this.shadeMultiplier = 0.5;\r\n      this.hasBloom = true;\r\n      this.bloomColor = \"#2E0854\";\r\n      this.bloomAlpha = 1;\r\n    }\r\n  };\r\n\r\n  removeShield = () => {\r\n    if (this.shield) {\r\n      this.health -= this.shield.health;\r\n      this.maxHealth -= this.shield.health;\r\n      this.shield.remove();\r\n      this.shadeColor = this.room.shadeColor;\r\n      this.shadeMultiplier = 1;\r\n      this.hasBloom = false;\r\n      this.bloomAlpha = 0;\r\n    }\r\n  };\r\n\r\n  applyBuff = () => {\r\n    this.buffed = true;\r\n    this.buffedBefore = true;\r\n    this.shadeColor = \"cyan\";\r\n    this.shadeMultiplier = 0.5;\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#00FFFF\";\r\n    this.bloomAlpha = 0.5;\r\n    this.lightSource = Lighting.newLightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      [0, 40, 40],\r\n      3.5,\r\n      20,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n    this.room.updateLighting();\r\n  };\r\n\r\n  removeBuff = () => {\r\n    let beams = this.room.projectiles.filter(\r\n      (projectile) =>\r\n        projectile instanceof BeamEffect && projectile.parent === this,\r\n    );\r\n    if (beams) {\r\n      beams.forEach((beam) => {\r\n        beam.dead = true;\r\n      });\r\n    }\r\n    //this.shadeColor = \"black\";\r\n    //this.lightSource = null;\r\n    //this.shield = null;\r\n    this.shadeColor = this.room.shadeColor;\r\n    this.shadeMultiplier = 1;\r\n    this.hasBloom = false;\r\n    this.bloomAlpha = 0;\r\n    this.removeLightSource(this.lightSource);\r\n    this.lightSource = null;\r\n    this.room.updateLighting();\r\n  };\r\n\r\n  getDrop = (useCategory: string[] = [], force: boolean = false) => {\r\n    if (this.cloned) return;\r\n    const drops =\r\n      this.dropTable && this.dropTable.length > 0\r\n        ? this.dropTable\r\n        : useCategory;\r\n    DropTable.getDrop(this, drops, force, 3);\r\n    //make monsters drop degraded weapons\r\n    if (this.drop instanceof Weapon && this.type === EntityType.ENEMY) {\r\n      this.drop.durability = Math.floor(\r\n        Random.rand() * 0.31 * this.drop.durabilityMax,\r\n      );\r\n      this.drop.durabilityMax;\r\n    }\r\n  };\r\n\r\n  addLightSource = (lightSource: LightSource) => {\r\n    if (!this.cloned) this.room.lightSources.push(lightSource);\r\n  };\r\n\r\n  removeLightSource = (lightSource: LightSource) => {\r\n    this.room.lightSources = this.room.lightSources.filter(\r\n      (ls) => ls !== lightSource,\r\n    );\r\n    //this.lightSource = null;\r\n    this.room.updateLighting();\r\n  };\r\n\r\n  addBeamId = (beamId: string) => {\r\n    this.beamIds.push(beamId);\r\n  };\r\n\r\n  removeBeamId = (beamId: string) => {\r\n    this.beamIds = this.beamIds.filter((id) => id !== beamId);\r\n  };\r\n\r\n  behavior = () => {};\r\n\r\n  hit = (): number => {\r\n    return 0;\r\n  };\r\n\r\n  hurtCallback = () => {};\r\n\r\n  get type() {\r\n    return EntityType.ENEMY;\r\n  }\r\n\r\n  pointIn = (x: number, y: number): boolean => {\r\n    return (\r\n      x >= this.x && x < this.x + this.w && y >= this.y && y < this.y + this.h\r\n    );\r\n  };\r\n\r\n  createDamageNumber = (\r\n    damage: number,\r\n    type: \"none\" | \"poison\" | \"blood\" | \"heal\" = \"none\",\r\n  ) => {\r\n    let color = \"red\";\r\n    let outlineColor = GameConstants.OUTLINE;\r\n    if (type === \"poison\") color = \"green\";\r\n    if (type === \"blood\") {\r\n      color = \"#8B0000\";\r\n      outlineColor = \"red\";\r\n    }\r\n    if (type === \"heal\") {\r\n      color = \"#B8A4FF\";\r\n      outlineColor = GameConstants.OUTLINE;\r\n    }\r\n    this.room.particles.push(\r\n      new DamageNumber(this.room, this.x, this.y, damage, color, outlineColor),\r\n    );\r\n  };\r\n\r\n  updateDrawXY = (delta: number) => {\r\n    //putting this here bc i'm lazy\r\n    this.updateHurtFrame(delta);\r\n    this.animateDying(delta);\r\n    this.updateShadeColor(delta);\r\n    //this.updateBloom(delta);\r\n\r\n    if (!this.doneMoving()) {\r\n      this.drawX *= this.drawMoveSpeed ** delta;\r\n      this.drawY *= this.drawMoveSpeed ** delta;\r\n\r\n      this.drawX = Math.abs(this.drawX) < 0.01 ? 0 : this.drawX;\r\n      this.drawY = Math.abs(this.drawY) < 0.01 ? 0 : this.drawY;\r\n    }\r\n  };\r\n\r\n  setDrawXY = (x: number, y: number) => {\r\n    this.drawX += this.x - x;\r\n    this.drawY += this.y - y;\r\n  };\r\n\r\n  readonly tryMove = (x: number, y: number, collide: boolean = true) => {\r\n    const canDestroyOthers = this.canDestroyOthers;\r\n    let pointWouldBeIn = (someX: number, someY: number): boolean => {\r\n      return (\r\n        someX >= x && someX < x + this.w && someY >= y && someY < y + this.h\r\n      );\r\n    };\r\n\r\n    let entityCollide = (entity: Entity): boolean => {\r\n      let flag = true;\r\n      if (entity.x >= x + this.w || entity.x + entity.w <= x) flag = false;\r\n      if (entity.y >= y + this.h || entity.y + entity.h <= y) flag = false;\r\n      if (\r\n        canDestroyOthers &&\r\n        entity.destroyable &&\r\n        entity.destroyableByOthers &&\r\n        entity.w <= 1 &&\r\n        entity.h <= 1 &&\r\n        flag === true\r\n      ) {\r\n        entity.hurt(this as any, entity.health);\r\n        if (!this.canCrushOthers) {\r\n          const closestTile = this.closestTile(entity as any);\r\n          this.drawX += 1 * (closestTile.x - entity.x);\r\n          this.drawY += 1 * (closestTile.y - entity.y);\r\n        }\r\n        this.game.shakeScreen(5 * this.drawX, 5 * this.drawY);\r\n\r\n        flag = this.canCrushOthers ? false : true;\r\n      }\r\n\r\n      return flag;\r\n    };\r\n\r\n    let flag = false;\r\n    for (const e of this.room.entities) {\r\n      if (e !== this && entityCollide(e) && collide) {\r\n        flag = true;\r\n      }\r\n    }\r\n    if (flag) return;\r\n\r\n    for (const i in this.game.players) {\r\n      if (pointWouldBeIn(this.game.players[i].x, this.game.players[i].y)) {\r\n        return;\r\n      }\r\n    }\r\n    let tiles: Tile[] = [];\r\n    for (let xx = 0; xx < this.w; xx++) {\r\n      for (let yy = 0; yy < this.h; yy++) {\r\n        if (\r\n          !this.room.roomArray[x + xx][y + yy].isSolid() &&\r\n          !(this.room.roomArray[x + xx][y + yy] instanceof Door) &&\r\n          !(this.room.roomArray[x + xx][y + yy] instanceof DownLadder)\r\n        ) {\r\n          tiles.push(this.room.roomArray[x + xx][y + yy]);\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    for (let tile of tiles) {\r\n      tile.onCollideEnemy(this);\r\n    }\r\n    this.x = x;\r\n    this.y = y;\r\n    this.bigEnemyShake();\r\n  };\r\n\r\n  bigEnemyShake = () => {\r\n    if (this.w > 1 || this.h > 1) {\r\n      setTimeout(() => {\r\n        this.game.shakeScreen(0 * this.drawX, 5);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  readonly getPlayer = () => {\r\n    const maxDistance = 138291380921; // pulled this straight outta my ass\r\n    let closestDistance = maxDistance;\r\n    let closestPlayer = null;\r\n    for (const i in this.game.players) {\r\n      if (this.game.rooms[this.game.players[i].levelID] === this.room) {\r\n        let distance = this.playerDistance(this.game.players[i]);\r\n        if (distance < closestDistance) {\r\n          closestDistance = distance;\r\n          closestPlayer = this.game.players[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    if (closestDistance === maxDistance) return false;\r\n    else return closestPlayer;\r\n  };\r\n\r\n  onHurt = (\r\n    damage: number = 1,\r\n    type: \"none\" | \"poison\" | \"blood\" | \"heal\" = \"none\",\r\n  ) => {};\r\n\r\n  hurt = (\r\n    playerHitBy: Player,\r\n    damage: number,\r\n    type: \"none\" | \"poison\" | \"blood\" | \"heal\" = \"none\",\r\n  ) => {\r\n    this.handleEnemyCase(playerHitBy);\r\n\r\n    let hitShield = false;\r\n    let shieldHealth = 0;\r\n    if (this.shielded) {\r\n      shieldHealth = this.shield.health;\r\n      if (shieldHealth > 0) {\r\n        this.shield.hurt(damage);\r\n        hitShield = true;\r\n      }\r\n    }\r\n    /*\r\n    this.shadeColor = \"red\";\r\n    setTimeout(() => {\r\n      this.shadeColor = this.room.shadeColor;\r\n    }, 100);\r\n    */\r\n\r\n    if (this.armored && this.health === this.defaultMaxHealth)\r\n      Sound.playParry();\r\n\r\n    this.health -= damage;\r\n    //this.maxHealth -= shieldHealth;\r\n    this.onHurt(damage, type);\r\n\r\n    this.startHurting();\r\n    if (this.hasDamageNumbers) this.createDamageNumber(damage, type);\r\n    this.playHitSound();\r\n\r\n    this.healthBar.hurt();\r\n\r\n    // Emit damage done event for statistics tracking (only for enemies)\r\n    if (this.isEnemy && playerHitBy) {\r\n      globalEventBus.emit(EVENTS.DAMAGE_DONE, { amount: damage });\r\n    }\r\n\r\n    if (type === \"none\" || this.health <= 0 || !this.isEnemy) {\r\n      this.createHitParticles();\r\n    }\r\n\r\n    if (this.health <= 0) {\r\n      this.kill();\r\n      this.bloomAlpha = 0;\r\n    } else this.hurtCallback();\r\n  };\r\n\r\n  wander = () => {\r\n    // Store old position to check if move was successful\r\n    const oldX = this.x;\r\n    const oldY = this.y;\r\n\r\n    // Try up to 4 times to find a valid move\r\n    for (let attempts = 0; attempts < 4; attempts++) {\r\n      // Choose a random direction\r\n      const directions = [\r\n        Direction.UP,\r\n        Direction.DOWN,\r\n        Direction.LEFT,\r\n        Direction.RIGHT,\r\n      ];\r\n      const randomDirection =\r\n        directions[Math.floor(Random.rand() * directions.length)];\r\n\r\n      // Calculate target position based on direction\r\n      let targetX = this.x;\r\n      let targetY = this.y;\r\n\r\n      switch (randomDirection) {\r\n        case Direction.UP:\r\n          targetY = this.y - 1;\r\n          break;\r\n        case Direction.DOWN:\r\n          targetY = this.y + 1;\r\n          break;\r\n        case Direction.LEFT:\r\n          targetX = this.x - 1;\r\n          break;\r\n        case Direction.RIGHT:\r\n          targetX = this.x + 1;\r\n          break;\r\n      }\r\n\r\n      // Try to move to the target position\r\n      this.tryMove(targetX, targetY);\r\n      this.setDrawXY(oldX, oldY);\r\n\r\n      // If the move was successful, update direction and drawing, then break\r\n      if (this.x !== oldX || this.y !== oldY) {\r\n        this.direction = randomDirection;\r\n        this.setDrawXY(targetX, targetY);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  runAway = () => {\r\n    const player = this.getPlayer();\r\n    if (!player) {\r\n      this.wander();\r\n      return;\r\n    }\r\n    //25% chance to trip\r\n    if (Random.rand() < 0.25) return;\r\n\r\n    const distance = Utils.distance(this.x, this.y, player.x, player.y);\r\n    if (distance > 10) {\r\n      this.wander();\r\n      return;\r\n    }\r\n\r\n    // Store old position to check if move was successful\r\n    const oldX = this.x;\r\n    const oldY = this.y;\r\n\r\n    // Calculate all possible positions with their distances\r\n    const newPositions = [\r\n      { x: this.x - 1, y: this.y },\r\n      { x: this.x + 1, y: this.y },\r\n      { x: this.x, y: this.y - 1 },\r\n      { x: this.x, y: this.y + 1 },\r\n    ].map((position) => ({\r\n      position,\r\n      distance: Utils.distance(player.x, player.y, position.x, position.y),\r\n    }));\r\n\r\n    // Sort by distance (furthest first)\r\n    newPositions.sort((a, b) => b.distance - a.distance);\r\n\r\n    // Choose either furthest or second furthest\r\n    const chooseSecondFurthest = Random.rand() < 0.3;\r\n    const chosenPosition =\r\n      chooseSecondFurthest && newPositions.length > 1\r\n        ? newPositions[1].position\r\n        : newPositions[0].position;\r\n\r\n    const targetX = chosenPosition.x;\r\n    const targetY = chosenPosition.y;\r\n\r\n    // Try to move to the target position\r\n    this.tryMove(targetX, targetY);\r\n    this.setDrawXY(oldX, oldY);\r\n\r\n    // If the move was successful, update direction and drawing\r\n    if (this.x !== oldX || this.y !== oldY) {\r\n      // Set direction based on actual movement\r\n      const dx = this.x - oldX;\r\n      const dy = this.y - oldY;\r\n\r\n      if (dx > 0) {\r\n        this.direction = Direction.RIGHT;\r\n      } else if (dx < 0) {\r\n        this.direction = Direction.LEFT;\r\n      } else if (dy > 0) {\r\n        this.direction = Direction.DOWN;\r\n      } else if (dy < 0) {\r\n        this.direction = Direction.UP;\r\n      }\r\n\r\n      this.setDrawXY(targetX, targetY);\r\n    } else {\r\n      // If we couldn't move away, just wander\r\n      this.wander();\r\n    }\r\n  };\r\n\r\n  startHurting = () => {\r\n    this.hurting = true;\r\n    this.hurtFrame += 15;\r\n    this.shadeColor = \"#FF0000\";\r\n    this.shadeMultiplier = 1.5;\r\n  };\r\n\r\n  stopHurting = () => {\r\n    this.hurting = false;\r\n    this.hurtFrame = 0;\r\n    this.shadeColor = \"#000000\";\r\n  };\r\n\r\n  interact = (player: Player) => {};\r\n\r\n  handleEnemyCase = (playerHitBy?: Player) => {};\r\n\r\n  playHitSound = () => {\r\n    if (this.hitSound) Sound.delayPlay(this.hitSound, 50);\r\n  };\r\n\r\n  createHitParticles = (particleX?: number, particleY?: number) => {\r\n    if (this.cloned) return;\r\n    if (!this.hasHitParticles) return;\r\n    if (!particleX) particleX = this.imageParticleX;\r\n    if (!particleY) particleY = this.imageParticleY;\r\n    ImageParticle.spawnCluster(\r\n      this.room,\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      particleX,\r\n      particleY,\r\n    );\r\n  };\r\n\r\n  protected dropLoot = () => {\r\n    let coordX: number;\r\n    let coordY: number;\r\n    if (this.crushed) {\r\n      coordX = this.lastX;\r\n      coordY = this.lastY;\r\n    } else {\r\n      coordX = this.x;\r\n      coordY = this.y;\r\n    }\r\n\r\n    if (this.drops.length === 0 && this.isEnemy) {\r\n      this.drops.push(new Coin(this.room, this.x, this.y));\r\n    }\r\n    if (this.drops.length > 0) {\r\n      // Consider all non-solid tiles within the entity's footprint (handles big enemies)\r\n      const candidates: { x: number; y: number }[] = [];\r\n      for (let dx = 0; dx < this.w; dx++) {\r\n        for (let dy = 0; dy < this.h; dy++) {\r\n          const tx = coordX + dx;\r\n          const ty = coordY + dy;\r\n          if (\r\n            this.room.roomArray[tx] &&\r\n            this.room.roomArray[tx][ty] &&\r\n            !this.room.roomArray[tx][ty].isSolid()\r\n          ) {\r\n            candidates.push({ x: tx, y: ty });\r\n          }\r\n        }\r\n      }\r\n\r\n      // If no valid candidate tiles found, fall back to origin if it's valid\r\n      if (\r\n        candidates.length === 0 &&\r\n        this.room.roomArray[coordX] &&\r\n        this.room.roomArray[coordX][coordY] &&\r\n        !this.room.roomArray[coordX][coordY].isSolid()\r\n      ) {\r\n        candidates.push({ x: coordX, y: coordY });\r\n      }\r\n\r\n      const used = new Set<string>();\r\n\r\n      // Choose a random starting tile among candidates, then place subsequent drops on the next tiles\r\n      const startIndex =\r\n        candidates.length > 0\r\n          ? Math.floor(Random.rand() * candidates.length)\r\n          : 0;\r\n\r\n      this.drops.forEach((drop, index) => {\r\n        drop.level = this.room;\r\n        if (candidates.length > 0) {\r\n          const pos = candidates[(startIndex + index) % candidates.length];\r\n          drop.x = pos.x;\r\n          drop.y = pos.y;\r\n          used.add(`${pos.x},${pos.y}`);\r\n        } else if (\r\n          this.room.roomArray[coordX] &&\r\n          this.room.roomArray[coordX][coordY] &&\r\n          !this.room.roomArray[coordX][coordY].isSolid()\r\n        ) {\r\n          drop.x = coordX;\r\n          drop.y = coordY;\r\n          used.add(`${coordX},${coordY}`);\r\n        }\r\n        this.room.items.push(drop);\r\n        drop.onDrop();\r\n        if (this.name !== \"chest\") drop.autoPickup();\r\n      });\r\n\r\n      // For big enemies, drop coins on any remaining footprint tiles not chosen above\r\n      if (this.isEnemy && (this.w > 1 || this.h > 1) && candidates.length > 0) {\r\n        const remaining = candidates.filter((p) => !used.has(`${p.x},${p.y}`));\r\n        remaining.forEach((p) => {\r\n          const coin = new Coin(this.room, p.x, p.y);\r\n          coin.level = this.room;\r\n          this.room.items.push(coin);\r\n          coin.onDrop();\r\n          if (this.name !== \"chest\") coin.autoPickup();\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  kill = (player?: Player) => {\r\n    this.dead = true;\r\n\r\n    if (this.cloned) return;\r\n\r\n    this.emitEnemyKilled();\r\n    this.dropLoot();\r\n\r\n    const deadEntity = this.clone();\r\n\r\n    this.room.deadEntities.push(deadEntity);\r\n    //this.room.entities = this.room.entities.filter((e) => e !== this);\r\n    this.removeLightSource(this.lightSource);\r\n\r\n    this.uniqueKillBehavior();\r\n  };\r\n\r\n  uniqueKillBehavior = () => {};\r\n\r\n  updateHurtFrame = (delta: number) => {\r\n    if (this.hurting) {\r\n      this.hurtFrame -= delta;\r\n      if (this.hurtFrame < 0) {\r\n        this.stopHurting();\r\n      }\r\n    }\r\n  };\r\n\r\n  shadeAmount = () => {\r\n    if (\r\n      GameConstants.SMOOTH_LIGHTING &&\r\n      !GameConstants.SHADE_INLINE_IN_ENTITY_LAYER\r\n    )\r\n      return 0;\r\n    if (!this.room.softVis[this.x]) return 0;\r\n    let softVis = this.room.softVis[this.x][this.y] * 1;\r\n    if (this.shadeMultiplier > 1) return Math.min(1, softVis);\r\n    return softVis;\r\n  };\r\n\r\n  updateShadeColor = (delta: number) => {\r\n    if (this.shadeMultiplier > 1) this.shadeMultiplier -= 0.01 * delta;\r\n    if (this.shadeMultiplier < 1) this.shadeMultiplier = 1;\r\n    let updated = false;\r\n\r\n    // Convert hex color to RGB\r\n    const hexToRgb = (hex: string): [number, number, number] => {\r\n      const bigint = parseInt(hex.slice(1), 16);\r\n      const r = (bigint >> 16) & 255;\r\n      const g = (bigint >> 8) & 255;\r\n      const b = bigint & 255;\r\n      return [r, g, b];\r\n    };\r\n    // Convert RGB to hex color\r\n    const rgbToHex = (rgb: [number, number, number]): string => {\r\n      const [r, g, b] = rgb;\r\n      return (\r\n        \"#\" +\r\n        ((1 << 24) + (r << 16) + (g << 8) + b)\r\n          .toString(16)\r\n          .slice(1)\r\n          .toUpperCase()\r\n      );\r\n    };\r\n\r\n    const [softR, softG, softB] = hexToRgb(this.softShadeColor);\r\n    const [targetR, targetG, targetB] = hexToRgb(this.shadeColor);\r\n\r\n    // Calculate differences\r\n    let diffR = softR - targetR;\r\n    let diffG = softG - targetG;\r\n    let diffB = softB - targetB;\r\n\r\n    let flagR = false;\r\n    let flagG = false;\r\n    let flagB = false;\r\n    if (Math.abs(diffR) > 1) flagR = true;\r\n    if (Math.abs(diffG) > 1) flagG = true;\r\n    if (Math.abs(diffB) > 1) flagB = true;\r\n\r\n    if (!flagR && !flagG && !flagB) {\r\n      return this.softShadeColor;\r\n    }\r\n\r\n    let softShadeRgb = [softR, softG, softB];\r\n\r\n    // Apply smoothing similar to fadeLighting\r\n    if (flagR) {\r\n      diffR *= 0.1 * delta;\r\n      softShadeRgb[0] = this.room.clamp(Math.round(softR - diffR), 0, 255);\r\n      updated = true;\r\n    }\r\n\r\n    if (flagG) {\r\n      diffG *= 0.1 * delta;\r\n      softShadeRgb[1] = this.room.clamp(Math.round(softG - diffG), 0, 255);\r\n      updated = true;\r\n    }\r\n\r\n    if (flagB) {\r\n      diffB *= 0.1 * delta;\r\n      softShadeRgb[2] = this.room.clamp(Math.round(softB - diffB), 0, 255);\r\n      updated = true;\r\n    }\r\n\r\n    if (updated) {\r\n      this.softShadeColor = rgbToHex(softShadeRgb as [number, number, number]);\r\n    }\r\n\r\n    return this.softShadeColor;\r\n  };\r\n\r\n  emitEnemyKilled = () => {\r\n    let depthMultiplier = 1.5 ** this.room.depth; //Math.log((this.room.depth + 1) * 5);\r\n    console.log(depthMultiplier);\r\n\r\n    let multiplier = 1;\r\n    if (this.isEnemy) multiplier = 5;\r\n    const xp = Math.ceil(this.defaultMaxHealth * multiplier * depthMultiplier);\r\n    if (!this.isEnemy) return;\r\n    globalEventBus.emit(EVENTS.ENEMY_KILLED, {\r\n      enemyId: this.name,\r\n      xp: xp,\r\n    });\r\n    const player = this.getPlayer();\r\n    if (!player) return;\r\n\r\n    if (GameConstants.XP_POPUP_ENABLED) {\r\n      setTimeout(() => {\r\n        this.room.particles.push(new XPPopup(this.room, this.x, this.y, xp));\r\n      }, 350);\r\n    }\r\n  };\r\n\r\n  doneMoving = (): boolean => {\r\n    let EPSILON = 0.01;\r\n    return Math.abs(this.drawX) < EPSILON && Math.abs(this.drawY) < EPSILON;\r\n  };\r\n\r\n  nearestPlayer = (): [number, Player] | false => {\r\n    const maxDistance = 138291380921; // pulled this straight outta my ass\r\n    let closestDistance = maxDistance;\r\n    let closestPlayer = null;\r\n    for (const i in this.game.players) {\r\n      if (this.game.rooms[this.game.players[i].levelID] === this.room) {\r\n        let distance = this.playerDistance(this.game.players[i]);\r\n        if (distance < closestDistance) {\r\n          closestDistance = distance;\r\n          closestPlayer = this.game.players[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    if (closestDistance === maxDistance) return false;\r\n    else return [closestDistance, closestPlayer];\r\n  };\r\n\r\n  playerDistance = (player: Player): number => {\r\n    return Math.max(Math.abs(this.x - player.x), Math.abs(this.y - player.y));\r\n  };\r\n\r\n  closestTile = (player: Player) => {\r\n    let closestTile = { x: 0, y: 0 };\r\n    let closestDistance = 1000000;\r\n    for (let x = 0; x < this.w; x++) {\r\n      for (let y = 0; y < this.h; y++) {\r\n        let distance =\r\n          Math.abs(player.x - (this.x + x)) + Math.abs(player.y - (this.y + y));\r\n        if (distance < closestDistance) {\r\n          closestDistance = distance;\r\n          closestTile = { x: this.x + x, y: this.y + y };\r\n        }\r\n      }\r\n    }\r\n    return closestTile;\r\n  };\r\n\r\n  facePlayer = (player: Player) => {\r\n    // For 1x1 entities, use the existing perfect logic\r\n    if (this.w === 1 && this.h === 1) {\r\n      const entityCenterX = this.x + 0.5;\r\n      const entityCenterY = this.y + 0.5;\r\n\r\n      let dx = player.x - entityCenterX;\r\n      let dy = player.y - entityCenterY;\r\n\r\n      if (Math.abs(dx) === Math.abs(dy)) {\r\n        // just moved, already facing player\r\n      } else if (Math.abs(dx) > Math.abs(dy)) {\r\n        if (dx > 0) this.direction = Direction.RIGHT;\r\n        if (dx < 0) this.direction = Direction.LEFT;\r\n      } else {\r\n        if (dy > 0) this.direction = Direction.DOWN;\r\n        if (dy < 0) this.direction = Direction.UP;\r\n      }\r\n      return;\r\n    }\r\n\r\n    // For bigger entities, check if player shares any row or column\r\n    const sharesRow = player.y >= this.y && player.y < this.y + this.h;\r\n    const sharesColumn = player.x >= this.x && player.x < this.x + this.w;\r\n\r\n    // If sharing both row and column, player is overlapping - don't change direction\r\n    if (sharesRow && sharesColumn) {\r\n      return;\r\n    }\r\n    const closestTile = this.closestTile(player);\r\n\r\n    let dx = player.x - closestTile.x;\r\n    let dy = player.y - closestTile.y;\r\n\r\n    if (Math.abs(dx) > Math.abs(dy)) {\r\n      if (dx > 0) this.direction = Direction.RIGHT;\r\n      if (dx < 0) this.direction = Direction.LEFT;\r\n    } else {\r\n      if (dy > 0) this.direction = Direction.DOWN;\r\n      if (dy < 0) this.direction = Direction.UP;\r\n    }\r\n  };\r\n\r\n  animateDying = (delta: number) => {\r\n    if (this.cloned) {\r\n      //this.frame = 0;\r\n      this.dyingFrame -= delta / 3;\r\n      this.alpha = Math.max(0, this.alpha - delta / 50);\r\n\r\n      if (this.dyingFrame <= 0) {\r\n        this.dead = true;\r\n        this.dying = false;\r\n        this.uniqueKillBehavior();\r\n        this.room.clearDeadStuff();\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    this.updateDrawXY(delta);\r\n    if (this.hasShadow) {\r\n      this.drawShadow(delta);\r\n    }\r\n    /*\r\n    Game.drawMob(\r\n      0,\r\n      0,\r\n      1,\r\n      1,\r\n      this.x - this.drawX,\r\n      this.y - this.drawY,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n    */\r\n    Game.drawMob(\r\n      this.tileX,\r\n      this.tileY + this.direction * 2,\r\n      1,\r\n      2,\r\n      this.x - this.drawX,\r\n      this.y - this.drawYOffset - this.drawY,\r\n      1,\r\n      2,\r\n      this.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n\r\n    /*if (this.crushed) {\r\n      this.crushAnim(delta);\r\n    }*/\r\n    Game.ctx.globalAlpha = 1;\r\n  };\r\n\r\n  // Draw a soft blurred shadow under the entity using the shared Shadow utility\r\n  drawShadow = (delta: number) => {\r\n    if (this.cloned) return;\r\n    Shadow.draw(this.x - this.drawX, this.y - this.drawY, this.w, this.h);\r\n  };\r\n\r\n  tick = () => {\r\n    this.behavior();\r\n    if (this.shielded) this.shield.updateLightSourcePos();\r\n  };\r\n\r\n  emitEntityData = (): void => {\r\n    globalEventBus.emit(\"EntityData\", {\r\n      name: this.name,\r\n      location: { x: this.x, y: this.y },\r\n    });\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    //this.updateDrawXY(delta);\r\n\r\n    this.drawableY = this.y - this.drawY;\r\n\r\n    this.healthBar.draw(\r\n      delta,\r\n      this.health,\r\n      this.maxHealth,\r\n      this.x,\r\n      this.y,\r\n      true,\r\n    );\r\n  };\r\n\r\n  drawSleepingZs = (delta: number, offsetX = 0, offsetY = 0) => {\r\n    this.sleepingZFrame += delta;\r\n\r\n    let numZs = 2;\r\n    let t = this.sleepingZFrame * 0.01; // 0 <= t < 1\r\n    t -= Math.floor(t);\r\n    //let whichway = Math.floor(this.sleepingZFrame * 0.02 / numZs) % 2;\r\n    for (let off = numZs - 1; off >= 0; off--) {\r\n      let yoff = (t + off) * 7;\r\n      let alpha = Math.min(1 - (t + off) / numZs, (2 * (t + off)) / numZs);\r\n\r\n      let xoff = 0;\r\n      if (off === 0) xoff = 1;\r\n      if (t >= 0.33 && t < 0.66) xoff = off;\r\n      if (t >= 0.33 && t < 0.66) xoff = off;\r\n\r\n      let width = Game.measureText(\"Z\").width;\r\n      if (GameConstants.ALPHA_ENABLED) Game.ctx.globalAlpha = alpha;\r\n      Game.fillTextOutline(\r\n        \"Z\",\r\n        (this.x + 0.5) * GameConstants.TILESIZE - width / 2 + xoff + offsetX,\r\n        (this.y - 0.6) * GameConstants.TILESIZE - yoff + offsetY,\r\n        GameConstants.OUTLINE,\r\n        \"white\",\r\n      );\r\n      Game.ctx.globalAlpha = 1;\r\n    }\r\n  };\r\n\r\n  drawExclamation = (delta: number, offsetX = 0, offsetY = 0) => {\r\n    this.exclamationFrame += delta;\r\n\r\n    let yoff: number | false = 0;\r\n    let yoffs: Array<number | false> = [0, -1, -2, -3, -5, -7, -4];\r\n    if (this.exclamationFrame > yoffs.length) yoff = yoffs[yoffs.length - 1];\r\n    else yoff = yoffs[this.exclamationFrame];\r\n\r\n    let width = Game.measureText(\"!\").width;\r\n    Game.ctx.globalAlpha = 1;\r\n    if (yoff !== false) {\r\n      Game.fillTextOutline(\r\n        \"!\",\r\n        (this.x + 0.5) * GameConstants.TILESIZE - width / 2 + offsetX,\r\n        (this.y - 0.75) * GameConstants.TILESIZE + yoff + offsetY,\r\n        GameConstants.OUTLINE,\r\n        GameConstants.WARNING_RED,\r\n      );\r\n    }\r\n  };\r\n\r\n  crush = () => {\r\n    this.crushed = true;\r\n    let player: Player;\r\n    for (let i in this.game.players) {\r\n      player = this.game.players[i];\r\n    }\r\n    if (this.x == player.x) {\r\n      this.crushVertical = true;\r\n    }\r\n    this.kill();\r\n  };\r\n\r\n  crushAnim = (delta: number) => {\r\n    if (this.crushVertical && this.crushY >= 0) {\r\n      this.crushY *= 0.95;\r\n    } else if (this.crushX >= 0) {\r\n      this.crushX *= 0.95;\r\n    }\r\n  };\r\n  //set rumbling in the tick function for the enemies\r\n  //create variables for the rumbling x and y offsets\r\n  //return the rumbling x and y offsets\r\n  //add the rumbling x and y offsets to the enemy's x and y in the draw function\r\n  rumble = (rumbling: boolean, frame: number, direction?: Direction) => {\r\n    let rumbleOffset = { x: 0, y: 0 };\r\n\r\n    if (rumbling) {\r\n      const isOddFrame = Math.floor(frame) % 2 === 1;\r\n      const offset = isOddFrame ? 0.0325 : 0;\r\n\r\n      if (direction === Direction.LEFT || direction === Direction.RIGHT) {\r\n        rumbleOffset.y = offset;\r\n      } else if (\r\n        direction === Direction.UP ||\r\n        direction === Direction.DOWN ||\r\n        !direction\r\n      ) {\r\n        rumbleOffset.x = offset;\r\n      }\r\n      this.animationSpeed = 0.2;\r\n    }\r\n    return rumbleOffset;\r\n  };\r\n\r\n  attemptProjectilePlacement = (\r\n    offsets: { x: number; y: number }[],\r\n    projectileClass: new (parent: Entity, x: number, y: number) => Projectile,\r\n    collide: boolean = false,\r\n    clearPath: boolean = true,\r\n    targetingPlayer: boolean = false,\r\n  ) => {\r\n    for (const offset of offsets) {\r\n      const targetX = this.x + offset.x;\r\n      const targetY = this.y + offset.y;\r\n\r\n      if (\r\n        !this.isValidProjectilePosition(targetX, targetY, collide, clearPath)\r\n      ) {\r\n        if (targetingPlayer) break;\r\n        continue;\r\n      }\r\n\r\n      this.placeProjectile(projectileClass, targetX, targetY);\r\n\r\n      if (targetingPlayer) break;\r\n    }\r\n  };\r\n\r\n  private isValidProjectilePosition = (\r\n    x: number,\r\n    y: number,\r\n    collide: boolean,\r\n    clearPath: boolean,\r\n  ): boolean => {\r\n    if (!this.isWithinRoomBounds(x, y)) return false;\r\n    if (clearPath && !this.isPathClear(this.x, this.y, x, y)) return false;\r\n    if (collide && this.isEntityColliding(x, y)) return false;\r\n\r\n    const targetTile = this.room.roomArray[x][y];\r\n    return targetTile && !targetTile.isSolid() && !targetTile.isDoor;\r\n  };\r\n\r\n  private isEntityColliding = (x: number, y: number): boolean => {\r\n    return this.room.entities.some(\r\n      (entity) => entity.x === x && entity.y === y,\r\n    );\r\n  };\r\n\r\n  private placeProjectile = (\r\n    projectileClass: new (\r\n      parent: Entity,\r\n      x: number,\r\n      y: number,\r\n      color?: [number, number, number],\r\n    ) => Projectile,\r\n    x: number,\r\n    y: number,\r\n    color?: [number, number, number],\r\n  ) => {\r\n    this.room.projectiles.push(new projectileClass(this, x, y, color));\r\n  };\r\n\r\n  isPathClear = (\r\n    startX: number,\r\n    startY: number,\r\n    endX: number,\r\n    endY: number,\r\n  ): boolean => {\r\n    const dx = Math.sign(endX - startX);\r\n    const dy = Math.sign(endY - startY);\r\n    let x = startX;\r\n    let y = startY;\r\n\r\n    while (x !== endX || y !== endY) {\r\n      x += dx;\r\n      y += dy;\r\n      if (\r\n        !this.isWithinRoomBounds(x, y) ||\r\n        this.room.roomArray[x][y]?.isSolid()\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  calculateProjectileOffsets(\r\n    targetX: number,\r\n    targetY: number,\r\n    attackLength: number,\r\n  ): { x: number; y: number }[] {\r\n    const dx = targetX - this.x;\r\n    const dy = targetY - this.y;\r\n    let offsets = [];\r\n\r\n    // Normalize the direction\r\n    const stepX = dx !== 0 ? Math.sign(dx) : 0;\r\n    const stepY = dy !== 0 ? Math.sign(dy) : 0;\r\n\r\n    // Generate offsets for the full attackLength\r\n    for (let i = 1; i <= attackLength; i++) {\r\n      offsets.push({ x: i * stepX, y: i * stepY });\r\n    }\r\n\r\n    return offsets;\r\n  }\r\n\r\n  getLuminance = (): number => {\r\n    if (this.room.roomArray[this.x][this.y]) {\r\n      return this.room.vis[this.x][this.y];\r\n    }\r\n    return null;\r\n  };\r\n\r\n  getAverageLuminance = (): number => {\r\n    let total = 0;\r\n    let count = 0;\r\n    for (let x = this.x - 2; x <= this.x + 2; x++) {\r\n      if (this.room.roomArray[x] && this.room.roomArray[x][this.y]) {\r\n        for (let y = this.y - 2; y <= this.y + 2; y++) {\r\n          if (this.room.vis[x][y]) {\r\n            total += this.room.vis[x][y];\r\n            count++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return total / count;\r\n  };\r\n\r\n  getOpenTile = (): { x: number; y: number } => {\r\n    let x, y;\r\n    do {\r\n      x = Math.floor(Random.rand() * 3 + this.x - 1);\r\n      y = Math.floor(Random.rand() * 3 + this.y - 1);\r\n    } while (\r\n      (x === this.x && y === this.y) ||\r\n      this.room.roomArray[x][y].isSolid() ||\r\n      this.room.roomArray[x][y] instanceof DownLadder ||\r\n      this.room.roomArray[x][y] instanceof Door ||\r\n      this.room.roomArray[x][y] instanceof Wall ||\r\n      this.room.entities.some((e) => e.x === x && e.y === y)\r\n    );\r\n\r\n    if (!x || !y) return { x: this.x, y: this.y };\r\n    return { x, y };\r\n  };\r\n\r\n  makeBigHitWarnings = () => {\r\n    switch (this.direction) {\r\n      case Direction.LEFT:\r\n        this.makeHitWarnings(this.x, this.y);\r\n        this.makeHitWarnings(this.x, this.y + 1);\r\n        break;\r\n      case Direction.RIGHT:\r\n        this.makeHitWarnings(this.x + 1, this.y);\r\n        this.makeHitWarnings(this.x + 1, this.y + 1);\r\n        break;\r\n      case Direction.UP:\r\n        this.makeHitWarnings(this.x, this.y);\r\n        this.makeHitWarnings(this.x + 1, this.y);\r\n        break;\r\n      case Direction.DOWN:\r\n        this.makeHitWarnings(this.x, this.y + 1);\r\n        this.makeHitWarnings(this.x + 1, this.y + 1);\r\n        break;\r\n    }\r\n  };\r\n\r\n  makeHitWarnings = (\r\n    hx: number = this.x,\r\n    hy: number = this.y,\r\n    arrowsOnly: boolean = false,\r\n    directionOverride: null | \"diagonal\" | \"orthogonal\" | \"forward\" = null,\r\n  ) => {\r\n    if (this.unconscious) return;\r\n    const player: Player = this.getPlayer();\r\n    const isPlayerOnTile = player.x === hx && player.y === hy;\r\n    const cullFactor = isPlayerOnTile ? 0 : 0.45;\r\n\r\n    let orthogonal = this.orthogonalAttack;\r\n    let diagonal = this.diagonalAttack;\r\n    let forwardOnly = this.forwardOnlyAttack;\r\n    const direction = this.direction;\r\n    const orthoRange = this.attackRange;\r\n    const diagRange = this.diagonalAttackRange;\r\n\r\n    switch (directionOverride) {\r\n      case \"diagonal\":\r\n        diagonal = true;\r\n        orthogonal = false;\r\n        forwardOnly = false;\r\n        break;\r\n      case \"orthogonal\":\r\n        orthogonal = true;\r\n        diagonal = false;\r\n        forwardOnly = false;\r\n        break;\r\n      case \"forward\":\r\n        forwardOnly = true;\r\n        orthogonal = true;\r\n        diagonal = false;\r\n        break;\r\n    }\r\n\r\n    const generateOffsets = (\r\n      isOrthogonal: boolean,\r\n      range: number,\r\n    ): number[][] => {\r\n      const baseOffsets = isOrthogonal\r\n        ? [\r\n            [-1, 0],\r\n            [1, 0],\r\n            [0, -1],\r\n            [0, 1],\r\n          ]\r\n        : [\r\n            [-1, -1],\r\n            [1, 1],\r\n            [1, -1],\r\n            [-1, 1],\r\n          ];\r\n      return baseOffsets.flatMap(([dx, dy]) =>\r\n        Array.from({ length: range }, (_, i) => [(i + 1) * dx, (i + 1) * dy]),\r\n      );\r\n    };\r\n\r\n    const directionOffsets = {\r\n      [Direction.LEFT]: [-1, 0],\r\n      [Direction.RIGHT]: [1, 0],\r\n      [Direction.UP]: [0, -1],\r\n      [Direction.DOWN]: [0, 1],\r\n    };\r\n\r\n    let offsets: number[][] = [];\r\n    if (forwardOnly) {\r\n      const [dx, dy] = directionOffsets[direction];\r\n      offsets = Array.from({ length: orthoRange }, (_, i) => [\r\n        (i + 1) * dx,\r\n        (i + 1) * dy,\r\n      ]);\r\n    } else {\r\n      if (orthogonal) offsets.push(...generateOffsets(true, orthoRange));\r\n      if (diagonal) offsets.push(...generateOffsets(false, diagRange));\r\n    }\r\n\r\n    const warningCoordinates = offsets\r\n      .map(([dx, dy]) => ({\r\n        x: dx,\r\n        y: dy,\r\n        distance: Utils.distance(dx, dy, player.x - hx, player.y - hy),\r\n      }))\r\n      .sort((a, b) => a.distance - b.distance);\r\n\r\n    const keepCount = Math.ceil(warningCoordinates.length * (1 - cullFactor));\r\n    const culledWarnings = warningCoordinates.slice(0, keepCount);\r\n\r\n    culledWarnings.forEach(({ x, y }) => {\r\n      const targetX = hx + x;\r\n      const targetY = hy + y;\r\n      if (this.isWithinRoomBounds(targetX, targetY)) {\r\n        const hitWarning = new HitWarning(\r\n          this.game,\r\n          targetX,\r\n          targetY,\r\n          hx,\r\n          hy,\r\n          true,\r\n          arrowsOnly,\r\n          this,\r\n        );\r\n        this.room.hitwarnings.push(hitWarning);\r\n        //this.hitWarnings.push(hitWarning);\r\n      }\r\n    });\r\n  };\r\n\r\n  isWithinRoomBounds = (x: number, y: number): boolean => {\r\n    const xInBounds =\r\n      x >= this.room.roomX && x < this.room.roomX + this.room.width;\r\n    const yInBounds =\r\n      y >= this.room.roomY && y < this.room.roomY + this.room.height;\r\n    const tileExists =\r\n      this.room.roomArray[x] && this.room.roomArray[x][y] !== undefined;\r\n\r\n    return xInBounds && yInBounds && tileExists;\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Sound } from \"./sound\";\r\nimport { Howl, Howler } from \"howler\";\r\n\r\nexport class ReverbEngine {\r\n  private static audioContext: AudioContext;\r\n  private static convolver: ConvolverNode;\r\n  private static reverbBuffer: AudioBuffer | null = null;\r\n  private static gainNodes: Map<number, GainNode> = new Map();\r\n  private static originalRefreshBuffer: any;\r\n  private static mobileUnlockAttempted: boolean = false;\r\n  static initialized: boolean = false;\r\n\r\n  static isMobile(): boolean {\r\n    return Sound.isMobile;\r\n  }\r\n\r\n  // Mobile-specific audio context unlock\r\n  private static async unlockMobileAudio(): Promise<void> {\r\n    if (ReverbEngine.mobileUnlockAttempted || !ReverbEngine.isMobile()) {\r\n      return;\r\n    }\r\n\r\n    ReverbEngine.mobileUnlockAttempted = true;\r\n\r\n    try {\r\n      // Create a silent buffer and play it to unlock the audio context\r\n      const buffer = ReverbEngine.audioContext.createBuffer(1, 1, 22050);\r\n      const source = ReverbEngine.audioContext.createBufferSource();\r\n      source.buffer = buffer;\r\n      source.connect(ReverbEngine.audioContext.destination);\r\n\r\n      if (typeof source.start === \"undefined\") {\r\n        (source as any).noteOn(0);\r\n      } else {\r\n        source.start(0);\r\n      }\r\n\r\n      // Resume the context\r\n      if (ReverbEngine.audioContext.state === \"suspended\") {\r\n        await ReverbEngine.audioContext.resume();\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"[REVERB-MOBILE] Failed to unlock audio context:\", error);\r\n    }\r\n  }\r\n\r\n  // Helper function to get sound identifier for logging\r\n  private static getSoundName(sound: Howl): string {\r\n    const src = (sound as any)._src;\r\n    if (Array.isArray(src) && src.length > 0) {\r\n      return src[0].split(\"/\").pop() || \"unknown\";\r\n    } else if (typeof src === \"string\") {\r\n      return src.split(\"/\").pop() || \"unknown\";\r\n    }\r\n    return \"unknown\";\r\n  }\r\n\r\n  // General logging function to avoid repetition\r\n  private static logStep(\r\n    step: string,\r\n    soundName: string,\r\n    message: string,\r\n    soundId?: number,\r\n  ) {\r\n    const idStr = soundId !== undefined ? ` [ID:${soundId}]` : \"\";\r\n  }\r\n\r\n  public static async initialize() {\r\n    if (ReverbEngine.initialized) return;\r\n\r\n    let canInitialize = Game.inputReceived;\r\n\r\n    // For mobile, we need to be extra careful about timing\r\n    if (!canInitialize) {\r\n      try {\r\n        await new Promise<void>((resolve) => {\r\n          const checkInput = () => {\r\n            if (Game.inputReceived) {\r\n              resolve();\r\n              canInitialize = true;\r\n            } else {\r\n              requestAnimationFrame(checkInput);\r\n            }\r\n          };\r\n          checkInput();\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Failed to wait for input:\", error);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (\r\n      !ReverbEngine.audioContext &&\r\n      !ReverbEngine.initialized &&\r\n      canInitialize\r\n    ) {\r\n      try {\r\n        // Wait for Howler to initialize its context\r\n        if (!Howler.ctx) {\r\n          await new Promise((resolve) => setTimeout(resolve, 100));\r\n        }\r\n\r\n        ReverbEngine.audioContext =\r\n          Howler.ctx ||\r\n          new (window.AudioContext || (window as any).webkitAudioContext)();\r\n\r\n        // Mobile-specific: Unlock audio context immediately after user interaction\r\n        if (ReverbEngine.isMobile()) {\r\n          await ReverbEngine.unlockMobileAudio();\r\n        }\r\n\r\n        // Resume context if suspended (common on mobile)\r\n        if (ReverbEngine.audioContext.state === \"suspended\") {\r\n          await ReverbEngine.audioContext.resume();\r\n        }\r\n\r\n        // Set up the convolver\r\n        ReverbEngine.convolver = ReverbEngine.audioContext.createConvolver();\r\n        ReverbEngine.convolver.connect(ReverbEngine.audioContext.destination);\r\n\r\n        await ReverbEngine.loadReverbBuffer(`res/SFX/impulses/small.mp3`);\r\n        ReverbEngine.setDefaultReverb();\r\n\r\n        // HOOK INTO _refreshBuffer METHOD\r\n        if (!ReverbEngine.originalRefreshBuffer) {\r\n          ReverbEngine.originalRefreshBuffer = Howl.prototype._refreshBuffer;\r\n\r\n          Howl.prototype._refreshBuffer = function (sound: any) {\r\n            const soundName = ReverbEngine.getSoundName(this);\r\n            ReverbEngine.logStep(\r\n              \"A\",\r\n              soundName,\r\n              \"Intercepted _refreshBuffer\",\r\n              sound._id,\r\n            );\r\n\r\n            // Mobile check: ensure audio context is not suspended\r\n            if (\r\n              ReverbEngine.isMobile() &&\r\n              ReverbEngine.audioContext.state === \"suspended\"\r\n            ) {\r\n              ReverbEngine.audioContext.resume().then(() => {\r\n                ReverbEngine.logStep(\r\n                  \"A-MOBILE\",\r\n                  soundName,\r\n                  \"Resumed suspended context\",\r\n                  sound._id,\r\n                );\r\n              });\r\n            }\r\n\r\n            // Call the original method first\r\n            ReverbEngine.originalRefreshBuffer.call(this, sound);\r\n\r\n            // Now intercept the connection and add our reverb routing\r\n            if (sound._node && sound._node.bufferSource) {\r\n              ReverbEngine.logStep(\r\n                \"B\",\r\n                soundName,\r\n                \"Setting up reverb routing\",\r\n                sound._id,\r\n              );\r\n\r\n              // Disconnect from the original destination\r\n              sound._node.bufferSource.disconnect();\r\n\r\n              // Create or get gain node for this sound\r\n              let gainNode = ReverbEngine.gainNodes.get(sound._id);\r\n              if (!gainNode) {\r\n                gainNode = ReverbEngine.audioContext.createGain();\r\n                const volume = (this as any)._volume || 1.0;\r\n                gainNode.gain.setValueAtTime(\r\n                  volume,\r\n                  ReverbEngine.audioContext.currentTime,\r\n                );\r\n                gainNode.connect(ReverbEngine.convolver);\r\n                ReverbEngine.gainNodes.set(sound._id, gainNode);\r\n                ReverbEngine.logStep(\r\n                  \"C\",\r\n                  soundName,\r\n                  `Created gain node with volume ${volume}`,\r\n                  sound._id,\r\n                );\r\n              }\r\n\r\n              // Connect buffer source to our gain node instead of the original destination\r\n              sound._node.bufferSource.connect(gainNode);\r\n              ReverbEngine.logStep(\r\n                \"D\",\r\n                soundName,\r\n                \"Connected to reverb gain node\",\r\n                sound._id,\r\n              );\r\n            }\r\n          };\r\n        }\r\n\r\n        ReverbEngine.initialized = true;\r\n        if (Sound.initialized) Sound.audioMuted = false;\r\n\r\n        const deviceType = ReverbEngine.isMobile() ? \"MOBILE\" : \"DESKTOP\";\r\n      } catch (error) {\r\n        console.error(\"Failed to initialize ReverbEngine:\", error);\r\n        ReverbEngine.initialized = true;\r\n        if (Sound.initialized) Sound.audioMuted = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Load a specified impulse response\r\n  private static async loadReverbBuffer(filePath: string) {\r\n    try {\r\n      const response = await fetch(filePath);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const arrayBuffer = await response.arrayBuffer();\r\n      ReverbEngine.reverbBuffer =\r\n        await ReverbEngine.audioContext.decodeAudioData(arrayBuffer);\r\n    } catch (error) {\r\n      console.error(\"Error loading reverb buffer:\", error);\r\n    }\r\n  }\r\n\r\n  // Set the default reverb buffer\r\n  private static setDefaultReverb() {\r\n    if (ReverbEngine.reverbBuffer) {\r\n      ReverbEngine.convolver.buffer = ReverbEngine.reverbBuffer;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the reverb characteristics by specifying an impulse response file.\r\n   * @param filePath - The path to the impulse response file.\r\n   */\r\n  public static async setReverbImpulse(filePath: string): Promise<void> {\r\n    if (!ReverbEngine.initialized) return;\r\n    try {\r\n      await ReverbEngine.loadReverbBuffer(filePath);\r\n      if (ReverbEngine.reverbBuffer) {\r\n        ReverbEngine.convolver.buffer = ReverbEngine.reverbBuffer;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error setting reverb impulse:\", error);\r\n    }\r\n  }\r\n\r\n  // CONNECTION INTERCEPT APPROACH: The _refreshBuffer hook handles everything\r\n  public static applyReverb(sound: Howl): number {\r\n    const soundName = ReverbEngine.getSoundName(sound);\r\n\r\n    ReverbEngine.logStep(\r\n      \"E\",\r\n      soundName,\r\n      \"CONNECTION INTERCEPT - _refreshBuffer hook will handle reverb\",\r\n    );\r\n\r\n    if (!ReverbEngine.initialized) {\r\n      ReverbEngine.logStep(\r\n        \"E1\",\r\n        soundName,\r\n        \"Not initialized, playing without reverb\",\r\n      );\r\n      return sound.play();\r\n    }\r\n\r\n    // Mobile check: ensure we have an active audio context\r\n    if (\r\n      ReverbEngine.isMobile() &&\r\n      ReverbEngine.audioContext.state !== \"running\"\r\n    ) {\r\n      ReverbEngine.audioContext.resume().catch((error) => {\r\n        console.warn(\"[REVERB-MOBILE] Could not resume audio context:\", error);\r\n      });\r\n    }\r\n\r\n    // Just call play normally - our _refreshBuffer hook will handle the rest\r\n    return sound.play();\r\n  }\r\n\r\n  // Remove reverb from a given Howl sound\r\n  public static removeReverb(sound: Howl) {\r\n    const soundName = ReverbEngine.getSoundName(sound);\r\n\r\n    // Clean up any gain nodes associated with this sound\r\n    for (const [soundId, gainNode] of ReverbEngine.gainNodes.entries()) {\r\n      if (gainNode) {\r\n        gainNode.disconnect();\r\n        ReverbEngine.gainNodes.delete(soundId);\r\n      }\r\n    }\r\n\r\n    ReverbEngine.logStep(\r\n      \"R\",\r\n      soundName,\r\n      \"Reverb removed and gain nodes cleaned up\",\r\n    );\r\n  }\r\n\r\n  // Cleanup method\r\n  public static cleanup() {\r\n    // Restore original _refreshBuffer method\r\n    if (ReverbEngine.originalRefreshBuffer) {\r\n      Howl.prototype._refreshBuffer = ReverbEngine.originalRefreshBuffer;\r\n    }\r\n\r\n    // Clean up all gain nodes\r\n    for (const [soundId, gainNode] of ReverbEngine.gainNodes.entries()) {\r\n      if (gainNode) {\r\n        gainNode.disconnect();\r\n      }\r\n    }\r\n    ReverbEngine.gainNodes.clear();\r\n\r\n    if (ReverbEngine.convolver) {\r\n      ReverbEngine.convolver.disconnect();\r\n    }\r\n\r\n    if (\r\n      ReverbEngine.audioContext &&\r\n      ReverbEngine.audioContext.state !== \"closed\"\r\n    ) {\r\n      ReverbEngine.audioContext.close();\r\n    }\r\n    ReverbEngine.initialized = false;\r\n  }\r\n}\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { HitWarning } from \"../../drawable/hitWarning\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { RedGem } from \"../../item/resource/redgem\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Spear } from \"../../item/weapon/spear\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { DeathParticle } from \"../../particle/deathParticle\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { DownLadder } from \"../../tile/downLadder\";\r\nimport { Door } from \"../../tile/door\";\r\nimport { Entity } from \"../entity\";\r\n\r\nexport class BigSkullEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  ticksSinceFirstHit: number;\r\n  flashingFrame: number;\r\n  targetPlayer: Player;\r\n  aggro: boolean;\r\n  unconscious: boolean;\r\n  readonly REGEN_TICKS = 5;\r\n  drops: Array<Item>;\r\n  static difficulty: number = 4;\r\n  static tileX: number = 21;\r\n  static tileY: number = 0;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.w = 2;\r\n    this.h = 2;\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 6;\r\n    this.maxHealth = 6;\r\n    this.defaultMaxHealth = 6;\r\n    this.tileX = 33;\r\n    this.tileY = 12;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.unconscious = false;\r\n    this.ticksSinceFirstHit = 0;\r\n    this.flashingFrame = 0;\r\n    this.deathParticleColor = \"#ffffff\";\r\n    this.chainPushable = false;\r\n    this.name = \"giant skeleton\";\r\n    this.dropChance = 1;\r\n    this.drops = [];\r\n    this.direction = Direction.DOWN;\r\n    this.forwardOnlyAttack = true;\r\n\r\n    this.drawMoveSpeed = 0.9;\r\n    this.canDestroyOthers = true;\r\n    if (drop) this.drops.push(drop);\r\n    const dropAmount = Math.floor(Random.rand() * 3) + 2;\r\n    while (this.drops.length < dropAmount && !this.cloned) {\r\n      this.getDrop();\r\n    }\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  hurt = (\r\n    playerHitBy: Player,\r\n    damage: number,\r\n    type: \"none\" | \"poison\" | \"blood\" | \"heal\" = \"none\",\r\n  ) => {\r\n    this.handleEnemyCase(playerHitBy);\r\n\r\n    let hitShield = false;\r\n    let shieldHealth = 0;\r\n    if (this.shielded) {\r\n      shieldHealth = this.shield.health;\r\n      if (shieldHealth > 0) {\r\n        this.shield.hurt(damage);\r\n        hitShield = true;\r\n      }\r\n    }\r\n    this.ticksSinceFirstHit = 0;\r\n    if (this.health === 4) this.unconscious = false;\r\n    this.health -= damage;\r\n    this.maxHealth -= shieldHealth;\r\n    this.startHurting();\r\n\r\n    this.healthBar.hurt();\r\n    this.createDamageNumber(damage, type);\r\n    console.log(\"health\", this.health);\r\n    console.log(\"damage\", damage);\r\n    this.playHitSound();\r\n\r\n    if (this.health === 2) {\r\n      this.unconscious = true;\r\n      ImageParticle.spawnCluster(this.room, this.x + 1, this.y + 1, 3, 28);\r\n    } else {\r\n      this.healthBar.hurt();\r\n    }\r\n    if (this.health <= 0) {\r\n      ImageParticle.spawnCluster(this.room, this.x + 1, this.y + 1, 0, 24);\r\n      this.kill();\r\n    } else this.hurtCallback();\r\n  };\r\n\r\n  bleed = () => {};\r\n  poison = () => {};\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        this.ticks++;\r\n        return;\r\n      }\r\n\r\n      if (this.health <= 2) {\r\n        this.unconscious = true;\r\n        this.ticksSinceFirstHit++;\r\n        if (this.ticksSinceFirstHit >= this.REGEN_TICKS) {\r\n          this.healthBar.hurt();\r\n          this.health = 4;\r\n          this.unconscious = false;\r\n        }\r\n        this.ticks++;\r\n        return;\r\n      }\r\n\r\n      this.ticks++;\r\n      if (!this.seenPlayer) {\r\n        this.lookForPlayer();\r\n      } else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          // If aligned with the player on a row/column, turn toward the player instead of moving this turn\r\n          const p = this.targetPlayer;\r\n          const sharesRow = p.y >= this.y && p.y < this.y + this.h;\r\n          const sharesColumn = p.x >= this.x && p.x < this.x + this.w;\r\n          if (sharesRow !== sharesColumn) {\r\n            let desiredDir = this.direction;\r\n            if (sharesRow) {\r\n              desiredDir = p.x < this.x ? Direction.LEFT : Direction.RIGHT;\r\n            } else if (sharesColumn) {\r\n              desiredDir = p.y < this.y ? Direction.UP : Direction.DOWN;\r\n            }\r\n            if (desiredDir !== this.direction) {\r\n              this.direction = desiredDir;\r\n              this.makeBigHitWarnings();\r\n              this.ticks++;\r\n              return;\r\n            }\r\n          }\r\n\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              // For 2x2 enemy, block all tiles the entity occupies\r\n              for (let ex = 0; ex < (e.w || 1); ex++) {\r\n                for (let ey = 0; ey < (e.h || 1); ey++) {\r\n                  disablePositions.push({\r\n                    x: e.x + ex,\r\n                    y: e.y + ey,\r\n                  } as astar.Position);\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          // Check for spike traps around the 2x2 area\r\n          for (let xx = this.x - 1; xx <= this.x + this.w; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + this.h; yy++) {\r\n              if (\r\n                this.room.roomArray[xx] &&\r\n                this.room.roomArray[xx][yy] &&\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n\r\n          let grid = [];\r\n          for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n            grid[x] = [];\r\n            for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n              if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                grid[x][y] = this.room.roomArray[x][y];\r\n              else grid[x][y] = false;\r\n            }\r\n          }\r\n\r\n          let moves = astar.AStar.search(\r\n            grid,\r\n            this,\r\n            this.targetPlayer,\r\n            disablePositions,\r\n            false,\r\n            false,\r\n            true,\r\n            this.direction,\r\n            undefined,\r\n            undefined,\r\n          );\r\n\r\n          if (moves.length > 0) {\r\n            let moveX = moves[0].pos.x;\r\n            let moveY = moves[0].pos.y;\r\n            let oldDir = this.direction;\r\n            let player = this.targetPlayer;\r\n\r\n            //this.facePlayer(player);\r\n\r\n            if (moveX > oldX) this.direction = Direction.RIGHT;\r\n            else if (moveX < oldX) this.direction = Direction.LEFT;\r\n            else if (moveY > oldY) this.direction = Direction.DOWN;\r\n            else if (moveY < oldY) this.direction = Direction.UP;\r\n\r\n            if (oldDir === this.direction) {\r\n              let hitPlayer = false;\r\n              let wouldHit = (player: Player, moveX: number, moveY: number) => {\r\n                return (\r\n                  player.x >= moveX &&\r\n                  player.x < moveX + this.w &&\r\n                  player.y >= moveY &&\r\n                  player.y < moveY + this.h\r\n                );\r\n              };\r\n\r\n              for (const i in this.game.players) {\r\n                const closestTile = this.closestTile(this.game.players[i]);\r\n                if (\r\n                  this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                  wouldHit(this.game.players[i], moveX, moveY)\r\n                ) {\r\n                  this.game.players[i].hurt(this.hit(), this.name);\r\n                  this.drawX = 0.5 * (closestTile.x - this.game.players[i].x);\r\n                  this.drawY = 0.5 * (closestTile.y - this.game.players[i].y);\r\n                  if (\r\n                    this.game.players[i] ===\r\n                    this.game.players[this.game.localPlayerID]\r\n                  )\r\n                    this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n                  hitPlayer = true;\r\n                }\r\n              }\r\n\r\n              if (!hitPlayer) {\r\n                this.tryMove(moveX, moveY);\r\n                this.setDrawXY(oldX, oldY);\r\n\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n              }\r\n            }\r\n          } else {\r\n            this.facePlayer(this.targetPlayer);\r\n          }\r\n\r\n          // Add directional disable positions for forward-only attack\r\n          if (this.direction == Direction.LEFT) {\r\n            for (let i = 0; i < this.h; i++) {\r\n              disablePositions.push({\r\n                x: this.x,\r\n                y: this.y + i + 1,\r\n              } as astar.Position);\r\n              disablePositions.push({\r\n                x: this.x,\r\n                y: this.y + i - 1,\r\n              } as astar.Position);\r\n            }\r\n          }\r\n          if (this.direction == Direction.RIGHT) {\r\n            for (let i = 0; i < this.h; i++) {\r\n              disablePositions.push({\r\n                x: this.x + this.w - 1,\r\n                y: this.y + i + 1,\r\n              } as astar.Position);\r\n              disablePositions.push({\r\n                x: this.x + this.w - 1,\r\n                y: this.y + i - 1,\r\n              } as astar.Position);\r\n            }\r\n          }\r\n          if (this.direction == Direction.DOWN) {\r\n            for (let i = 0; i < this.w; i++) {\r\n              disablePositions.push({\r\n                x: this.x + i + 1,\r\n                y: this.y + this.h - 1,\r\n              } as astar.Position);\r\n              disablePositions.push({\r\n                x: this.x + i - 1,\r\n                y: this.y + this.h - 1,\r\n              } as astar.Position);\r\n            }\r\n          }\r\n          if (this.direction == Direction.UP) {\r\n            for (let i = 0; i < this.w; i++) {\r\n              disablePositions.push({\r\n                x: this.x + i + 1,\r\n                y: this.y,\r\n              } as astar.Position);\r\n              disablePositions.push({\r\n                x: this.x + i - 1,\r\n                y: this.y,\r\n              } as astar.Position);\r\n            }\r\n          }\r\n          this.makeBigHitWarnings();\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.makeBigHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.tileX = 33;\r\n      this.tileY = 12;\r\n\r\n      if (this.health <= 2 || this.cloned) {\r\n        this.tileX = 35;\r\n        this.tileY = 12;\r\n        if (this.ticksSinceFirstHit >= 3) {\r\n          this.flashingFrame += 0.1 * delta;\r\n          if (Math.floor(this.flashingFrame) % 2 === 0) {\r\n            this.tileX = 33;\r\n          }\r\n        }\r\n      }\r\n\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX,\r\n        this.tileY + this.direction * 3,\r\n        2,\r\n        3,\r\n        this.x - this.drawX,\r\n        this.y - 1.5 - this.drawY - this.jumpY,\r\n        2,\r\n        3,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n      if (!this.cloned) {\r\n        if (!this.seenPlayer) {\r\n          this.drawSleepingZs(\r\n            delta,\r\n            GameConstants.TILESIZE * 0.5,\r\n            GameConstants.TILESIZE * -1,\r\n          );\r\n        }\r\n        if (this.alertTicks > 0) {\r\n          this.drawExclamation(\r\n            delta,\r\n            GameConstants.TILESIZE * 0.5,\r\n            GameConstants.TILESIZE * -1,\r\n          );\r\n        }\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n\r\n    this.healthBar.draw(\r\n      delta,\r\n      this.health,\r\n      this.maxHealth,\r\n      this.x + 0.5,\r\n      this.y - 0.5,\r\n      true,\r\n    );\r\n  };\r\n}\r\n","import { Room } from \"../room/room\";\r\nimport { Game } from \"../game\";\r\nimport { Tile } from \"./tile\";\r\nimport { FishingSpot } from \"../entity/object/fishingSpot\";\r\n\r\nexport class Pool extends Tile {\r\n  tileX: number;\r\n  tileY: number;\r\n  topEdge: boolean;\r\n\r\n  constructor(\r\n    room: Room,\r\n    x: number,\r\n    y: number,\r\n    leftEdge: boolean,\r\n    rightEdge: boolean,\r\n    topEdge: boolean,\r\n    bottomEdge: boolean,\r\n  ) {\r\n    super(room, x, y);\r\n\r\n    this.tileX = 20;\r\n    this.tileY = 4;\r\n\r\n    if (leftEdge) this.tileX--;\r\n    else if (rightEdge) this.tileX++;\r\n    if (topEdge) this.tileY--;\r\n    else if (bottomEdge) this.tileY++;\r\n\r\n    this.topEdge = topEdge;\r\n    if (rightEdge || leftEdge || topEdge || bottomEdge) {\r\n      this.room.entities.push(\r\n        new FishingSpot(this.room, this.room.game, this.x, this.y),\r\n      );\r\n    }\r\n  }\r\n\r\n  interact = (): void => {\r\n    this.room.game.pushMessage(\"You jump into the pool.\");\r\n  };\r\n\r\n  isSolid = (): boolean => {\r\n    return true;\r\n  };\r\n  canCrushEnemy = (): boolean => {\r\n    return true;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    Game.drawTile(\r\n      1,\r\n      this.skin,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n    if (this.topEdge)\r\n      Game.drawTile(\r\n        22,\r\n        3,\r\n        1,\r\n        2,\r\n        this.x,\r\n        this.y,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    Game.drawTile(\r\n      this.tileX,\r\n      this.tileY,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n}\r\n","import { globalEventBus } from \"../event/eventBus\";\r\n\r\nexport class TextBox {\r\n  text: string;\r\n  cursor: number;\r\n  private enterCallback: () => void;\r\n  private escapeCallback: () => void;\r\n  private allowedCharacters: string = \"all\";\r\n  private element: HTMLElement;\r\n  private message: string = \"\";\r\n  private sentMessages: Array<string>;\r\n  private currentMessageIndex: number = -1;\r\n  private readonly MAX_HISTORY: number = 50;\r\n  private handleInputEventBound: (e: Event) => void;\r\n  private handleKeydownEventBound: (e: KeyboardEvent) => void;\r\n\r\n  constructor(element: HTMLElement) {\r\n    this.text = \"\";\r\n    this.cursor = 0;\r\n    this.enterCallback = () => {};\r\n    this.escapeCallback = () => {};\r\n    this.element = element;\r\n    this.sentMessages = [];\r\n    // Bind DOM listeners so mobile keyboards feed into this TextBox\r\n    const input = this.element as HTMLInputElement;\r\n    if (input && input.tagName === \"INPUT\") {\r\n      this.handleInputEventBound = (e: Event) => this.handleDomInput(e);\r\n      this.handleKeydownEventBound = (e: KeyboardEvent) =>\r\n        this.handleDomKeydown(e);\r\n      input.addEventListener(\"input\", this.handleInputEventBound, false);\r\n      input.addEventListener(\"keydown\", this.handleKeydownEventBound, false);\r\n    }\r\n\r\n    //this.element.addEventListener(\"touchstart\", this.handleTouchStart);\r\n  }\r\n\r\n  public setEnterCallback(callback: () => void): void {\r\n    this.enterCallback = callback;\r\n  }\r\n\r\n  public setEscapeCallback(callback: () => void): void {\r\n    this.escapeCallback = callback;\r\n  }\r\n\r\n  public clear(): void {\r\n    this.text = \"\";\r\n    this.cursor = 0;\r\n    this.message = \"\";\r\n    this.updateElement();\r\n    const input = this.element as HTMLInputElement;\r\n    if (input && input.tagName === \"INPUT\") input.value = \"\";\r\n  }\r\n\r\n  public handleKeyPress = (key: string): void => {\r\n    const fontHas = \"abcdefghijklmnopqrstuvwxyz1234567890,.!?:'()[]%-/+ \".split(\r\n      \"\",\r\n    );\r\n    if (key.length === 1) {\r\n      key = key.toLowerCase();\r\n      if (fontHas.includes(key)) {\r\n        if (\r\n          this.allowedCharacters === \"all\" ||\r\n          this.allowedCharacters.includes(key)\r\n        ) {\r\n          this.text =\r\n            this.text.substring(0, this.cursor) +\r\n            key +\r\n            this.text.substring(this.cursor, this.text.length);\r\n          this.cursor += 1;\r\n          this.updateElement();\r\n\r\n          this.message =\r\n            this.message.substring(0, this.cursor - 1) +\r\n            key +\r\n            this.message.substring(this.cursor - 1, this.message.length);\r\n        }\r\n      }\r\n      //console.log(`Current message: \"${this.message}\"`);\r\n      return;\r\n    } else {\r\n      switch (key) {\r\n        case \"Backspace\":\r\n          if (this.cursor > 0) {\r\n            this.text =\r\n              this.text.substring(0, this.cursor - 1) +\r\n              this.text.substring(this.cursor, this.text.length);\r\n            this.cursor = Math.max(0, this.cursor - 1);\r\n            this.updateElement();\r\n\r\n            this.message =\r\n              this.message.substring(0, this.cursor) +\r\n              this.message.substring(this.cursor + 1, this.message.length);\r\n          }\r\n          break;\r\n        case \"Delete\":\r\n          if (this.cursor < this.text.length) {\r\n            this.text =\r\n              this.text.substring(0, this.cursor) +\r\n              this.text.substring(this.cursor + 1, this.text.length);\r\n            this.updateElement();\r\n\r\n            this.message =\r\n              this.message.substring(0, this.cursor) +\r\n              this.message.substring(this.cursor + 1, this.message.length);\r\n          }\r\n          break;\r\n        case \"ArrowLeft\":\r\n          this.cursor = Math.max(0, this.cursor - 1);\r\n          this.updateCursorPosition();\r\n          break;\r\n        case \"ArrowRight\":\r\n          this.cursor = Math.min(this.text.length, this.cursor + 1);\r\n          this.updateCursorPosition();\r\n          break;\r\n        case \"ArrowUp\":\r\n          if (\r\n            this.sentMessages.length > 0 &&\r\n            this.currentMessageIndex < this.sentMessages.length - 1\r\n          ) {\r\n            this.currentMessageIndex++;\r\n            this.text =\r\n              this.sentMessages[\r\n                this.sentMessages.length - 1 - this.currentMessageIndex\r\n              ];\r\n            this.updateElement();\r\n            this.message = this.text;\r\n          }\r\n          break;\r\n        case \"ArrowDown\":\r\n          if (this.currentMessageIndex > 0) {\r\n            this.currentMessageIndex--;\r\n            this.text =\r\n              this.sentMessages[\r\n                this.sentMessages.length - 1 - this.currentMessageIndex\r\n              ];\r\n            this.updateElement();\r\n            this.message = this.text;\r\n          } else if (this.currentMessageIndex === 0) {\r\n            this.currentMessageIndex = -1;\r\n            this.clear();\r\n          }\r\n          break;\r\n        case \"Enter\":\r\n          this.sendMessage();\r\n          this.escapeCallback();\r\n          break;\r\n        case \"Escape\":\r\n          this.escapeCallback();\r\n          break;\r\n      }\r\n    }\r\n    //console.log(`Current message: \"${this.message}\"`);\r\n  };\r\n\r\n  private handleTouchStart = (e: TouchEvent): void => {\r\n    this.focus();\r\n    e.preventDefault();\r\n  };\r\n\r\n  public focus(): void {\r\n    const input = this.element as HTMLInputElement;\r\n    if (!input) return;\r\n\r\n    // Temporarily position the input on-screen (near bottom-left), tiny and nearly transparent\r\n    const prev = {\r\n      position: input.style.position,\r\n      left: input.style.left,\r\n      right: input.style.right,\r\n      top: input.style.top,\r\n      bottom: input.style.bottom,\r\n      width: input.style.width,\r\n      height: input.style.height,\r\n      opacity: input.style.opacity,\r\n      zIndex: input.style.zIndex,\r\n      pointerEvents: input.style.pointerEvents,\r\n    };\r\n\r\n    input.style.position = \"fixed\";\r\n    input.style.left = \"8px\";\r\n    input.style.bottom = \"40px\";\r\n    input.style.top = \"\";\r\n    input.style.right = \"\";\r\n    input.style.width = \"1px\";\r\n    input.style.height = \"1px\";\r\n    input.style.opacity = \"0.01\";\r\n    input.style.zIndex = \"9999\";\r\n    input.style.pointerEvents = \"auto\";\r\n\r\n    try {\r\n      input.focus();\r\n      // Place cursor at end\r\n      if (typeof input.setSelectionRange === \"function\") {\r\n        const len = input.value?.length ?? 0;\r\n        input.setSelectionRange(len, len);\r\n      }\r\n    } catch {}\r\n\r\n    const restore = () => {\r\n      input.style.position = prev.position;\r\n      input.style.left = prev.left;\r\n      input.style.right = prev.right;\r\n      input.style.top = prev.top;\r\n      input.style.bottom = prev.bottom;\r\n      input.style.width = prev.width;\r\n      input.style.height = prev.height;\r\n      input.style.opacity = prev.opacity;\r\n      input.style.zIndex = prev.zIndex;\r\n      input.style.pointerEvents = prev.pointerEvents;\r\n      input.removeEventListener(\"blur\", restore);\r\n    };\r\n    input.addEventListener(\"blur\", restore);\r\n  }\r\n\r\n  public blur(): void {\r\n    const input = this.element as HTMLInputElement;\r\n    try {\r\n      input.blur();\r\n    } catch {}\r\n  }\r\n\r\n  private handleDomInput(e: Event): void {\r\n    const input = e.target as HTMLInputElement;\r\n    const val = input?.value ?? \"\";\r\n    this.text = val;\r\n    this.message = val;\r\n    this.cursor = val.length;\r\n    // Keep element value in sync if something external modified text\r\n    this.updateElement();\r\n  }\r\n\r\n  private handleDomKeydown(e: KeyboardEvent): void {\r\n    // Map special keys to game logic; allow normal character entry via 'input' event\r\n    const key = e.key;\r\n    if (\r\n      key === \"Backspace\" ||\r\n      key === \"Delete\" ||\r\n      key === \"Enter\" ||\r\n      key === \"Escape\" ||\r\n      key === \"ArrowLeft\" ||\r\n      key === \"ArrowRight\" ||\r\n      key === \"ArrowUp\" ||\r\n      key === \"ArrowDown\"\r\n    ) {\r\n      e.preventDefault();\r\n      this.handleKeyPress(key);\r\n      const input = this.element as HTMLInputElement;\r\n      if (input && input.tagName === \"INPUT\") {\r\n        // Reflect updated text into the DOM input\r\n        input.value = this.text;\r\n      }\r\n    }\r\n  }\r\n\r\n  private sendMessage(): void {\r\n    let message = this.message.trim();\r\n\r\n    if (message) {\r\n      // Add the new message to the history\r\n      this.sentMessages.push(message);\r\n\r\n      // Ensure the history size doesn't exceed the maximum limit\r\n      if (this.sentMessages.length > this.MAX_HISTORY) {\r\n        this.sentMessages.shift(); // Remove the oldest message\r\n      }\r\n      globalEventBus.emit(\"ChatMessageSent\", message);\r\n\r\n      console.log(this.sentMessages);\r\n\r\n      this.enterCallback();\r\n\r\n      if (message.startsWith(\"/\")) {\r\n        message = message.substring(1);\r\n        globalEventBus.emit(\"ChatCommand\", message);\r\n      }\r\n\r\n      this.clear();\r\n\r\n      // Reset the navigation index\r\n      this.currentMessageIndex = -1;\r\n    }\r\n  }\r\n\r\n  private updateElement(): void {\r\n    // Update the HTML element with the current text\r\n    const input = this.element as HTMLInputElement;\r\n    if (input && input.tagName === \"INPUT\") {\r\n      input.value = this.text;\r\n    } else {\r\n      // Modify to handle multiple lines if necessary\r\n      this.element.textContent = this.text;\r\n    }\r\n\r\n    // Optionally, update cursor position in the UI\r\n  }\r\n\r\n  private updateCursorPosition(): void {\r\n    // Implement cursor position update in the UI if necessary\r\n  }\r\n\r\n  // Optional: Modify other methods if needed to handle wrapped messages\r\n}\r\n","import { Item } from \"./item\";\r\nimport { Player } from \"../player/player\";\r\nimport { Game } from \"../game\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { Room } from \"../room/room\";\r\nimport { Usable } from \"./usable/usable\";\r\nimport { Inventory } from \"../inventory/inventory\";\r\n\r\nexport class Backpack extends Usable {\r\n  static itemName = \"backpack\";\r\n\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 4;\r\n    this.tileY = 0;\r\n    this.offsetY = 0;\r\n    this.name = Backpack.itemName;\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    if (this.level.game.rooms[player.levelID] === this.level.game.room)\r\n      Sound.playBackpack();\r\n    player.inventory.removeItem(this);\r\n    player.inventory.expansion += 1;\r\n    this.level.game.pushMessage(\r\n      \"You equip the backpack, increasing the amount you can carry.\",\r\n    );\r\n    //this.level.items = this.level.items.filter((x) => x !== this); // removes itself from the level\r\n  };\r\n  getDescription = () => {\r\n    return \"BACKPACK\\nA normal looking backpack. Increases the amount you can carry. \";\r\n  };\r\n}\r\n","import { Room } from \"../room/room\";\r\nimport { Game } from \"../game\";\r\nimport { Tile } from \"./tile\";\r\n\r\nexport class FountainTile extends Tile {\r\n  subTileX: number; // each fountain is 3x3, this is the sub-tile coordinate\r\n  subTileY: number;\r\n\r\n  constructor(\r\n    room: Room,\r\n    x: number,\r\n    y: number,\r\n    subTileX: number,\r\n    subTileY: number,\r\n  ) {\r\n    super(room, x, y);\r\n    this.subTileX = subTileX;\r\n    this.subTileY = subTileY;\r\n  }\r\n\r\n  isSolid = (): boolean => {\r\n    return true;\r\n  };\r\n  canCrushEnemy = (): boolean => {\r\n    return true;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    Game.drawTile(\r\n      1,\r\n      this.skin,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n    Game.drawTile(\r\n      this.subTileX,\r\n      2 + this.subTileY,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n}\r\n","import { Drawable } from \"../drawable/drawable\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Player } from \"../player/player\";\r\nimport { Room } from \"../room/room\";\r\n\r\nexport class Particle extends Drawable {\r\n  x: number;\r\n  y: number;\r\n  dead: boolean;\r\n  room: Room;\r\n  drawTopLayer = (delta) => {};\r\n  shadeAmount = () => {\r\n    if (\r\n      GameConstants.SMOOTH_LIGHTING &&\r\n      !GameConstants.SHADE_INLINE_IN_ENTITY_LAYER\r\n    )\r\n      return 0;\r\n    const x = Math.floor(this.x);\r\n    const y = Math.floor(this.y);\r\n\r\n    if (!this.room.softVis[x]) return 0.9;\r\n\r\n    const shade = this.room.softVis[x][y];\r\n    return shade ?? 0.9;\r\n  };\r\n  shadeColor = () => {\r\n    return this.room.shadeColor;\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Usable } from \"./usable\";\r\n\r\nexport class GreenPotion extends Usable {\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.tileX = 7;\r\n    this.tileY = 0;\r\n    this.offsetY = -0.3;\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    player.health = Math.min(player.maxHealth, player.health + 1);\r\n    if (this.level.game.rooms[player.levelID] === this.level.game.room)\r\n      Sound.heal();\r\n    player.inventory.removeItem(this);\r\n\r\n    //this.level.items = this.level.items.filter((x) => x !== this); // removes itself from the level\r\n  };\r\n\r\n  getDescription = () => {\r\n    return \"GREEN POTION\\nRestores 1 heart\";\r\n  };\r\n}\r\n","import { Weapon } from \"./weapon\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Direction } from \"../../game\";\r\n\r\nexport class Scythe extends Weapon {\r\n  static itemName = \"scythe\";\r\n  hitDelay: number;\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 23;\r\n    this.tileY = 2;\r\n    this.damage = 1;\r\n    this.name = \"scythe\";\r\n    this.hitDelay = 150;\r\n    this.useCost = 2;\r\n    this.offsetY = 0;\r\n    this.iconOffset = 0.2;\r\n    this.degradeable = false;\r\n    this.twoHanded = true;\r\n  }\r\n\r\n  hitSound = () => {\r\n    Sound.swing();\r\n    //Sound.hit();\r\n    Sound.playSlice();\r\n  };\r\n\r\n  weaponMove = (newX: number, newY: number): boolean => {\r\n    let positions: { x: number; y: number }[] = [];\r\n\r\n    switch (this.wielder.direction) {\r\n      case Direction.DOWN:\r\n        positions = [\r\n          { x: newX - 1, y: newY }, // leftCorner\r\n          { x: newX + 1, y: newY }, // rightCorner\r\n          { x: newX - 1, y: newY - 1 }, // leftEdge\r\n          { x: newX + 1, y: newY - 1 }, // rightEdge\r\n        ];\r\n        break;\r\n      case Direction.UP:\r\n        positions = [\r\n          { x: newX + 1, y: newY }, // leftCorner\r\n          { x: newX - 1, y: newY }, // rightCorner\r\n          { x: newX + 1, y: newY + 1 }, // leftEdge\r\n          { x: newX - 1, y: newY + 1 }, // rightEdge\r\n        ];\r\n        break;\r\n      case Direction.LEFT:\r\n        positions = [\r\n          { x: newX, y: newY + 1 }, // leftCorner\r\n          { x: newX, y: newY - 1 }, // rightCorner\r\n          { x: newX + 1, y: newY + 1 }, // leftEdge\r\n          { x: newX + 1, y: newY - 1 }, // rightEdge\r\n        ];\r\n        break;\r\n      case Direction.RIGHT:\r\n        positions = [\r\n          { x: newX, y: newY - 1 }, // leftCorner\r\n          { x: newX, y: newY + 1 }, // rightCorner\r\n          { x: newX - 1, y: newY - 1 }, // leftEdge\r\n          { x: newX - 1, y: newY + 1 }, // rightEdge\r\n        ];\r\n        break;\r\n    }\r\n\r\n    if (this.checkForPushables(newX, newY)) return true;\r\n\r\n    const hitSomething = this.executeAttack(\r\n      newX,\r\n      newY,\r\n      true,\r\n      this.damage + this.wielder.damageBonus,\r\n      true,\r\n      true,\r\n      true,\r\n      false,\r\n    );\r\n    if (hitSomething) {\r\n      if (positions.length > 0) {\r\n        for (const pos of positions) {\r\n          const room = (this.wielder as any)?.getRoom\r\n            ? (this.wielder as any).getRoom()\r\n            : this.game.rooms[this.wielder.levelID];\r\n          if (!room.roomArray[pos.x][pos.y].isSolid()) {\r\n            this.hitEntitiesAt(\r\n              pos.x,\r\n              pos.y,\r\n              this.damage + this.wielder.damageBonus,\r\n            );\r\n          }\r\n        }\r\n      }\r\n      const room = (this.wielder as any)?.getRoom\r\n        ? (this.wielder as any).getRoom()\r\n        : this.game.rooms[this.wielder.levelID];\r\n      room.tick(this.wielder);\r\n    }\r\n\r\n    return !hitSomething;\r\n  };\r\n\r\n  shakeScreen = () => {\r\n    //this.wielder.beginSlowMotion();\r\n\r\n    setTimeout(() => {\r\n      //this.wielder.endSlowMotion();\r\n      switch (this.wielder.direction) {\r\n        case Direction.DOWN:\r\n          this.game.shakeScreen(0, -5, false);\r\n          break;\r\n        case Direction.UP:\r\n          this.game.shakeScreen(0, -5, false);\r\n          break;\r\n        case Direction.LEFT:\r\n          this.game.shakeScreen(-5, -5, false);\r\n          break;\r\n        case Direction.RIGHT:\r\n          this.game.shakeScreen(5, -5, false);\r\n          break;\r\n      }\r\n    }, this.hitDelay);\r\n  };\r\n}\r\n","import { Weapon } from \"./weapon\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Direction } from \"../../game\";\r\nimport { Entity } from \"../../entity/entity\";\r\n\r\nexport class Greataxe extends Weapon {\r\n  static itemName = \"greataxe\";\r\n  hitDelay: number;\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 24;\r\n    this.tileY = 2;\r\n    this.damage = 2;\r\n    this.name = \"greataxe\";\r\n\r\n    this.hitDelay = 225;\r\n    this.offsetY = 0;\r\n    this.iconOffset = 0.2;\r\n\r\n    this.durability = 25;\r\n    this.durabilityMax = 25;\r\n    this.useCost = 5;\r\n    this.twoHanded = true;\r\n  }\r\n\r\n  hitSound = () => {\r\n    Sound.swing();\r\n    Sound.playWarHammer();\r\n  };\r\n\r\n  adjustedDamage = () => {\r\n    let hp = this.wielder?.health / this.wielder?.maxHealth;\r\n    let damage = 1;\r\n\r\n    if (hp <= 1) damage = 1;\r\n    if (hp <= 0.75) damage = 2;\r\n    if (hp <= 0.5) damage = 4;\r\n    if (hp <= 0.25) damage = 8;\r\n    return damage;\r\n  };\r\n\r\n  attack = (enemy: Entity) => {\r\n    enemy.hurt(this.wielder, this.adjustedDamage());\r\n    this.statusEffect(enemy);\r\n  };\r\n\r\n  shakeScreen = () => {\r\n    this.wielder.beginSlowMotion();\r\n\r\n    setTimeout(() => {\r\n      this.wielder.endSlowMotion();\r\n      //this.hitSound();\r\n      switch (this.wielder.direction) {\r\n        case Direction.DOWN:\r\n          this.game.shakeScreen(0, -10 * this.adjustedDamage(), false);\r\n          break;\r\n        case Direction.UP:\r\n          this.game.shakeScreen(0, -10 * this.adjustedDamage(), false);\r\n          break;\r\n        case Direction.LEFT:\r\n          this.game.shakeScreen(-5, -10 * this.adjustedDamage(), false);\r\n          break;\r\n        case Direction.RIGHT:\r\n          this.game.shakeScreen(5, -10 * this.adjustedDamage(), false);\r\n          break;\r\n      }\r\n    }, this.hitDelay);\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { StunAnimation } from \"../../projectile/stunAnimation\";\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { globalEventBus } from \"../../event/eventBus\";\r\n\r\nexport class PawnEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  static difficulty: number = 4;\r\n  static tileX: number = 23 + 28;\r\n  static tileY: number = 8;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 23;\r\n    this.tileY = 12;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.name = \"pawn\";\r\n    // Pawns show only diagonal attack telegraphs\r\n    this.orthogonalAttack = false;\r\n    this.diagonalAttack = true;\r\n    this.jumpHeight = 0.5;\r\n    if (drop) this.drop = drop;\r\n    this.armored = true;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  lookForPlayer = (face: boolean = true) => {\r\n    if (this.seenPlayer) return;\r\n\r\n    const p = this.nearestPlayer();\r\n    if (p === false) return;\r\n\r\n    const [distance, player] = p;\r\n    if (distance > this.alertRange) return;\r\n\r\n    this.targetPlayer = player;\r\n    if (face) this.facePlayer(player);\r\n    this.seenPlayer = true;\r\n\r\n    globalEventBus.emit(\"EnemySeenPlayer\", {\r\n      enemyType: this.constructor.name,\r\n      enemyName: this.name,\r\n    });\r\n\r\n    if (player === this.game.players[this.game.localPlayerID]) {\r\n      this.alertTicks = 1;\r\n    }\r\n\r\n    this.conditionalHitWarnings();\r\n  };\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      this.ticks++;\r\n      if (!this.seenPlayer) {\r\n        let p = this.nearestPlayer();\r\n        if (p !== false) {\r\n          let [distance, player] = p;\r\n          if (distance <= 4) {\r\n            this.targetPlayer = player;\r\n            this.facePlayer(player);\r\n            this.seenPlayer = true;\r\n            if (player === this.game.players[this.game.localPlayerID])\r\n              this.alertTicks = 1;\r\n            this.conditionalHitWarnings();\r\n          }\r\n        }\r\n      } else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n            }\r\n          }\r\n          for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n              if (\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                // don't walk on active spiketraps\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n          // Diagonal-only attack: if player is diagonally adjacent, attack without moving\r\n          const dxToPlayer = this.targetPlayer.x - this.x;\r\n          const dyToPlayer = this.targetPlayer.y - this.y;\r\n\r\n          if (\r\n            Math.abs(dxToPlayer) === 1 &&\r\n            Math.abs(dyToPlayer) === 1 &&\r\n            !this.unconscious\r\n          ) {\r\n            this.targetPlayer.hurt(this.hit(), this.name);\r\n            this.drawX = 0.5 * (this.x - this.targetPlayer.x);\r\n            this.drawY = 0.5 * (this.y - this.targetPlayer.y);\r\n            if (\r\n              this.targetPlayer === this.game.players[this.game.localPlayerID]\r\n            )\r\n              this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n\r\n            this.conditionalHitWarnings();\r\n            return;\r\n          }\r\n\r\n          if (this.justHurt) {\r\n            // do nothing special when just hurt\r\n            this.justHurt = false;\r\n          } else if (!this.unconscious) {\r\n            // Build grid like rookEnemy and use A* with orthogonal-only movement\r\n            let grid = [] as any[];\r\n            for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n              grid[x] = [];\r\n              for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n                if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                  grid[x][y] = this.room.roomArray[x][y];\r\n                else grid[x][y] = false;\r\n              }\r\n            }\r\n\r\n            const moves = astar.AStar.search(\r\n              grid,\r\n              this,\r\n              this.targetPlayer,\r\n              disablePositions,\r\n              false, // diagonals\r\n              false, // diagonalsOnly\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              false, // diagonalsOmni\r\n              this.lastPlayerPos,\r\n            );\r\n\r\n            if (moves.length > 0) {\r\n              const moveX = moves[0].pos.x;\r\n              const moveY = moves[0].pos.y;\r\n\r\n              // Pawns cannot attack forward: if the next step is the player's tile, skip it\r\n              const stepIsPlayer =\r\n                this.targetPlayer.x === moveX && this.targetPlayer.y === moveY;\r\n\r\n              // Avoid stepping onto active spike traps even if A* allowed it\r\n              const targetTile = this.room.roomArray[moveX]?.[moveY];\r\n              const isActiveSpike =\r\n                targetTile instanceof SpikeTrap && (targetTile as SpikeTrap).on;\r\n\r\n              if (!stepIsPlayer && !isActiveSpike) {\r\n                this.tryMove(moveX, moveY);\r\n                this.setDrawXY(oldX, oldY);\r\n              }\r\n            }\r\n\r\n            this.conditionalHitWarnings();\r\n          }\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.conditionalHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  conditionalHitWarnings = () => {\r\n    const distance = Utils.distance(\r\n      this.x,\r\n      this.y,\r\n      this.targetPlayer.x,\r\n      this.targetPlayer.y,\r\n    );\r\n    if (distance >= 2 || !this.targetPlayer)\r\n      this.makeHitWarnings(undefined, undefined, true, \"orthogonal\");\r\n    if (distance < 3 && this.targetPlayer) this.makeHitWarnings();\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    //let offsetTileY = this.health <= 1 || this.cloned === true ? 2 : 0;\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX + Math.floor(this.frame),\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","export enum EnvType {\r\n  DUNGEON = 0,\r\n  CAVE = 1,\r\n  FOREST = 2,\r\n  CASTLE = 3,\r\n  GLACIER = 4,\r\n  DARK_CASTLE = 5,\r\n  PLACEHOLDER = 6,\r\n  DESERT = 7,\r\n  MAGMA_CAVE = 8,\r\n  DARK_DUNGEON = 9,\r\n}\r\n\r\nexport const getEnvTypeName = (envType: EnvType): string => {\r\n  switch (envType) {\r\n    case EnvType.DUNGEON:\r\n      return \"DUNGEON\";\r\n    case EnvType.CAVE:\r\n      return \"CAVE\";\r\n    case EnvType.FOREST:\r\n      return \"FOREST\";\r\n    case EnvType.CASTLE:\r\n      return \"CASTLE\";\r\n    case EnvType.GLACIER:\r\n      return \"GLACIER\";\r\n    case EnvType.DARK_CASTLE:\r\n      return \"DARK_CASTLE\";\r\n    case EnvType.PLACEHOLDER:\r\n      return \"PLACEHOLDER\";\r\n    case EnvType.DESERT:\r\n      return \"DESERT\";\r\n    case EnvType.MAGMA_CAVE:\r\n      return \"MAGMA_CAVE\";\r\n    case EnvType.DARK_DUNGEON:\r\n      return \"DARK_DUNGEON\";\r\n  }\r\n};\r\n","import { EntityDirection } from \"../entity/entity\";\r\nimport { Direction } from \"../game\";\r\nimport { DownLadder } from \"../tile/downLadder\";\r\nimport { SpikeTrap } from \"../tile/spiketrap\";\r\nimport { Wall } from \"../tile/wall\";\r\nimport { Random } from \"./random\";\r\n\r\nexport namespace astar {\r\n  //================== start graph js\r\n  /* \r\n  graph.js http://github.com/bgrins/javascript-astar\r\n  MIT License\r\n  Creates a Graph class used in the astar search algorithm.\r\n  Includes Binary Heap (with modifications) from Marijn Haverbeke \r\n      URL: http://eloquentjavascript.net/appendix2.html\r\n      License: http://creativecommons.org/licenses/by/3.0/\r\n  */\r\n\r\n  export interface Position {\r\n    x: number;\r\n    y: number;\r\n  }\r\n\r\n  export enum GraphNodeType {\r\n    WALL,\r\n    OPEN,\r\n  }\r\n\r\n  let getTileCost = (tile) => {\r\n    if (tile)\r\n      return tile.isSolid() || tile.isDoor || tile instanceof DownLadder\r\n        ? 99999999\r\n        : 300;\r\n    else return 99999999;\r\n  };\r\n\r\n  export class Graph {\r\n    nodes: GraphNode[][];\r\n    elements: number[][];\r\n\r\n    constructor(grid: number[][]) {\r\n      this.elements = grid;\r\n      var nodes: GraphNode[][] = [];\r\n      var row: number[],\r\n        rowLength: number,\r\n        len = grid.length;\r\n      for (var x = 0; x < len; ++x) {\r\n        row = grid[x];\r\n        rowLength = row.length;\r\n        nodes[x] = new Array(rowLength); // optimum array with size\r\n        for (var y = 0; y < rowLength; ++y) {\r\n          nodes[x][y] = new GraphNode(x, y, row[y]);\r\n        }\r\n      }\r\n      this.nodes = nodes;\r\n    }\r\n\r\n    toString(): string {\r\n      var graphString = \"\\n\";\r\n      var nodes = this.nodes;\r\n      var rowDebug: string, row: GraphNode[], y: number, l: number;\r\n      for (var x = 0, len = nodes.length; x < len; ) {\r\n        rowDebug = \"\";\r\n        row = nodes[x++];\r\n        for (y = 0, l = row.length; y < l; ) {\r\n          rowDebug += row[y++].type + \" \";\r\n        }\r\n        graphString = graphString + rowDebug + \"\\n\";\r\n      }\r\n      return graphString;\r\n    }\r\n  }\r\n\r\n  export class GraphNode {\r\n    x: number;\r\n    y: number;\r\n    type: GraphNodeType;\r\n    data: any;\r\n    pos: Position;\r\n\r\n    constructor(x: number, y: number, type: GraphNodeType) {\r\n      this.data = {};\r\n      this.x = x;\r\n      this.y = y;\r\n      this.pos = { x: x, y: y };\r\n      this.type = type;\r\n    }\r\n\r\n    toString(): string {\r\n      return \"[\" + this.x + \" \" + this.y + \"]\";\r\n    }\r\n\r\n    isWall() {\r\n      return this.type == GraphNodeType.WALL;\r\n    }\r\n  }\r\n\r\n  export class BinaryHeap {\r\n    content: any[];\r\n    scoreFunction: (node: any) => number;\r\n\r\n    constructor(scoreFunction: (node: any) => number) {\r\n      this.content = [];\r\n      this.scoreFunction = scoreFunction;\r\n    }\r\n\r\n    push(node: any) {\r\n      // Add the new node to the end of the array.\r\n      this.content.push(node);\r\n      // Allow it to sink down.\r\n      this.sinkDown(this.content.length - 1);\r\n    }\r\n\r\n    pop() {\r\n      // Store the first node so we can return it later.\r\n      var result = this.content[0];\r\n      // Get the node at the end of the array.\r\n      var end = this.content.pop();\r\n      // If there are any elements left, put the end node at the\r\n      // start, and let it bubble up.\r\n      if (this.content.length > 0) {\r\n        this.content[0] = end;\r\n        this.bubbleUp(0);\r\n      }\r\n      return result;\r\n    }\r\n\r\n    remove(node: any) {\r\n      var i = this.content.indexOf(node);\r\n\r\n      // When it is found, the process seen in 'pop' is repeated\r\n      // to fill up the hole.\r\n      var end = this.content.pop();\r\n      if (i !== this.content.length - 1) {\r\n        this.content[i] = end;\r\n        if (this.scoreFunction(end) < this.scoreFunction(node))\r\n          this.sinkDown(i);\r\n        else this.bubbleUp(i);\r\n      }\r\n    }\r\n\r\n    size() {\r\n      return this.content.length;\r\n    }\r\n\r\n    rescoreElement(node: any) {\r\n      this.sinkDown(this.content.indexOf(node));\r\n    }\r\n\r\n    sinkDown(n: number) {\r\n      // Fetch the element that has to be sunk.\r\n      var element = this.content[n];\r\n      // When at 0, an element can not sink any further.\r\n      while (n > 0) {\r\n        // Compute the parent element's index, and fetch it.\r\n        var parentN = ((n + 1) >> 1) - 1,\r\n          parent = this.content[parentN];\r\n        // Swap the elements if the parent is greater.\r\n        if (this.scoreFunction(element) < this.scoreFunction(parent)) {\r\n          this.content[parentN] = element;\r\n          this.content[n] = parent;\r\n          // Update 'n' to continue at the new position.\r\n          n = parentN;\r\n        } else {\r\n          // Found a parent that is less, no need to sink any further.\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    bubbleUp(n: number) {\r\n      // Look up the target element and its score.\r\n      var length = this.content.length,\r\n        element = this.content[n],\r\n        elemScore = this.scoreFunction(element);\r\n\r\n      while (true) {\r\n        // Compute the indices of the child elements.\r\n        var child2N = (n + 1) << 1,\r\n          child1N = child2N - 1;\r\n        // This is used to store the new position of the element,\r\n        // if any.\r\n        var swap = null;\r\n        // If the first child exists (is inside the array)...\r\n        if (child1N < length) {\r\n          // Look it up and compute its score.\r\n          var child1 = this.content[child1N],\r\n            child1Score = this.scoreFunction(child1);\r\n          // If the score is less than our element's, we need to swap.\r\n          if (child1Score < elemScore) swap = child1N;\r\n        }\r\n        // Do the same checks for the other child.\r\n        if (child2N < length) {\r\n          var child2 = this.content[child2N],\r\n            child2Score = this.scoreFunction(child2);\r\n          if (child2Score < (swap === null ? elemScore : child1Score))\r\n            swap = child2N;\r\n        }\r\n\r\n        // If the element needs to be moved, swap it, and continue.\r\n        if (swap !== null) {\r\n          this.content[n] = this.content[swap];\r\n          this.content[swap] = element;\r\n          n = swap;\r\n        } else {\r\n          // Otherwise, we are done.\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  //end graph.js ==================\r\n\r\n  // javascript-astar\r\n  // http://github.com/bgrins/javascript-astar\r\n  // Freely distributable under the MIT License.\r\n  // Implements the astar search algorithm in javascript using a binary heap.\r\n  export interface AStarData {\r\n    f: number;\r\n    g: number;\r\n    h: number;\r\n    cost: number;\r\n    visited: boolean;\r\n    closed: boolean;\r\n    parent: AStarData;\r\n    pos: Position;\r\n    org: any;\r\n  }\r\n\r\n  export class AStar {\r\n    static NO_CHECK_START_POINT: boolean = false;\r\n    grid: AStarData[][];\r\n    constructor(\r\n      grid: any[][],\r\n      disablePoints?: Position[],\r\n      lastPlayerPosition?: Position,\r\n      enableCost?: boolean,\r\n    ) {\r\n      this.grid = [];\r\n      for (var x = 0, xl = grid.length; x < xl; x++) {\r\n        this.grid[x] = [];\r\n        for (var y = 0, yl = grid[x].length; y < yl; y++) {\r\n          var cost = getTileCost(grid[x][y]);\r\n          this.grid[x][y] = {\r\n            org: grid[x][y],\r\n            f: 0,\r\n            g: 0,\r\n            h: 0,\r\n            cost: cost,\r\n            visited: false,\r\n            closed: false,\r\n            pos: {\r\n              x: x,\r\n              y: y,\r\n            },\r\n            parent: null,\r\n          };\r\n        }\r\n      }\r\n      if (disablePoints !== undefined) {\r\n        for (var i = 0; i < disablePoints.length; i++) {\r\n          if (\r\n            disablePoints[i].x >= 0 &&\r\n            disablePoints[i].x < this.grid.length &&\r\n            disablePoints[i].y >= 0 &&\r\n            disablePoints[i].y < this.grid[0].length\r\n          )\r\n            this.grid[disablePoints[i].x][disablePoints[i].y].cost = 99999999;\r\n        }\r\n      }\r\n      if (lastPlayerPosition) {\r\n        if (\r\n          lastPlayerPosition.x >= 0 &&\r\n          lastPlayerPosition.x < this.grid.length &&\r\n          lastPlayerPosition.y >= 0 &&\r\n          lastPlayerPosition.y < this.grid[0].length\r\n        )\r\n          this.grid[lastPlayerPosition.x][lastPlayerPosition.y].cost = 0.5;\r\n      }\r\n    }\r\n\r\n    heap(): BinaryHeap {\r\n      return new BinaryHeap(function (node: AStarData) {\r\n        return node.f;\r\n      });\r\n    }\r\n\r\n    _find(org: any) {\r\n      for (var x = 0; x < this.grid.length; x++)\r\n        for (var y = 0; y < this.grid[x].length; y++)\r\n          if (this.grid[x][y].org == org) return this.grid[x][y];\r\n    }\r\n\r\n    _search(\r\n      start: any,\r\n      end: any,\r\n      diagonal?: boolean,\r\n      diagonalsOnly?: boolean,\r\n      turnCostsExtra?: boolean,\r\n      turnDirection?: Direction,\r\n      heuristic?: Function,\r\n      diagonalsOmni?: boolean,\r\n      lastPlayerPosition?: Position,\r\n    ) {\r\n      heuristic = heuristic || this.manhattan;\r\n      diagonal = !!diagonal;\r\n      diagonalsOnly = !!diagonalsOnly;\r\n      turnCostsExtra = !!turnCostsExtra;\r\n      diagonalsOmni = !!diagonalsOmni;\r\n\r\n      var openHeap = this.heap();\r\n\r\n      var _start: AStarData, _end: AStarData;\r\n      if (start.x !== undefined && start.y !== undefined)\r\n        _start = this.grid[start.x][start.y];\r\n      else _start = this._find(start);\r\n\r\n      if (end.x !== undefined && end.y !== undefined)\r\n        _end = this.grid[end.x][end.y];\r\n      else _end = this._find(end);\r\n\r\n      if (AStar.NO_CHECK_START_POINT == false && _start.cost <= 0) return [];\r\n\r\n      openHeap.push(_start);\r\n\r\n      while (openHeap.size() > 0) {\r\n        // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\r\n        var currentNode: AStarData = openHeap.pop();\r\n\r\n        // End case -- result has been found, return the traced path.\r\n        if (currentNode === _end) {\r\n          var curr = currentNode;\r\n          var ret = [];\r\n          while (curr.parent) {\r\n            ret.push(curr);\r\n            curr = curr.parent;\r\n          }\r\n          return ret.reverse();\r\n        }\r\n\r\n        // Normal case -- move currentNode from open to closed, process each of its neighbors.\r\n        currentNode.closed = true;\r\n\r\n        // Find all neighbors for the current node. Optionally find diagonal neighbors as well (false by default).\r\n        var neighbors = this.neighbors(\r\n          currentNode,\r\n          diagonal,\r\n          diagonalsOnly,\r\n          diagonalsOmni,\r\n        );\r\n\r\n        for (var i = 0, il = neighbors.length; i < il; i++) {\r\n          var neighbor = neighbors[i];\r\n\r\n          if (neighbor.closed || neighbor.cost <= 0) {\r\n            // Not a valid node to process, skip to next neighbor.\r\n            continue;\r\n          }\r\n\r\n          // The g score is the shortest distance from start to current node.\r\n          // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\r\n\r\n          var gScore = currentNode.g + neighbor.cost;\r\n          if (turnCostsExtra) {\r\n            var isTurn = false;\r\n            if (currentNode.parent)\r\n              isTurn = !(\r\n                (currentNode.parent.pos.x === currentNode.pos.x &&\r\n                  currentNode.pos.x === neighbor.pos.x) ||\r\n                (currentNode.parent.pos.y === currentNode.pos.y &&\r\n                  currentNode.pos.y === neighbor.pos.y)\r\n              );\r\n            else {\r\n              // initial step\r\n              isTurn = true;\r\n              if (\r\n                neighbor.pos.x - currentNode.pos.x === 0 &&\r\n                neighbor.pos.y - currentNode.pos.y === -1 &&\r\n                turnDirection === Direction.UP\r\n              )\r\n                isTurn = false;\r\n              if (\r\n                neighbor.pos.x - currentNode.pos.x === 0 &&\r\n                neighbor.pos.y - currentNode.pos.y === 1 &&\r\n                turnDirection === Direction.DOWN\r\n              )\r\n                isTurn = false;\r\n              if (\r\n                neighbor.pos.x - currentNode.pos.x === 1 &&\r\n                neighbor.pos.y - currentNode.pos.y === 0 &&\r\n                turnDirection === Direction.RIGHT\r\n              )\r\n                isTurn = false;\r\n              if (\r\n                neighbor.pos.x - currentNode.pos.x === -1 &&\r\n                neighbor.pos.y - currentNode.pos.y === 0 &&\r\n                turnDirection === Direction.LEFT\r\n              )\r\n                isTurn = false;\r\n            }\r\n            if (isTurn) gScore++;\r\n          }\r\n          var beenVisited = neighbor.visited;\r\n\r\n          if (!beenVisited || gScore < neighbor.g) {\r\n            // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\r\n            neighbor.visited = true;\r\n            neighbor.parent = currentNode;\r\n            neighbor.h =\r\n              neighbor.h ||\r\n              heuristic(neighbor.pos, _end.pos, lastPlayerPosition);\r\n            neighbor.g = gScore;\r\n            neighbor.f = neighbor.g + neighbor.h;\r\n\r\n            if (!beenVisited) {\r\n              // Pushing to heap will put it in proper place based on the 'f' value.\r\n              openHeap.push(neighbor);\r\n            } else {\r\n              // Already seen the node, but since it has been rescored we need to reorder it in the heap\r\n              openHeap.rescoreElement(neighbor);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // No result was found - empty array signifies failure to find path.\r\n      return [];\r\n    }\r\n\r\n    static search(\r\n      grid: any[][],\r\n      start: any,\r\n      end: any,\r\n      disablePoints?: Position[],\r\n      diagonal?: boolean,\r\n      diagonalsOnly?: boolean,\r\n      turnCostsExtra?: boolean,\r\n      turnDirection?: Direction,\r\n      heuristic?: Function,\r\n      diagonalsOmni?: boolean,\r\n      lastPlayerPosition?: Position,\r\n    ) {\r\n      var astar = new AStar(grid, disablePoints, lastPlayerPosition);\r\n      return astar._search(\r\n        start,\r\n        end,\r\n        diagonal,\r\n        diagonalsOnly,\r\n        turnCostsExtra,\r\n        turnDirection,\r\n        heuristic,\r\n        diagonalsOmni,\r\n      );\r\n    }\r\n\r\n    manhattan(pos0: Position, pos1: Position): number {\r\n      var d1 = Math.abs(pos1.x - pos0.x);\r\n      var d2 = Math.abs(pos1.y - pos0.y);\r\n      var heuristic = d1 + d2;\r\n\r\n      return heuristic;\r\n    }\r\n\r\n    neighbors(\r\n      node: AStarData,\r\n      diagonals?: boolean,\r\n      diagonalsOnly?: boolean,\r\n      diagonalsOmni?: boolean,\r\n    ): AStarData[] {\r\n      var grid = this.grid;\r\n      var ret = [];\r\n      var x = node.pos.x;\r\n      var y = node.pos.y;\r\n\r\n      if (!diagonalsOnly) {\r\n        // West\r\n        if (grid[x - 1] && grid[x - 1][y]) {\r\n          ret.push(grid[x - 1][y]);\r\n        }\r\n\r\n        // East\r\n        if (grid[x + 1] && grid[x + 1][y]) {\r\n          ret.push(grid[x + 1][y]);\r\n        }\r\n\r\n        // South\r\n        if (grid[x] && grid[x][y - 1]) {\r\n          ret.push(grid[x][y - 1]);\r\n        }\r\n\r\n        // North\r\n        if (grid[x] && grid[x][y + 1]) {\r\n          ret.push(grid[x][y + 1]);\r\n        }\r\n      }\r\n\r\n      if (diagonals) {\r\n        // Southwest\r\n        if (grid[x - 1] && grid[x - 1][y - 1]) {\r\n          ret.push(grid[x - 1][y - 1]);\r\n        }\r\n\r\n        // Southeast\r\n        if (grid[x + 1] && grid[x + 1][y - 1]) {\r\n          ret.push(grid[x + 1][y - 1]);\r\n        }\r\n\r\n        // Northwest\r\n        if (grid[x - 1] && grid[x - 1][y + 1]) {\r\n          ret.push(grid[x - 1][y + 1]);\r\n        }\r\n\r\n        // Northeast\r\n        if (grid[x + 1] && grid[x + 1][y + 1]) {\r\n          ret.push(grid[x + 1][y + 1]);\r\n        }\r\n      }\r\n      function getRandomBoolean(): boolean {\r\n        return Random.rand() < 0.5;\r\n      }\r\n      if (diagonalsOmni) {\r\n        const randomBool: boolean = getRandomBoolean();\r\n        // West\r\n        if (grid[x - 1] && grid[x - 1][y]) {\r\n          // Instead of pushing West, choose between Southwest and Northwest\r\n          if (randomBool == true) {\r\n            ret.push(grid[x - 1][y - 1]);\r\n            return;\r\n          } else {\r\n            ret.push(grid[x - 1][y + 1]);\r\n            return;\r\n          }\r\n        }\r\n        // East\r\n        if (grid[x + 1] && grid[x + 1][y]) {\r\n          if (randomBool == true) {\r\n            ret.push(grid[x + 1][y - 1]);\r\n            return;\r\n          } else {\r\n            ret.push(grid[x + 1][y + 1]);\r\n            return;\r\n          }\r\n        }\r\n        // South\r\n        if (grid[x] && grid[x][y - 1]) {\r\n          if (randomBool == true) {\r\n            ret.push(grid[x - 1][y - 1]);\r\n            return;\r\n          } else {\r\n            ret.push(grid[x + 1][y - 1]);\r\n            return;\r\n          }\r\n        }\r\n        // North\r\n        if (grid[x] && grid[x][y + 1]) {\r\n          if (randomBool == true) {\r\n            ret.push(grid[x - 1][y + 1]);\r\n            return;\r\n          } else {\r\n            ret.push(grid[x + 1][y + 1]);\r\n            return;\r\n          }\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n\r\n      return ret;\r\n    }\r\n  }\r\n}\r\n","import { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Entity } from \"../entity\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Key } from \"../../item/key\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Coal } from \"../../item/resource/coal\";\r\nimport { GreenGem } from \"../../item/resource/greengem\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Shotgun } from \"../../item/weapon/shotgun\";\r\nimport { Dagger } from \"../../item/weapon/dagger\";\r\nimport { Armor } from \"../../item/armor\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { Spear } from \"../../item/weapon/spear\";\r\nimport { BlueGem } from \"../../item/resource/bluegem\";\r\nimport { DualDagger } from \"../../item/weapon/dualdagger\";\r\nimport { Lantern } from \"../../item/light/lantern\";\r\nimport { RedGem } from \"../../item/resource/redgem\";\r\nimport { EntityType } from \"../entity\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Warhammer } from \"../../item/weapon/warhammer\";\r\nimport { Torch } from \"../../item/light/torch\";\r\nimport { Spellbook } from \"../../item/weapon/spellbook\";\r\nimport { Candle } from \"../../item/light/candle\";\r\nimport { Pickaxe } from \"../../item/tool/pickaxe\";\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { FishingRod } from \"../../item/tool/fishingRod\";\r\nimport { Hammer } from \"../../item/tool/hammer\";\r\n\r\nlet OPEN_TIME = 150;\r\nlet FILL_COLOR = \"#5a595b\";\r\nlet OUTLINE_COLOR = \"#292c36\";\r\nlet FULL_OUTLINE = \"white\";\r\n\r\nexport class VendingMachine extends Entity {\r\n  playerOpened: Player;\r\n  open = false;\r\n  openTime = 0;\r\n  costItems: Array<Item>;\r\n  item: Item;\r\n  isInf = false;\r\n  quantity = 1;\r\n  buyAnimAmount = 0;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, item: Item) {\r\n    super(room, game, x, y);\r\n\r\n    this.destroyable = false;\r\n    this.pushable = false;\r\n    this.chainPushable = false;\r\n    this.interactable = true;\r\n\r\n    this.costItems = [];\r\n    this.item = item;\r\n    this.name = \"vending machine\";\r\n\r\n    if (this.item instanceof Shotgun) {\r\n      this.setCost(3);\r\n    } else if (this.item instanceof Heart) {\r\n      this.setCost(1, [new Coin(room, 0, 0)], [9, 10, 11], 2); // Uses default random cost\r\n    } else if (this.item instanceof Spear) {\r\n      this.setCost(2); // Uses default random cost\r\n    } else if (this.item instanceof Armor) {\r\n      this.setCost(3); // Uses default random cost\r\n    } else if (this.item instanceof DualDagger) {\r\n      this.setCost(3); // Uses default random cost\r\n    } else if (this.item instanceof Lantern) {\r\n      this.setCost(2); // Uses default random cost\r\n    } else if (this.item instanceof Warhammer) {\r\n      this.setCost(2); // Uses default random cost\r\n    } else if (this.item instanceof Spellbook) {\r\n      this.setCost(3); // Uses default random cost\r\n    } else if (this.item instanceof Torch) {\r\n      this.setCost(2); // Uses default random cost\r\n    } else if (this.item instanceof Candle) {\r\n      this.setCost(1, [new Coin(room, 0, 0)], [9, 10, 11], 2);\r\n    } else if (this.item instanceof Pickaxe) {\r\n      this.setCost(1, [new Coin(room, 0, 0)], [Utils.randomNormalInt(15, 25)]);\r\n    } else if (this.item instanceof FishingRod) {\r\n      this.setCost(1, [new Coin(room, 0, 0)], [Utils.randomNormalInt(25, 40)]);\r\n    } else if (this.item instanceof Hammer) {\r\n      this.setCost(1, [new Coin(room, 0, 0)], [Utils.randomNormalInt(15, 25)]);\r\n    }\r\n  }\r\n\r\n  setCost = (\r\n    value: number = 1,\r\n    costItems?: Item[],\r\n    counts?: number[],\r\n    quantity: number = 1,\r\n  ) => {\r\n    //value is arbitrary multiplies the stackcount to adapt to the item\r\n    if (!costItems || !counts) {\r\n      // Default behavior: randomly choose between gems and coins\r\n      const possibleItems = [\r\n        new BlueGem(this.room, 0, 0),\r\n        new GreenGem(this.room, 0, 0),\r\n        new RedGem(this.room, 0, 0),\r\n        new Coin(this.room, 0, 0),\r\n      ];\r\n      const costItem = Game.randTable(possibleItems, Random.rand);\r\n\r\n      if (costItem instanceof Coin) {\r\n        costItem.stackCount = Game.randTable([20, 25, 30], Random.rand);\r\n      } else {\r\n        costItem.stackCount = Game.randTable([1, 2, 3], Random.rand);\r\n      }\r\n      costItem.stackCount *= value;\r\n\r\n      this.costItems = [costItem];\r\n    } else {\r\n      // Original behavior for custom costs\r\n      const randCount = Game.randTable(counts, Random.rand);\r\n      const costItem = Game.randTable(costItems, Random.rand);\r\n      costItem.stackCount = randCount;\r\n      //if (costItem instanceof Coin) {\r\n      //costItem.stackCount *= Game.randTable([9, 10, 11], Random.rand);\r\n      //}\r\n      this.costItems = [costItem];\r\n    }\r\n\r\n    this.quantity = quantity;\r\n  };\r\n\r\n  hoverText = (): string => {\r\n    if (!this.open) return \"Vending Machine\";\r\n    if (this.quantity > 0) return `Buy ${this.item.name}`;\r\n    return `Out of stock`;\r\n  };\r\n\r\n  static isPointInVendingMachineBounds = (\r\n    x: number,\r\n    y: number,\r\n    shop: VendingMachine,\r\n  ): boolean => {\r\n    // First check if this is the currently open vending machine\r\n    if (!shop.open || shop !== shop.playerOpened?.openVendingMachine)\r\n      return false;\r\n\r\n    // Get screen center coordinates\r\n    const screenCenterX = GameConstants.WIDTH / 2;\r\n    const screenCenterY = GameConstants.HEIGHT / 2;\r\n\r\n    // Calculate the offset between player and shop in tile coordinates\r\n    const offsetX = (shop.x - shop.playerOpened.x) * GameConstants.TILESIZE;\r\n    const offsetY = (shop.y - shop.playerOpened.y) * GameConstants.TILESIZE;\r\n\r\n    // Calculate shop's position on screen relative to the centered player\r\n    const shopScreenX = screenCenterX + offsetX;\r\n    const shopScreenY = screenCenterY + offsetY;\r\n\r\n    // Use the same calculations as in drawTopLayer to determine bounds\r\n    let s = 18; // size of box\r\n    let b = 2; // border\r\n    let g = -2; // gap\r\n    let width = (shop.costItems.length + 2) * (s + 2 * b + g) - g;\r\n    let height = s + 2 * b + g - g;\r\n\r\n    // Calculate the center of the vending machine interface\r\n    // Note: The -1.5 adjustment for Y matches what's in drawTopLayer\r\n    let cx = shopScreenX;\r\n    let cy = shopScreenY - 2 * GameConstants.TILESIZE;\r\n\r\n    const leftBound = Math.round(cx - 0.5 * width);\r\n    const rightBound = leftBound + Math.round(width);\r\n    const topBound = Math.round(cy - 0.5 * height);\r\n    const bottomBound = topBound + Math.round(height);\r\n\r\n    // Check if the point is within the bounds of the vending machine UI\r\n    return (\r\n      x >= leftBound && x <= rightBound && y >= topBound && y <= bottomBound\r\n    );\r\n  };\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  interact = (player: Player) => {\r\n    if (this.isInf || this.quantity > 0) {\r\n      if (this.open) this.playerOpened.openVendingMachine = null;\r\n      this.open = true;\r\n      this.playerOpened = player;\r\n      this.openTime = Date.now();\r\n      if (\r\n        this.playerOpened.openVendingMachine &&\r\n        this.playerOpened.openVendingMachine !== this\r\n      )\r\n        this.playerOpened.openVendingMachine.close();\r\n      this.playerOpened.openVendingMachine = this;\r\n    }\r\n  };\r\n\r\n  close = () => {\r\n    this.open = false;\r\n    this.playerOpened.openVendingMachine = null;\r\n  };\r\n\r\n  space = () => {\r\n    if (this.open) {\r\n      // Check if player can pay\r\n      for (const i of this.costItems) {\r\n        if (!this.playerOpened.inventory.hasItemCount(i)) {\r\n          let numOfItem = 0;\r\n\r\n          if (i instanceof Coin) {\r\n            numOfItem = this.playerOpened.inventory.coinCount();\r\n          } else {\r\n            this.playerOpened.inventory.items.forEach((item) => {\r\n              if (item instanceof i.constructor) {\r\n                numOfItem += item.stackCount;\r\n              }\r\n            });\r\n          }\r\n\r\n          const difference = this.costItems[0].stackCount - numOfItem;\r\n\r\n          const pluralLetter = this.costItems[0].stackCount > 1 ? \"s\" : \"\";\r\n\r\n          this.game.pushMessage(\r\n            `You need ${difference} more ${(this.costItems[0].constructor as any).itemName}${pluralLetter} to buy that. `,\r\n          );\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Create the new item instance\r\n      let newItem = new (this.item.constructor as any)(\r\n        this.room,\r\n        this.x,\r\n        this.y,\r\n      );\r\n      //     newItem = newItem.constructor(this.room, this.x, this.y);\r\n\r\n      // **Attempt to add the item directly to the player's inventory**\r\n      const addedSuccessfully = this.playerOpened.inventory.addItem(newItem);\r\n\r\n      if (!addedSuccessfully) {\r\n        // If adding the item failed, refund the cost items\r\n        //for (const i of this.costItems) {\r\n        //this.playerOpened.inventory.addItem(i);\r\n        //}\r\n        this.game.pushMessage(\r\n          \"Your inventory is full. Cannot purchase the item.\",\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Subtract the cost items from player's inventory\r\n      for (const i of this.costItems) {\r\n        this.playerOpened.inventory.subtractItemCount(i);\r\n      }\r\n\r\n      const cost = this.costItems[0].stackCount;\r\n      const pluralLetter = cost > 1 ? \"s\" : \"\";\r\n\r\n      // Decrement the quantity of items available in the vending machine, if not infinite\r\n      if (!this.isInf) {\r\n        this.quantity--;\r\n        if (this.quantity <= 0) this.close();\r\n      }\r\n\r\n      // Notify the player of the successful purchase\r\n      this.game.pushMessage(\r\n        `Purchased ${(newItem.constructor as any).itemName} for ${cost} ${(this.costItems[0].constructor as any).itemName}${pluralLetter}`,\r\n      );\r\n      this.game.pushMessage(`${this.quantity} available to buy.`);\r\n\r\n      // Handle visual feedback and screen shake\r\n      this.buyAnimAmount = 0.99;\r\n      if (this.playerOpened === this.game.players[this.game.localPlayerID])\r\n        this.game.shakeScreen(0, 4);\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    let tileX = 19;\r\n    if (!this.isInf && this.quantity === 0) tileX = 20;\r\n    if (this.hasShadow) this.drawShadow(delta);\r\n\r\n    Game.drawObj(\r\n      tileX,\r\n      0,\r\n      1,\r\n      2,\r\n      this.x,\r\n      this.y - 1,\r\n      1,\r\n      2,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    if (this.open && this.playerOpened.inventory.isOpen) {\r\n      this.close();\r\n      return;\r\n    }\r\n    this.drawableY = this.y;\r\n\r\n    if (\r\n      this.open &&\r\n      this.playerOpened === this.game.players[this.game.localPlayerID]\r\n    ) {\r\n      let s = Math.min(18, (18 * (Date.now() - this.openTime)) / OPEN_TIME); // size of box\r\n      let b = 2; // border\r\n      let g = -2; // gap\r\n      let hg = 3; // highlighted growth\r\n      let ob = 1; // outer border\r\n      let width = (this.costItems.length + 2) * (s + 2 * b + g) - g;\r\n      let height = s + 2 * b + g - g;\r\n\r\n      let cx = (this.x + 0.5) * GameConstants.TILESIZE;\r\n      let cy = (this.y - 1.5) * GameConstants.TILESIZE;\r\n\r\n      Game.ctx.fillStyle = FULL_OUTLINE;\r\n      Game.ctx.fillRect(\r\n        Math.round(cx - 0.5 * width) - ob,\r\n        Math.round(cy - 0.5 * height) - ob,\r\n        Math.round(width + 2 * ob),\r\n        Math.round(height + 2 * ob),\r\n      );\r\n      for (let x = 0; x < this.costItems.length + 2; x++) {\r\n        Game.ctx.fillStyle = OUTLINE_COLOR;\r\n        Game.ctx.fillRect(\r\n          Math.round(cx - 0.5 * width + x * (s + 2 * b + g)),\r\n          Math.round(cy - 0.5 * height),\r\n          Math.round(s + 2 * b),\r\n          Math.round(s + 2 * b),\r\n        );\r\n        if (x !== this.costItems.length) {\r\n          Game.ctx.fillStyle = FILL_COLOR;\r\n          Game.ctx.fillRect(\r\n            Math.round(cx - 0.5 * width + x * (s + 2 * b + g) + b),\r\n            Math.round(cy - 0.5 * height + b),\r\n            Math.round(s),\r\n            Math.round(s),\r\n          );\r\n        }\r\n      }\r\n\r\n      if (Date.now() - this.openTime >= OPEN_TIME) {\r\n        for (let i = 0; i < this.costItems.length + 2; i++) {\r\n          let drawX = Math.round(\r\n            cx -\r\n              0.5 * width +\r\n              i * (s + 2 * b + g) +\r\n              b +\r\n              Math.floor(0.5 * s) -\r\n              0.5 * GameConstants.TILESIZE,\r\n          );\r\n          let drawY = Math.round(\r\n            cy -\r\n              0.5 * height +\r\n              b +\r\n              Math.floor(0.5 * s) -\r\n              0.5 * GameConstants.TILESIZE,\r\n          );\r\n\r\n          let drawXScaled = drawX / GameConstants.TILESIZE;\r\n          let drawYScaled = drawY / GameConstants.TILESIZE;\r\n\r\n          if (i < this.costItems.length) {\r\n            let a = 1;\r\n            if (!this.playerOpened.inventory.hasItemCount(this.costItems[i]))\r\n              a = 0.15;\r\n            this.costItems[i].drawIcon(delta, drawXScaled, drawYScaled, a);\r\n          } else if (i === this.costItems.length) {\r\n            Game.drawFX(2, 0, 1, 1, drawXScaled, drawYScaled, 1, 1);\r\n          } else if (i === this.costItems.length + 1) {\r\n            this.item.drawIcon(\r\n              delta,\r\n              drawXScaled,\r\n              drawYScaled,\r\n              1,\r\n              this.quantity,\r\n            );\r\n          }\r\n        }\r\n      }\r\n      this.buyAnimAmount *= this.buyAnimAmount;\r\n      if (GameConstants.ALPHA_ENABLED)\r\n        Game.ctx.globalAlpha = this.buyAnimAmount;\r\n      Game.ctx.fillStyle = FULL_OUTLINE;\r\n      Game.ctx.fillRect(\r\n        Math.round(cx - 0.5 * width) - ob,\r\n        Math.round(cy - 0.5 * height) - ob,\r\n        Math.round(width + 2 * ob),\r\n        Math.round(height + 2 * ob),\r\n      );\r\n      Game.ctx.globalAlpha = 1.0;\r\n    }\r\n  };\r\n}\r\n","import { LightSource } from \"./lightSource\";\r\nimport { Room } from \"../room/room\";\r\n\r\nexport class Lighting {\r\n  static momentaryLight = (\r\n    room: Room,\r\n    x: number,\r\n    y: number,\r\n    radius: number,\r\n    color: [number, number, number],\r\n    duration: number,\r\n    brightness: number,\r\n    delay: number,\r\n  ) => {\r\n    const lightSource = Lighting.newLightSource(\r\n      x,\r\n      y,\r\n      color,\r\n      radius,\r\n      brightness,\r\n    );\r\n    setTimeout(() => {\r\n      room.updateLightSources(lightSource);\r\n\r\n      setTimeout(() => {\r\n        room.updateLightSources(lightSource, true);\r\n      }, duration);\r\n    }, delay);\r\n  };\r\n\r\n  static newLightSource = (\r\n    x: number,\r\n    y: number,\r\n    color: [number, number, number],\r\n    radius: number,\r\n    brightness: number,\r\n  ) => {\r\n    return new LightSource(x, y, radius, color, brightness);\r\n  };\r\n\r\n  static addLightSource = (room: Room, lightSource: LightSource) => {\r\n    room.lightSources.push(lightSource);\r\n  };\r\n\r\n  static removeLightSource = (room: Room, lightSource: LightSource) => {\r\n    room.lightSources = room.lightSources.filter((ls) => ls !== lightSource);\r\n  };\r\n}\r\n","import { Player } from \"../player/player\";\r\nimport { Game } from \"../game\";\r\nimport { Tile } from \"./tile\";\r\n\r\nexport class Spike extends Tile {\r\n  onCollide = (player: Player) => {\r\n    player.hurt(1, \"spike\");\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    Game.drawTile(\r\n      11,\r\n      0,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Usable } from \"../usable/usable\";\r\nimport { Lantern } from \"../light/lantern\";\r\nimport { Light } from \"../light/light\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class Coal extends Usable {\r\n  static itemName = \"coal\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 17;\r\n    this.tileY = 0;\r\n    this.stackable = true;\r\n    this.stackCount = Math.ceil(Random.rand() * 7 + 3);\r\n    this.name = Coal.itemName;\r\n    this.description = \"A piece of coal. Fuels lantern.\";\r\n    this.canUseOnOther = true;\r\n  }\r\n  onUse = (player: Player) => {\r\n    let l = player.inventory.hasItem(Lantern);\r\n    if (l instanceof Lantern) {\r\n      if (l.fuel <= l.fuelCap - 50) {\r\n        player.game.pushMessage(\"You add some fuel to your lantern.\");\r\n        this.stackCount -= 1;\r\n        if (this.stackCount <= 0) {\r\n          player.inventory.removeItem(this);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (other instanceof Light) {\r\n      if (other.canRefuel && other.fuel <= 0 && other.broken) {\r\n        let amountToRefuel = Math.min(this.stackCount * 25, other.fuelCap);\r\n        other.fuel += amountToRefuel;\r\n        this.stackCount -= amountToRefuel / 25;\r\n        other.broken = false;\r\n        this.level.game.pushMessage(\r\n          `You add refuel your ${other.name} with ${amountToRefuel / 25} coal.`,\r\n        );\r\n\r\n        if (this.stackCount <= 0) player.inventory.removeItem(this);\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { Item } from \"./item\";\r\nimport { Room } from \"../room/room\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Random } from \"../utility/random\";\r\n\r\nexport class Coin extends Item {\r\n  static itemName = \"coin\";\r\n  //checked: boolean;\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 19;\r\n    this.tileY = 0;\r\n    this.stackCount = 1;\r\n    this.stackable = true;\r\n    this.name = Coin.itemName;\r\n    //if (GameConstants.COIN_ANIMATION) this.animateToInventory = true;\r\n  }\r\n  onDrop = () => {\r\n    const coinList = []; //array to store coin objects\r\n    for (const item of this.level.items) {\r\n      if (item instanceof Coin) coinList.push(item);\r\n    }\r\n    for (const otherCoin of coinList) {\r\n      if (\r\n        this !== otherCoin &&\r\n        this.x === otherCoin.x &&\r\n        this.y === otherCoin.y\r\n      ) {\r\n        this.stackCount += otherCoin.stackCount;\r\n        this.level.items = this.level.items.filter((x) => x !== otherCoin);\r\n      }\r\n      if (this.stackCount >= 3) this.tileX = 20;\r\n      if (this.stackCount >= 7) this.tileX = 21;\r\n    }\r\n  };\r\n  get distanceToBottomRight() {\r\n    return Math.sqrt(\r\n      (this.x + this.w - window.innerWidth) ** 2 +\r\n        (this.y + this.h - window.innerHeight) ** 2,\r\n    );\r\n  }\r\n\r\n  autoPickup = () => {\r\n    if (GameConstants.COIN_AUTO_PICKUP)\r\n      this.onPickup(this.level.game.players[this.level.game.localPlayerID]);\r\n  };\r\n\r\n  pickupSound = () => {\r\n    let delay = 0;\r\n    if (GameConstants.COIN_ANIMATION)\r\n      delay = Math.ceil(Random.rand() * 200 + 400);\r\n\r\n    if (this.level === this.level.game.room)\r\n      Sound.delayPlay(Sound.pickupCoin, delay);\r\n  };\r\n}\r\n","import { GameConstants } from \"../game/gameConstants\";\r\n\r\nexport class LevelConstants {\r\n  static SCREEN_W = 1;\r\n  static SCREEN_H = 1;\r\n\r\n  static readonly COMPUTER_TURN_DELAY = 250; // milliseconds (was 300)\r\n  static readonly TURN_TIME = 3000; // milliseconds\r\n  static readonly LEVEL_TRANSITION_TIME = 300; // milliseconds\r\n  static readonly LEVEL_TRANSITION_TIME_LADDER = 1000; // milliseconds\r\n  static readonly ROOM_COUNT = 50;\r\n\r\n  static readonly HEALTH_BAR_FADEIN = 100;\r\n  static readonly HEALTH_BAR_FADEOUT = 350;\r\n  static readonly HEALTH_BAR_TOTALTIME = 2000;\r\n\r\n  static readonly SHADED_TILE_CUTOFF = 1;\r\n  static readonly MIN_VISIBILITY = 0; // visibility level of places you've already seen\r\n  static LIGHTING_ANGLE_STEP = 2; // how many degrees between each ray, previously 5\r\n  static get LIGHTING_ANGLE_BRIGHTNESS_COMPENSATION() {\r\n    return LevelConstants.LIGHTING_ANGLE_STEP / 2;\r\n  }\r\n  static LIGHTING_MAX_DISTANCE = 7;\r\n  //static readonly LIGHT_RESOLUTION = 0.1; //1 is default\r\n\r\n  static readonly LEVEL_TEXT_COLOR = \"yellow\";\r\n  static readonly AMBIENT_LIGHT_COLOR: [number, number, number] = [12, 15, 12];\r\n  static readonly TORCH_LIGHT_COLOR: [number, number, number] = [120, 35, 10];\r\n}\r\n","import { Direction, Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Particle } from \"./particle\";\r\n\r\nexport class AttackAnimation extends Particle {\r\n  tileX: number;\r\n  tileY: number;\r\n  tileYOffset: number;\r\n  x: number;\r\n  y: number;\r\n  frame: number;\r\n  type: string;\r\n  direction: Direction;\r\n  frames: number;\r\n  yOffset: number;\r\n  xOffset: number;\r\n  animationSpeed: number;\r\n\r\n  constructor(x: number, y: number, type: string, direction: Direction) {\r\n    super();\r\n    this.x = x;\r\n    this.y = y - 0.25;\r\n    this.dead = false;\r\n    this.frame = 0;\r\n    this.type = type;\r\n    this.xOffset = 0;\r\n    this.yOffset = 0;\r\n    this.tileX = 12;\r\n\r\n    this.animationSpeed = 1;\r\n    switch (type) {\r\n      case \"dagger\":\r\n        this.frames = 8;\r\n        this.tileY = 24;\r\n        this.yOffset = 0;\r\n        this.xOffset = 0;\r\n\r\n        switch (direction) {\r\n          case Direction.DOWN:\r\n            this.yOffset -= 0.75;\r\n            break;\r\n          case Direction.UP:\r\n            this.yOffset += 0.5;\r\n            break;\r\n          case Direction.LEFT:\r\n            this.xOffset += 0.8;\r\n            this.yOffset += 0.25;\r\n            break;\r\n          case Direction.RIGHT:\r\n            this.xOffset -= 0.8;\r\n            this.yOffset -= 0.25;\r\n            break;\r\n        }\r\n\r\n        break;\r\n      case \"warhammer\":\r\n        this.frames = 8;\r\n        this.tileX = 12;\r\n        this.tileY = 32;\r\n        this.yOffset = -0.75;\r\n        this.xOffset = -0;\r\n        this.frame = -5;\r\n        this.animationSpeed = 2;\r\n\r\n        switch (direction) {\r\n          case Direction.DOWN:\r\n            this.yOffset -= 0.25;\r\n            this.xOffset += 0.125;\r\n            break;\r\n          case Direction.UP:\r\n            this.yOffset += 1;\r\n            this.xOffset += 0.25;\r\n            break;\r\n          case Direction.LEFT:\r\n            this.xOffset += 0.75;\r\n            this.yOffset += 0.5;\r\n            break;\r\n          case Direction.RIGHT:\r\n            this.xOffset -= 0.75;\r\n            this.yOffset += 0.5;\r\n            break;\r\n        }\r\n        break;\r\n\r\n      case \"dualdagger\":\r\n        this.frames = 8;\r\n        this.tileY = 40;\r\n        this.yOffset = 0;\r\n        this.xOffset = 0;\r\n\r\n        switch (direction) {\r\n          case Direction.DOWN:\r\n            this.yOffset -= 1;\r\n            break;\r\n          case Direction.UP:\r\n            this.yOffset += 0.5;\r\n            break;\r\n          case Direction.LEFT:\r\n            this.xOffset += 0.8;\r\n            this.yOffset -= 0.25;\r\n            break;\r\n          case Direction.RIGHT:\r\n            this.xOffset -= 0.8;\r\n            this.yOffset -= 0.25;\r\n            break;\r\n        }\r\n        break;\r\n\r\n      case \"dualdagger2\":\r\n        this.frames = 8;\r\n        this.tileY = 48;\r\n        this.yOffset = 0;\r\n        this.xOffset = 0;\r\n        //this.animationSpeed = 1;\r\n\r\n        switch (direction) {\r\n          case Direction.DOWN:\r\n            this.yOffset -= 1;\r\n            break;\r\n          case Direction.UP:\r\n            this.yOffset += 0.5;\r\n            break;\r\n          case Direction.LEFT:\r\n            this.xOffset += 0.8;\r\n            this.yOffset -= 0.25;\r\n            break;\r\n          case Direction.RIGHT:\r\n            this.xOffset -= 0.8;\r\n            this.yOffset -= 0.25;\r\n            break;\r\n        }\r\n        break;\r\n\r\n      case \"spear\":\r\n        this.frames = 5;\r\n        this.tileY = 32;\r\n        this.tileX = 22;\r\n        this.animationSpeed = 0.5;\r\n\r\n        switch (direction) {\r\n          case Direction.DOWN:\r\n            this.yOffset -= 0.75;\r\n            this.xOffset += 0.125;\r\n\r\n            break;\r\n          case Direction.UP:\r\n            //needs to draw behind player but its fine for now\r\n            this.yOffset += 1;\r\n            this.xOffset -= 0.125;\r\n\r\n            break;\r\n          case Direction.LEFT:\r\n            this.xOffset += 1;\r\n            this.yOffset += 0.25;\r\n\r\n            break;\r\n          case Direction.RIGHT:\r\n            this.xOffset -= 1;\r\n            this.yOffset += 0.25;\r\n\r\n            break;\r\n        }\r\n        break;\r\n\r\n      case \"scythe\":\r\n        this.frames = 6;\r\n        this.tileY = 40;\r\n        this.tileX = 0;\r\n        this.animationSpeed = 0.75;\r\n\r\n        switch (direction) {\r\n          case Direction.DOWN:\r\n            this.yOffset -= 0.75;\r\n            this.xOffset += 0;\r\n            break;\r\n          case Direction.UP:\r\n            this.yOffset += 0.75;\r\n            this.xOffset -= 0;\r\n            break;\r\n          case Direction.LEFT:\r\n            this.xOffset += 0.75;\r\n            this.yOffset += 0;\r\n            break;\r\n          case Direction.RIGHT:\r\n            this.xOffset -= 0.75;\r\n            this.yOffset -= 0;\r\n            break;\r\n        }\r\n        break;\r\n\r\n      case \"sword\":\r\n        this.frames = 6;\r\n        this.tileY = 48;\r\n        this.tileX = 0;\r\n        this.animationSpeed = 0.75;\r\n\r\n        switch (direction) {\r\n          case Direction.DOWN:\r\n            this.yOffset -= 0.95;\r\n            this.xOffset += 0;\r\n            break;\r\n          case Direction.UP:\r\n            this.yOffset += 0.95;\r\n            this.xOffset -= 0;\r\n            break;\r\n          case Direction.LEFT:\r\n            this.xOffset += 0.95;\r\n            this.yOffset += 0;\r\n            break;\r\n          case Direction.RIGHT:\r\n            this.xOffset -= 0.95;\r\n            this.yOffset -= 0;\r\n            break;\r\n        }\r\n        break;\r\n    }\r\n    switch (direction) {\r\n      case Direction.DOWN:\r\n        this.tileYOffset = 0;\r\n        break;\r\n      case Direction.UP:\r\n        this.tileYOffset = 2;\r\n        break;\r\n      case Direction.LEFT:\r\n        this.tileYOffset = 4;\r\n        break;\r\n      case Direction.RIGHT:\r\n        this.tileYOffset = 6;\r\n        break;\r\n    }\r\n  }\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    // if (this.frame <= this.frames / 2)\r\n    this.drawAnimation(delta);\r\n  };\r\n\r\n  drawAnimation = (delta: number) => {\r\n    if (this.dead) return;\r\n    if (this.frame >= 0) {\r\n      Game.drawFX(\r\n        this.tileX + 2 * Math.round(Math.max(0, this.frame) / 2),\r\n        this.tileY + this.tileYOffset,\r\n        2,\r\n        2,\r\n        this.x - 0.5 + this.xOffset,\r\n        this.y - 0.5 + this.yOffset,\r\n        2,\r\n        2,\r\n      );\r\n    }\r\n\r\n    this.frame += this.animationSpeed * delta;\r\n    if (this.frame > this.frames) this.dead = true;\r\n  };\r\n}\r\n","import { Projectile } from \"./projectile\";\r\nimport { Game } from \"../game\";\r\nimport { WizardEnemy } from \"../entity/enemy/wizardEnemy\";\r\nimport { Player } from \"../player/player\";\r\nimport { HitWarning } from \"../drawable/hitWarning\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Enemy } from \"../entity/enemy/enemy\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\nimport { Lighting } from \"../lighting/lighting\";\r\nimport { Utils } from \"../utility/utils\";\r\nimport { Random } from \"../utility/random\";\r\n\r\nexport class WizardFireball extends Projectile {\r\n  state: number;\r\n  frame: number;\r\n  parent: WizardEnemy;\r\n  delay: number;\r\n  frameOffset: number;\r\n  offsetX: number;\r\n  hitWarning: HitWarning;\r\n  tileX: number;\r\n  tileY: number;\r\n\r\n  constructor(parent: WizardEnemy, x: number, y: number) {\r\n    super(parent, x, y);\r\n    this.tileY = parent.name === \"wizard bomber\" ? 7 : 8;\r\n    this.parent = parent;\r\n    this.frame = 0;\r\n    this.state = 0; // this.distanceToParent;\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      4,\r\n      (parent as WizardEnemy).projectileColor,\r\n      0.1,\r\n    );\r\n    this.parent.addLightSource(this.lightSource);\r\n    //this.parent.room.updateLighting();\r\n    this.hasBloom = true;\r\n    this.bloomColor = Utils.rgbToHex(\r\n      (this.parent as WizardEnemy).projectileColor[0],\r\n      (this.parent as WizardEnemy).projectileColor[1],\r\n      (this.parent as WizardEnemy).projectileColor[2],\r\n    );\r\n    this.bloomAlpha = 0.5;\r\n    this.softBloomAlpha = 0;\r\n  }\r\n  setMarkerFrame = () => {\r\n    // Calculate offsetX based on direction\r\n    this.offsetX = Math.floor(((this.dir + 1) % 8) / 2);\r\n  };\r\n\r\n  tick = () => {\r\n    if (this.parent.dead || this.state === 3) {\r\n      this.parent.removeLightSource(this.lightSource);\r\n      this.dead = true;\r\n    }\r\n\r\n    if (!this.dead && this.state === 0) {\r\n      this.bloomAlpha = 1;\r\n    }\r\n\r\n    this.state++;\r\n    if (!this.dead && this.state === 1) {\r\n      this.bloomAlpha = 0.5;\r\n\r\n      const lightSource = this.parent.room.lightSources.find(\r\n        (ls) => ls === this.lightSource,\r\n      );\r\n      lightSource.b = 0.4;\r\n      this.parent.room.hitwarnings.push(\r\n        new HitWarning(\r\n          this.parent.game,\r\n          this.x,\r\n          this.y,\r\n          this.parent.x,\r\n          this.parent.y,\r\n          true,\r\n        ),\r\n      );\r\n    }\r\n    if (!this.dead && this.state === 2) {\r\n      this.bloomAlpha = 0;\r\n      Lighting.momentaryLight(\r\n        this.parent.room,\r\n        this.x,\r\n        this.y,\r\n        3,\r\n        (this.parent as WizardEnemy).projectileColor,\r\n        500,\r\n        5,\r\n        350,\r\n      );\r\n      this.parent.removeLightSource(this.lightSource);\r\n      this.frame = 0;\r\n      this.delay = Game.rand(0, 10, Random.rand);\r\n    }\r\n  };\r\n\r\n  hitPlayer = (player: Player) => {\r\n    if (!this.dead && this.state === 2) {\r\n      player.hurt(1, this.parent.name);\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    /*Game.drawFX(\r\n      18 + this.offsetX, //+ Math.floor(HitWarning.frame),\r\n      4,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1\r\n    );*/\r\n\r\n    if (this.state >= 0) {\r\n      if (this.state === 0) {\r\n        this.frame += 0.25 * delta;\r\n        if (this.frame >= 4) this.frame = 0;\r\n        Game.drawFX(\r\n          22 + Math.floor(this.frame),\r\n          this.tileY,\r\n          1,\r\n          1,\r\n          this.x,\r\n          this.y,\r\n          1,\r\n          1,\r\n        );\r\n      } else if (this.state === 1) {\r\n        this.frame += 0.25 * delta;\r\n        if (this.frame >= 4) this.frame = 0;\r\n        Game.drawFX(\r\n          18 + Math.floor(this.frame),\r\n          this.tileY,\r\n          1,\r\n          1,\r\n          this.x,\r\n          this.y - 0.2,\r\n          1,\r\n          1,\r\n        );\r\n      } else {\r\n        if (this.delay > 0) {\r\n          this.delay--;\r\n          return;\r\n        }\r\n        this.frame += 0.3 * delta;\r\n        if (this.frame > 17) this.dead = true;\r\n        Game.drawFX(Math.floor(this.frame), 6, 1, 2, this.x, this.y - 1, 1, 2);\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { Entity, EntityDirection } from \"../entity\";\r\nimport { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { HitWarning } from \"../../drawable/hitWarning\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { RedGem } from \"../../item/resource/redgem\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Spear } from \"../../item/weapon/spear\";\r\nimport { DualDagger } from \"../../item/weapon/dualdagger\";\r\nimport { GreenGem } from \"../../item/resource/greengem\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Pickaxe } from \"../../item/tool/pickaxe\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Enemy } from \"./enemy\";\r\n\r\nexport class MummyEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  dir: Direction;\r\n  static difficulty: number = 1;\r\n  static tileX: number = 17;\r\n  static tileY: number = 16;\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 17;\r\n    this.tileY = 16;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.dir = Direction.DOWN;\r\n    this.name = \"mummy\";\r\n    this.forwardOnlyAttack = true;\r\n    this.jumpHeight = 0.35;\r\n    this.alertRange = 2; // very small alert range\r\n    this.baseDamage = 0.5;\r\n\r\n    if (drop) this.drop = drop;\r\n    this.getDrop([\"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  // Immunities\r\n  poison = () => {\r\n    // immune to poison\r\n    return;\r\n  };\r\n\r\n  bleed = () => {\r\n    // immune to bleed\r\n    return;\r\n  };\r\n\r\n  behavior = () => {\r\n    // Store the current position\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    // If the enemy is not dead\r\n    if (!this.dead) {\r\n      // Skip turns if necessary\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n\r\n      // Increment the tick counter\r\n      this.ticks++;\r\n\r\n      // If the enemy has not seen the player yet\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        // If the target player has taken their turn\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          // Decrement alert ticks\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n\r\n          // Store the old position\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          // Create a list of positions to avoid\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n            }\r\n          }\r\n          for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n              if (\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                // Don't walk on active spike traps\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Create a grid of the room\r\n          let grid = [];\r\n          for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n            grid[x] = [];\r\n            for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n              if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                grid[x][y] = this.room.roomArray[x][y];\r\n              else grid[x][y] = false;\r\n            }\r\n          }\r\n\r\n          // Find a path to the target player\r\n          let moves = astar.AStar.search(\r\n            grid,\r\n            this,\r\n            this.targetPlayer,\r\n            disablePositions,\r\n            false,\r\n            false,\r\n            true,\r\n            this.direction,\r\n          );\r\n\r\n          // If there are moves available\r\n          if (moves.length > 0) {\r\n            let moveX = moves[0].pos.x;\r\n            let moveY = moves[0].pos.y;\r\n            let oldDir = this.direction;\r\n            let player = this.targetPlayer;\r\n\r\n            // Face the target player\r\n            this.facePlayer(player);\r\n\r\n            // Determine the new direction based on the move\r\n            if (moveX > oldX) this.direction = Direction.RIGHT;\r\n            else if (moveX < oldX) this.direction = Direction.LEFT;\r\n            else if (moveY > oldY) this.direction = Direction.DOWN;\r\n            else if (moveY < oldY) this.direction = Direction.UP;\r\n\r\n            // If the direction hasn't changed, attempt to move or attack\r\n            if (oldDir == this.direction) {\r\n              let hitPlayer = false;\r\n              for (const i in this.game.players) {\r\n                if (\r\n                  this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                  this.game.players[i].x === moveX &&\r\n                  this.game.players[i].y === moveY\r\n                ) {\r\n                  // Attack the player if they are in the way\r\n                  this.game.players[i].hurt(this.hit(), this.name);\r\n                  this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                  this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                  if (\r\n                    this.game.players[i] ===\r\n                    this.game.players[this.game.localPlayerID]\r\n                  )\r\n                    this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n                }\r\n              }\r\n              if (!hitPlayer) {\r\n                // Move to the new position\r\n                this.tryMove(moveX, moveY);\r\n                this.setDrawXY(oldX, oldY);\r\n\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Add positions to avoid based on the current direction\r\n          if (this.direction == Direction.LEFT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.RIGHT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.DOWN) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.UP) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          // Make hit warnings\r\n          this.makeHitWarnings();\r\n        }\r\n\r\n        // Check if the target player is offline\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        // If the enemy is not aggro or the target player is offline, find a new target player\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.makeHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    //this.updateShadeColor(delta);\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    this.updateDrawXY(delta);\r\n    this.frame += 0.1 * delta;\r\n    if (this.frame >= 4) this.frame = 0;\r\n    if (this.hasShadow) this.drawShadow(delta);\r\n    Game.drawMob(\r\n      this.tileX + Math.floor(this.frame),\r\n      this.tileY + this.direction * 2,\r\n      1,\r\n      2,\r\n      this.x - this.drawX,\r\n      this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n      1,\r\n      2,\r\n      this.softShadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.globalAlpha = 1;\r\n  };\r\n}\r\n","import { Entity } from \"../entity/entity\";\r\nimport { Armor } from \"./armor\";\r\nimport { BlueGem } from \"./resource/bluegem\";\r\nimport { Candle } from \"./light/candle\";\r\nimport { Coin } from \"./coin\";\r\nimport { GreenGem } from \"./resource/greengem\";\r\nimport { Heart } from \"./usable/heart\";\r\nimport { Item } from \"./item\";\r\nimport { RedGem } from \"./resource/redgem\";\r\nimport { WeaponFragments } from \"./usable/weaponFragments\";\r\nimport { Spear } from \"./weapon/spear\";\r\nimport { Warhammer } from \"./weapon/warhammer\";\r\nimport { DualDagger } from \"./weapon/dualdagger\";\r\nimport { WeaponPoison } from \"./usable/weaponPoison\";\r\nimport { WeaponBlood } from \"./usable/weaponBlood\";\r\nimport { GoldOre } from \"./resource/goldOre\";\r\nimport { Stone } from \"./resource/stone\";\r\nimport { Pickaxe } from \"./tool/pickaxe\";\r\nimport { Hammer } from \"./tool/hammer\";\r\nimport { Coal } from \"./resource/coal\";\r\nimport { Torch } from \"./light/torch\";\r\nimport { Lantern } from \"./light/lantern\";\r\nimport { Spellbook } from \"./weapon/spellbook\";\r\nimport { SpellbookPage } from \"./usable/spellbookPage\";\r\nimport { Backpack } from \"./backpack\";\r\nimport { BombItem } from \"./bombItem\";\r\nimport { Greataxe } from \"./weapon/greataxe\";\r\nimport { Random } from \"../utility/random\";\r\nimport { Game } from \"../game\";\r\nimport { Utils } from \"../utility/utils\";\r\nimport { Geode } from \"./resource/geode\";\r\nimport { Scythe } from \"./weapon/scythe\";\r\nimport { Hourglass } from \"./usable/hourglass\";\r\nimport { ScytheHandle } from \"./weapon/scytheHandle\";\r\nimport { ScytheBlade } from \"./weapon/scytheBlade\";\r\nimport { FishingRod } from \"./tool/fishingRod\";\r\nimport { ShieldRightFragment } from \"./weapon/shieldRightFragment\";\r\nimport { ShieldLeftFragment } from \"./weapon/shieldLeftFragment\";\r\nimport { WoodenShield } from \"./woodenShield\";\r\n\r\ninterface Drop {\r\n  itemType: string;\r\n  dropRate: number; // 1/x chance of dropping\r\n  category: string[];\r\n  unique?: boolean;\r\n  minDepth?: number;\r\n}\r\n\r\nexport const ItemTypeMap: { [key: string]: typeof Item } = {\r\n  dualdagger: DualDagger,\r\n  warhammer: Warhammer,\r\n  spear: Spear,\r\n  spellbook: Spellbook,\r\n  greataxe: Greataxe,\r\n  scythe: Scythe,\r\n  hourglass: Hourglass,\r\n  fishingrod: FishingRod,\r\n\r\n  scytheblade: ScytheBlade,\r\n  scythehandle: ScytheHandle,\r\n  shieldleftfragment: ShieldLeftFragment,\r\n  shieldrightfragment: ShieldRightFragment,\r\n\r\n  armor: Armor,\r\n  woodenshield: WoodenShield,\r\n  pickaxe: Pickaxe,\r\n  hammer: Hammer,\r\n\r\n  heart: Heart,\r\n  weaponpoison: WeaponPoison,\r\n  weaponblood: WeaponBlood,\r\n\r\n  coin: Coin,\r\n\r\n  weaponfragments: WeaponFragments,\r\n  spellbookPage: SpellbookPage,\r\n\r\n  backpack: Backpack,\r\n\r\n  candle: Candle,\r\n  torch: Torch,\r\n  lantern: Lantern,\r\n\r\n  redgem: RedGem,\r\n  bluegem: BlueGem,\r\n  greengem: GreenGem,\r\n  geode: Geode,\r\n  gold: GoldOre,\r\n  stone: Stone,\r\n  coal: Coal,\r\n  bomb: BombItem,\r\n};\r\n\r\nexport class DropTable {\r\n  static drops: Drop[] = [\r\n    // Weapons - Higher numbers = rarer\r\n    {\r\n      itemType: \"dualdagger\",\r\n      dropRate: 500,\r\n      category: [\"weapon\", \"melee\"],\r\n      unique: true,\r\n    },\r\n    {\r\n      itemType: \"warhammer\",\r\n      dropRate: 250,\r\n      category: [\"weapon\", \"melee\"],\r\n      unique: true,\r\n    },\r\n    {\r\n      itemType: \"spear\",\r\n      dropRate: 150,\r\n      category: [\"weapon\", \"melee\"],\r\n      unique: true,\r\n    },\r\n    {\r\n      itemType: \"spellbook\",\r\n      dropRate: 250,\r\n      category: [\"weapon\", \"magic\"],\r\n      unique: true,\r\n    },\r\n    {\r\n      itemType: \"greataxe\",\r\n      dropRate: 500,\r\n      category: [\"weapon\", \"melee\"],\r\n      unique: true,\r\n    },\r\n    {\r\n      itemType: \"scythe\",\r\n      dropRate: 500,\r\n      category: [\"reaper\"],\r\n      unique: true,\r\n    },\r\n    {\r\n      itemType: \"scytheblade\",\r\n      dropRate: 10,\r\n      category: [\"reaper\"],\r\n      unique: true,\r\n    },\r\n    {\r\n      itemType: \"scythehandle\",\r\n      dropRate: 10,\r\n      category: [\"reaper\"],\r\n      unique: true,\r\n    },\r\n    {\r\n      itemType: \"shieldleftfragment\",\r\n      dropRate: 10,\r\n      category: [\"occultist\"],\r\n      unique: true,\r\n    },\r\n    {\r\n      itemType: \"shieldrightfragment\",\r\n      dropRate: 10,\r\n      category: [\"occultist\"],\r\n      unique: true,\r\n    },\r\n\r\n    {\r\n      itemType: \"weaponpoison\",\r\n      dropRate: 3,\r\n      category: [\"frog\"],\r\n      unique: true,\r\n    },\r\n\r\n    {\r\n      itemType: \"woodenshield\",\r\n      dropRate: 20,\r\n      category: [\"shield\"],\r\n      unique: false,\r\n    },\r\n\r\n    // Equipment\r\n    { itemType: \"armor\", dropRate: 350, category: [\"equipment\"], unique: true },\r\n\r\n    // Tools\r\n    { itemType: \"pickaxe\", dropRate: 25, category: [\"tool\"] },\r\n    { itemType: \"hammer\", dropRate: 25, category: [\"tool\"] },\r\n    { itemType: \"fishingrod\", dropRate: 40, category: [\"tool\"] },\r\n\r\n    { itemType: \"hourglass\", dropRate: 10, category: [\"reaper\"], unique: true },\r\n\r\n    // Consumables\r\n    { itemType: \"heart\", dropRate: 20, category: [\"consumable\"] },\r\n    //{ itemType: \"weaponpoison\", dropRate: 100, category: [\"consumable\"] },\r\n    { itemType: \"weaponblood\", dropRate: 100, category: [\"consumable\"] },\r\n\r\n    // Common items\r\n    { itemType: \"coin\", dropRate: 10, category: [\"coin\"] }, // Always drops\r\n\r\n    // Crafting materials\r\n    {\r\n      itemType: \"weaponfragments\",\r\n      dropRate: 100,\r\n      category: [\"consumable\", \"melee\"],\r\n    },\r\n    {\r\n      itemType: \"spellbookPage\",\r\n      dropRate: 100,\r\n      category: [\"consumable\", \"magic\"],\r\n    },\r\n\r\n    // Upgrades\r\n    { itemType: \"backpack\", dropRate: 100, category: [\"upgrade\"] },\r\n\r\n    // Light sources\r\n    { itemType: \"candle\", dropRate: 100, category: [\"light\"] },\r\n    { itemType: \"torch\", dropRate: 250, category: [\"light\"] },\r\n    { itemType: \"lantern\", dropRate: 500, category: [\"light\"] },\r\n\r\n    // Gems and minerals\r\n    { itemType: \"redgem\", dropRate: 500, category: [\"gem\", \"resource\"] },\r\n    { itemType: \"bluegem\", dropRate: 500, category: [\"gem\", \"resource\"] },\r\n    { itemType: \"greengem\", dropRate: 500, category: [\"gem\", \"resource\"] },\r\n    { itemType: \"geode\", dropRate: 350, category: [\"gem\", \"resource\"] },\r\n    { itemType: \"gold\", dropRate: 350, category: [\"resource\"] },\r\n    { itemType: \"stone\", dropRate: 200, category: [\"resource\"] },\r\n    {\r\n      itemType: \"coal\",\r\n      dropRate: 100,\r\n      category: [\"fuel\", \"lantern\", \"resource\", \"light\"],\r\n    },\r\n    { itemType: \"bomb\", dropRate: 100, category: [\"bomb\", \"weapon\"] },\r\n  ];\r\n\r\n  static getDrop = (\r\n    entity: Entity,\r\n    useCategory: string[] = [],\r\n    force: boolean = false,\r\n    increaseDepth: number = 0,\r\n    maxDrops: number = 1,\r\n  ) => {\r\n    if (entity.cloned) {\r\n      return;\r\n    }\r\n\r\n    const currentDepth = entity.room.depth + increaseDepth;\r\n    const dropChance = entity.dropChance || 1;\r\n\r\n    // Skip initial drop chance check if forced\r\n    if (!force && dropChance > 1 && Random.rand() > 1 / dropChance) {\r\n      return null;\r\n    }\r\n\r\n    // Filter eligible drops by depth\r\n    let eligibleDrops = this.drops.filter(\r\n      (drop) => drop.minDepth === undefined || drop.minDepth <= currentDepth,\r\n    );\r\n\r\n    // Filter out unique items if no categories are specified (default drop table)\r\n    if (useCategory.length === 0) {\r\n      eligibleDrops = eligibleDrops.filter(\r\n        (drop) => drop.unique === undefined || drop.unique === false,\r\n      );\r\n    }\r\n\r\n    // Filter by categories or specific items if provided\r\n    if (useCategory.length > 0) {\r\n      eligibleDrops = eligibleDrops.filter(\r\n        (drop) =>\r\n          useCategory.includes(drop.itemType) || // Match specific item\r\n          drop.category.some((cat) => useCategory.includes(cat)), // Match category\r\n      );\r\n    }\r\n\r\n    // Handle case with no eligible drops\r\n    if (eligibleDrops.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Track how many items we've dropped\r\n    let droppedCount = 0;\r\n    let droppedItems = [];\r\n\r\n    // Try to drop items based on drop rates, up to maxDrops\r\n    for (const drop of eligibleDrops) {\r\n      const randomRoll = Random.rand();\r\n      const threshold = 1 / drop.dropRate;\r\n\r\n      if (randomRoll < threshold) {\r\n        const item = this.addNewItem(drop.itemType, entity);\r\n        if (item) {\r\n          droppedItems.push(item);\r\n          droppedCount++;\r\n\r\n          // Stop if we've reached the maximum number of drops\r\n          if (droppedCount >= maxDrops) {\r\n            break;\r\n          }\r\n        } else {\r\n        }\r\n      }\r\n    }\r\n\r\n    // Force drop the most common item if needed and we haven't dropped anything yet\r\n    if (force && droppedCount === 0 && eligibleDrops.length > 0) {\r\n      const mostCommonDrop = eligibleDrops.reduce((prev, curr) =>\r\n        prev.dropRate < curr.dropRate ? prev : curr,\r\n      );\r\n      const item = this.addNewItem(mostCommonDrop.itemType, entity);\r\n      if (item) {\r\n        droppedItems.push(item);\r\n      }\r\n    }\r\n\r\n    return droppedItems.length > 0 ? droppedItems : null;\r\n  };\r\n\r\n  static addNewItem = (itemType: string, entity: Entity): Item | null => {\r\n    const ItemClass = ItemTypeMap[itemType];\r\n    if (!ItemClass) {\r\n      console.error(`Item type \"${itemType}\" is not recognized.`);\r\n      return null;\r\n    }\r\n\r\n    let drop = ItemClass.add(entity.room, entity.x, entity.y);\r\n    if (drop.name === \"coin\") {\r\n      // Generate random number between 0-14 with normal distribution around 7\r\n      drop.stackCount = Utils.randomNormalInt(0, 14);\r\n    }\r\n    if (\r\n      drop instanceof BlueGem ||\r\n      drop instanceof RedGem ||\r\n      drop instanceof GreenGem\r\n    ) {\r\n      // Generate random number between 0-14 with normal distribution around 7\r\n      drop.stackCount = Utils.randomNormalInt(0, 5);\r\n    }\r\n    entity.drops.push(drop);\r\n    return drop;\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Usable } from \"../usable/usable\";\r\nimport { Weapon } from \"../weapon/weapon\";\r\nimport { Dagger } from \"../weapon/dagger\";\r\nimport { WeaponFragments } from \"../usable/weaponFragments\";\r\nimport { Geode } from \"../resource/geode\";\r\nimport { Pickaxe } from \"./pickaxe\";\r\nimport { GoldBar } from \"../resource/goldBar\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { FishingRod } from \"./fishingRod\";\r\nimport { GoldOre } from \"../resource/goldOre\";\r\nexport class Hammer extends Usable {\r\n  static itemName = \"hammer\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.tileX = 21;\r\n    this.tileY = 2;\r\n    this.offsetY = -0.3;\r\n    this.canUseOnOther = true;\r\n    this.description = \"useful for breaking weapons down into fragments\";\r\n    this.name = Hammer.itemName;\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    player.health = Math.min(player.maxHealth, player.health + 1);\r\n    const room = (player as any)?.getRoom\r\n      ? (player as any).getRoom()\r\n      : this.level.game.rooms[player.levelID];\r\n    if (room === this.level.game.room) Sound.heal();\r\n\r\n    //this.level.items = this.level.items.filter((x) => x !== this); // removes itself from the level\r\n  };\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (other instanceof Weapon && other.name !== \"dagger\") {\r\n      other.disassemble();\r\n    } else if (other.name === \"dagger\") {\r\n      this.level.game.pushMessage(\r\n        `You probably shouldn't disassemble your dagger...`,\r\n      );\r\n    } else if (other.name === \"hammer\" && other !== this) {\r\n      let hammer = other as Hammer;\r\n      hammer.disassemble(player);\r\n      this.level.game.pushMessage(`I only needed one of those anyways...`);\r\n    } else if (other.name === \"geode\") {\r\n      let geode = other as Geode;\r\n      geode.split(player.inventory);\r\n      this.level.game.pushMessage(`You hit the geode with the hammer.`);\r\n    } else if (other.name === \"pickaxe\") {\r\n      let pickaxe = other as Pickaxe;\r\n      pickaxe.disassemble();\r\n    } else if (other.name === \"gold bar\") {\r\n      let goldBar = other as GoldBar;\r\n      goldBar.smith(player);\r\n    } else if (other.name === \"gold ore\") {\r\n      let gold = other as GoldOre;\r\n      gold.smelt(player);\r\n    } else if (other.name === \"fishing rod\") {\r\n      let fishingRod = other as FishingRod;\r\n      fishingRod.disassemble();\r\n    }\r\n  };\r\n\r\n  disassemble = (player: Player) => {\r\n    let inventoryX = this.x;\r\n    let inventoryY = this.y;\r\n    let numFragments = Math.ceil(Random.rand() * 5 + 5);\r\n    player.inventory.removeItem(this);\r\n    player.inventory.addItem(\r\n      new WeaponFragments(this.level, inventoryX, inventoryY, numFragments),\r\n    );\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { GoldRing } from \"../jewelry/goldRing\";\r\nimport { Usable } from \"../usable/usable\";\r\n\r\nexport class RedGem extends Usable {\r\n  static itemName = \"garnet\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 12;\r\n    this.tileY = 0;\r\n    this.name = RedGem.itemName;\r\n    this.canUseOnOther = true;\r\n\r\n    this.stackable = true;\r\n  }\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (other.name === \"gold ring\") {\r\n      let goldRing = other as GoldRing;\r\n      goldRing.embed(player, this);\r\n    }\r\n  };\r\n\r\n  getDescription = (): string => {\r\n    return \"A garnet gem. Embed it into a gold ring to imbue it with magic.\";\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { EntityType } from \"../entity\";\r\nimport { SkullEnemy } from \"../enemy/skullEnemy\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { EnemySpawnAnimation } from \"../../projectile/enemySpawnAnimation\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Spellbook } from \"../../item/weapon/spellbook\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { LightSource } from \"../../lighting/lightSource\";\r\n\r\nexport class TombStone extends Entity {\r\n  skinType: number;\r\n\r\n  constructor(\r\n    room: Room,\r\n    game: Game,\r\n    x: number,\r\n    y: number,\r\n    skinType: number = 0,\r\n    drop?: Item,\r\n  ) {\r\n    super(room, game, x, y);\r\n    this.skinType = skinType;\r\n    this.room = room;\r\n    this.health = 2;\r\n    //this.maxHealth = 2;\r\n    this.tileX = 11 + this.skinType;\r\n    this.tileY = 2;\r\n    this.hasShadow = true;\r\n    //this.pushable = false;\r\n    //this.destroyable = true;\r\n    //this.skinType = skinType;\r\n    this.chainPushable = false;\r\n    this.name = \"tombstone\";\r\n    let dropProb = Random.rand();\r\n    if (dropProb < 0.25)\r\n      this.drops.push(new Spellbook(this.room, this.x, this.y));\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#05FF05\";\r\n    this.bloomAlpha = 1;\r\n    this.softBloomAlpha = 0;\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 25;\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      7,\r\n      [5, 150, 5],\r\n      1,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  uniqueKillBehavior = () => {\r\n    if (this.cloned) return;\r\n    Sound.delayPlay(Sound.breakRock, 50);\r\n  };\r\n\r\n  onHurt = (damage: number = 1) => {\r\n    if (this.health === 1) {\r\n      const positions = this.room\r\n        .getEmptyTiles()\r\n        .filter(\r\n          (t) => Math.abs(t.x - this.x) <= 1 && Math.abs(t.y - this.y) <= 1,\r\n        );\r\n      if (positions.length > 0) {\r\n        for (let position of positions) {\r\n          for (const i in this.game.players) {\r\n            const playerX = this.game.players[i].x;\r\n            const playerY = this.game.players[i].y;\r\n            if (\r\n              (playerX !== position.x && playerY === position.y) ||\r\n              (playerX === position.x && playerY !== position.y)\r\n            ) {\r\n              this.room.entities.push(\r\n                new SkullEnemy(this.room, this.game, position.x, position.y),\r\n              );\r\n            }\r\n          }\r\n        }\r\n        Sound.delayPlay(Sound.skeleSpawn, 50);\r\n      }\r\n      this.tileX += 2;\r\n      //draw half broken tombstone based on skintype after it takes one damage\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    this.updateDrawXY(delta);\r\n    if (this.hasShadow) this.drawShadow(delta);\r\n\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    //if (!this.dead || !this.cloned) {{}\r\n    Game.drawObj(\r\n      this.tileX,\r\n      this.tileY,\r\n      1,\r\n      2,\r\n      this.x - this.drawX,\r\n      this.y - this.drawYOffset - this.drawY,\r\n      1,\r\n      2,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","// Returns the API URL based on the environment.\r\n// In development, it returns the local server URL.\r\n// In production, it returns the same domain as the current page.\r\nexport const getEnvironmentApiUrl = () => {\r\n  const isDevelopment =\r\n    window.location.hostname === \"localhost\" ||\r\n    window.location.hostname === \"127.0.0.1\" ||\r\n    window.location.hostname.includes(\"localhost\") ||\r\n    window.location.protocol === \"file:\";\r\n\r\n  if (isDevelopment) {\r\n    return \"http://localhost:3000/api/v1\";\r\n  } else {\r\n    return `https://turnarchist.onrender.com/api/v1`;\r\n  }\r\n};\r\n","import { Item } from \"./item\";\r\nimport { Player } from \"../player/player\";\r\nimport { Game } from \"../game\";\r\nimport { Room } from \"../room/room\";\r\nimport { Usable } from \"./usable/usable\";\r\nimport { Bestiary } from \"../game/bestiary\";\r\n\r\nexport class BestiaryBook extends Usable {\r\n  static itemName = \"bestiary book\";\r\n\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.tileX = 8;\r\n    this.tileY = 0;\r\n    this.offsetY = -0.3;\r\n    this.name = BestiaryBook.itemName;\r\n    this.description = \"opens the bestiary\";\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    if (player.bestiary === null) {\r\n      player.bestiary = new Bestiary(player.game, player);\r\n    }\r\n    player.bestiary.toggleOpen();\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Equippable } from \"../equippable\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\n\r\nexport abstract class Light extends Equippable {\r\n  fuel: number;\r\n  fuelCap: number;\r\n  radius: number;\r\n  maxBrightness: number;\r\n  minBrightness: number;\r\n  canRefuel: boolean = false;\r\n  color: [number, number, number];\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 28;\r\n    this.tileY = 0;\r\n    this.fuel = 0;\r\n    this.fuelCap = 250;\r\n    this.maxBrightness = 5;\r\n    this.minBrightness = 2;\r\n    this.radius = 6;\r\n    this.equipped = false;\r\n    this.color = LevelConstants.TORCH_LIGHT_COLOR;\r\n  }\r\n\r\n  updateLighting = () => {\r\n    const room = (this.wielder as any)?.getRoom\r\n      ? (this.wielder as any).getRoom()\r\n      : this.wielder.game.rooms[this.wielder.levelID];\r\n    room?.updateLighting();\r\n  };\r\n\r\n  get fuelPercentage() {\r\n    return this.fuel / this.fuelCap;\r\n  }\r\n\r\n  isIgnited = () => {\r\n    if (this.fuel > 0 && this.equipped) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  dropFromInventory = () => {\r\n    console.log(\"onDrop\");\r\n    if (this.equipped) {\r\n      this.toggleEquip();\r\n    }\r\n  };\r\n\r\n  setRadius = () => {\r\n    this.wielder.sightRadius = this.radius + this.fuelPercentage * this.radius;\r\n  };\r\n\r\n  setBrightness = () => {\r\n    this.wielder.lightBrightness =\r\n      this.minBrightness + this.fuelPercentage * this.maxBrightness;\r\n  };\r\n\r\n  toggleEquip = () => {\r\n    if (this.fuel > 0) {\r\n      this.equipped = !this.equipped;\r\n      if (this.isIgnited()) {\r\n        //this.setRadius();\r\n        this.setBrightness();\r\n        this.wielder.lightEquipped = true;\r\n        this.wielder.lightColor = this.color;\r\n      } else {\r\n        //this.resetRadius();\r\n        this.resetBrightness();\r\n        this.wielder.lightEquipped = false;\r\n        this.wielder.lightColor = LevelConstants.AMBIENT_LIGHT_COLOR;\r\n      }\r\n    } else {\r\n      this.wielder.game.pushMessage(\r\n        \"I'll need some fuel before I can use this\",\r\n      );\r\n    }\r\n\r\n    this.updateLighting();\r\n  };\r\n\r\n  coEquippable = (other: Light): boolean => {\r\n    return !(other instanceof Light);\r\n  };\r\n\r\n  resetRadius = () => {\r\n    this.wielder.sightRadius = this.wielder.defaultSightRadius;\r\n  };\r\n\r\n  resetBrightness = () => {\r\n    this.wielder.lightBrightness = 0.5;\r\n  };\r\n\r\n  burn = () => {\r\n    // Handle active burning, don't burn fuel in empty rooms\r\n    if (this.isIgnited()) {\r\n      const room = (this.wielder as any)?.getRoom\r\n        ? (this.wielder as any).getRoom()\r\n        : this.wielder.game.rooms[this.wielder.levelID];\r\n      const roomCleared = room.roomCleared();\r\n      if (!roomCleared) this.fuel--;\r\n      else this.fuel -= 0.2;\r\n\r\n      this.setRadius();\r\n      this.setBrightness();\r\n    }\r\n\r\n    // Handle depleted fuel\r\n    if (this.fuel <= 0) {\r\n      if (this.stackable) {\r\n        this.stackCount--;\r\n        this.fuel = this.fuelCap;\r\n      }\r\n\r\n      // Check if item should be removed after stack reduction\r\n      if (this.equipped) {\r\n        if (\r\n          (this.stackable && this.stackCount <= 0) ||\r\n          (!this.stackable && !this.canRefuel)\r\n        ) {\r\n          this.resetRadius();\r\n          this.wielder.lightEquipped = false;\r\n          this.wielder.inventory.removeItem(this);\r\n          this.wielder.game.pushMessage(`${this.name} depletes.`);\r\n        } else if (this.canRefuel) {\r\n          this.wielder.game.pushMessage(`${this.name} depletes.`);\r\n          this.equipped = false;\r\n          this.resetRadius();\r\n          this.wielder.lightEquipped = false;\r\n          this.broken = true;\r\n        }\r\n\r\n        this.updateLighting();\r\n      }\r\n    }\r\n  };\r\n\r\n  drawDurability = (x: number, y: number) => {\r\n    if (this.fuel < this.fuelCap) {\r\n      // Calculate durability ratio (1 = full, 0 = broken)\r\n      const durabilityRatio = this.fuel / this.fuelCap;\r\n\r\n      // Map durability ratio to hue (120 = green, 0 = red)\r\n      let color = Utils.hsvToHex(\r\n        120 * durabilityRatio, // Hue from 120 (green) to 0 (red)\r\n        1, // Full saturation\r\n        1, // Full value\r\n      );\r\n\r\n      const iconWidth = GameConstants.TILESIZE;\r\n      const barWidth = durabilityRatio * iconWidth;\r\n      const barHeight = 2; // 2 pixels tall\r\n\r\n      // Calculate the position of the durability bar\r\n      const barX = x * GameConstants.TILESIZE;\r\n      const barY = y * GameConstants.TILESIZE + GameConstants.TILESIZE - 2;\r\n\r\n      // Set the fill style for the durability bar\r\n      Game.ctx.fillStyle = color;\r\n      // Set the interpolation mode to nearest neighbor\r\n      Game.ctx.imageSmoothingEnabled = false;\r\n\r\n      // Draw the durability bar\r\n      Game.ctx.fillRect(barX, barY, barWidth, barHeight);\r\n\r\n      // Reset fill style to default\r\n      Game.ctx.fillStyle = \"white\";\r\n    }\r\n  };\r\n\r\n  tickInInventory = () => {\r\n    this.burn();\r\n  };\r\n\r\n  getDescription = () => {\r\n    return `${this.name}: ${Math.ceil(this.fuelPercentage * 100)}%`;\r\n  };\r\n}\r\n","import { Room } from \"../room/room\";\r\nimport { Particle } from \"./particle\";\r\nimport { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Random } from \"../utility/random\";\r\n\r\nexport class GenericParticle extends Particle {\r\n  level: Room;\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n  s: number;\r\n  dx: number;\r\n  dy: number;\r\n  targetX: number;\r\n  targetY: number;\r\n  targetZ: number;\r\n  dz: number;\r\n  color: string;\r\n  alpha: number;\r\n  delay: number;\r\n  expirationTimer: number;\r\n\r\n  static shotgun = (\r\n    level: Room,\r\n    cx: number,\r\n    cy: number,\r\n    tx: number,\r\n    ty: number,\r\n    color: string,\r\n  ) => {\r\n    for (let i = 0; i < 4; i++) {\r\n      level.particles.push(\r\n        new GenericParticle(\r\n          level,\r\n          cx,\r\n          cy,\r\n          0,\r\n          Random.rand() * 0.5 + 0.3,\r\n          0,\r\n          0,\r\n          0,\r\n          color,\r\n          0,\r\n          10000000,\r\n          tx + Random.rand() - 0.5,\r\n          ty + Random.rand() - 0.5,\r\n          0,\r\n        ),\r\n      );\r\n    }\r\n  };\r\n\r\n  static spawnCluster = (\r\n    level: Room,\r\n    cx: number,\r\n    cy: number,\r\n    color: string,\r\n  ) => {\r\n    for (let i = 0; i < 4; i++) {\r\n      level.particles.push(\r\n        new GenericParticle(\r\n          level,\r\n          cx + Random.rand() * 0.05 - 0.025,\r\n          cy + Random.rand() * 0.05 - 0.025,\r\n          Random.rand() * 0.5,\r\n          0.0625 * (i + 8),\r\n          0.025 * (Random.rand() * 2 - 1),\r\n          0.025 * (Random.rand() * 2 - 1),\r\n          0.2 * (Random.rand() - 1),\r\n          color,\r\n          0,\r\n        ),\r\n      );\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    level: Room,\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n    s: number,\r\n    dx: number,\r\n    dy: number,\r\n    dz: number,\r\n    color: string,\r\n    delay?: number,\r\n    expirationTimer?: number,\r\n    targetX?: number,\r\n    targetY?: number,\r\n    targetZ?: number,\r\n  ) {\r\n    super();\r\n    this.level = level;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n    this.s = s;\r\n    this.dx = dx;\r\n    this.dy = dy;\r\n    this.dz = dz;\r\n    this.color = color;\r\n    this.alpha = 1.0;\r\n    if (delay !== undefined) this.delay = delay;\r\n    this.targetX = targetX;\r\n    this.targetY = targetY;\r\n    this.targetZ = targetZ;\r\n    this.expirationTimer = 1000000;\r\n    if (expirationTimer !== undefined) this.expirationTimer = expirationTimer;\r\n  }\r\n\r\n  render = () => {\r\n    let scale = GameConstants.TILESIZE;\r\n    let scaledS = this.s * this.alpha; // using alpha for scaling, not alpha\r\n    let halfS = 0.5 * scaledS;\r\n    let oldFillStyle = Game.ctx.fillStyle;\r\n    Game.ctx.fillStyle = this.color;\r\n    Game.ctx.imageSmoothingEnabled = false;\r\n\r\n    Game.ctx.beginPath();\r\n    Game.ctx.arc(\r\n      Math.round(this.x * scale),\r\n      Math.round((this.y - this.z) * scale),\r\n      Math.round(halfS * scale),\r\n      0,\r\n      2 * Math.PI,\r\n      false,\r\n    );\r\n    Game.ctx.fill();\r\n\r\n    Game.ctx.fillStyle = oldFillStyle;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.targetX) this.x += 0.1 * (this.targetX - this.x);\r\n    else this.x += this.dx;\r\n    if (this.targetY) this.y += 0.1 * (this.targetY - this.y);\r\n    else this.y += this.dy;\r\n    if (this.targetZ) this.z += 0.1 * (this.targetZ - this.z);\r\n    else this.z += this.dz;\r\n\r\n    this.dx *= 0.97;\r\n    this.dy *= 0.97;\r\n    if (this.z <= 0) {\r\n      this.z = 0;\r\n      this.dz *= -0.8;\r\n    }\r\n\r\n    // apply gravity\r\n    this.dz -= 0.01;\r\n\r\n    if (this.alpha < 0.2) this.alpha -= 0.007;\r\n    else this.alpha -= 0.02;\r\n    if (this.alpha <= 0.1) this.dead = true;\r\n\r\n    this.expirationTimer--;\r\n    if (this.expirationTimer <= 0) this.dead = true;\r\n\r\n    if (this.dead) return;\r\n\r\n    this.drawableY = this.y;\r\n\r\n    this.render();\r\n  };\r\n}\r\n","import axios from \"axios\";\r\nimport type { GameStats as GameStatsType } from \"@server/http/schema\";\r\nimport { getEnvironmentApiUrl } from \"./utils\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const apiClient = axios.create({\r\n  baseURL: getEnvironmentApiUrl(),\r\n});\r\n\r\n// The `GameStats` type exported by the server has optional fields by default, because the parent\r\n// project doesnt have `strictNullChecks` enabled. We wrap it in `Required` to make fields non-optional.\r\ntype GameStats = Required<GameStatsType>;\r\n\r\nexport const recordGameStats = async (gameStats: GameStats) => {\r\n  const response = await apiClient.post(\"/game/stats\", gameStats);\r\n  return response.data;\r\n};\r\n\r\n// Create a unique user id. This id is per device per browser,\r\n// so users may have multiple ids if they have multiple devices or browsers.\r\nexport const getOrCreateUserId = () => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n  if (!userId) {\r\n    const newUserId = uuidv4();\r\n    localStorage.setItem(\"userId\", newUserId);\r\n    return newUserId;\r\n  }\r\n  return userId;\r\n};\r\n\r\nexport const safeRecordGameStats = async (gameStats: GameStats) => {\r\n  try {\r\n    return await recordGameStats(gameStats);\r\n  } catch (error) {\r\n    console.error(\"API request failed:\", error);\r\n  }\r\n};\r\n\r\nexport const fetchGameStats = async () => {\r\n  const response = await apiClient.get(\"/game/stats\");\r\n  return response.data;\r\n};\r\n","import { setCookie, getCookie } from \"../utility/cookies\";\r\nimport { Game } from \"../game\";\r\nimport { GameConstants } from \"./gameConstants\";\r\nimport { Sound } from \"../sound/sound\";\r\n\r\nconst SETTINGS_KEY = \"wr_settings\";\r\n\r\ntype Settings = {\r\n  muted?: boolean;\r\n  softScale?: number;\r\n  shade?: boolean;\r\n  smoothLighting?: boolean;\r\n  hoverText?: boolean;\r\n  screenShake?: boolean;\r\n};\r\n\r\nexport const saveSettings = (game: Game) => {\r\n  const s: Settings = {\r\n    muted: (Sound as any).audioMuted ?? false,\r\n    softScale: (GameConstants as any).SOFT_SCALE ?? GameConstants.SCALE,\r\n    shade: GameConstants.SHADE_ENABLED,\r\n    smoothLighting: GameConstants.SMOOTH_LIGHTING,\r\n    hoverText: GameConstants.HOVER_TEXT_ENABLED,\r\n    screenShake: GameConstants.SCREEN_SHAKE_ENABLED,\r\n  };\r\n  setCookie(SETTINGS_KEY, JSON.stringify(s), 180);\r\n};\r\n\r\nexport const loadSettings = (game: Game) => {\r\n  const raw = getCookie(SETTINGS_KEY);\r\n  if (!raw) return;\r\n  try {\r\n    const s: Settings = JSON.parse(raw);\r\n    if (typeof s.muted === \"boolean\") {\r\n      if (s.muted && !(Sound as any).audioMuted) Sound.toggleMute();\r\n      if (!s.muted && (Sound as any).audioMuted) Sound.toggleMute();\r\n    }\r\n    if (typeof s.softScale === \"number\") {\r\n      (GameConstants as any).SOFT_SCALE = s.softScale;\r\n    }\r\n    //if (typeof s.shade === \"boolean\") GameConstants.SHADE_ENABLED = s.shade;\r\n    if (typeof s.smoothLighting === \"boolean\")\r\n      GameConstants.SMOOTH_LIGHTING = s.smoothLighting;\r\n    if (typeof s.hoverText === \"boolean\") {\r\n      GameConstants.HOVER_TEXT_ENABLED = s.hoverText;\r\n      console.log(\"Load hover text enabled\", GameConstants.HOVER_TEXT_ENABLED);\r\n    }\r\n    if (typeof s.screenShake === \"boolean\") {\r\n      GameConstants.SCREEN_SHAKE_ENABLED = s.screenShake;\r\n    }\r\n  } catch (e) {\r\n    console.warn(\"Failed to parse settings cookie\", e);\r\n  }\r\n};\r\n","import type { Player } from \"./player\";\r\nimport { Direction } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { TurnState } from \"../room/room\";\r\n\r\nexport class PlayerMovement {\r\n  private player: Player;\r\n  private moveQueue: { x: number; y: number; direction: Direction }[] = [];\r\n  private isProcessingQueue: boolean = false;\r\n  private animationFrameId: number | null = null;\r\n  private moveRange: number = 1;\r\n  lastMoveTime: number = 0;\r\n  lastChangeDirectionTime: number = 0;\r\n  adjustedCooldown: number = 0;\r\n\r\n  constructor(player: Player) {\r\n    this.player = player;\r\n  }\r\n\r\n  move(direction: Direction, targetX?: number, targetY?: number): void {\r\n    if (!(direction in Direction) || !this.player) return;\r\n\r\n    const coords = this.getTargetCoords(direction, targetX, targetY);\r\n    if (!coords) return;\r\n    const { x, y } = coords;\r\n\r\n    if (this.canMove()) {\r\n      const now = Date.now();\r\n      this.lastMoveTime = now;\r\n      this.lastChangeDirectionTime = now;\r\n      this.player.inputHandler.setMostRecentMoveInput(\"keyboard\");\r\n      this.player.lastDirection = this.player.direction;\r\n      this.player.direction = direction;\r\n      this.player.tryMove(x, y);\r\n    } else {\r\n      this.queueMove(x, y, direction);\r\n    }\r\n  }\r\n\r\n  moveMouse(direction: Direction, targetX?: number, targetY?: number): void {\r\n    if (!(direction in Direction) || !this.player || GameConstants.isMobile)\r\n      return;\r\n\r\n    const coords = this.getTargetCoords(direction, targetX, targetY);\r\n    if (!coords) return;\r\n    const { x, y } = coords;\r\n    if (x === undefined || y === undefined) return;\r\n    if (this.canMove()) {\r\n      const now = Date.now();\r\n      this.lastMoveTime = now;\r\n      this.player.inputHandler.setMostRecentMoveInput(\"mouse\");\r\n      this.player.direction = direction;\r\n      this.player.tryMove(x, y);\r\n    } else {\r\n      this.queueMove(x, y, direction);\r\n    }\r\n  }\r\n  //unused\r\n  moveRangeCheck = (x: number, y: number) => {\r\n    const dx = Math.abs(this.player.x - x);\r\n    const dy = Math.abs(this.player.y - y);\r\n    return (\r\n      dx <= this.moveRange &&\r\n      dy <= this.moveRange &&\r\n      (dx === 0 || dy === 0) &&\r\n      dx + dy !== 0\r\n    );\r\n  };\r\n\r\n  private getTargetCoords(\r\n    direction: Direction,\r\n    x?: number,\r\n    y?: number,\r\n  ): { x: number; y: number } | null {\r\n    if (x !== undefined && y !== undefined && x !== null && y !== null) {\r\n      return { x, y };\r\n    }\r\n\r\n    switch (direction) {\r\n      case Direction.LEFT:\r\n        return { x: this.player.x - 1, y: this.player.y };\r\n      case Direction.RIGHT:\r\n        return { x: this.player.x + 1, y: this.player.y };\r\n      case Direction.UP:\r\n        return { x: this.player.x, y: this.player.y - 1 };\r\n      case Direction.DOWN:\r\n        return { x: this.player.x, y: this.player.y + 1 };\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n  inventoryClosedRecently(): boolean {\r\n    const timeSinceDragEnd = Date.now() - this.player.inventory.dragEndTime;\r\n    const timeSinceClose = Date.now() - this.player.inventory.closeTime;\r\n    return timeSinceDragEnd < 10 || timeSinceClose < 10;\r\n  }\r\n\r\n  canMove(): boolean {\r\n    if (this.player.busyAnimating) return false;\r\n    if (this.inventoryClosedRecently()) return false;\r\n\r\n    // Only block movement during computer turn if slow inputs setting is enabled\r\n    if (\r\n      GameConstants.SLOW_INPUTS_NEAR_ENEMIES &&\r\n      this.player.game.room.turn === TurnState.computerTurn &&\r\n      this.player.game.room.hasEnemyInRadius(this.player.x, this.player.y)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    const now = Date.now();\r\n    let cooldown = GameConstants.MOVEMENT_COOLDOWN;\r\n\r\n    // Apply slower cooldown when enemies are nearby and setting is enabled\r\n    if (\r\n      GameConstants.SLOW_INPUTS_NEAR_ENEMIES &&\r\n      this.player.game.room.hasEnemyInRadius(this.player.x, this.player.y)\r\n    ) {\r\n      cooldown *= 2; // Double the cooldown when enemies are nearby\r\n    }\r\n\r\n    if (now - this.lastMoveTime >= cooldown) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  canQueue(): boolean {\r\n    if (this.player.busyAnimating) return false;\r\n    if (this.inventoryClosedRecently()) return false;\r\n    const now = Date.now();\r\n    let cooldown = GameConstants.MOVEMENT_QUEUE_COOLDOWN;\r\n\r\n    // Apply slower queue cooldown when enemies are nearby and setting is enabled\r\n    if (\r\n      GameConstants.SLOW_INPUTS_NEAR_ENEMIES &&\r\n      this.player.game.room.hasEnemyInRadius(this.player.x, this.player.y)\r\n    ) {\r\n      cooldown *= 2; // Double the queue cooldown when enemies are nearby\r\n    }\r\n\r\n    if (now - this.lastMoveTime >= cooldown) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  queueMove(x: number, y: number, direction: Direction) {\r\n    if (!this.canQueue()) return;\r\n    if (x === undefined || y === undefined || this.moveQueue.length > 0) return;\r\n\r\n    this.moveQueue.push({ x, y, direction });\r\n    this.startQueueProcessing();\r\n  }\r\n\r\n  private handleMoveLoop({\r\n    x,\r\n    y,\r\n    direction,\r\n  }: {\r\n    x: number;\r\n    y: number;\r\n    direction: Direction;\r\n  }) {\r\n    if (this.player.inputHandler.mostRecentMoveInput === \"mouse\") {\r\n      this.moveMouse(direction, x, y);\r\n    } else {\r\n      this.move(direction, x, y);\r\n    }\r\n  }\r\n\r\n  private startQueueProcessing() {\r\n    if (!this.isProcessingQueue) {\r\n      this.isProcessingQueue = true;\r\n      this.animationFrameId = requestAnimationFrame(() => this.queueHandler());\r\n    }\r\n  }\r\n  private stopQueueProcessing() {\r\n    this.isProcessingQueue = false;\r\n    if (this.animationFrameId !== null) {\r\n      cancelAnimationFrame(this.animationFrameId);\r\n      this.animationFrameId = null;\r\n    }\r\n  }\r\n\r\n  private queueHandler = () => {\r\n    if (!this.isProcessingQueue) return;\r\n\r\n    const now = Date.now();\r\n\r\n    const cooldown = GameConstants.MOVEMENT_COOLDOWN;\r\n\r\n    if (now - this.lastMoveTime >= cooldown) {\r\n      if (this.moveQueue.length > 0) {\r\n        const nextMove = this.moveQueue.shift();\r\n\r\n        this.handleMoveLoop(nextMove);\r\n        this.lastMoveTime = now;\r\n      } else {\r\n        this.stopQueueProcessing();\r\n      }\r\n    }\r\n\r\n    this.animationFrameId = requestAnimationFrame(this.queueHandler);\r\n  };\r\n}\r\n","import { Room } from \"../room/room\";\r\nimport { Particle } from \"./particle\";\r\nimport { Direction, Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Random } from \"../utility/random\";\r\nimport { Player, PlayerDirection } from \"../player/player\";\r\nimport { Entity } from \"../entity/entity\";\r\n\r\nexport class ImageParticle extends Particle {\r\n  room: Room;\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n  s: number;\r\n  dx: number;\r\n  dy: number;\r\n  targetX: number;\r\n  targetY: number;\r\n  targetZ: number;\r\n  dz: number;\r\n  color: string;\r\n  alpha: number;\r\n  delay: number;\r\n  expirationTimer: number;\r\n  tileX: number;\r\n  tileY: number;\r\n  size: number;\r\n  static shotgun = (\r\n    room: Room,\r\n    cx: number,\r\n    cy: number,\r\n    tx: number,\r\n    ty: number,\r\n    tileX: number,\r\n    tileY: number,\r\n  ) => {\r\n    for (let i = 0; i < 4; i++) {\r\n      room.particles.push(\r\n        new ImageParticle(\r\n          room,\r\n          cx,\r\n          cy,\r\n          0,\r\n          Random.rand() * 0.5 + 0.3,\r\n          0,\r\n          0,\r\n          0,\r\n          tileX,\r\n          tileY,\r\n          0, //size\r\n        ),\r\n      );\r\n    }\r\n  };\r\n\r\n  static spawnCluster = (\r\n    level: Room,\r\n    cx: number,\r\n    cy: number,\r\n    tileX: number,\r\n    tileY: number,\r\n  ) => {\r\n    for (let i = Math.floor(Random.rand() * 3); i < 5; i++) {\r\n      level.particles.push(\r\n        new ImageParticle(\r\n          level,\r\n          cx + Random.rand() * 0.05 - 0.025, // x\r\n          cy + Random.rand() * 0.05 - 0.025, // y\r\n          Random.rand() * 0.5, // z\r\n          0.0625 * (i + 8), // s\r\n          0.025 * (Random.rand() * 2 - 1), //dx\r\n          0.025 * (Random.rand() * 2 - 1), //dy\r\n          0.2 * (Random.rand() - 1), //dz\r\n          tileX,\r\n          tileY,\r\n          [2, 1, 0, 1, 2, 2, 2][i], //size\r\n        ),\r\n      );\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    room: Room,\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n    s: number,\r\n    dx: number,\r\n    dy: number,\r\n    dz: number,\r\n    tileX: number,\r\n    tileY: number,\r\n    size: number,\r\n    delay?: number,\r\n    expirationTimer?: number,\r\n    targetX?: number,\r\n    targetY?: number,\r\n    targetZ?: number,\r\n  ) {\r\n    super();\r\n    this.room = room;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z; // Use provided height\r\n    this.s = s;\r\n    this.dx = dx;\r\n    this.dy = dy;\r\n    this.dz = dz;\r\n    this.tileX = tileX;\r\n    this.tileY = tileY;\r\n    this.size = size;\r\n    this.alpha = 1.0;\r\n    if (delay !== undefined) this.delay = delay;\r\n    this.targetX = targetX;\r\n    this.targetY = targetY;\r\n    this.targetZ = targetZ;\r\n    this.expirationTimer = 100; // Increased life duration\r\n    if (expirationTimer !== undefined) this.expirationTimer = expirationTimer;\r\n  }\r\n\r\n  render = () => {\r\n    let scale = GameConstants.TILESIZE;\r\n    let yOffset = this.z * scale;\r\n    let frame = this.s > 0.5 ? 1 : 0; // Placeholder frames for large and small particles\r\n    Game.ctx.imageSmoothingEnabled = false;\r\n\r\n    let adjustedTileX = this.tileX + this.size;\r\n    Game.drawFX(\r\n      adjustedTileX,\r\n      this.tileY,\r\n      1,\r\n      1,\r\n      this.x - this.alpha / 2,\r\n      this.y - this.z - this.alpha / 2,\r\n      1,\r\n      1,\r\n      this.shadeColor(),\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    Game.ctx.imageSmoothingEnabled = false;\r\n\r\n    if (this.targetX) this.x += 0.2 * (this.targetX - this.x) * delta;\r\n    else this.x += this.dx * delta;\r\n    if (this.targetY) this.y += 0.2 * (this.targetY - this.y) * delta;\r\n    else this.y += this.dy * delta;\r\n    if (this.targetZ) this.z += 0.2 * (this.targetZ - this.z) * delta;\r\n    else this.z += this.dz * delta;\r\n\r\n    this.dx *= Math.pow(0.97, delta);\r\n    this.dy *= Math.pow(0.97, delta);\r\n    if (this.z <= 0) {\r\n      this.z = 0;\r\n      this.dz *= -0.8;\r\n    }\r\n\r\n    this.dz -= 0.01 * delta;\r\n\r\n    this.expirationTimer -= delta;\r\n    if (this.expirationTimer <= 0) this.dead = true;\r\n\r\n    if (this.dead) return;\r\n\r\n    this.drawableY = this.y;\r\n\r\n    this.render();\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { statsTracker } from \"../game/stats\";\r\n\r\nexport class XPCounter {\r\n  private xp: number;\r\n  private level: number;\r\n\r\n  constructor() {\r\n    this.xp = 0;\r\n    this.level = 1;\r\n  }\r\n\r\n  static draw(delta: number) {\r\n    const xp = statsTracker.getXp();\r\n    // draw the xp counter\r\n\r\n    Game.ctx.save();\r\n\r\n    Game.ctx.fillStyle = \"rgba(255, 255, 0, 1)\";\r\n    Game.ctx.globalAlpha = 0.1;\r\n    Game.fillText(`XP: ${xp}`, 1, 20);\r\n    Game.ctx.restore();\r\n  }\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { WeaponFragments } from \"../../item/usable/weaponFragments\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class RookStatue extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 5;\r\n    this.tileY = 4;\r\n    this.hasShadow = true;\r\n    this.pushable = true;\r\n    this.name = \"rookStatue\";\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 25;\r\n    if (Random.rand() < 0.1) {\r\n      this.drops.push(new WeaponFragments(this.room, this.x, this.y));\r\n    } else {\r\n      this.drops.push(new Coin(this.room, this.x, this.y));\r\n    }\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Resource } from \"./resource\";\r\nimport { Coal } from \"../../item/resource/coal\";\r\nimport { Geode } from \"../../item/resource/geode\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class CoalResource extends Resource {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n\r\n    this.tileX = 12;\r\n    this.tileY = 0;\r\n    this.health = 1;\r\n    this.name = \"coal\";\r\n    if (Random.rand() < 0.1) {\r\n      this.drops.push(new Geode(this.room, this.x, this.y));\r\n    }\r\n    this.drops.push(new Coal(this.room, this.x, this.y));\r\n  }\r\n}\r\n","import { Direction, Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { HitWarning } from \"../drawable/hitWarning\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\nimport { MouseCursor } from \"../gui/mouseCursor\";\r\nimport { PostProcessor } from \"../gui/postProcess\";\r\nimport { statsTracker } from \"../game/stats\";\r\nimport { Utils } from \"../utility/utils\";\r\nimport { Spellbook } from \"../item/weapon/spellbook\";\r\nimport { Player } from \"./player\";\r\nimport { HoverText } from \"../gui/hoverText\";\r\nimport { Shadow } from \"../drawable/shadow\";\r\nimport { getOrCreateUserId, safeRecordGameStats } from \"../api\";\r\nimport { getDeviceInfo } from \"../utility/deviceDetector\";\r\nimport { VendingMachine } from \"../entity/object/vendingMachine\";\r\n\r\nexport class PlayerRenderer {\r\n  private player: Player;\r\n  private flashingFrame: number;\r\n  private guiHeartFrame: number;\r\n  private hurtAlpha: number;\r\n  private jumpY: number;\r\n  private motionSpeed: number;\r\n  slowMotionEnabled: boolean;\r\n  private jumpHeight: number;\r\n  private hurting: boolean;\r\n  private hurtingShield: boolean;\r\n  drawX: number;\r\n  drawY: number;\r\n  hitX: number;\r\n  hitY: number;\r\n  private frame: number;\r\n  private slowMotionTickDuration: number;\r\n  private lowHealthFrame: number;\r\n  private flashing: boolean;\r\n\r\n  constructor(player: Player) {\r\n    this.player = player;\r\n    this.jumpY = 0;\r\n    this.flashingFrame = 0;\r\n    this.guiHeartFrame = 0;\r\n    this.motionSpeed = 1;\r\n    this.hitX = 0;\r\n    this.hitY = 0;\r\n    this.drawX = 0;\r\n    this.drawY = 0;\r\n    this.hurtAlpha = 0.25;\r\n    this.jumpHeight = 0.25;\r\n    this.hurting = false;\r\n    this.hurtingShield = false;\r\n    this.slowMotionEnabled = false;\r\n    this.slowMotionTickDuration = 0;\r\n    this.flashing = false;\r\n    this.lowHealthFrame = 0;\r\n    this.frame = 0;\r\n  }\r\n\r\n  hurt = () => {\r\n    this.hurting = true;\r\n    this.hurtAlpha = 0.25;\r\n  };\r\n  hurtShield = () => {\r\n    this.hurtingShield = true;\r\n  };\r\n\r\n  flash = () => {\r\n    this.flashing = true;\r\n  };\r\n\r\n  disableFlash = () => {\r\n    this.flashing = false;\r\n  };\r\n\r\n  beginSlowMotion = () => {\r\n    this.slowMotionEnabled = true;\r\n  };\r\n\r\n  endSlowMotion = () => {\r\n    this.slowMotionEnabled = false;\r\n  };\r\n\r\n  setNewDrawXY = (x: number, y: number) => {\r\n    this.drawX += x - this.player.x;\r\n    this.drawY += y - this.player.y;\r\n  };\r\n\r\n  enableSlowMotion = () => {\r\n    if (this.motionSpeed < 1 && !this.slowMotionEnabled) {\r\n      this.motionSpeed *= 1.08;\r\n      if (this.motionSpeed >= 1) this.motionSpeed = 1;\r\n    }\r\n    if (this.slowMotionEnabled && this.motionSpeed > 0.25) {\r\n      this.motionSpeed *= 0.95;\r\n      if (this.motionSpeed < 0.25) this.motionSpeed = 0.25;\r\n    }\r\n  };\r\n\r\n  updateSlowMotion = () => {\r\n    if (this.slowMotionTickDuration > 0) this.slowMotionTickDuration -= 1;\r\n    if (this.slowMotionTickDuration === 0) this.slowMotionEnabled = false;\r\n  };\r\n\r\n  /**\r\n   * Draws the player sprite to the canvas.\r\n   * Added `ctx.save()` at the beginning and `ctx.restore()` at the end\r\n   * to ensure canvas state is preserved.\r\n   */\r\n  drawPlayerSprite = (delta: number) => {\r\n    const player = this.player;\r\n    Game.ctx.save(); // Save the current canvas state\r\n\r\n    if (this.drawSmear()) {\r\n      Game.drawMob(\r\n        this.setSmearFrame().x,\r\n        this.setSmearFrame().y,\r\n        1,\r\n        2,\r\n        player.x - this.drawX - this.hitX,\r\n        player.y - 1.45 - this.drawY - this.jumpY - this.hitY,\r\n        1,\r\n        2,\r\n        this.shadeColor(),\r\n      );\r\n    } else if (\r\n      this.player.inputHandler.mostRecentMoveInput === \"mouse\" &&\r\n      this.mouseDiagonal() &&\r\n      !GameConstants.isMobile\r\n    ) {\r\n      const angle = (this.player.inputHandler.mouseAngle() * 180) / Math.PI;\r\n      let diagonalTile = { x: 1, y: 18 };\r\n      if (angle > -150 && angle <= -120) diagonalTile = { x: 3, y: 18 };\r\n      if (angle > -60 && angle <= -30) diagonalTile = { x: 4, y: 18 };\r\n      if (angle > 30 && angle <= 60) diagonalTile = { x: 2, y: 18 };\r\n      if (angle > 120 && angle <= 150) diagonalTile = { x: 1, y: 18 };\r\n\r\n      Game.drawMob(\r\n        diagonalTile.x,\r\n        diagonalTile.y,\r\n        1,\r\n        2,\r\n        player.x - this.drawX - this.hitX,\r\n        player.y - 1.45 - this.drawY - this.jumpY - this.hitY,\r\n        1,\r\n        2,\r\n        this.shadeColor(),\r\n      );\r\n    } else {\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n      Game.drawMob(\r\n        1 + Math.floor(this.frame),\r\n        8 + player.direction * 2,\r\n        1,\r\n        2,\r\n        player.x - this.drawX - this.hitX,\r\n        player.y - 1.45 - this.drawY - this.jumpY - this.hitY,\r\n        1,\r\n        2,\r\n        this.shadeColor(),\r\n      );\r\n    }\r\n    if (player.inventory.getArmor() && player.inventory.getArmor().health > 0) {\r\n      // TODO draw armor\r\n    }\r\n\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  mouseDiagonal = () => {\r\n    const angle = (this.player.inputHandler.mouseAngle() * 180) / Math.PI;\r\n    if (angle > 30 && angle < 60) return true;\r\n    if (angle > 120 && angle < 150) return true;\r\n    if (angle > -150 && angle < -120) return true;\r\n    if (angle > -60 && angle < -30) return true;\r\n    return false;\r\n  };\r\n\r\n  drawSmear = () => {\r\n    if (this.player.direction === this.player.lastDirection) return false;\r\n    let t = 100;\r\n    const lastDir = this.player.lastDirection;\r\n    const dir = this.player.direction;\r\n    if (\r\n      (dir === Direction.UP && lastDir === Direction.DOWN) ||\r\n      (dir === Direction.DOWN && lastDir === Direction.UP) ||\r\n      (dir === Direction.LEFT && lastDir === Direction.RIGHT) ||\r\n      (dir === Direction.RIGHT && lastDir === Direction.LEFT)\r\n    )\r\n      t = 150;\r\n    const timeSince = Date.now() - this.player.movement.lastChangeDirectionTime;\r\n    if (timeSince <= t) return true;\r\n    else return false;\r\n  };\r\n\r\n  setSmearFrame = () => {\r\n    let tile = { x: 1, y: 18 };\r\n    const timeSince = Date.now() - this.player.movement.lastChangeDirectionTime;\r\n    const t = 50;\r\n\r\n    if (\r\n      (this.player.direction === Direction.UP &&\r\n        this.player.lastDirection === Direction.LEFT) ||\r\n      (this.player.direction === Direction.LEFT &&\r\n        this.player.lastDirection === Direction.UP)\r\n    ) {\r\n      tile.x = 3;\r\n      return tile;\r\n    }\r\n    if (\r\n      (this.player.direction === Direction.UP &&\r\n        this.player.lastDirection === Direction.RIGHT) ||\r\n      (this.player.direction === Direction.RIGHT &&\r\n        this.player.lastDirection === Direction.UP)\r\n    ) {\r\n      tile.x = 4;\r\n      return tile;\r\n    }\r\n    if (\r\n      (this.player.direction === Direction.DOWN &&\r\n        this.player.lastDirection === Direction.RIGHT) ||\r\n      (this.player.direction === Direction.RIGHT &&\r\n        this.player.lastDirection === Direction.DOWN)\r\n    ) {\r\n      tile.x = 2;\r\n      return tile;\r\n    }\r\n    if (\r\n      (this.player.direction === Direction.DOWN &&\r\n        this.player.lastDirection === Direction.LEFT) ||\r\n      (this.player.direction === Direction.LEFT &&\r\n        this.player.lastDirection === Direction.DOWN)\r\n    ) {\r\n      tile.x = 1;\r\n      return tile;\r\n    }\r\n    if (\r\n      this.player.direction === Direction.DOWN &&\r\n      this.player.lastDirection === Direction.UP\r\n    ) {\r\n      if (timeSince < t) tile.x = 3;\r\n      if (timeSince >= t && timeSince < t * 2) {\r\n        tile.x = 1;\r\n        tile.y = 14;\r\n      }\r\n      if (timeSince >= t * 2 && timeSince < t * 3) tile.x = 1;\r\n      return tile;\r\n    }\r\n    if (\r\n      this.player.direction === Direction.LEFT &&\r\n      this.player.lastDirection === Direction.RIGHT\r\n    ) {\r\n      if (timeSince < t) tile.x = 2;\r\n      if (timeSince >= t && timeSince < t * 2) {\r\n        tile.x = 1;\r\n        tile.y = 8;\r\n      }\r\n      if (timeSince >= t * 2 && timeSince < t * 3) tile.x = 1;\r\n      return tile;\r\n    }\r\n    if (\r\n      this.player.direction === Direction.UP &&\r\n      this.player.lastDirection === Direction.DOWN\r\n    ) {\r\n      if (timeSince < t) tile.x = 2;\r\n      if (timeSince >= t && timeSince < t * 2) {\r\n        tile.x = 1;\r\n        tile.y = 12;\r\n      }\r\n      if (timeSince >= t * 2 && timeSince < t * 3) tile.x = 4;\r\n      return tile;\r\n    }\r\n    if (\r\n      this.player.direction === Direction.RIGHT &&\r\n      this.player.lastDirection === Direction.LEFT\r\n    ) {\r\n      if (timeSince < t) tile.x = 1;\r\n      if (timeSince >= t && timeSince < t * 2) {\r\n        tile.x = 1;\r\n        tile.y = 8;\r\n      }\r\n      if (timeSince >= t * 2 && timeSince < t * 3) tile.x = 2;\r\n      return tile;\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    const player = this.player;\r\n    Game.ctx.save();\r\n    this.updateDrawXY(delta);\r\n    player.drawableY = player.y;\r\n    this.flashingFrame += (delta * 12) / GameConstants.FPS;\r\n    if (!player.dead) {\r\n      Shadow.draw(player.x - this.drawX, player.y - this.drawY, 1, 1);\r\n      //this.drawTileCursor(delta);\r\n\r\n      if (!this.flashing || Math.floor(this.flashingFrame) % 2 === 0) {\r\n        this.drawPlayerSprite(delta);\r\n      }\r\n    }\r\n    this.drawSpellBeam(delta);\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawSpellBeam = (delta: number) => {\r\n    Game.ctx.save();\r\n\r\n    if (this.player.inventory.getWeapon() instanceof Spellbook) {\r\n      const spellbook = this.player.inventory.getWeapon() as Spellbook;\r\n      spellbook.drawBeams(\r\n        this.player.x - this.drawX,\r\n        this.player.y - this.drawY,\r\n        delta,\r\n      );\r\n    }\r\n\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  shadeColor = () => {\r\n    const player = this.player;\r\n\r\n    if (!GameConstants.CUSTOM_SHADER_COLOR_ENABLED) {\r\n      return \"black\";\r\n    } else {\r\n      const room = (this.player as any).getRoom\r\n        ? (this.player as any).getRoom()\r\n        : this.player.game.levels[this.player.depth].rooms[this.player.levelID];\r\n      return Utils.rgbToHex(\r\n        room.col[player.x][player.y][0],\r\n        room.col[player.x][player.y][1],\r\n        room.col[player.x][player.y][2],\r\n      );\r\n    }\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    Game.ctx.save(); // Save the current canvas state\r\n\r\n    this.player.healthBar.draw(\r\n      delta,\r\n      this.player.health,\r\n      this.player.maxHealth,\r\n      this.player.x - this.drawX,\r\n      this.player.y - this.drawY,\r\n      !this.flashing || Math.floor(this.flashingFrame) % 2 === 0,\r\n    );\r\n\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  updateDrawXY = (delta: number) => {\r\n    if (!this.doneMoving()) {\r\n      this.drawX *= 0.85 ** delta;\r\n      this.drawY *= 0.85 ** delta;\r\n      this.drawX = Math.abs(this.drawX) < 0.01 ? 0 : this.drawX;\r\n      this.drawY = Math.abs(this.drawY) < 0.01 ? 0 : this.drawY;\r\n    }\r\n    if (this.doneHitting()) {\r\n      this.jump(delta);\r\n    }\r\n\r\n    if (!this.doneHitting()) {\r\n      this.updateHitXY(delta);\r\n    }\r\n\r\n    this.enableSlowMotion();\r\n    GameConstants.ANIMATION_SPEED = this.motionSpeed;\r\n  };\r\n\r\n  updateHitXY = (delta: number) => {\r\n    // Use exponential decay like updateDrawXY for stable behavior with variable frame rates\r\n    this.hitX *= 0.7 ** delta;\r\n    this.hitY *= 0.7 ** delta;\r\n\r\n    // Clamp values to prevent extreme behavior\r\n    this.hitX = Math.min(Math.max(this.hitX, -1), 1);\r\n    this.hitY = Math.min(Math.max(this.hitY, -1), 1);\r\n\r\n    // Snap to zero when values get very small\r\n    if (Math.abs(this.hitX) < 0.01) this.hitX = 0;\r\n    if (Math.abs(this.hitY) < 0.01) this.hitY = 0;\r\n  };\r\n\r\n  doneMoving = (): boolean => {\r\n    let EPSILON = 0.01;\r\n    return Math.abs(this.drawX) < EPSILON && Math.abs(this.drawY) < EPSILON;\r\n  };\r\n\r\n  doneHitting = (): boolean => {\r\n    let EPSILON = 0.01;\r\n    return Math.abs(this.hitX) < EPSILON && Math.abs(this.hitY) < EPSILON;\r\n  };\r\n\r\n  snapDrawStuff = () => {\r\n    this.drawX = 0;\r\n    this.drawY = 0;\r\n    this.hitX = 0;\r\n    this.hitY = 0;\r\n    this.jumpY = 0;\r\n  };\r\n\r\n  setHitXY = (x: number, y: number) => {\r\n    this.hitX = x;\r\n    this.hitY = y;\r\n  };\r\n\r\n  drawGUI = (delta: number, transitioning: boolean = false) => {\r\n    Game.ctx.save();\r\n    if (!this.player.dead) {\r\n      //if (this.player.menu.open) this.player.menu.draw();\r\n      if (this.player.bestiary) this.player.bestiary.draw(delta);\r\n\r\n      if (this.guiHeartFrame > 0) this.guiHeartFrame += delta;\r\n      if (this.guiHeartFrame > 5) {\r\n        this.guiHeartFrame = 0;\r\n      }\r\n\r\n      const armor = this.player.inventory.getArmor();\r\n\r\n      // Get the quickbar's left edge position\r\n      const quickbarStartX =\r\n        this.player.inventory.getQuickbarStartX() + (armor ? -34 : -24);\r\n      // Convert to tile coordinates\r\n      let heartStartX = quickbarStartX / GameConstants.TILESIZE;\r\n\r\n      // Ensure hearts don't go off the left edge of the screen\r\n      if (heartStartX < 0.25) {\r\n        heartStartX = 0.25;\r\n      }\r\n\r\n      for (let i = 0; i < this.player.maxHealth; i++) {\r\n        let shake = 0;\r\n        let shakeY = 0;\r\n        if (this.player.health <= 1) {\r\n          shake =\r\n            Math.round(Math.sin(Date.now() / 25 / (i + 1)) + i / 2) /\r\n            2 /\r\n            GameConstants.TILESIZE;\r\n          shakeY =\r\n            Math.round(Math.sin(Date.now() / 25 / (i + 2)) + i / 2) /\r\n            2 /\r\n            GameConstants.TILESIZE;\r\n        }\r\n        let frame = this.guiHeartFrame > 0 ? 1 : 0;\r\n        let offsetY = GameConstants.WIDTH > 175 ? 0 : -1.25;\r\n\r\n        if (i >= Math.floor(this.player.health)) {\r\n          if (\r\n            i == Math.floor(this.player.health) &&\r\n            (this.player.health * 2) % 2 == 1\r\n          ) {\r\n            // draw half heart\r\n            Game.drawFX(\r\n              4,\r\n              2,\r\n              0.75,\r\n              0.75,\r\n              heartStartX + i / 1.5 + shake,\r\n              GameConstants.HEIGHT / GameConstants.TILESIZE -\r\n                1 +\r\n                shakeY +\r\n                offsetY,\r\n              0.75,\r\n              0.75,\r\n            );\r\n          } else {\r\n            Game.drawFX(\r\n              3,\r\n              2,\r\n              0.75,\r\n              0.75,\r\n              heartStartX + i / 1.5 + shake,\r\n              GameConstants.HEIGHT / GameConstants.TILESIZE -\r\n                1 +\r\n                shakeY +\r\n                offsetY,\r\n              0.75,\r\n              0.75,\r\n            );\r\n          }\r\n        } else {\r\n          Game.drawFX(\r\n            frame,\r\n            2,\r\n            0.75,\r\n            0.75,\r\n            heartStartX + i / 1.5 + shake,\r\n            GameConstants.HEIGHT / GameConstants.TILESIZE -\r\n              1 +\r\n              shakeY +\r\n              offsetY,\r\n            0.75,\r\n            0.75,\r\n          );\r\n        }\r\n      }\r\n      //this.drawCooldownBar();\r\n      if (armor) armor.drawGUI(delta, this.player.maxHealth, quickbarStartX);\r\n      if (!transitioning) this.player.inventory.draw(delta);\r\n      const inventoryOpen = this.player.inventory.isOpen;\r\n      const quickbarOpen =\r\n        this.player.inventory.isPointInQuickbarBounds(\r\n          MouseCursor.getInstance().getPosition().x,\r\n          MouseCursor.getInstance().getPosition().y,\r\n        ).inBounds && !this.player.inventory.isOpen;\r\n      const inVendingMachine =\r\n        this.player.openVendingMachine &&\r\n        VendingMachine.isPointInVendingMachineBounds(\r\n          MouseCursor.getInstance().getPosition().x,\r\n          MouseCursor.getInstance().getPosition().y,\r\n          this.player.openVendingMachine,\r\n        );\r\n      const inInventoryBounds = this.player.inventory.isPointInInventoryBounds(\r\n        MouseCursor.getInstance().getPosition().x,\r\n        MouseCursor.getInstance().getPosition().y,\r\n      ).inBounds;\r\n\r\n      const drawFor =\r\n        GameConstants.IN_GAME_HOVER_TEXT_ENABLED &&\r\n        !inventoryOpen &&\r\n        !quickbarOpen &&\r\n        !this.player.openVendingMachine\r\n          ? \"inGame\"\r\n          : GameConstants.INVENTORY_HOVER_TEXT_ENABLED &&\r\n              ((inventoryOpen && inInventoryBounds) || quickbarOpen)\r\n            ? \"inventory\"\r\n            : GameConstants.VENDING_MACHINE_HOVER_TEXT_ENABLED &&\r\n                inVendingMachine\r\n              ? \"vendingMachine\"\r\n              : \"none\";\r\n\r\n      if (GameConstants.HOVER_TEXT_ENABLED) {\r\n        HoverText.draw(\r\n          delta,\r\n          this.player.x,\r\n          this.player.y,\r\n          this.player.getRoom\r\n            ? this.player.getRoom()\r\n            : this.player.game.levels[this.player.depth].rooms[\r\n                this.player.levelID\r\n              ],\r\n          this.player,\r\n          MouseCursor.getInstance().getPosition().x,\r\n          MouseCursor.getInstance().getPosition().y,\r\n          drawFor,\r\n        );\r\n      }\r\n    } else {\r\n      Game.ctx.fillStyle = LevelConstants.LEVEL_TEXT_COLOR;\r\n      const gameStats = statsTracker.getStats();\r\n      const enemies = gameStats.enemies;\r\n      // Count the occurrences of each enemy\r\n      const enemyCounts = enemies.reduce(\r\n        (acc, enemy) => {\r\n          acc[enemy] = (acc[enemy] || 0) + 1;\r\n          return acc;\r\n        },\r\n        {} as Record<string, number>,\r\n      );\r\n\r\n      // Create individual lines\r\n      const lines: string[] = [];\r\n\r\n      // Line 1: Game Over or slain by\r\n      if (this.player.lastHitBy !== \"enemy\") {\r\n        lines.push(`You were slain by ${this.player.lastHitBy}.`);\r\n      } else {\r\n        lines.push(\"Game Over\");\r\n      }\r\n\r\n      const diedInRoom = (this.player as any).getRoom\r\n        ? (this.player as any).getRoom()\r\n        : this.player.game.levels[this.player.depth].rooms[this.player.levelID];\r\n      lines.push(`Depth reached: ${diedInRoom.depth}`);\r\n\r\n      // Line 2: Enemies killed\r\n      lines.push(\r\n        `${Object.values(enemyCounts).reduce(\r\n          (a, b) => a + b,\r\n          0,\r\n        )} enemies killed in total:`,\r\n      );\r\n\r\n      // Build enemy lines\r\n      const enemyLines: string[] = [];\r\n      Object.entries(enemyCounts).forEach(([enemy, count]) => {\r\n        enemyLines.push(`${enemy} x${count}`);\r\n      });\r\n\r\n      // Line after enemy counts: Restart instruction\r\n      let restartButton = \"Press space or click to restart\";\r\n      if (GameConstants.isMobile) restartButton = \"Tap to restart\";\r\n      const lineHeight = Game.letter_height + 2; // Adjust spacing as needed\r\n\r\n      // Reserve bottom area for restart + feedback button + margins\r\n      const restartAreaHeight = lineHeight * 2; // restart text + small spacing\r\n      const feedbackButtonHeight = 16; // from LinkButton\r\n      const bottomMargin = 10;\r\n      const reservedBottomHeight =\r\n        restartAreaHeight + feedbackButtonHeight + bottomMargin + 8; // extra padding\r\n\r\n      // Compute available vertical space for content between top margin and reserved bottom\r\n      const topMargin = 20;\r\n      const availableHeight = Math.max(\r\n        0,\r\n        GameConstants.HEIGHT - reservedBottomHeight - topMargin,\r\n      );\r\n\r\n      // Fixed header lines (Game Over / Depth / Total)\r\n      const headerLines = lines.length; // currently 3\r\n      const headerHeight = headerLines * lineHeight + lineHeight * 0.5; // slight extra spacing\r\n\r\n      // How many enemy lines fit\r\n      const remainingForEnemies = Math.max(0, availableHeight - headerHeight);\r\n      const enemiesPerPageBase = Math.max(\r\n        1,\r\n        Math.floor(remainingForEnemies / lineHeight),\r\n      );\r\n\r\n      // Pagination setup\r\n      let enemiesPerPage = enemiesPerPageBase;\r\n      const totalEnemyLines = enemyLines.length;\r\n      // Precompute pages; if more than one page, reserve a row for page indicator by reducing capacity by one\r\n      let totalPages = Math.max(1, Math.ceil(totalEnemyLines / enemiesPerPage));\r\n      if (totalPages > 1) {\r\n        enemiesPerPage = Math.max(1, enemiesPerPageBase - 1);\r\n        totalPages = Math.max(1, Math.ceil(totalEnemyLines / enemiesPerPage));\r\n      }\r\n      this.player.deathScreenPageCount = totalPages;\r\n      const currentPage = Math.min(\r\n        Math.max(0, this.player.deathScreenPageIndex || 0),\r\n        totalPages - 1,\r\n      );\r\n      this.player.deathScreenPageIndex = currentPage;\r\n\r\n      const startIdx = currentPage * enemiesPerPage;\r\n      const endIdx = Math.min(totalEnemyLines, startIdx + enemiesPerPage);\r\n      const pageEnemyLines = enemyLines.slice(startIdx, endIdx);\r\n\r\n      // Compute starting Y to vertically position the block within available area\r\n      let startY = topMargin;\r\n\r\n      // Draw headers\r\n      lines.forEach((line, index) => {\r\n        const textWidth = Game.measureText(line).width;\r\n        const spacing = index <= 1 ? lineHeight * 1.5 : lineHeight;\r\n        Game.fillText(line, GameConstants.WIDTH / 2 - textWidth / 2, startY);\r\n        startY += spacing;\r\n      });\r\n\r\n      // Draw enemies for current page\r\n      pageEnemyLines.forEach((line) => {\r\n        const textWidth = Game.measureText(line).width;\r\n        Game.fillText(line, GameConstants.WIDTH / 2 - textWidth / 2, startY);\r\n        startY += lineHeight;\r\n      });\r\n\r\n      // Draw page indicator if multiple pages\r\n      if (totalPages > 1) {\r\n        const indicator = `Page ${currentPage + 1}/${totalPages}`;\r\n        const w = Game.measureText(indicator).width;\r\n        const y = GameConstants.HEIGHT - reservedBottomHeight - 6;\r\n        Game.fillText(indicator, GameConstants.WIDTH / 2 - w / 2, y);\r\n      }\r\n\r\n      // Draw the restart button above the feedback button\r\n      const restartTextWidth = Game.measureText(restartButton).width;\r\n      const restartY = GameConstants.HEIGHT - reservedBottomHeight + 4;\r\n      Game.fillText(\r\n        restartButton,\r\n        GameConstants.WIDTH / 2 - restartTextWidth / 2,\r\n        restartY,\r\n      );\r\n\r\n      // Draw feedback button at the very bottom reserved area\r\n      if (this.player.game.feedbackButton) {\r\n        const feedbackY = restartY + lineHeight + 6;\r\n\r\n        const textWidth = Game.measureText(\r\n          this.player.game.feedbackButton.text,\r\n        ).width;\r\n        const buttonWidth = textWidth + 10;\r\n        const centeredX = (GameConstants.WIDTH - buttonWidth) / 2;\r\n\r\n        this.player.game.feedbackButton.x = centeredX;\r\n        this.player.game.feedbackButton.y = feedbackY;\r\n        this.player.game.feedbackButton.draw();\r\n      }\r\n\r\n      // Navigation hint for pagination on desktop\r\n      if (!GameConstants.isMobile && totalPages > 1) {\r\n        const hint = \"Use arrow keys to view more\";\r\n        const hintWidth = Game.measureText(hint).width;\r\n        const hintY =\r\n          (this.player.game.feedbackButton?.y || GameConstants.HEIGHT - 20) +\r\n          feedbackButtonHeight +\r\n          4;\r\n        if (hintY < GameConstants.HEIGHT - 2) {\r\n          Game.fillText(hint, GameConstants.WIDTH / 2 - hintWidth / 2, hintY);\r\n        }\r\n      }\r\n\r\n      if (!this.player.game.hasRecordedStats) {\r\n        // The default value for `lastHitBy` is \"enemy\", so we compare to that to determine if\r\n        // the player was killed by an enemy\r\n        const gameDurationMs = Date.now() - this.player.game.gameStartTimeMs;\r\n        const inventoryItems = this.player.inventory.items\r\n          .filter((item) => item?.name && item?.stackCount)\r\n          .map((item) => ({\r\n            name: item.name,\r\n            stackSize: item.stackCount,\r\n          }));\r\n\r\n        const { createGameState } = require(\"../game/gameState\");\r\n\r\n        // Report game stats to Turnarchist backend server\r\n        safeRecordGameStats({\r\n          userId: getOrCreateUserId(),\r\n          xp: gameStats.xp,\r\n          level: gameStats.level,\r\n          gameDurationMs,\r\n          inventory: inventoryItems,\r\n          killedBy: this.player.lastHitBy ?? null,\r\n          enemiesKilled: enemies,\r\n          damageDone: gameStats.damageDone,\r\n          damageTaken: gameStats.damageTaken,\r\n          depthReached: diedInRoom.depth,\r\n          turnsPassed: gameStats.turnsPassed,\r\n          coinsCollected: gameStats.coinsCollected,\r\n          itemsCollected: gameStats.itemsCollected,\r\n          deviceType: getDeviceInfo(),\r\n          sidePathsEntered: gameStats.sidePathsEntered,\r\n          weaponChoice: gameStats.weaponChoice,\r\n          gameState: createGameState(this.player.game),\r\n          gameVersion: this.player.game.version,\r\n          loadedFromSaveFile: this.player.game.loadedFromSaveFile,\r\n        });\r\n        this.player.game.hasRecordedStats = true;\r\n      }\r\n    }\r\n    PostProcessor.draw(delta);\r\n    if (this.hurting) this.drawHurt(delta);\r\n\r\n    if (this.player.mapToggled === true) this.player.map.draw(delta);\r\n    this.drawTileCursor(delta);\r\n    this.player.setCursorIcon();\r\n\r\n    //this.drawInventoryButton(delta);\r\n    if (this.player.menu.open) this.player.menu.draw();\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawCooldownBar = () => {\r\n    Game.ctx.save();\r\n    if (this.player.cooldownRemaining > 0) {\r\n      this.player.cooldownRemaining =\r\n        1 -\r\n        (Date.now() - this.player.movement.lastMoveTime) /\r\n          this.player.movement.adjustedCooldown;\r\n    } else this.player.cooldownRemaining = 0;\r\n    const tile = GameConstants.TILESIZE;\r\n    Game.drawFX(\r\n      12 +\r\n        Math.max(\r\n          0,\r\n          Math.min(14, Math.floor(17 * this.player.cooldownRemaining)),\r\n        ),\r\n      2,\r\n      1,\r\n      1,\r\n      0.45,\r\n      GameConstants.HEIGHT / tile - 2.125,\r\n      1,\r\n      1,\r\n    );\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawHurt = (delta: number) => {\r\n    Game.ctx.save(); // Save the current canvas state\r\n    Game.ctx.globalAlpha = this.hurtAlpha;\r\n    this.hurtAlpha -= (this.hurtAlpha / 10) * delta;\r\n    if (this.hurtAlpha <= 0.01) {\r\n      this.hurtAlpha = 0;\r\n      this.hurting = false;\r\n      this.hurtingShield = false;\r\n    }\r\n    Game.ctx.globalCompositeOperation = \"source-over\";\r\n    Game.ctx.fillStyle = \"#cc3333\"; // bright but not fully saturated red\r\n    if (this.hurtingShield) {\r\n      Game.ctx.fillStyle = \"#639bff\"; // bright but not fully saturated blue\r\n    }\r\n\r\n    Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  drawLowHealth = (delta: number) => {\r\n    Game.ctx.save();\r\n    //unused\r\n    if (this.player.health <= 1 && !this.player.dead) {\r\n      // Calculate pulsating alpha for the vignette effect\r\n      const lowHealthAlpha = 0.5; //Math.sin(this.lowHealthFrame / 10) * 0.5 + 0.5;\r\n      Game.ctx.globalAlpha = lowHealthAlpha;\r\n      this.lowHealthFrame += delta;\r\n\r\n      const gradientBottom = Game.ctx.createLinearGradient(\r\n        0,\r\n        GameConstants.HEIGHT,\r\n        0,\r\n        (GameConstants.HEIGHT * 2) / 3,\r\n      );\r\n\r\n      // Define gradient color stops\r\n      [gradientBottom].forEach((gradient) => {\r\n        gradient.addColorStop(0, \"#cc3333\"); // Solid red at edges\r\n        gradient.addColorStop(1, \"rgba(0, 0, 0, 0)\"); // Transparent toward center\r\n      });\r\n\r\n      // Draw the gradients\r\n      Game.ctx.globalCompositeOperation = \"source-over\";\r\n\r\n      Game.ctx.fillStyle = gradientBottom;\r\n      Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n\r\n      // Reset composite operation and alpha\r\n      Game.ctx.globalCompositeOperation = \"source-over\";\r\n      Game.ctx.globalAlpha = 1.0;\r\n    } else {\r\n      this.lowHealthFrame = 0;\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  heartbeat = () => {\r\n    this.guiHeartFrame = 1;\r\n  };\r\n\r\n  /**\r\n   * Draws the tile cursor to the canvas.\r\n   * Added `ctx.save()` at the beginning and `ctx.restore()` at the end\r\n   * to ensure canvas state is preserved.\r\n   */\r\n  drawTileCursor = (delta: number) => {\r\n    if (\r\n      this.player.inventory.isOpen ||\r\n      this.player.inputHandler.mostRecentMoveInput === \"keyboard\" ||\r\n      GameConstants.isMobile\r\n    )\r\n      return;\r\n    Game.ctx.save(); // Save the current canvas state\r\n\r\n    if (\r\n      !this.player.mouseInLine() ||\r\n      !this.player.isMouseAboveFloor() ||\r\n      this.player.isMouseOnPlayerTile()\r\n    )\r\n      return;\r\n    let tileX = 24; //inRange ? 22 : 24;\r\n    let tileY = 5;\r\n\r\n    Game.drawFX(\r\n      tileX + Math.floor(HitWarning.frame),\r\n      tileY,\r\n      1,\r\n      1,\r\n      this.player.tileCursor.x + this.player.drawX,\r\n      this.player.tileCursor.y + this.player.drawY,\r\n      1,\r\n      1,\r\n    );\r\n\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  jump = (delta: number) => {\r\n    let j = Math.max(Math.abs(this.drawX), Math.abs(this.drawY));\r\n    this.jumpY = Math.abs(Math.sin(j * Math.PI) * this.jumpHeight);\r\n    if (Math.abs(this.jumpY) < 0.01) this.jumpY = 0;\r\n    if (this.jumpY > this.jumpHeight) this.jumpY = this.jumpHeight;\r\n  };\r\n}\r\n","import { Player } from \"../player/player\";\r\nimport { Game } from \"../game\";\r\nimport { Room } from \"../room/room\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { SkinType, Tile } from \"./tile\";\r\nimport { DownLadder } from \"./downLadder\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { Lockable, LockType } from \"./lockable\";\r\nimport { Passageway } from \"./passageway\";\r\nimport { Shadow } from \"../drawable/shadow\";\r\n\r\nexport class UpLadder extends Passageway {\r\n  linkedRoom: Room;\r\n  isRope = false;\r\n  depth: number;\r\n  lockable: Lockable;\r\n  isSidePath = false;\r\n\r\n  constructor(\r\n    room: Room,\r\n    game: Game,\r\n    x: number,\r\n    y: number,\r\n    lockType: LockType = LockType.NONE,\r\n  ) {\r\n    super(room, game, x, y);\r\n    this.depth = room.depth;\r\n\r\n    // Initialize lockable with default config\r\n    this.lockable = new Lockable(game, {\r\n      lockType: lockType,\r\n      isTopDoor: true,\r\n    });\r\n  }\r\n\r\n  onCollide = (player: Player) => {\r\n    if (!this.game) {\r\n      console.error(\"Game instance is undefined in UpLadder:\", this);\r\n      return;\r\n    }\r\n\r\n    // Check if locked\r\n    if (this.lockable.isLocked()) {\r\n      if (this.lockable.canUnlock(player)) {\r\n        this.lockable.unlock(player);\r\n      }\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (!this.linkedRoom) {\r\n        this.linkRoom();\r\n      }\r\n      // If we have an exact parent down-ladder coordinate recorded, stash it on the target room\r\n      const exitPos = (this as any).exitDownLadderPos as\r\n        | { x: number; y: number }\r\n        | undefined;\r\n      // If this is a rope (sidepath) exit, switch active path back to the linked room's path\r\n      if (this.isRope && this.linkedRoom) {\r\n        (this.game as any).currentPathId = this.linkedRoom.pathId || \"main\";\r\n      }\r\n      this.game.changeLevelThroughLadder(player, this);\r\n      if (exitPos && this.linkedRoom) {\r\n        (this.linkedRoom as any).__entryPositionFromLadder = exitPos;\r\n        try {\r\n          console.log(\r\n            `UpLadder.onCollide: wrote __entryPositionFromLadder (${exitPos.x}, ${exitPos.y}) onto parent room gid=${(this.linkedRoom as any)?.globalId}`,\r\n          );\r\n        } catch {}\r\n      }\r\n      Sound.forestMusic.pause();\r\n      Sound.caveMusic.pause();\r\n    } catch (error) {\r\n      console.error(\"Error during changeLevelThroughLadder:\", error);\r\n    }\r\n  };\r\n\r\n  getName = () => {\r\n    return this.isRope ? \"rope up\" : \"staircase up\";\r\n  };\r\n\r\n  linkRoom = () => {\r\n    // For sidepaths (rope), link back to the room that contains the DownLadder\r\n    if (this.isRope && !this.linkedRoom) {\r\n      const level = this.game.levels[this.depth];\r\n      if (level) {\r\n        // Prefer any room in an earlier mapGroup that contains a sidepath DownLadder\r\n        for (const candidate of level.rooms) {\r\n          if (candidate.mapGroup < this.room.mapGroup) {\r\n            for (\r\n              let x = candidate.roomX;\r\n              x < candidate.roomX + candidate.width;\r\n              x++\r\n            ) {\r\n              for (\r\n                let y = candidate.roomY;\r\n                y < candidate.roomY + candidate.height;\r\n                y++\r\n              ) {\r\n                const t = candidate.roomArray[x]?.[y];\r\n                if (t instanceof DownLadder && t.isSidePath) {\r\n                  this.linkedRoom = candidate;\r\n                  t.linkedRoom = this.room;\r\n                  return;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        // Fallback: link to level start if not found\r\n        // Prefer stable map lookup when available\r\n        const anyRoom = (level as any).roomsById\r\n          ? (level as any).roomsById.values().next().value\r\n          : level.rooms[0];\r\n        this.linkedRoom = level.startRoom || anyRoom;\r\n        return;\r\n      }\r\n    }\r\n    // Main path: link to previous depth exit\r\n    if (this.depth - 1 >= 0 && this.game.levels[this.depth - 1]) {\r\n      this.linkedRoom = this.game.levels[this.depth - 1].exitRoom;\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    let xx = 29;\r\n    let yy = 0;\r\n    if (this.isRope) {\r\n      xx = 16;\r\n      yy = 1;\r\n    }\r\n\r\n    Game.drawTile(\r\n      1,\r\n      this.skin,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n    if (!this.isRope) {\r\n      Game.drawTile(\r\n        xx,\r\n        yy,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y - 1,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(0, -1, false),\r\n      );\r\n    } else {\r\n      Game.drawTile(\r\n        xx,\r\n        yy + 0,\r\n        1,\r\n        2,\r\n        this.x,\r\n        this.y - 1,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(0, -1, false),\r\n      );\r\n    }\r\n    Game.drawTile(\r\n      xx,\r\n      yy + 1,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n    Shadow.draw(this.x, this.y + 0.25);\r\n  };\r\n\r\n  drawAboveShading = (delta: number) => {\r\n    // Update lockable animation\r\n    this.lockable.update(delta);\r\n\r\n    // Draw lock icon\r\n    this.lockable.drawIcon(this.x, this.y, delta);\r\n\r\n    // Original floating animation\r\n    if (this.frame > 100) this.frame = 0;\r\n    this.frame += 1 * delta;\r\n    let multiplier = 0.125;\r\n\r\n    Game.drawFX(\r\n      2,\r\n      2,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y - 1.25 + multiplier * Math.sin((this.frame * Math.PI) / 50),\r\n      1,\r\n      1,\r\n    );\r\n  };\r\n\r\n  drawAbovePlayer = (delta: number) => {\r\n    if (this.isRope)\r\n      Game.drawTile(\r\n        16,\r\n        1,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y - 1,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n  };\r\n\r\n  isLocked(): boolean {\r\n    return this.lockable.isLocked();\r\n  }\r\n}\r\n","import { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Entity } from \"../../entity/entity\";\r\nimport { Drawable } from \"../../drawable/drawable\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Game } from \"../../game\";\r\nimport { SkinType } from \"../../tile/tile\";\r\n\r\nexport abstract class Decoration extends Drawable {\r\n  x: number;\r\n  y: number;\r\n  room: Room;\r\n  skin: SkinType;\r\n  isDoor: boolean;\r\n  opacity: number;\r\n  applySkin: boolean;\r\n\r\n  constructor(room: Room, x: number, y: number) {\r\n    super();\r\n    this.skin = room.skin;\r\n    this.room = room;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.drawableY = y;\r\n    this.isDoor = false;\r\n    this.opacity = 1;\r\n    this.applySkin = false;\r\n  }\r\n\r\n  shadeAmount = (offsetX: number = 0, offsetY: number = 0) => {\r\n    if (GameConstants.SMOOTH_LIGHTING) return 0;\r\n    return this.room.softVis[this.x + offsetX][this.y + offsetY];\r\n  };\r\n\r\n  isSolid = (): boolean => {\r\n    return false;\r\n  };\r\n  canCrushEnemy = (): boolean => {\r\n    return false;\r\n  };\r\n  isOpaque = (): boolean => {\r\n    return false;\r\n  };\r\n  onCollide = (player: Player) => {};\r\n  onCollideEnemy = (enemy: Entity) => {};\r\n  tick = () => {};\r\n  tickEnd = () => {};\r\n\r\n  draw = (delta: number) => {};\r\n  drawUnderPlayer = (delta: number) => {\r\n    let tileY = 1;\r\n    if (this.applySkin) tileY = this.skin;\r\n\r\n    Game.drawTile(\r\n      1,\r\n      tileY,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n  drawAbovePlayer = (delta: number) => {};\r\n  drawAboveShading = (delta: number) => {};\r\n}\r\n","import { Room } from \"../room/room\";\r\n\r\nexport class LightSource {\r\n  x: number;\r\n  y: number;\r\n  r: number;\r\n  c: [number, number, number];\r\n  b: number = 1;\r\n\r\n  oldX: number;\r\n  oldY: number;\r\n  oldR: number;\r\n  oldC: [number, number, number];\r\n  oldB: number;\r\n  dead: boolean = false;\r\n\r\n  hasChanged: boolean;\r\n  constructor(\r\n    x: number,\r\n    y: number,\r\n    r: number,\r\n    c: [number, number, number] = [180, 60, 5],\r\n    b: number = 1,\r\n  ) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.r = r;\r\n    this.c = c;\r\n    this.b = b;\r\n    this.oldX = x;\r\n    this.oldY = y;\r\n    this.oldR = r;\r\n    this.oldC = c;\r\n    this.oldB = b;\r\n    this.hasChanged = true;\r\n  }\r\n\r\n  updatePosition = (x: number, y: number) => {\r\n    this.x = x;\r\n    this.y = y;\r\n  };\r\n\r\n  shouldUpdate = () => {\r\n    return true;\r\n    this.hasChanged =\r\n      this.x !== this.oldX ||\r\n      this.y !== this.oldY ||\r\n      this.r !== this.oldR ||\r\n      this.c !== this.oldC ||\r\n      this.b !== this.oldB ||\r\n      this.hasChanged;\r\n    return this.hasChanged;\r\n  };\r\n}\r\n","/////////////////////////////////////////////////////////////////////////////////\n/* UAParser.js v2.0.4\n   Copyright © 2012-2025 Faisal Salman <f@faisalman.com>\n   AGPLv3 License *//*\n   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.\n   Supports browser & node.js environment. \n   Demo   : https://uaparser.dev\n   Source : https://github.com/faisalman/ua-parser-js */\n/////////////////////////////////////////////////////////////////////////////////\n\n/* jshint esversion: 3 */ \n/* globals window */\n\n(function (window, undefined) {\n\n    'use strict';\n    \n    //////////////\n    // Constants\n    /////////////\n\n    var LIBVERSION  = '2.0.4',\n        UA_MAX_LENGTH = 500,\n        USER_AGENT  = 'user-agent',\n        EMPTY       = '',\n        UNKNOWN     = '?',\n\n        // typeof\n        FUNC_TYPE   = 'function',\n        UNDEF_TYPE  = 'undefined',\n        OBJ_TYPE    = 'object',\n        STR_TYPE    = 'string',\n\n        // properties\n        UA_BROWSER  = 'browser',\n        UA_CPU      = 'cpu',\n        UA_DEVICE   = 'device',\n        UA_ENGINE   = 'engine',\n        UA_OS       = 'os',\n        UA_RESULT   = 'result',\n        \n        NAME        = 'name',\n        TYPE        = 'type',\n        VENDOR      = 'vendor',\n        VERSION     = 'version',\n        ARCHITECTURE= 'architecture',\n        MAJOR       = 'major',\n        MODEL       = 'model',\n\n        // device types\n        CONSOLE     = 'console',\n        MOBILE      = 'mobile',\n        TABLET      = 'tablet',\n        SMARTTV     = 'smarttv',\n        WEARABLE    = 'wearable',\n        XR          = 'xr',\n        EMBEDDED    = 'embedded',\n\n        // browser types\n        INAPP       = 'inapp',\n\n        // client hints\n        BRANDS      = 'brands',\n        FORMFACTORS = 'formFactors',\n        FULLVERLIST = 'fullVersionList',\n        PLATFORM    = 'platform',\n        PLATFORMVER = 'platformVersion',\n        BITNESS     = 'bitness',\n        CH_HEADER   = 'sec-ch-ua',\n        CH_HEADER_FULL_VER_LIST = CH_HEADER + '-full-version-list',\n        CH_HEADER_ARCH      = CH_HEADER + '-arch',\n        CH_HEADER_BITNESS   = CH_HEADER + '-' + BITNESS,\n        CH_HEADER_FORM_FACTORS = CH_HEADER + '-form-factors',\n        CH_HEADER_MOBILE    = CH_HEADER + '-' + MOBILE,\n        CH_HEADER_MODEL     = CH_HEADER + '-' + MODEL,\n        CH_HEADER_PLATFORM  = CH_HEADER + '-' + PLATFORM,\n        CH_HEADER_PLATFORM_VER = CH_HEADER_PLATFORM + '-version',\n        CH_ALL_VALUES       = [BRANDS, FULLVERLIST, MOBILE, MODEL, PLATFORM, PLATFORMVER, ARCHITECTURE, FORMFACTORS, BITNESS],\n\n        // device vendors\n        AMAZON      = 'Amazon',\n        APPLE       = 'Apple',\n        ASUS        = 'ASUS',\n        BLACKBERRY  = 'BlackBerry',\n        GOOGLE      = 'Google',\n        HUAWEI      = 'Huawei',\n        LENOVO      = 'Lenovo',\n        HONOR       = 'Honor',\n        LG          = 'LG',\n        MICROSOFT   = 'Microsoft',\n        MOTOROLA    = 'Motorola',\n        NVIDIA      = 'Nvidia',\n        ONEPLUS     = 'OnePlus',\n        OPPO        = 'OPPO',\n        SAMSUNG     = 'Samsung',\n        SHARP       = 'Sharp',\n        SONY        = 'Sony',\n        XIAOMI      = 'Xiaomi',\n        ZEBRA       = 'Zebra',\n\n        // browsers\n        CHROME      = 'Chrome',\n        CHROMIUM    = 'Chromium',\n        CHROMECAST  = 'Chromecast',\n        EDGE        = 'Edge',\n        FIREFOX     = 'Firefox',\n        OPERA       = 'Opera',\n        FACEBOOK    = 'Facebook',\n        SOGOU       = 'Sogou',\n\n        PREFIX_MOBILE  = 'Mobile ',\n        SUFFIX_BROWSER = ' Browser',\n\n        // os\n        WINDOWS     = 'Windows';\n   \n    var isWindow            = typeof window !== UNDEF_TYPE,\n        NAVIGATOR           = (isWindow && window.navigator) ? \n                                window.navigator : \n                                undefined,\n        NAVIGATOR_UADATA    = (NAVIGATOR && NAVIGATOR.userAgentData) ? \n                                NAVIGATOR.userAgentData : \n                                undefined;\n\n    ///////////\n    // Helper\n    //////////\n\n    var extend = function (defaultRgx, extensions) {\n            var mergedRgx = {};\n            var extraRgx = extensions;\n            if (!isExtensions(extensions)) {\n                extraRgx = {};\n                for (var i in extensions) {\n                    for (var j in extensions[i]) {\n                        extraRgx[j] = extensions[i][j].concat(extraRgx[j] ? extraRgx[j] : []);\n                    }\n                }\n            }\n            for (var k in defaultRgx) {\n                mergedRgx[k] = extraRgx[k] && extraRgx[k].length % 2 === 0 ? extraRgx[k].concat(defaultRgx[k]) : defaultRgx[k];\n            }\n            return mergedRgx;\n        },\n        enumerize = function (arr) {\n            var enums = {};\n            for (var i=0; i<arr.length; i++) {\n                enums[arr[i].toUpperCase()] = arr[i];\n            }\n            return enums;\n        },\n        has = function (str1, str2) {\n            if (typeof str1 === OBJ_TYPE && str1.length > 0) {\n                for (var i in str1) {\n                    if (lowerize(str2) == lowerize(str1[i])) return true;\n                }\n                return false;\n            }\n            return isString(str1) ? lowerize(str2) == lowerize(str1) : false;\n        },\n        isExtensions = function (obj, deep) {\n            for (var prop in obj) {\n                return /^(browser|cpu|device|engine|os)$/.test(prop) || (deep ? isExtensions(obj[prop]) : false);\n            }\n        },\n        isString = function (val) {\n            return typeof val === STR_TYPE;\n        },\n        itemListToArray = function (header) {\n            if (!header) return undefined;\n            var arr = [];\n            var tokens = strip(/\\\\?\\\"/g, header).split(',');\n            for (var i = 0; i < tokens.length; i++) {\n                if (tokens[i].indexOf(';') > -1) {\n                    var token = trim(tokens[i]).split(';v=');\n                    arr[i] = { brand : token[0], version : token[1] };\n                } else {\n                    arr[i] = trim(tokens[i]);\n                }\n            }\n            return arr;\n        },\n        lowerize = function (str) {\n            return isString(str) ? str.toLowerCase() : str;\n        },\n        majorize = function (version) {\n            return isString(version) ? strip(/[^\\d\\.]/g, version).split('.')[0] : undefined;\n        },\n        setProps = function (arr) {\n            for (var i in arr) {\n                var propName = arr[i];\n                if (typeof propName == OBJ_TYPE && propName.length == 2) {\n                    this[propName[0]] = propName[1];\n                } else {\n                    this[propName] = undefined;\n                }\n            }\n            return this;\n        },\n        strip = function (pattern, str) {\n            return isString(str) ? str.replace(pattern, EMPTY) : str;\n        },\n        stripQuotes = function (str) {\n            return strip(/\\\\?\\\"/g, str); \n        },\n        trim = function (str, len) {\n            if (isString(str)) {\n                str = strip(/^\\s\\s*/, str);\n                return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);\n            }\n    };\n\n    ///////////////\n    // Map helper\n    //////////////\n\n    var rgxMapper = function (ua, arrays) {\n\n            if(!ua || !arrays) return;\n\n            var i = 0, j, k, p, q, matches, match;\n\n            // loop through all regexes maps\n            while (i < arrays.length && !matches) {\n\n                var regex = arrays[i],       // even sequence (0,2,4,..)\n                    props = arrays[i + 1];   // odd sequence (1,3,5,..)\n                j = k = 0;\n\n                // try matching uastring with regexes\n                while (j < regex.length && !matches) {\n\n                    if (!regex[j]) { break; }\n                    matches = regex[j++].exec(ua);\n\n                    if (!!matches) {\n                        for (p = 0; p < props.length; p++) {\n                            match = matches[++k];\n                            q = props[p];\n                            // check if given property is actually array\n                            if (typeof q === OBJ_TYPE && q.length > 0) {\n                                if (q.length === 2) {\n                                    if (typeof q[1] == FUNC_TYPE) {\n                                        // assign modified match\n                                        this[q[0]] = q[1].call(this, match);\n                                    } else {\n                                        // assign given value, ignore regex match\n                                        this[q[0]] = q[1];\n                                    }\n                                } else if (q.length >= 3) {\n                                    // Check whether q[1] FUNCTION or REGEX\n                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {\n                                        if (q.length > 3) {\n                                            this[q[0]] = match ? q[1].apply(this, q.slice(2)) : undefined;\n                                        } else {\n                                            // call function (usually string mapper)\n                                            this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;\n                                        }\n                                    } else {\n                                        if (q.length == 3) {\n                                            // sanitize match using given regex\n                                            this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;\n                                        } else if (q.length == 4) {\n                                            this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;\n                                        } else if (q.length > 4) {\n                                            this[q[0]] = match ? q[3].apply(this, [match.replace(q[1], q[2])].concat(q.slice(4))) : undefined;\n                                        }\n                                    }\n                                }\n                            } else {\n                                this[q] = match ? match : undefined;\n                            }\n                        }\n                    }\n                }\n                i += 2;\n            }\n        },\n\n        strMapper = function (str, map) {\n\n            for (var i in map) {\n                // check if current value is array\n                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {\n                    for (var j = 0; j < map[i].length; j++) {\n                        if (has(map[i][j], str)) {\n                            return (i === UNKNOWN) ? undefined : i;\n                        }\n                    }\n                } else if (has(map[i], str)) {\n                    return (i === UNKNOWN) ? undefined : i;\n                }\n            }\n            return map.hasOwnProperty('*') ? map['*'] : str;\n    };\n\n    ///////////////\n    // String map\n    //////////////\n\n    var windowsVersionMap = {\n            'ME'    : '4.90',\n            'NT 3.51': '3.51',\n            'NT 4.0': '4.0',\n            '2000'  : ['5.0', '5.01'],\n            'XP'    : ['5.1', '5.2'],\n            'Vista' : '6.0',\n            '7'     : '6.1',\n            '8'     : '6.2',\n            '8.1'   : '6.3',\n            '10'    : ['6.4', '10.0'],\n            'NT'    : ''\n        },\n        \n        formFactorsMap = {\n            'embedded'  : 'Automotive',\n            'mobile'    : 'Mobile',\n            'tablet'    : ['Tablet', 'EInk'],\n            'smarttv'   : 'TV',\n            'wearable'  : 'Watch',\n            'xr'        : ['VR', 'XR'],\n            '?'         : ['Desktop', 'Unknown'],\n            '*'         : undefined\n        },\n\n        browserHintsMap = {\n            'Chrome'        : 'Google Chrome',\n            'Edge'          : 'Microsoft Edge',\n            'Edge WebView2' : 'Microsoft Edge WebView2',\n            'Chrome WebView': 'Android WebView',\n            'Chrome Headless':'HeadlessChrome',\n            'Huawei Browser': 'HuaweiBrowser',\n            'MIUI Browser'  : 'Miui Browser',\n            'Opera Mobi'    : 'OperaMobile',\n            'Yandex'        : 'YaBrowser'\n    };\n\n    //////////////\n    // Regex map\n    /////////////\n\n    var defaultRegexes = {\n\n        browser : [[\n\n            // Most common regardless engine\n            /\\b(?:crmo|crios)\\/([\\w\\.]+)/i                                      // Chrome for Android/iOS\n            ], [VERSION, [NAME, PREFIX_MOBILE + 'Chrome']], [\n            /webview.+edge\\/([\\w\\.]+)/i                                         // Microsoft Edge\n            ], [VERSION, [NAME, EDGE+' WebView']], [\n            /edg(?:e|ios|a)?\\/([\\w\\.]+)/i                                       \n            ], [VERSION, [NAME, 'Edge']], [\n\n            // Presto based\n            /(opera mini)\\/([-\\w\\.]+)/i,                                        // Opera Mini\n            /(opera [mobiletab]{3,6})\\b.+version\\/([-\\w\\.]+)/i,                 // Opera Mobi/Tablet\n            /(opera)(?:.+version\\/|[\\/ ]+)([\\w\\.]+)/i                           // Opera\n            ], [NAME, VERSION], [\n            /opios[\\/ ]+([\\w\\.]+)/i                                             // Opera mini on iphone >= 8.0\n            ], [VERSION, [NAME, OPERA+' Mini']], [\n            /\\bop(?:rg)?x\\/([\\w\\.]+)/i                                          // Opera GX\n            ], [VERSION, [NAME, OPERA+' GX']], [\n            /\\bopr\\/([\\w\\.]+)/i                                                 // Opera Webkit\n            ], [VERSION, [NAME, OPERA]], [\n\n            // Mixed\n            /\\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\\/ ]?([\\w\\.]+)/i            // Baidu\n            ], [VERSION, [NAME, 'Baidu']], [\n            /\\b(?:mxbrowser|mxios|myie2)\\/?([-\\w\\.]*)\\b/i                       // Maxthon\n            ], [VERSION, [NAME, 'Maxthon']], [\n            /(kindle)\\/([\\w\\.]+)/i,                                             // Kindle\n            /(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\\/ ]?([\\w\\.]*)/i,      \n                                                                                // Lunascape/Maxthon/Netfront/Jasmine/Blazer/Sleipnir\n            // Trident based\n            /(avant|iemobile|slim(?:browser|boat|jet))[\\/ ]?([\\d\\.]*)/i,        // Avant/IEMobile/SlimBrowser/SlimBoat/Slimjet\n            /(?:ms|\\()(ie) ([\\w\\.]+)/i,                                         // Internet Explorer\n\n            // Blink/Webkit/KHTML based                                         // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon/LG Browser/Otter/qutebrowser/Dooble\n            /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio|(?=comodo_)?dragon|otter|dooble|(?:lg |qute)browser)\\/([-\\w\\.]+)/i,\n                                                                                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ//Vivaldi/DuckDuckGo/Klar/Helio/Dragon\n            /(heytap|ovi|115|surf)browser\\/([\\d\\.]+)/i,                         // HeyTap/Ovi/115/Surf\n            /(ecosia|weibo)(?:__| \\w+@)([\\d\\.]+)/i                              // Ecosia/Weibo\n            ], [NAME, VERSION], [\n            /quark(?:pc)?\\/([-\\w\\.]+)/i                                         // Quark\n            ], [VERSION, [NAME, 'Quark']], [\n            /\\bddg\\/([\\w\\.]+)/i                                                 // DuckDuckGo\n            ], [VERSION, [NAME, 'DuckDuckGo']], [\n            /(?:\\buc? ?browser|(?:juc.+)ucweb)[\\/ ]?([\\w\\.]+)/i                 // UCBrowser\n            ], [VERSION, [NAME, 'UCBrowser']], [\n            /microm.+\\bqbcore\\/([\\w\\.]+)/i,                                     // WeChat Desktop for Windows Built-in Browser\n            /\\bqbcore\\/([\\w\\.]+).+microm/i,\n            /micromessenger\\/([\\w\\.]+)/i                                        // WeChat\n            ], [VERSION, [NAME, 'WeChat']], [\n            /konqueror\\/([\\w\\.]+)/i                                             // Konqueror\n            ], [VERSION, [NAME, 'Konqueror']], [\n            /trident.+rv[: ]([\\w\\.]{1,9})\\b.+like gecko/i                       // IE11\n            ], [VERSION, [NAME, 'IE']], [\n            /ya(?:search)?browser\\/([\\w\\.]+)/i                                  // Yandex\n            ], [VERSION, [NAME, 'Yandex']], [\n            /slbrowser\\/([\\w\\.]+)/i                                             // Smart Lenovo Browser\n            ], [VERSION, [NAME, 'Smart ' + LENOVO + SUFFIX_BROWSER]], [\n            /(avast|avg)\\/([\\w\\.]+)/i                                           // Avast/AVG Secure Browser\n            ], [[NAME, /(.+)/, '$1 Secure' + SUFFIX_BROWSER], VERSION], [\n            /\\bfocus\\/([\\w\\.]+)/i                                               // Firefox Focus\n            ], [VERSION, [NAME, FIREFOX+' Focus']], [\n            /\\bopt\\/([\\w\\.]+)/i                                                 // Opera Touch\n            ], [VERSION, [NAME, OPERA+' Touch']], [\n            /coc_coc\\w+\\/([\\w\\.]+)/i                                            // Coc Coc Browser\n            ], [VERSION, [NAME, 'Coc Coc']], [\n            /dolfin\\/([\\w\\.]+)/i                                                // Dolphin\n            ], [VERSION, [NAME, 'Dolphin']], [\n            /coast\\/([\\w\\.]+)/i                                                 // Opera Coast\n            ], [VERSION, [NAME, OPERA+' Coast']], [\n            /miuibrowser\\/([\\w\\.]+)/i                                           // MIUI Browser\n            ], [VERSION, [NAME, 'MIUI' + SUFFIX_BROWSER]], [\n            /fxios\\/([\\w\\.-]+)/i                                                // Firefox for iOS\n            ], [VERSION, [NAME, PREFIX_MOBILE + FIREFOX]], [\n            /\\bqihoobrowser\\/?([\\w\\.]*)/i                                       // 360\n            ], [VERSION, [NAME, '360']], [\n            /\\b(qq)\\/([\\w\\.]+)/i                                                // QQ\n            ], [[NAME, /(.+)/, '$1Browser'], VERSION], [\n            /(oculus|sailfish|huawei|vivo|pico)browser\\/([\\w\\.]+)/i\n            ], [[NAME, /(.+)/, '$1' + SUFFIX_BROWSER], VERSION], [              // Oculus/Sailfish/HuaweiBrowser/VivoBrowser/PicoBrowser\n            /samsungbrowser\\/([\\w\\.]+)/i                                        // Samsung Internet\n            ], [VERSION, [NAME, SAMSUNG + ' Internet']], [\n            /metasr[\\/ ]?([\\d\\.]+)/i                                            // Sogou Explorer\n            ], [VERSION, [NAME, SOGOU + ' Explorer']], [\n            /(sogou)mo\\w+\\/([\\d\\.]+)/i                                          // Sogou Mobile\n            ], [[NAME, SOGOU + ' Mobile'], VERSION], [\n            /(electron)\\/([\\w\\.]+) safari/i,                                    // Electron-based App\n            /(tesla)(?: qtcarbrowser|\\/(20\\d\\d\\.[-\\w\\.]+))/i,                   // Tesla\n            /m?(qqbrowser|2345(?=browser|chrome|explorer))\\w*[\\/ ]?v?([\\w\\.]+)/i   // QQ/2345\n            ], [NAME, VERSION], [\n            /(lbbrowser|rekonq)/i                                               // LieBao Browser/Rekonq\n            ], [NAME], [\n            /ome\\/([\\w\\.]+) \\w* ?(iron) saf/i,                                  // Iron\n            /ome\\/([\\w\\.]+).+qihu (360)[es]e/i                                  // 360\n            ], [VERSION, NAME], [\n\n            // WebView\n            /((?:fban\\/fbios|fb_iab\\/fb4a)(?!.+fbav)|;fbav\\/([\\w\\.]+);)/i       // Facebook App for iOS & Android\n            ], [[NAME, FACEBOOK], VERSION, [TYPE, INAPP]], [\n            /(kakao(?:talk|story))[\\/ ]([\\w\\.]+)/i,                             // Kakao App\n            /(naver)\\(.*?(\\d+\\.[\\w\\.]+).*\\)/i,                                  // Naver InApp\n            /(daum)apps[\\/ ]([\\w\\.]+)/i,                                        // Daum App\n            /safari (line)\\/([\\w\\.]+)/i,                                        // Line App for iOS\n            /\\b(line)\\/([\\w\\.]+)\\/iab/i,                                        // Line App for Android\n            /(alipay)client\\/([\\w\\.]+)/i,                                       // Alipay\n            /(twitter)(?:and| f.+e\\/([\\w\\.]+))/i,                               // Twitter\n            /(instagram|snapchat|klarna)[\\/ ]([-\\w\\.]+)/i                       // Instagram/Snapchat/Klarna\n            ], [NAME, VERSION, [TYPE, INAPP]], [\n            /\\bgsa\\/([\\w\\.]+) .*safari\\//i                                      // Google Search Appliance on iOS\n            ], [VERSION, [NAME, 'GSA'], [TYPE, INAPP]], [\n            /musical_ly(?:.+app_?version\\/|_)([\\w\\.]+)/i                        // TikTok\n            ], [VERSION, [NAME, 'TikTok'], [TYPE, INAPP]], [\n            /\\[(linkedin)app\\]/i                                                // LinkedIn App for iOS & Android\n            ], [NAME, [TYPE, INAPP]], [\n\n            /(chromium)[\\/ ]([-\\w\\.]+)/i                                        // Chromium\n            ], [NAME, VERSION], [\n\n            /headlesschrome(?:\\/([\\w\\.]+)| )/i                                  // Chrome Headless\n            ], [VERSION, [NAME, CHROME+' Headless']], [\n\n            /wv\\).+chrome\\/([\\w\\.]+).+edgw\\//i                                  // Edge WebView2\n            ], [VERSION, [NAME, EDGE+' WebView2']], [\n\n            / wv\\).+(chrome)\\/([\\w\\.]+)/i                                       // Chrome WebView\n            ], [[NAME, CHROME+' WebView'], VERSION], [\n\n            /droid.+ version\\/([\\w\\.]+)\\b.+(?:mobile safari|safari)/i           // Android Browser\n            ], [VERSION, [NAME, 'Android' + SUFFIX_BROWSER]], [\n\n            /chrome\\/([\\w\\.]+) mobile/i                                         // Chrome Mobile\n            ], [VERSION, [NAME, PREFIX_MOBILE + 'Chrome']], [\n\n            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\\/v?([\\w\\.]+)/i       // Chrome/OmniWeb/Arora/Tizen/Nokia\n            ], [NAME, VERSION], [\n\n            /version\\/([\\w\\.\\,]+) .*mobile(?:\\/\\w+ | ?)safari/i                 // Safari Mobile\n            ], [VERSION, [NAME, PREFIX_MOBILE + 'Safari']], [\n            /iphone .*mobile(?:\\/\\w+ | ?)safari/i\n            ], [[NAME, PREFIX_MOBILE + 'Safari']], [\n            /version\\/([\\w\\.\\,]+) .*(safari)/i                                  // Safari\n            ], [VERSION, NAME], [\n            /webkit.+?(mobile ?safari|safari)(\\/[\\w\\.]+)/i                      // Safari < 3.0\n            ], [NAME, [VERSION, '1']], [\n\n            /(webkit|khtml)\\/([\\w\\.]+)/i\n            ], [NAME, VERSION], [\n\n            // Gecko based\n            /(?:mobile|tablet);.*(firefox)\\/([\\w\\.-]+)/i                        // Firefox Mobile\n            ], [[NAME, PREFIX_MOBILE + FIREFOX], VERSION], [\n            /(navigator|netscape\\d?)\\/([-\\w\\.]+)/i                              // Netscape\n            ], [[NAME, 'Netscape'], VERSION], [\n            /(wolvic|librewolf)\\/([\\w\\.]+)/i                                    // Wolvic/LibreWolf\n            ], [NAME, VERSION], [\n            /mobile vr; rv:([\\w\\.]+)\\).+firefox/i                               // Firefox Reality\n            ], [VERSION, [NAME, FIREFOX+' Reality']], [\n            /ekiohf.+(flow)\\/([\\w\\.]+)/i,                                       // Flow\n            /(swiftfox)/i,                                                      // Swiftfox\n            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\\/ ]?([\\w\\.\\+]+)/i,\n                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror\n            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\\/([-\\w\\.]+)$/i,\n                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix\n            /(firefox)\\/([\\w\\.]+)/i,                                            // Other Firefox-based\n            /(mozilla)\\/([\\w\\.]+) .+rv\\:.+gecko\\/\\d+/i,                         // Mozilla\n\n            // Other\n            /(amaya|dillo|doris|icab|ladybird|lynx|mosaic|netsurf|obigo|polaris|w3m|(?:go|ice|up)[\\. ]?browser)[-\\/ ]?v?([\\w\\.]+)/i,\n                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Obigo/Mosaic/Go/ICE/UP.Browser/Ladybird\n            /\\b(links) \\(([\\w\\.]+)/i                                            // Links\n            ], [NAME, [VERSION, /_/g, '.']], [\n            \n            /(cobalt)\\/([\\w\\.]+)/i                                              // Cobalt\n            ], [NAME, [VERSION, /[^\\d\\.]+./, EMPTY]]\n        ],\n\n        cpu : [[\n\n            /\\b((amd|x|x86[-_]?|wow|win)64)\\b/i                                 // AMD64 (x64)\n            ], [[ARCHITECTURE, 'amd64']], [\n\n            /(ia32(?=;))/i,                                                     // IA32 (quicktime)\n            /\\b((i[346]|x)86)(pc)?\\b/i                                          // IA32 (x86)\n            ], [[ARCHITECTURE, 'ia32']], [\n\n            /\\b(aarch64|arm(v?[89]e?l?|_?64))\\b/i                               // ARM64\n            ], [[ARCHITECTURE, 'arm64']], [\n\n            /\\b(arm(v[67])?ht?n?[fl]p?)\\b/i                                     // ARMHF\n            ], [[ARCHITECTURE, 'armhf']], [\n\n            // PocketPC mistakenly identified as PowerPC\n            /( (ce|mobile); ppc;|\\/[\\w\\.]+arm\\b)/i\n            ], [[ARCHITECTURE, 'arm']], [\n\n            /((ppc|powerpc)(64)?)( mac|;|\\))/i                                  // PowerPC\n            ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [\n\n            / sun4\\w[;\\)]/i                                                     // SPARC\n            ], [[ARCHITECTURE, 'sparc']], [\n\n            /\\b(avr32|ia64(?=;)|68k(?=\\))|\\barm(?=v([1-7]|[5-7]1)l?|;|eabi)|(irix|mips|sparc)(64)?\\b|pa-risc)/i\n                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC\n            ], [[ARCHITECTURE, lowerize]]\n        ],\n\n        device : [[\n\n            //////////////////////////\n            // MOBILES & TABLETS\n            /////////////////////////\n\n            // Samsung\n            /\\b(sch-i[89]0\\d|shw-m380s|sm-[ptx]\\w{2,4}|gt-[pn]\\d{2,4}|sgh-t8[56]9|nexus 10)/i\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [\n            /\\b((?:s[cgp]h|gt|sm)-(?![lr])\\w+|sc[g-]?[\\d]+a?|galaxy nexus)/i,\n            /samsung[- ]((?!sm-[lr]|browser)[-\\w]+)/i,\n            /sec-(sgh\\w+)/i\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [\n\n            // Apple\n            /(?:\\/|\\()(ip(?:hone|od)[\\w, ]*)(?:\\/|;)/i                          // iPod/iPhone\n            ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [\n            /\\((ipad);[-\\w\\),; ]+apple/i,                                       // iPad\n            /applecoremedia\\/[\\w\\.]+ \\((ipad)/i,\n            /\\b(ipad)\\d\\d?,\\d\\d?[;\\]].+ios/i\n            ], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [\n            /(macintosh);/i\n            ], [MODEL, [VENDOR, APPLE]], [\n\n            // Sharp\n            /\\b(sh-?[altvz]?\\d\\d[a-ekm]?)/i\n            ], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [\n\n            // Honor\n            /\\b((?:brt|eln|hey2?|gdi|jdn)-a?[lnw]09|(?:ag[rm]3?|jdn2|kob2)-a?[lw]0[09]hn)(?: bui|\\)|;)/i\n            ], [MODEL, [VENDOR, HONOR], [TYPE, TABLET]], [\n            /honor([-\\w ]+)[;\\)]/i\n            ], [MODEL, [VENDOR, HONOR], [TYPE, MOBILE]], [\n\n            // Huawei\n            /\\b((?:ag[rs][2356]?k?|bah[234]?|bg[2o]|bt[kv]|cmr|cpn|db[ry]2?|jdn2|got|kob2?k?|mon|pce|scm|sht?|[tw]gr|vrd)-[ad]?[lw][0125][09]b?|605hw|bg2-u03|(?:gem|fdr|m2|ple|t1)-[7a]0[1-4][lu]|t1-a2[13][lw]|mediapad[\\w\\. ]*(?= bui|\\)))\\b(?!.+d\\/s)/i\n            ], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [\n            /(?:huawei)([-\\w ]+)[;\\)]/i,\n            /\\b(nexus 6p|\\w{2,4}e?-[atu]?[ln][\\dx][012359c][adn]?)\\b(?!.+d\\/s)/i\n            ], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [\n\n            // Xiaomi\n            /oid[^\\)]+; (2[\\dbc]{4}(182|283|rp\\w{2})[cgl]|m2105k81a?c)(?: bui|\\))/i,\n            /\\b((?:red)?mi[-_ ]?pad[\\w- ]*)(?: bui|\\))/i                                // Mi Pad tablets\n            ],[[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [\n\n            /\\b(poco[\\w ]+|m2\\d{3}j\\d\\d[a-z]{2})(?: bui|\\))/i,                  // Xiaomi POCO\n            /\\b; (\\w+) build\\/hm\\1/i,                                           // Xiaomi Hongmi 'numeric' models\n            /\\b(hm[-_ ]?note?[_ ]?(?:\\d\\w)?) bui/i,                             // Xiaomi Hongmi\n            /\\b(redmi[\\-_ ]?(?:note|k)?[\\w_ ]+)(?: bui|\\))/i,                   // Xiaomi Redmi\n            /oid[^\\)]+; (m?[12][0-389][01]\\w{3,6}[c-y])( bui|; wv|\\))/i,        // Xiaomi Redmi 'numeric' models\n            /\\b(mi[-_ ]?(?:a\\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\\d?\\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\\))/i, // Xiaomi Mi\n            / ([\\w ]+) miui\\/v?\\d/i\n            ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [\n\n            // OnePlus\n            /droid.+; (cph2[3-6]\\d[13579]|((gm|hd)19|(ac|be|in|kb)20|(d[en]|eb|le|mt)21|ne22)[0-2]\\d|p[g-k]\\w[1m]10)\\b/i,\n            /(?:one)?(?:plus)? (a\\d0\\d\\d)(?: b|\\))/i\n            ], [MODEL, [VENDOR, ONEPLUS], [TYPE, MOBILE]], [\n\n            // OPPO\n            /; (\\w+) bui.+ oppo/i,\n            /\\b(cph[12]\\d{3}|p(?:af|c[al]|d\\w|e[ar])[mt]\\d0|x9007|a101op)\\b/i\n            ], [MODEL, [VENDOR, OPPO], [TYPE, MOBILE]], [\n            /\\b(opd2(\\d{3}a?))(?: bui|\\))/i\n            ], [MODEL, [VENDOR, strMapper, { 'OnePlus' : ['203', '304', '403', '404', '413', '415'], '*' : OPPO }], [TYPE, TABLET]], [\n\n            // BLU\n            /(vivo (5r?|6|8l?|go|one|s|x[il]?[2-4]?)[\\w\\+ ]*)(?: bui|\\))/i  // Vivo series\n            ], [MODEL, [VENDOR, 'BLU'], [TYPE, MOBILE]], [    \n\n            // Vivo\n            /; vivo (\\w+)(?: bui|\\))/i,\n            /\\b(v[12]\\d{3}\\w?[at])(?: bui|;)/i\n            ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [\n\n            // Realme\n            /\\b(rmx[1-3]\\d{3})(?: bui|;|\\))/i\n            ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [\n\n            // Lenovo\n            /(ideatab[-\\w ]+|602lv|d-42a|a101lv|a2109a|a3500-hv|s[56]000|pb-6505[my]|tb-?x?\\d{3,4}(?:f[cu]|xu|[av])|yt\\d?-[jx]?\\d+[lfmx])( bui|;|\\)|\\/)/i,\n            /lenovo ?(b[68]0[08]0-?[hf]?|tab(?:[\\w- ]+?)|tb[\\w-]{6,7})( bui|;|\\)|\\/)/i\n            ], [MODEL, [VENDOR, LENOVO], [TYPE, TABLET]], [            \n            /lenovo[-_ ]?([-\\w ]+?)(?: bui|\\)|\\/)/i\n            ], [MODEL, [VENDOR, LENOVO], [TYPE, MOBILE]], [\n\n            // Motorola\n            /\\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\\b[\\w ]+build\\//i,\n            /\\bmot(?:orola)?[- ]([\\w\\s]+)(\\)| bui)/i,\n            /((?:moto(?! 360)[-\\w\\(\\) ]+|xt\\d{3,4}[cgkosw\\+]?[-\\d]*|nexus 6)(?= bui|\\)))/i\n            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [\n            /\\b(mz60\\d|xoom[2 ]{0,2}) build\\//i\n            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [\n\n            // LG\n            /((?=lg)?[vl]k\\-?\\d{3}) bui| 3\\.[-\\w; ]{10}lg?-([06cv9]{3,4})/i\n            ], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [\n            /(lm(?:-?f100[nv]?|-[\\w\\.]+)(?= bui|\\))|nexus [45])/i,\n            /\\blg[-e;\\/ ]+(?!.*(?:browser|netcast|android tv|watch|webos))(\\w+)/i,\n            /\\blg-?([\\d\\w]+) bui/i\n            ], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [\n\n            // Nokia\n            /(nokia) (t[12][01])/i\n            ], [VENDOR, MODEL, [TYPE, TABLET]], [\n            /(?:maemo|nokia).*(n900|lumia \\d+|rm-\\d+)/i,\n            /nokia[-_ ]?(([-\\w\\. ]*))/i\n            ], [[MODEL, /_/g, ' '], [TYPE, MOBILE], [VENDOR, 'Nokia']], [\n\n            // Google\n            /(pixel (c|tablet))\\b/i                                             // Google Pixel C/Tablet\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [\n                                                                                // Google Pixel\n            /droid.+;(?: google)? (g(01[13]a|020[aem]|025[jn]|1b60|1f8f|2ybb|4s1m|576d|5nz6|8hhn|8vou|a02099|c15s|d1yq|e2ae|ec77|gh2x|kv4x|p4bc|pj41|r83y|tt9q|ur25|wvk6)|pixel[\\d ]*a?( pro)?( xl)?( fold)?( \\(5g\\))?)( bui|\\))/i\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [\n            /(google) (pixelbook( go)?)/i\n            ], [VENDOR, MODEL], [\n\n            // Sony\n            /droid.+; (a?\\d[0-2]{2}so|[c-g]\\d{4}|so[-gl]\\w+|xq-\\w\\w\\d\\d)(?= bui|\\).+chrome\\/(?![1-6]{0,1}\\d\\.))/i\n            ], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [\n            /sony tablet [ps]/i,\n            /\\b(?:sony)?sgp\\w+(?: bui|\\))/i\n            ], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [\n\n            // Amazon\n            /(alexa)webm/i,\n            /(kf[a-z]{2}wi|aeo(?!bc)\\w\\w)( bui|\\))/i,                           // Kindle Fire without Silk / Echo Show\n            /(kf[a-z]+)( bui|\\)).+silk\\//i                                      // Kindle Fire HD\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [\n            /((?:sd|kf)[0349hijorstuw]+)( bui|\\)).+silk\\//i                     // Fire Phone\n            ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [\n\n            // BlackBerry\n            /(playbook);[-\\w\\),; ]+(rim)/i                                      // BlackBerry PlayBook\n            ], [MODEL, VENDOR, [TYPE, TABLET]], [\n            /\\b((?:bb[a-f]|st[hv])100-\\d)/i,\n            /\\(bb10; (\\w+)/i                                                    // BlackBerry 10\n            ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [\n\n            // Asus\n            /(?:\\b|asus_)(transfo[prime ]{4,10} \\w+|eeepc|slider \\w+|nexus 7|padfone|p00[cj])/i\n            ], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [\n            / (z[bes]6[027][012][km][ls]|zenfone \\d\\w?)\\b/i\n            ], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [\n\n            // HTC\n            /(nexus 9)/i                                                        // HTC Nexus 9\n            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [\n            /(htc)[-;_ ]{1,2}([\\w ]+(?=\\)| bui)|\\w+)/i,                         // HTC\n\n            // ZTE\n            /(zte)[- ]([\\w ]+?)(?: bui|\\/|\\))/i,\n            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\\.))|sony(?!-bra))[-_ ]?([-\\w]*)/i         // Alcatel/GeeksPhone/Nexian/Panasonic/Sony\n            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [\n\n            // TCL\n            /tcl (xess p17aa)/i,\n            /droid [\\w\\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])(_\\w(\\w|\\w\\w))?(\\)| bui)/i\n            ], [MODEL, [VENDOR, 'TCL'], [TYPE, TABLET]], [\n            /droid [\\w\\.]+; (418(?:7d|8v)|5087z|5102l|61(?:02[dh]|25[adfh]|27[ai]|56[dh]|59k|65[ah])|a509dl|t(?:43(?:0w|1[adepqu])|50(?:6d|7[adju])|6(?:09dl|10k|12b|71[efho]|76[hjk])|7(?:66[ahju]|67[hw]|7[045][bh]|71[hk]|73o|76[ho]|79w|81[hks]?|82h|90[bhsy]|99b)|810[hs]))(_\\w(\\w|\\w\\w))?(\\)| bui)/i\n            ], [MODEL, [VENDOR, 'TCL'], [TYPE, MOBILE]], [\n\n            // itel\n            /(itel) ((\\w+))/i\n            ], [[VENDOR, lowerize], MODEL, [TYPE, strMapper, { 'tablet' : ['p10001l', 'w7001'], '*' : 'mobile' }]], [\n\n            // Acer\n            /droid.+; ([ab][1-7]-?[0178a]\\d\\d?)/i\n            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [\n\n            // Meizu\n            /droid.+; (m[1-5] note) bui/i,\n            /\\bmz-([-\\w]{2,})/i\n            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [\n                \n            // Ulefone\n            /; ((?:power )?armor(?:[\\w ]{0,8}))(?: bui|\\))/i\n            ], [MODEL, [VENDOR, 'Ulefone'], [TYPE, MOBILE]], [\n\n            // Energizer\n            /; (energy ?\\w+)(?: bui|\\))/i,\n            /; energizer ([\\w ]+)(?: bui|\\))/i\n            ], [MODEL, [VENDOR, 'Energizer'], [TYPE, MOBILE]], [\n\n            // Cat\n            /; cat (b35);/i,\n            /; (b15q?|s22 flip|s48c|s62 pro)(?: bui|\\))/i\n            ], [MODEL, [VENDOR, 'Cat'], [TYPE, MOBILE]], [\n\n            // Smartfren\n            /((?:new )?andromax[\\w- ]+)(?: bui|\\))/i\n            ], [MODEL, [VENDOR, 'Smartfren'], [TYPE, MOBILE]], [\n\n            // Nothing\n            /droid.+; (a(in)?(0(15|59|6[35])|142)p?)/i\n            ], [MODEL, [VENDOR, 'Nothing'], [TYPE, MOBILE]], [\n\n            // Archos\n            /; (x67 5g|tikeasy \\w+|ac[1789]\\d\\w+)( b|\\))/i,\n            /archos ?(5|gamepad2?|([\\w ]*[t1789]|hello) ?\\d+[\\w ]*)( b|\\))/i\n            ], [MODEL, [VENDOR, 'Archos'], [TYPE, TABLET]], [\n            /archos ([\\w ]+)( b|\\))/i,\n            /; (ac[3-6]\\d\\w{2,8})( b|\\))/i \n            ], [MODEL, [VENDOR, 'Archos'], [TYPE, MOBILE]], [\n\n            // HMD\n            /; (n159v)/i\n            ], [MODEL, [VENDOR, 'HMD'], [TYPE, MOBILE]], [\n\n            // MIXED\n            /(imo) (tab \\w+)/i,                                                 // IMO\n            /(infinix|tecno) (x1101b?|p904|dp(7c|8d|10a)( pro)?|p70[1-3]a?|p904|t1101)/i                     // Infinix XPad / Tecno\n            ], [VENDOR, MODEL, [TYPE, TABLET]], [\n\n            /(blackberry|benq|palm(?=\\-)|sonyericsson|acer|asus(?! zenw)|dell|jolla|meizu|motorola|polytron|tecno|micromax|advan)[-_ ]?([-\\w]*)/i,\n                                                                                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron/Tecno/Micromax/Advan\n            /; (blu|hmd|imo|infinix|lava|oneplus|tcl)[_ ]([\\w\\+ ]+?)(?: bui|\\)|; r)/i,  // BLU/HMD/IMO/Infinix/Lava/OnePlus/TCL\n            /(hp) ([\\w ]+\\w)/i,                                                 // HP iPAQ\n            /(microsoft); (lumia[\\w ]+)/i,                                      // Microsoft Lumia\n            /(oppo) ?([\\w ]+) bui/i                                             // OPPO\n            ], [VENDOR, MODEL, [TYPE, MOBILE]], [\n\n            /(kobo)\\s(ereader|touch)/i,                                         // Kobo\n            /(hp).+(touchpad(?!.+tablet)|tablet)/i,                             // HP TouchPad\n            /(kindle)\\/([\\w\\.]+)/i                                              // Kindle\n            ], [VENDOR, MODEL, [TYPE, TABLET]], [\n\n            /(surface duo)/i                                                    // Surface Duo\n            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [\n            /droid [\\d\\.]+; (fp\\du?)(?: b|\\))/i                                 // Fairphone\n            ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [\n            /((?:tegranote|shield t(?!.+d tv))[\\w- ]*?)(?: b|\\))/i              // Nvidia Tablets\n            ], [MODEL, [VENDOR, NVIDIA], [TYPE, TABLET]], [\n            /(sprint) (\\w+)/i                                                   // Sprint Phones\n            ], [VENDOR, MODEL, [TYPE, MOBILE]], [\n            /(kin\\.[onetw]{3})/i                                                // Microsoft Kin\n            ], [[MODEL, /\\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [\n            /droid.+; ([c6]+|et5[16]|mc[239][23]x?|vc8[03]x?)\\)/i               // Zebra\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [\n            /droid.+; (ec30|ps20|tc[2-8]\\d[kx])\\)/i\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [\n\n            ///////////////////\n            // SMARTTVS\n            ///////////////////\n\n            /smart-tv.+(samsung)/i                                              // Samsung\n            ], [VENDOR, [TYPE, SMARTTV]], [\n            /hbbtv.+maple;(\\d+)/i\n            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [\n            /(vizio)(?: |.+model\\/)(\\w+-\\w+)/i,                                 // Vizio\n            /tcast.+(lg)e?. ([-\\w]+)/i                                          // LG SmartTV\n            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [\n            /(nux; netcast.+smarttv|lg (netcast\\.tv-201\\d|android tv))/i\n            ], [[VENDOR, LG], [TYPE, SMARTTV]], [\n            /(apple) ?tv/i                                                      // Apple TV\n            ], [VENDOR, [MODEL, APPLE+' TV'], [TYPE, SMARTTV]], [\n            /crkey.*devicetype\\/chromecast/i                                    // Google Chromecast Third Generation\n            ], [[MODEL, CHROMECAST+' Third Generation'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [\n            /crkey.*devicetype\\/([^/]*)/i                                       // Google Chromecast with specific device type\n            ], [[MODEL, /^/, 'Chromecast '], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [\n            /fuchsia.*crkey/i                                                   // Google Chromecast Nest Hub\n            ], [[MODEL, CHROMECAST+' Nest Hub'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [\n            /crkey/i                                                            // Google Chromecast, Linux-based or unknown\n            ], [[MODEL, CHROMECAST], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [\n            /(portaltv)/i                                                       // Facebook Portal TV\n            ], [MODEL, [VENDOR, FACEBOOK], [TYPE, SMARTTV]], [\n            /droid.+aft(\\w+)( bui|\\))/i                                         // Fire TV\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [\n            /(shield \\w+ tv)/i                                                  // Nvidia Shield TV\n            ], [MODEL, [VENDOR, NVIDIA], [TYPE, SMARTTV]], [\n            /\\(dtv[\\);].+(aquos)/i,\n            /(aquos-tv[\\w ]+)\\)/i                                               // Sharp\n            ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],[\n            /(bravia[\\w ]+)( bui|\\))/i                                          // Sony\n            ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [\n            /(mi(tv|box)-?\\w+) bui/i                                            // Xiaomi\n            ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [\n            /Hbbtv.*(technisat) (.*);/i                                         // TechniSAT\n            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [\n            /\\b(roku)[\\dx]*[\\)\\/]((?:dvp-)?[\\d\\.]*)/i,                          // Roku\n            /hbbtv\\/\\d+\\.\\d+\\.\\d+ +\\([\\w\\+ ]*; *([\\w\\d][^;]*);([^;]*)/i         // HbbTV devices\n            ], [[VENDOR, /.+\\/(\\w+)/, '$1', strMapper, {'LG':'lge'}], [MODEL, trim], [TYPE, SMARTTV]], [\n                                                                                // SmartTV from Unidentified Vendors\n            /droid.+; ([\\w- ]+) (?:android tv|smart[- ]?tv)/i\n            ], [MODEL, [TYPE, SMARTTV]], [\n            /\\b(android tv|smart[- ]?tv|opera tv|tv; rv:|large screen[\\w ]+safari)\\b/i\n            ], [[TYPE, SMARTTV]], [\n\n            ///////////////////\n            // CONSOLES\n            ///////////////////\n\n            /(playstation \\w+)/i                                                // Playstation\n            ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [\n            /\\b(xbox(?: one)?(?!; xbox))[\\); ]/i                                // Microsoft Xbox\n            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [\n            /(ouya)/i,                                                          // Ouya\n            /(nintendo) (\\w+)/i,                                                // Nintendo\n            /(retroid) (pocket ([^\\)]+))/i                                      // Retroid Pocket\n            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [\n            /droid.+; (shield)( bui|\\))/i                                       // Nvidia Portable\n            ], [MODEL, [VENDOR, NVIDIA], [TYPE, CONSOLE]], [\n\n            ///////////////////\n            // WEARABLES\n            ///////////////////\n\n            /\\b(sm-[lr]\\d\\d[0156][fnuw]?s?|gear live)\\b/i                       // Samsung Galaxy Watch\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, WEARABLE]], [\n            /((pebble))app/i,                                                   // Pebble\n            /(asus|google|lg|oppo) ((pixel |zen)?watch[\\w ]*)( bui|\\))/i        // Asus ZenWatch / LG Watch / Pixel Watch\n            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [\n            /(ow(?:19|20)?we?[1-3]{1,3})/i                                      // Oppo Watch\n            ], [MODEL, [VENDOR, OPPO], [TYPE, WEARABLE]], [\n            /(watch)(?: ?os[,\\/]|\\d,\\d\\/)[\\d\\.]+/i                              // Apple Watch\n            ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [\n            /(opwwe\\d{3})/i                                                     // OnePlus Watch\n            ], [MODEL, [VENDOR, ONEPLUS], [TYPE, WEARABLE]], [\n            /(moto 360)/i                                                       // Motorola 360\n            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, WEARABLE]], [\n            /(smartwatch 3)/i                                                   // Sony SmartWatch\n            ], [MODEL, [VENDOR, SONY], [TYPE, WEARABLE]], [\n            /(g watch r)/i                                                      // LG G Watch R\n            ], [MODEL, [VENDOR, LG], [TYPE, WEARABLE]], [\n            /droid.+; (wt63?0{2,3})\\)/i\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [\n\n            ///////////////////\n            // XR\n            ///////////////////\n\n            /droid.+; (glass) \\d/i                                              // Google Glass\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, XR]], [\n            /(pico) (4|neo3(?: link|pro)?)/i                                    // Pico\n            ], [VENDOR, MODEL, [TYPE, XR]], [\n            /(quest( \\d| pro)?s?).+vr/i                                         // Meta Quest\n            ], [MODEL, [VENDOR, FACEBOOK], [TYPE, XR]], [\n            /mobile vr; rv.+firefox/i                                           // Unidentifiable VR device using Firefox Reality / Wolvic\n            ], [[TYPE, XR]], [\n\n            ///////////////////\n            // EMBEDDED\n            ///////////////////\n\n            /(tesla)(?: qtcarbrowser|\\/[-\\w\\.]+)/i                              // Tesla\n            ], [VENDOR, [TYPE, EMBEDDED]], [\n            /(aeobc)\\b/i                                                        // Echo Dot\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [\n            /(homepod).+mac os/i                                                // Apple HomePod\n            ], [MODEL, [VENDOR, APPLE], [TYPE, EMBEDDED]], [\n            /windows iot/i                                                      // Unidentifiable embedded device using Windows IoT\n            ], [[TYPE, EMBEDDED]], [\n\n            ////////////////////\n            // MIXED (GENERIC)\n            ///////////////////\n\n            /droid .+?; ([^;]+?)(?: bui|; wv\\)|\\) applew).+?(mobile|vr|\\d) safari/i\n            ], [MODEL, [TYPE, strMapper, { 'mobile' : 'Mobile', 'xr' : 'VR', '*' : TABLET }]], [\n            /\\b((tablet|tab)[;\\/]|focus\\/\\d(?!.+mobile))/i                      // Unidentifiable Tablet\n            ], [[TYPE, TABLET]], [\n            /(phone|mobile(?:[;\\/]| [ \\w\\/\\.]*safari)|pda(?=.+windows ce))/i    // Unidentifiable Mobile\n            ], [[TYPE, MOBILE]], [\n            /droid .+?; ([\\w\\. -]+)( bui|\\))/i                                  // Generic Android Device\n            ], [MODEL, [VENDOR, 'Generic']]\n        ],\n\n        engine : [[\n\n            /windows.+ edge\\/([\\w\\.]+)/i                                       // EdgeHTML\n            ], [VERSION, [NAME, EDGE+'HTML']], [\n\n            /(arkweb)\\/([\\w\\.]+)/i                                              // ArkWeb\n            ], [NAME, VERSION], [\n\n            /webkit\\/537\\.36.+chrome\\/(?!27)([\\w\\.]+)/i                         // Blink\n            ], [VERSION, [NAME, 'Blink']], [\n\n            /(presto)\\/([\\w\\.]+)/i,                                             // Presto\n            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna|servo)\\/([\\w\\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna/Servo\n            /ekioh(flow)\\/([\\w\\.]+)/i,                                          // Flow\n            /(khtml|tasman|links)[\\/ ]\\(?([\\w\\.]+)/i,                           // KHTML/Tasman/Links\n            /(icab)[\\/ ]([23]\\.[\\d\\.]+)/i,                                      // iCab\n\n            /\\b(libweb)/i                                                       // LibWeb\n            ], [NAME, VERSION], [\n            /ladybird\\//i\n            ], [[NAME, 'LibWeb']], [\n\n            /rv\\:([\\w\\.]{1,9})\\b.+(gecko)/i                                     // Gecko\n            ], [VERSION, NAME]\n        ],\n\n        os : [[\n\n            // Windows\n            /(windows nt) (6\\.[23]); arm/i                                      // Windows RT\n            ], [[NAME, /N/, 'R'], [VERSION, strMapper, windowsVersionMap]], [\n            /(windows (?:phone|mobile|iot))(?: os)?[\\/ ]?([\\d\\.]*( se)?)/i,     // Windows IoT/Mobile/Phone\n                                                                                // Windows NT/3.1/95/98/ME/2000/XP/Vista/7/8/8.1/10/11\n            /(windows)[\\/ ](1[01]|2000|3\\.1|7|8(\\.1)?|9[58]|me|server 20\\d\\d( r2)?|vista|xp)/i\n            ], [NAME, VERSION], [\n            /windows nt ?([\\d\\.\\)]*)(?!.+xbox)/i,\n            /\\bwin(?=3| ?9|n)(?:nt| 9x )?([\\d\\.;]*)/i\n            ], [[VERSION, /(;|\\))/g, '', strMapper, windowsVersionMap], [NAME, WINDOWS]], [\n            /(windows ce)\\/?([\\d\\.]*)/i                                         // Windows CE\n            ], [NAME, VERSION], [\n\n            // iOS/macOS\n            /[adehimnop]{4,7}\\b(?:.*os ([\\w]+) like mac|; opera)/i,             // iOS\n            /(?:ios;fbsv\\/|iphone.+ios[\\/ ])([\\d\\.]+)/i,\n            /cfnetwork\\/.+darwin/i\n            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [\n            /(mac os x) ?([\\w\\. ]*)/i,\n            /(macintosh|mac_powerpc\\b)(?!.+(haiku|morphos))/i                   // Mac OS\n            ], [[NAME, 'macOS'], [VERSION, /_/g, '.']], [\n\n            // Google Chromecast\n            /android ([\\d\\.]+).*crkey/i                                         // Google Chromecast, Android-based\n            ], [VERSION, [NAME, CHROMECAST + ' Android']], [\n            /fuchsia.*crkey\\/([\\d\\.]+)/i                                        // Google Chromecast, Fuchsia-based\n            ], [VERSION, [NAME, CHROMECAST + ' Fuchsia']], [\n            /crkey\\/([\\d\\.]+).*devicetype\\/smartspeaker/i                       // Google Chromecast, Linux-based Smart Speaker\n            ], [VERSION, [NAME, CHROMECAST + ' SmartSpeaker']], [\n            /linux.*crkey\\/([\\d\\.]+)/i                                          // Google Chromecast, Legacy Linux-based\n            ], [VERSION, [NAME, CHROMECAST + ' Linux']], [\n            /crkey\\/([\\d\\.]+)/i                                                 // Google Chromecast, unknown\n            ], [VERSION, [NAME, CHROMECAST]], [\n\n            // Mobile OSes\n            /droid ([\\w\\.]+)\\b.+(android[- ]x86)/i                              // Android-x86\n            ], [VERSION, NAME], [                                               \n            /(ubuntu) ([\\w\\.]+) like android/i                                  // Ubuntu Touch\n            ], [[NAME, /(.+)/, '$1 Touch'], VERSION], [\n            /(harmonyos)[\\/ ]?([\\d\\.]*)/i,                                      // HarmonyOS\n                                                                                // Android/Blackberry/WebOS/QNX/Bada/RIM/KaiOS/Maemo/MeeGo/S40/Sailfish OS/OpenHarmony/Tizen\n            /(android|bada|blackberry|kaios|maemo|meego|openharmony|qnx|rim tablet os|sailfish|series40|symbian|tizen)\\w*[-\\/\\.; ]?([\\d\\.]*)/i\n            ], [NAME, VERSION], [\n            /\\(bb(10);/i                                                        // BlackBerry 10\n            ], [VERSION, [NAME, BLACKBERRY]], [\n            /(?:symbian ?os|symbos|s60(?=;)|series ?60)[-\\/ ]?([\\w\\.]*)/i       // Symbian\n            ], [VERSION, [NAME, 'Symbian']], [\n            /mozilla\\/[\\d\\.]+ \\((?:mobile|tablet|tv|mobile; [\\w ]+); rv:.+ gecko\\/([\\w\\.]+)/i // Firefox OS\n            ], [VERSION, [NAME, FIREFOX+' OS']], [\n            /\\b(?:hp)?wos(?:browser)?\\/([\\w\\.]+)/i,                             // WebOS\n            /webos(?:[ \\/]?|\\.tv-20(?=2[2-9]))(\\d[\\d\\.]*)/i\n            ], [VERSION, [NAME, 'webOS']], [\n            /web0s;.+?(?:chr[o0]me|safari)\\/(\\d+)/i\n                                                                                // https://webostv.developer.lge.com/develop/specifications/web-api-and-web-engine\n            ], [[VERSION, strMapper, {'25':'120','24':'108','23':'94','22':'87','6':'79','5':'68','4':'53','3':'38','2':'538','1':'537','*':'TV'}], [NAME, 'webOS']], [                   \n            /watch(?: ?os[,\\/]|\\d,\\d\\/)([\\d\\.]+)/i                              // watchOS\n            ], [VERSION, [NAME, 'watchOS']], [\n\n            // Google ChromeOS\n            /(cros) [\\w]+(?:\\)| ([\\w\\.]+)\\b)/i                                  // Chromium OS\n            ], [[NAME, \"Chrome OS\"], VERSION],[\n\n            // Smart TVs\n            /panasonic;(viera)/i,                                               // Panasonic Viera\n            /(netrange)mmh/i,                                                   // Netrange\n            /(nettv)\\/(\\d+\\.[\\w\\.]+)/i,                                         // NetTV\n\n            // Console\n            /(nintendo|playstation) (\\w+)/i,                                    // Nintendo/Playstation\n            /(xbox); +xbox ([^\\);]+)/i,                                         // Microsoft Xbox (360, One, X, S, Series X, Series S)\n            /(pico) .+os([\\w\\.]+)/i,                                            // Pico\n\n            // Other\n            /\\b(joli|palm)\\b ?(?:os)?\\/?([\\w\\.]*)/i,                            // Joli/Palm\n            /linux.+(mint)[\\/\\(\\) ]?([\\w\\.]*)/i,                                // Mint\n            /(mageia|vectorlinux|fuchsia|arcaos|arch(?= ?linux))[;l ]([\\d\\.]*)/i,  // Mageia/VectorLinux/Fuchsia/ArcaOS/Arch\n            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire|knoppix)(?: gnu[\\/ ]linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\\/ ]?(?!chrom|package)([-\\w\\.]*)/i,\n                                                                                // Ubuntu/Debian/SUSE/Gentoo/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire/Knoppix\n            /((?:open)?solaris)[-\\/ ]?([\\w\\.]*)/i,                              // Solaris\n            /\\b(aix)[; ]([1-9\\.]{0,4})/i,                                       // AIX\n            /(hurd|linux|morphos)(?: (?:arm|x86|ppc)\\w*| ?)([\\w\\.]*)/i,         // Hurd/Linux/MorphOS\n            /(gnu) ?([\\w\\.]*)/i,                                                // GNU\n            /\\b([-frentopcghs]{0,5}bsd|dragonfly)[\\/ ]?(?!amd|[ix346]{1,2}86)([\\w\\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly\n            /(haiku) ?(r\\d)?/i                                                  // Haiku\n            ], [NAME, VERSION], [\n            /(sunos) ?([\\d\\.]*)/i                                               // Solaris\n            ], [[NAME, 'Solaris'], VERSION], [\n            /\\b(beos|os\\/2|amigaos|openvms|hp-ux|serenityos)/i,                 // BeOS/OS2/AmigaOS/OpenVMS/HP-UX/SerenityOS\n            /(unix) ?([\\w\\.]*)/i                                                // UNIX\n            ], [NAME, VERSION]\n        ]\n    };\n\n    /////////////////\n    // Factories\n    ////////////////\n\n    var defaultProps = (function () {\n            var props = { init : {}, isIgnore : {}, isIgnoreRgx : {}, toString : {}};\n            setProps.call(props.init, [\n                [UA_BROWSER, [NAME, VERSION, MAJOR, TYPE]],\n                [UA_CPU, [ARCHITECTURE]],\n                [UA_DEVICE, [TYPE, MODEL, VENDOR]],\n                [UA_ENGINE, [NAME, VERSION]],\n                [UA_OS, [NAME, VERSION]]\n            ]);\n            setProps.call(props.isIgnore, [\n                [UA_BROWSER, [VERSION, MAJOR]],\n                [UA_ENGINE, [VERSION]],\n                [UA_OS, [VERSION]]\n            ]);\n            setProps.call(props.isIgnoreRgx, [\n                [UA_BROWSER, / ?browser$/i],\n                [UA_OS, / ?os$/i]\n            ]);\n            setProps.call(props.toString, [\n                [UA_BROWSER, [NAME, VERSION]],\n                [UA_CPU, [ARCHITECTURE]],\n                [UA_DEVICE, [VENDOR, MODEL]],\n                [UA_ENGINE, [NAME, VERSION]],\n                [UA_OS, [NAME, VERSION]]\n            ]);\n            return props;\n    })();\n\n    var createIData = function (item, itemType) {\n\n        var init_props = defaultProps.init[itemType],\n            is_ignoreProps = defaultProps.isIgnore[itemType] || 0,\n            is_ignoreRgx = defaultProps.isIgnoreRgx[itemType] || 0,\n            toString_props = defaultProps.toString[itemType] || 0;\n\n        function IData () {\n            setProps.call(this, init_props);\n        }\n\n        IData.prototype.getItem = function () {\n            return item;\n        };\n\n        IData.prototype.withClientHints = function () {\n\n            // nodejs / non-client-hints browsers\n            if (!NAVIGATOR_UADATA) {\n                return item\n                        .parseCH()\n                        .get();\n            }\n\n            // browsers based on chromium 85+\n            return NAVIGATOR_UADATA\n                    .getHighEntropyValues(CH_ALL_VALUES)\n                    .then(function (res) {\n                        return item\n                                .setCH(new UACHData(res, false))\n                                .parseCH()\n                                .get();\n            });\n        };\n\n        IData.prototype.withFeatureCheck = function () {\n            return item.detectFeature().get();\n        };\n\n        if (itemType != UA_RESULT) {\n            IData.prototype.is = function (strToCheck) {\n                var is = false;\n                for (var i in this) {\n                    if (this.hasOwnProperty(i) && !has(is_ignoreProps, i) && lowerize(is_ignoreRgx ? strip(is_ignoreRgx, this[i]) : this[i]) == lowerize(is_ignoreRgx ? strip(is_ignoreRgx, strToCheck) : strToCheck)) {\n                        is = true;\n                        if (strToCheck != UNDEF_TYPE) break;\n                    } else if (strToCheck == UNDEF_TYPE && is) {\n                        is = !is;\n                        break;\n                    }\n                }\n                return is;\n            };\n            IData.prototype.toString = function () {\n                var str = EMPTY;\n                for (var i in toString_props) {\n                    if (typeof(this[toString_props[i]]) !== UNDEF_TYPE) {\n                        str += (str ? ' ' : EMPTY) + this[toString_props[i]];\n                    }\n                }\n                return str || UNDEF_TYPE;\n            };\n        }\n\n        if (!NAVIGATOR_UADATA) {\n            IData.prototype.then = function (cb) { \n                var that = this;\n                var IDataResolve = function () {\n                    for (var prop in that) {\n                        if (that.hasOwnProperty(prop)) {\n                            this[prop] = that[prop];\n                        }\n                    }\n                };\n                IDataResolve.prototype = {\n                    is : IData.prototype.is,\n                    toString : IData.prototype.toString\n                };\n                var resolveData = new IDataResolve();\n                cb(resolveData);\n                return resolveData;\n            };\n        }\n\n        return new IData();\n    };\n\n    /////////////////\n    // Constructor\n    ////////////////\n\n    function UACHData (uach, isHttpUACH) {\n        uach = uach || {};\n        setProps.call(this, CH_ALL_VALUES);\n        if (isHttpUACH) {\n            setProps.call(this, [\n                [BRANDS, itemListToArray(uach[CH_HEADER])],\n                [FULLVERLIST, itemListToArray(uach[CH_HEADER_FULL_VER_LIST])],\n                [MOBILE, /\\?1/.test(uach[CH_HEADER_MOBILE])],\n                [MODEL, stripQuotes(uach[CH_HEADER_MODEL])],\n                [PLATFORM, stripQuotes(uach[CH_HEADER_PLATFORM])],\n                [PLATFORMVER, stripQuotes(uach[CH_HEADER_PLATFORM_VER])],\n                [ARCHITECTURE, stripQuotes(uach[CH_HEADER_ARCH])],\n                [FORMFACTORS, itemListToArray(uach[CH_HEADER_FORM_FACTORS])],\n                [BITNESS, stripQuotes(uach[CH_HEADER_BITNESS])]\n            ]);\n        } else {\n            for (var prop in uach) {\n                if(this.hasOwnProperty(prop) && typeof uach[prop] !== UNDEF_TYPE) this[prop] = uach[prop];\n            }\n        }\n    }\n\n    function UAItem (itemType, ua, rgxMap, uaCH) {\n\n        this.get = function (prop) {\n            if (!prop) return this.data;\n            return this.data.hasOwnProperty(prop) ? this.data[prop] : undefined;\n        };\n\n        this.set = function (prop, val) {\n            this.data[prop] = val;\n            return this;\n        };\n\n        this.setCH = function (ch) {\n            this.uaCH = ch;\n            return this;\n        };\n\n        this.detectFeature = function () {\n            if (NAVIGATOR && NAVIGATOR.userAgent == this.ua) {\n                switch (this.itemType) {\n                    case UA_BROWSER:\n                        // Brave-specific detection\n                        if (NAVIGATOR.brave && typeof NAVIGATOR.brave.isBrave == FUNC_TYPE) {\n                            this.set(NAME, 'Brave');\n                        }\n                        break;\n                    case UA_DEVICE:\n                        // Chrome-specific detection: check for 'mobile' value of navigator.userAgentData\n                        if (!this.get(TYPE) && NAVIGATOR_UADATA && NAVIGATOR_UADATA[MOBILE]) {\n                            this.set(TYPE, MOBILE);\n                        }\n                        // iPadOS-specific detection: identified as Mac, but has some iOS-only properties\n                        if (this.get(MODEL) == 'Macintosh' && NAVIGATOR && typeof NAVIGATOR.standalone !== UNDEF_TYPE && NAVIGATOR.maxTouchPoints && NAVIGATOR.maxTouchPoints > 2) {\n                            this.set(MODEL, 'iPad')\n                                .set(TYPE, TABLET);\n                        }\n                        break;\n                    case UA_OS:\n                        // Chrome-specific detection: check for 'platform' value of navigator.userAgentData\n                        if (!this.get(NAME) && NAVIGATOR_UADATA && NAVIGATOR_UADATA[PLATFORM]) {\n                            this.set(NAME, NAVIGATOR_UADATA[PLATFORM]);\n                        }\n                        break;\n                    case UA_RESULT:\n                        var data = this.data;\n                        var detect = function (itemType) {\n                            return data[itemType]\n                                    .getItem()\n                                    .detectFeature()\n                                    .get();\n                        };\n                        this.set(UA_BROWSER, detect(UA_BROWSER))\n                            .set(UA_CPU, detect(UA_CPU))\n                            .set(UA_DEVICE, detect(UA_DEVICE))\n                            .set(UA_ENGINE, detect(UA_ENGINE))\n                            .set(UA_OS, detect(UA_OS));\n                }\n            }\n            return this;\n        };\n\n        this.parseUA = function () {\n            if (this.itemType != UA_RESULT) {\n                rgxMapper.call(this.data, this.ua, this.rgxMap);\n            }\n            if (this.itemType == UA_BROWSER) {\n                this.set(MAJOR, majorize(this.get(VERSION)));\n            }\n            return this;\n        };\n\n        this.parseCH = function () {\n            var uaCH = this.uaCH,\n                rgxMap = this.rgxMap;\n    \n            switch (this.itemType) {\n                case UA_BROWSER:\n                case UA_ENGINE:\n                    var brands = uaCH[FULLVERLIST] || uaCH[BRANDS], prevName;\n                    if (brands) {\n                        for (var i in brands) {\n                            var brandName = brands[i].brand || brands[i],\n                                brandVersion = brands[i].version;\n                            if (this.itemType == UA_BROWSER && \n                                !/not.a.brand/i.test(brandName) && \n                                (!prevName || \n                                    (/Chrom/.test(prevName) && brandName != CHROMIUM) || \n                                    (prevName == EDGE && /WebView2/.test(brandName))\n                                )) {\n                                    brandName = strMapper(brandName, browserHintsMap);\n                                    prevName = this.get(NAME);\n                                    if (!(prevName && !/Chrom/.test(prevName) && /Chrom/.test(brandName))) {\n                                        this.set(NAME, brandName)\n                                            .set(VERSION, brandVersion)\n                                            .set(MAJOR, majorize(brandVersion));\n                                    }\n                                    prevName = brandName;\n                            }\n                            if (this.itemType == UA_ENGINE && brandName == CHROMIUM) {\n                                this.set(VERSION, brandVersion);\n                            }\n                        }\n                    }\n                    break;\n                case UA_CPU:\n                    var archName = uaCH[ARCHITECTURE];\n                    if (archName) {\n                        if (archName && uaCH[BITNESS] == '64') archName += '64';\n                        rgxMapper.call(this.data, archName + ';', rgxMap);\n                    }\n                    break;\n                case UA_DEVICE:\n                    if (uaCH[MOBILE]) {\n                        this.set(TYPE, MOBILE);\n                    }\n                    if (uaCH[MODEL]) {\n                        this.set(MODEL, uaCH[MODEL]);\n                        if (!this.get(TYPE) || !this.get(VENDOR)) {\n                            var reParse = {};\n                            rgxMapper.call(reParse, 'droid 9; ' + uaCH[MODEL] + ')', rgxMap);\n                            if (!this.get(TYPE) && !!reParse.type) {\n                                this.set(TYPE, reParse.type);\n                            }\n                            if (!this.get(VENDOR) && !!reParse.vendor) {\n                                this.set(VENDOR, reParse.vendor);\n                            }\n                        }\n                    }\n                    if (uaCH[FORMFACTORS]) {\n                        var ff;\n                        if (typeof uaCH[FORMFACTORS] !== 'string') {\n                            var idx = 0;\n                            while (!ff && idx < uaCH[FORMFACTORS].length) {\n                                ff = strMapper(uaCH[FORMFACTORS][idx++], formFactorsMap);\n                            }\n                        } else {\n                            ff = strMapper(uaCH[FORMFACTORS], formFactorsMap);\n                        }\n                        this.set(TYPE, ff);\n                    }\n                    break;\n                case UA_OS:\n                    var osName = uaCH[PLATFORM];\n                    if(osName) {\n                        var osVersion = uaCH[PLATFORMVER];\n                        if (osName == WINDOWS) osVersion = (parseInt(majorize(osVersion), 10) >= 13 ? '11' : '10');\n                        this.set(NAME, osName)\n                            .set(VERSION, osVersion);\n                    }\n                    // Xbox-Specific Detection\n                    if (this.get(NAME) == WINDOWS && uaCH[MODEL] == 'Xbox') {\n                        this.set(NAME, 'Xbox')\n                            .set(VERSION, undefined);\n                    }           \n                    break;\n                case UA_RESULT:\n                    var data = this.data;\n                    var parse = function (itemType) {\n                        return data[itemType]\n                                .getItem()\n                                .setCH(uaCH)\n                                .parseCH()\n                                .get();\n                    };\n                    this.set(UA_BROWSER, parse(UA_BROWSER))\n                        .set(UA_CPU, parse(UA_CPU))\n                        .set(UA_DEVICE, parse(UA_DEVICE))\n                        .set(UA_ENGINE, parse(UA_ENGINE))\n                        .set(UA_OS, parse(UA_OS));\n            }\n            return this;\n        };\n\n        setProps.call(this, [\n            ['itemType', itemType],\n            ['ua', ua],\n            ['uaCH', uaCH],\n            ['rgxMap', rgxMap],\n            ['data', createIData(this, itemType)]\n        ]);\n\n        return this;\n    }\n\n    function UAParser (ua, extensions, headers) {\n\n        if (typeof ua === OBJ_TYPE) {\n            if (isExtensions(ua, true)) {\n                if (typeof extensions === OBJ_TYPE) {\n                    headers = extensions;               // case UAParser(extensions, headers)           \n                }\n                extensions = ua;                        // case UAParser(extensions)\n            } else {\n                headers = ua;                           // case UAParser(headers)\n                extensions = undefined;\n            }\n            ua = undefined;\n        } else if (typeof ua === STR_TYPE && !isExtensions(extensions, true)) {\n            headers = extensions;                       // case UAParser(ua, headers)\n            extensions = undefined;\n        }\n\n        // Convert Headers object into a plain object\n        if (headers && typeof headers.append === FUNC_TYPE) {\n            var kv = {};\n            headers.forEach(function (v, k) { kv[k] = v; });\n            headers = kv;\n        }\n        \n        if (!(this instanceof UAParser)) {\n            return new UAParser(ua, extensions, headers).getResult();\n        }\n\n        var userAgent = typeof ua === STR_TYPE ? ua :                                       // Passed user-agent string\n                                (headers && headers[USER_AGENT] ? headers[USER_AGENT] :     // User-Agent from passed headers\n                                ((NAVIGATOR && NAVIGATOR.userAgent) ? NAVIGATOR.userAgent : // navigator.userAgent\n                                    EMPTY)),                                                // empty string\n\n            httpUACH = new UACHData(headers, true),\n            regexMap = extensions ? \n                        extend(defaultRegexes, extensions) : \n                        defaultRegexes,\n\n            createItemFunc = function (itemType) {\n                if (itemType == UA_RESULT) {\n                    return function () {\n                        return new UAItem(itemType, userAgent, regexMap, httpUACH)\n                                    .set('ua', userAgent)\n                                    .set(UA_BROWSER, this.getBrowser())\n                                    .set(UA_CPU, this.getCPU())\n                                    .set(UA_DEVICE, this.getDevice())\n                                    .set(UA_ENGINE, this.getEngine())\n                                    .set(UA_OS, this.getOS())\n                                    .get();\n                    };\n                } else {\n                    return function () {\n                        return new UAItem(itemType, userAgent, regexMap[itemType], httpUACH)\n                                    .parseUA()\n                                    .get();\n                    };\n                }\n            };\n            \n        // public methods\n        setProps.call(this, [\n            ['getBrowser', createItemFunc(UA_BROWSER)],\n            ['getCPU', createItemFunc(UA_CPU)],\n            ['getDevice', createItemFunc(UA_DEVICE)],\n            ['getEngine', createItemFunc(UA_ENGINE)],\n            ['getOS', createItemFunc(UA_OS)],\n            ['getResult', createItemFunc(UA_RESULT)],\n            ['getUA', function () { return userAgent; }],\n            ['setUA', function (ua) {\n                if (isString(ua))\n                    userAgent = ua.length > UA_MAX_LENGTH ? trim(ua, UA_MAX_LENGTH) : ua;\n                return this;\n            }]\n        ])\n        .setUA(userAgent);\n\n        return this;\n    }\n\n    UAParser.VERSION = LIBVERSION;\n    UAParser.BROWSER =  enumerize([NAME, VERSION, MAJOR, TYPE]);\n    UAParser.CPU = enumerize([ARCHITECTURE]);\n    UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);\n    UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);\n\n    ///////////\n    // Export\n    //////////\n\n    // check js environment\n    if (typeof exports !== UNDEF_TYPE) {\n        // nodejs env\n        if (typeof module !== UNDEF_TYPE && module.exports) {\n            exports = module.exports = UAParser;\n        }\n        exports.UAParser = UAParser;\n    } else {\n        // requirejs env (optional)\n        if (typeof define === FUNC_TYPE && define.amd) {\n            define(function () {\n                return UAParser;\n            });\n        } else if (isWindow) {\n            // browser env\n            window.UAParser = UAParser;\n        }\n    }\n\n    // jQuery/Zepto specific (optional)\n    // Note:\n    //   In AMD env the global scope should be kept clean, but jQuery is an exception.\n    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,\n    //   and we should catch that.\n    var $ = isWindow && (window.jQuery || window.Zepto);\n    if ($ && !$.ua) {\n        var parser = new UAParser();\n        $.ua = parser.getResult();\n        $.ua.get = function () {\n            return parser.getUA();\n        };\n        $.ua.set = function (ua) {\n            parser.setUA(ua);\n            var result = parser.getResult();\n            for (var prop in result) {\n                $.ua[prop] = result[prop];\n            }\n        };\n    }\n\n})(typeof window === 'object' ? window : this);\n","import { GameConstants } from \"../game/gameConstants\";\r\nimport { LinkButton } from \"./linkButton\";\r\n\r\nexport class FeedbackButton extends LinkButton {\r\n  constructor(\r\n    { x, y }: { x: number; y: number } = {\r\n      x: GameConstants.WIDTH / 2,\r\n      y: GameConstants.HEIGHT / 2,\r\n    },\r\n  ) {\r\n    super({\r\n      text: \"Provide Feedback\",\r\n      linkUrl: \"https://forms.gle/sWzqPGCa1L9XJ3Mk8\",\r\n      x,\r\n      y,\r\n    });\r\n  }\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Shrooms } from \"../../item/usable/shrooms\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\n\r\nexport class Succulent extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 18;\r\n    this.tileY = 2;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"succulent\";\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 28;\r\n    //this.drops.push(new Shrooms(this.room, this.x, this.y));\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { EnvType, getEnvTypeName } from \"../constants/environmentTypes\";\r\nimport { globalEventBus } from \"../event/eventBus\";\r\nimport { AppEvents, EventPayloads, EVENTS } from \"../event/events\";\r\n\r\nexport interface Stats {\r\n  enemiesKilled: number;\r\n  damageDone: number;\r\n  damageTaken: number;\r\n  turnsPassed: number;\r\n  coinsCollected: number;\r\n  itemsCollected: number;\r\n  enemies: string[];\r\n  weaponChoice: string | null;\r\n  sidePathsEntered: Array<{ depth: number; sidePath: string }>;\r\n  xp: number;\r\n  level: number;\r\n}\r\n\r\nexport class StatsTracker {\r\n  private stats: Stats = StatsTracker.initialStats();\r\n\r\n  constructor() {\r\n    this.initializeListeners();\r\n  }\r\n\r\n  private static initialStats(): Stats {\r\n    return {\r\n      enemiesKilled: 0,\r\n      damageDone: 0,\r\n      damageTaken: 0,\r\n      turnsPassed: 0,\r\n      coinsCollected: 0,\r\n      itemsCollected: 0,\r\n      enemies: [],\r\n      weaponChoice: null,\r\n      sidePathsEntered: [],\r\n      xp: 0,\r\n      level: 1,\r\n    };\r\n  }\r\n\r\n  private initializeListeners(): void {\r\n    globalEventBus.on(EVENTS.ENEMY_KILLED, this.handleEnemyKilled);\r\n    globalEventBus.on(EVENTS.DAMAGE_DONE, this.handleDamageDone);\r\n    globalEventBus.on(EVENTS.DAMAGE_TAKEN, this.handleDamageTaken);\r\n    globalEventBus.on(EVENTS.TURN_PASSED, this.handleTurnPassed);\r\n    globalEventBus.on(EVENTS.COIN_COLLECTED, this.handleCoinCollected);\r\n    globalEventBus.on(EVENTS.ITEM_COLLECTED, this.handleItemCollected);\r\n  }\r\n\r\n  private handleEnemyKilled = (\r\n    payload: EventPayloads[typeof EVENTS.ENEMY_KILLED],\r\n  ): void => {\r\n    this.stats.enemiesKilled += 1;\r\n    this.stats.enemies.push(payload.enemyId);\r\n    this.stats.xp += payload.xp;\r\n    this.stats.level = Math.floor(this.stats.xp / 100) + 1;\r\n    //console.log(`Enemy killed: ${payload.enemyId}`);\r\n  };\r\n\r\n  private handleDamageDone = (\r\n    payload: EventPayloads[typeof EVENTS.DAMAGE_DONE],\r\n  ): void => {\r\n    this.stats.damageDone += payload.amount;\r\n    //console.log(`Damage done: ${payload.amount}`);\r\n  };\r\n\r\n  private handleDamageTaken = (\r\n    payload: EventPayloads[typeof EVENTS.DAMAGE_TAKEN],\r\n  ): void => {\r\n    this.stats.damageTaken += payload.amount;\r\n    //console.log(`Damage taken: ${payload.amount}`);\r\n  };\r\n\r\n  private handleTurnPassed = (): void => {\r\n    this.stats.turnsPassed += 1;\r\n    //console.log(`Turn passed: ${this.stats.turnsPassed}`);\r\n  };\r\n\r\n  private handleCoinCollected = (\r\n    payload: EventPayloads[typeof EVENTS.COIN_COLLECTED],\r\n  ): void => {\r\n    this.stats.coinsCollected += payload.amount;\r\n    //console.log(`Coins collected: ${payload.amount}`);\r\n  };\r\n\r\n  private handleItemCollected = (\r\n    payload: EventPayloads[typeof EVENTS.ITEM_COLLECTED],\r\n  ): void => {\r\n    this.stats.itemsCollected += 1;\r\n    //console.log(`Item collected: ${payload.itemId}`);\r\n  };\r\n\r\n  public getStats(): Stats {\r\n    return this.stats;\r\n  }\r\n\r\n  public getXp(): number {\r\n    return this.stats.xp;\r\n  }\r\n\r\n  increaseXp(xp: number) {\r\n    this.stats.xp += xp;\r\n  }\r\n\r\n  public recordWeaponChoice(weaponChoice: string) {\r\n    this.stats.weaponChoice = weaponChoice;\r\n  }\r\n\r\n  public recordSidePathEntered({\r\n    depth,\r\n    sidePath,\r\n  }: {\r\n    depth: number;\r\n    sidePath: EnvType;\r\n  }) {\r\n    this.stats.sidePathsEntered.push({\r\n      depth,\r\n      sidePath: getEnvTypeName(sidePath),\r\n    });\r\n  }\r\n\r\n  public resetStats(): void {\r\n    this.stats = StatsTracker.initialStats();\r\n    //console.log(\"Stats have been reset.\");\r\n  }\r\n\r\n  public setStats(stats: Stats) {\r\n    this.stats = stats;\r\n  }\r\n}\r\n\r\nexport const statsTracker = new StatsTracker();\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { GoldBar } from \"./goldBar\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class GoldOre extends Item {\r\n  static itemName = \"gold ore\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 18;\r\n    this.tileY = 0;\r\n    this.name = GoldOre.itemName;\r\n    this.stackable = true;\r\n    this.description = \"Some gold ore\";\r\n  }\r\n\r\n  smelt = (player: Player) => {\r\n    if (player.inventory.isFull()) {\r\n      this.level.game.pushMessage(\r\n        `You don't have enough space in your inventory to smelt the gold ore.`,\r\n      );\r\n      return;\r\n    }\r\n    if (this.stackCount >= 3) {\r\n      player.inventory.subtractItem(this, 3);\r\n      player.inventory.addItem(new GoldBar(this.level, this.x, this.y));\r\n      Sound.playSmith();\r\n      this.level.game.pushMessage(`You smelt the gold ore into a gold bar.`);\r\n    }\r\n  };\r\n}\r\n","import { Projectile } from \"./projectile\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"../player/player\";\r\nimport { HitWarning } from \"../drawable/hitWarning\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Enemy } from \"../entity/enemy/enemy\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\nimport { Lighting } from \"../lighting/lighting\";\r\nimport { OccultistEnemy } from \"../entity/enemy/occultistEnemy\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { BeamEffect } from \"./beamEffect\";\r\nimport { GenericParticle } from \"../particle/genericParticle\";\r\n\r\nexport class StunAnimation extends Projectile {\r\n  frame: number;\r\n  parent: Entity;\r\n  tileX: number;\r\n  tileY: number;\r\n  ticks: number = 0;\r\n\r\n  constructor(parent: Entity, x: number, y: number) {\r\n    super(parent, x, y);\r\n    this.frame = 0;\r\n\r\n    this.parent.room.projectiles.push(this);\r\n  }\r\n\r\n  remove = () => {\r\n    this.parent.room.projectiles = this.parent.room.projectiles.filter(\r\n      (projectile) => projectile !== this,\r\n    );\r\n  };\r\n\r\n  tick = () => {\r\n    if (this.ticks > 0 || this.parent.dead === true) {\r\n      this.remove();\r\n      this.parent.unconscious = false;\r\n      this.parent.justHurt = false;\r\n    }\r\n    this.ticks++;\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalCompositeOperation = \"screen\";\r\n    Game.ctx.globalAlpha = 0.5;\r\n    this.frame += 0.2 * delta;\r\n    if (this.frame > 4) this.frame = 0;\r\n\r\n    //this.drawableY = this.parent.drawableY + 0.05;\r\n    //Game.ctx.globalCompositeOperation = \"difference\";\r\n    //if (this.parent.shielded) {\r\n    Game.drawFX(\r\n      19 + Math.floor(this.frame),\r\n      0,\r\n      1,\r\n      1,\r\n      this.parent.x - this.parent.drawX,\r\n      this.parent.y - this.parent.drawY - 1.4,\r\n      1,\r\n      1,\r\n    );\r\n    //}\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Room } from \"../room/room\";\r\nimport { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Tile } from \"./tile\";\r\n\r\nexport class Chasm extends Tile {\r\n  tileX: number;\r\n  tileY: number;\r\n  topEdge: boolean;\r\n  private _buffer: HTMLCanvasElement;\r\n\r\n  constructor(\r\n    room: Room,\r\n    x: number,\r\n    y: number,\r\n    leftEdge: boolean,\r\n    rightEdge: boolean,\r\n    topEdge: boolean,\r\n    bottomEdge: boolean,\r\n  ) {\r\n    super(room, x, y);\r\n\r\n    this.tileX = this.skin === 1 ? 24 : 20;\r\n    this.tileY = 1;\r\n\r\n    if (leftEdge) this.tileX--;\r\n    else if (rightEdge) this.tileX++;\r\n    if (topEdge) this.tileY--;\r\n    else if (bottomEdge) this.tileY++;\r\n\r\n    this.topEdge = topEdge;\r\n  }\r\n\r\n  isSolid = (): boolean => {\r\n    return true;\r\n  };\r\n  canCrushEnemy = (): boolean => {\r\n    return true;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    const ts = GameConstants.TILESIZE;\r\n    const tilesHigh = this.topEdge ? 2 : 1;\r\n\r\n    // Prepare/reuse offscreen buffer with correct size\r\n    if (\r\n      !this._buffer ||\r\n      this._buffer.width !== ts ||\r\n      this._buffer.height !== tilesHigh * ts\r\n    ) {\r\n      this._buffer = document.createElement(\"canvas\");\r\n      this._buffer.width = ts;\r\n      this._buffer.height = tilesHigh * ts;\r\n    }\r\n\r\n    const offCtx = this._buffer.getContext(\"2d\");\r\n    offCtx.clearRect(0, 0, this._buffer.width, this._buffer.height);\r\n\r\n    // Temporarily redirect Game.ctx to offscreen to reuse Game.drawTile\r\n    const mainCtx = Game.ctx;\r\n    const prevComp =\r\n      offCtx.globalCompositeOperation as GlobalCompositeOperation;\r\n    (Game as any).ctx = offCtx;\r\n\r\n    // 1) Mask\r\n    offCtx.globalCompositeOperation = \"source-over\";\r\n    Game.drawTile(\r\n      this.tileX,\r\n      this.tileY,\r\n      1,\r\n      1,\r\n      0,\r\n      0,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n\r\n    // 2) Fill clipped by mask\r\n    offCtx.globalCompositeOperation = \"source-in\";\r\n    Game.drawTile(\r\n      1,\r\n      this.skin,\r\n      1,\r\n      1,\r\n      0,\r\n      0,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n\r\n    // 3) Background behind both (only for top edge variant which spans 2 tiles)\r\n    if (this.topEdge) {\r\n      offCtx.globalCompositeOperation = \"destination-over\";\r\n      Game.drawTile(\r\n        22,\r\n        0,\r\n        1,\r\n        2,\r\n        0,\r\n        0,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n\r\n    // Restore Game.ctx\r\n    (Game as any).ctx = mainCtx;\r\n    offCtx.globalCompositeOperation = prevComp;\r\n\r\n    // Blit to main canvas at world position\r\n    Game.ctx.save();\r\n    Game.ctx.globalCompositeOperation = \"source-over\";\r\n    Game.ctx.drawImage(this._buffer, this.x * ts, this.y * ts);\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Weapon } from \"./weapon\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { SlashParticle } from \"../../particle/slashParticle\";\r\nimport { Direction } from \"../../game\";\r\nimport { AttackAnimation } from \"../../particle/attackAnimation\";\r\n\r\nexport class DualDagger extends Weapon {\r\n  firstAttack: boolean;\r\n  static itemName = \"dual daggers\";\r\n\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 23;\r\n    this.tileY = 0;\r\n    this.firstAttack = true;\r\n    this.name = \"Dual Daggers\";\r\n    this.useCost = 2;\r\n    this.description =\r\n      \"After the first attack, enemies will not take their turn until you attack or move again.\";\r\n  }\r\n\r\n  hitSound = () => {\r\n    Sound.swing();\r\n    Sound.playShortSlice();\r\n  };\r\n\r\n  tickInInventory = () => {\r\n    this.firstAttack = true;\r\n  };\r\n\r\n  weaponMove = (newX: number, newY: number): boolean => {\r\n    const entities = this.getEntitiesAt(newX, newY).filter((e) => !e.pushable);\r\n    let flag = false;\r\n\r\n    for (let e of entities) {\r\n      this.attack(e, this.damage);\r\n      this.statusEffect(e);\r\n      flag = true;\r\n    }\r\n\r\n    if (flag) {\r\n      this.hitSound();\r\n      this.wielder.setHitXY(newX, newY);\r\n      this.shakeScreen(newX, newY);\r\n\r\n      if (this.firstAttack) {\r\n        this.game.rooms[this.wielder.levelID].particles.push(\r\n          new AttackAnimation(newX, newY, \"dualdagger\", this.wielder.direction),\r\n        );\r\n      } else {\r\n        this.game.rooms[this.wielder.levelID].particles.push(\r\n          new AttackAnimation(\r\n            newX,\r\n            newY,\r\n            \"dualdagger2\",\r\n            this.wielder.direction,\r\n          ),\r\n        );\r\n      }\r\n\r\n      this.game.rooms[this.wielder.levelID].entities = this.game.rooms[\r\n        this.wielder.levelID\r\n      ].entities.filter((e) => !e.dead);\r\n\r\n      if (!this.firstAttack) {\r\n        this.game.rooms[this.wielder.levelID].tick(this.wielder);\r\n      }\r\n\r\n      if (this.wielder === this.game.players[this.game.localPlayerID])\r\n        this.game.shakeScreen(10 * this.wielder.hitX, 10 * this.wielder.hitY);\r\n\r\n      if (this.firstAttack) {\r\n        this.game.rooms[this.wielder.levelID].tickHitWarnings();\r\n        this.game.rooms[this.wielder.levelID].clearDeadStuff();\r\n        this.firstAttack = false;\r\n        this.wielder.beginSlowMotion();\r\n      }\r\n      this.degrade();\r\n    }\r\n    return !flag;\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\nimport { Room } from \"../room/room\";\r\nimport { Equippable } from \"./equippable\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Weapon } from \"./weapon/weapon\";\r\nimport { WoodenShield } from \"./woodenShield\";\r\n\r\nexport class Armor extends Equippable {\r\n  health: number;\r\n  rechargeTurnCounter: number;\r\n  readonly RECHARGE_TURNS = 25;\r\n  static itemName = \"occult shield\";\r\n\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.health = 1;\r\n    this.rechargeTurnCounter = -1;\r\n    this.tileX = 5;\r\n    this.tileY = 0;\r\n    this.name = \"occult shield\";\r\n  }\r\n\r\n  coEquippable = (other: Equippable): boolean => {\r\n    if (other instanceof Armor || other instanceof WoodenShield) return false;\r\n    /*\r\n    if (other instanceof Weapon && (other as Weapon).twoHanded) {\r\n      return false;\r\n    }\r\n    */\r\n    return true;\r\n  };\r\n\r\n  getDescription = (): string => {\r\n    return (\r\n      \"ENCHANTED SHIELD\\nAn occult shield. Absorbs one hit and regenerates after \" +\r\n      this.RECHARGE_TURNS +\r\n      \" turns.\"\r\n    );\r\n  };\r\n\r\n  tickInInventory = () => {\r\n    if (this.rechargeTurnCounter > 0) {\r\n      this.rechargeTurnCounter--;\r\n      this.cooldown = this.rechargeTurnCounter;\r\n\r\n      if (this.rechargeTurnCounter === 0) {\r\n        this.rechargeTurnCounter = -1;\r\n        this.cooldown = this.rechargeTurnCounter;\r\n        this.health = 1;\r\n      }\r\n    }\r\n  };\r\n\r\n  hurt = (damage: number) => {\r\n    if (this.health <= 0) return;\r\n    this.health -= Math.max(damage, 1);\r\n    this.rechargeTurnCounter = this.RECHARGE_TURNS + 1;\r\n    this.cooldown = this.rechargeTurnCounter;\r\n  };\r\n\r\n  drawGUI = (\r\n    delta: number,\r\n    playerMaxHealth: number,\r\n    quickbarStartX: number,\r\n  ) => {\r\n    // Get the quickbar's left edge position (same as in playerRenderer)\r\n    // Convert to tile coordinates\r\n    const heartStartX = (quickbarStartX - 7) / GameConstants.TILESIZE;\r\n    // Position after the hearts\r\n\r\n    const shieldX = Math.max(heartStartX, -0.2) + playerMaxHealth / 1.5 + 0.5;\r\n    let offsetY = GameConstants.WIDTH > 175 ? 0 : -1.25;\r\n\r\n    if (this.rechargeTurnCounter === -1)\r\n      Game.drawFX(\r\n        5,\r\n        2,\r\n        0.75,\r\n        0.75,\r\n        shieldX,\r\n        GameConstants.HEIGHT / GameConstants.TILESIZE - 1 + offsetY,\r\n        0.75,\r\n        0.75,\r\n      );\r\n    else {\r\n      let rechargeProportion =\r\n        1 - this.rechargeTurnCounter / this.RECHARGE_TURNS;\r\n\r\n      if (rechargeProportion < 0.5)\r\n        Game.drawFX(\r\n          7,\r\n          2,\r\n          0.75,\r\n          0.75,\r\n          shieldX,\r\n          GameConstants.HEIGHT / GameConstants.TILESIZE - 1 + offsetY,\r\n          0.75,\r\n          0.75,\r\n        );\r\n      else\r\n        Game.drawFX(\r\n          8,\r\n          2,\r\n          0.75,\r\n          0.75,\r\n          shieldX,\r\n          GameConstants.HEIGHT / GameConstants.TILESIZE - 1 + offsetY,\r\n          0.75,\r\n          0.75,\r\n        );\r\n    }\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Usable } from \"../usable/usable\";\r\nimport { Lantern } from \"../light/lantern\";\r\nimport { Light } from \"../light/light\";\r\nimport { Scythe } from \"./scythe\";\r\nimport { ScytheBlade } from \"./scytheBlade\";\r\nimport { ShieldLeftFragment } from \"./shieldLeftFragment\";\r\nimport { Armor } from \"../armor\";\r\n\r\nexport class ShieldRightFragment extends Usable {\r\n  static itemName = \"right shield fragment\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 2;\r\n    this.tileY = 2;\r\n    this.stackable = false;\r\n    this.name = ShieldRightFragment.itemName;\r\n    this.description =\r\n      \"The right fragment of a shield. Find the left fragment to use it.\";\r\n    this.canUseOnOther = true;\r\n  }\r\n\r\n  onDrop = () => {\r\n    if (this.level.game.lastDroppedShieldPiece === \"right\") {\r\n      this.level.game.lastDroppedShieldPiece = null;\r\n      this.level.items.push(new ShieldLeftFragment(this.level, this.x, this.y));\r\n      this.level.items = this.level.items.filter((item) => item !== this);\r\n    } else if (this.level.game.lastDroppedShieldPiece === null) {\r\n      this.level.game.lastDroppedShieldPiece = \"right\";\r\n    }\r\n  };\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (other instanceof ShieldLeftFragment) {\r\n      player.inventory.removeItem(this);\r\n      player.inventory.removeItem(other);\r\n      player.game.pushMessage(\r\n        \"You combine the shield fragments into a shield.\",\r\n      );\r\n      const room = (player as any)?.getRoom\r\n        ? (player as any).getRoom()\r\n        : player.game.rooms[player.levelID];\r\n      const shield = new Armor(room, player.x, player.y);\r\n      player.inventory.addItem(shield);\r\n    }\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Equippable } from \"../equippable\";\r\n\r\nexport class GarnetRing extends Equippable {\r\n  static itemName = \"garnet ring\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 12;\r\n    this.tileY = 2;\r\n    this.name = GarnetRing.itemName;\r\n    this.stackable = false;\r\n    this.description = \"A ring of garnet\";\r\n  }\r\n\r\n  onEquip = () => {\r\n    this.wielder.damageBonus = 1;\r\n    this.level.game.pushMessage(\"You feel a surge of power in your ring.\");\r\n  };\r\n\r\n  onUnequip = () => {\r\n    this.wielder.damageBonus = 0;\r\n    this.level.game.pushMessage(\"The power in your ring fades.\");\r\n  };\r\n\r\n  onDrop = () => {\r\n    this.wielder.damageBonus = 0;\r\n    if (this.equipped) {\r\n      this.level.game.pushMessage(\"The power in your ring fades.\");\r\n      this.equipped = false;\r\n    }\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { GoldRing } from \"../jewelry/goldRing\";\r\nimport { Usable } from \"../usable/usable\";\r\n\r\nexport class OrangeGem extends Usable {\r\n  static itemName = \"amber\";\r\n\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 14;\r\n    this.tileY = 0;\r\n    this.name = OrangeGem.itemName;\r\n    this.canUseOnOther = true;\r\n\r\n    this.stackable = true;\r\n  }\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (other.name === \"gold ring\") {\r\n      let goldRing = other as GoldRing;\r\n      goldRing.embed(player, this);\r\n    }\r\n  };\r\n\r\n  getDescription = (): string => {\r\n    return \"An amber gem. Embed it into a gold ring to imbue it with magic.\";\r\n  };\r\n}\r\n","import { GameConstants } from \"../game/gameConstants\";\r\n\r\nexport class WebGLBlurRenderer {\r\n  private static instance: WebGLBlurRenderer;\r\n  private gl: WebGLRenderingContext;\r\n  private canvas: HTMLCanvasElement;\r\n  private highQualityShaderProgram: WebGLProgram;\r\n  private performanceShaderProgram: WebGLProgram;\r\n  private currentShaderProgram: WebGLProgram;\r\n  private positionBuffer: WebGLBuffer;\r\n  private texCoordBuffer: WebGLBuffer;\r\n  private framebuffer: WebGLFramebuffer;\r\n  private texture: WebGLTexture;\r\n  private tempTexture: WebGLTexture;\r\n  private tempFramebuffer: WebGLFramebuffer;\r\n\r\n  // Add texture size tracking for texSubImage2D optimization\r\n  private textureWidth: number = 0;\r\n  private textureHeight: number = 0;\r\n  private tempTextureWidth: number = 0;\r\n  private tempTextureHeight: number = 0;\r\n\r\n  // Add downsampling canvas cache\r\n  private downsampleCanvas: HTMLCanvasElement;\r\n  private downsampleCtx: CanvasRenderingContext2D;\r\n\r\n  // Shader attribute/uniform locations (shared between both shaders)\r\n  private positionLocation: number;\r\n  private texCoordLocation: number;\r\n  private resolutionLocation: WebGLUniformLocation;\r\n  private textureLocation: WebGLUniformLocation;\r\n  private directionLocation: WebGLUniformLocation;\r\n  private radiusLocation: WebGLUniformLocation;\r\n\r\n  // Cache for result canvases to avoid recreation\r\n  private resultCanvasCache: Map<string, HTMLCanvasElement> = new Map();\r\n  private maxCacheSize: number = 10;\r\n\r\n  // Vertex shader source (shared)\r\n  private vertexShaderSource = `\r\n    precision mediump float;\r\n    attribute vec2 a_position;\r\n    attribute vec2 a_texCoord;\r\n    uniform vec2 u_resolution;\r\n    varying vec2 v_texCoord;\r\n    \r\n    void main() {\r\n      vec2 zeroToOne = a_position / u_resolution;\r\n      vec2 zeroToTwo = zeroToOne * 2.0;\r\n      vec2 clipSpace = zeroToTwo - 1.0;\r\n      gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n      v_texCoord = a_texCoord;\r\n    }\r\n  `;\r\n\r\n  // High quality fragment shader (49 samples)\r\n  private highQualityFragmentShaderSource = `\r\n    precision mediump float;\r\n    uniform sampler2D u_texture;\r\n    uniform vec2 u_resolution;\r\n    uniform vec2 u_direction;\r\n    uniform float u_radius;\r\n    varying vec2 v_texCoord;\r\n    \r\n    void main() {\r\n      vec2 texelSize = u_direction / u_resolution;\r\n      vec4 color = vec4(0.0);\r\n      float totalWeight = 0.0;\r\n      \r\n      // High quality blur with original 49 samples\r\n      float sigma = u_radius * 0.4;\r\n      float twoSigmaSquare = 2.0 * sigma * sigma;\r\n      \r\n      for (float i = -24.0; i <= 24.0; i++) {\r\n        if (abs(i) > u_radius) continue;\r\n        \r\n        vec2 offset = texelSize * i;\r\n        float weight = exp(-i * i / twoSigmaSquare);\r\n        \r\n        color += texture2D(u_texture, v_texCoord + offset) * weight;\r\n        totalWeight += weight;\r\n      }\r\n      \r\n      gl_FragColor = color / totalWeight;\r\n    }\r\n  `;\r\n\r\n  // Performance fragment shader (13 samples)\r\n  private performanceFragmentShaderSource = `\r\n    precision mediump float;\r\n    uniform sampler2D u_texture;\r\n    uniform vec2 u_resolution;\r\n    uniform vec2 u_direction;\r\n    uniform float u_radius;\r\n    varying vec2 v_texCoord;\r\n    \r\n    void main() {\r\n      vec2 texelSize = u_direction / u_resolution;\r\n      vec4 color = vec4(0.0);\r\n      float totalWeight = 0.0;\r\n      \r\n      // Performance blur with 13 samples\r\n      float sigma = u_radius * 0.9;\r\n      float twoSigmaSquare = 2.0 * sigma * sigma;\r\n      \r\n      for (float i = -12.0; i <= 12.0; i++) {\r\n        if (abs(i) > u_radius) continue;\r\n        \r\n        vec2 offset = texelSize * i;\r\n        float weight = exp(-i * i / twoSigmaSquare);\r\n        \r\n        color += texture2D(u_texture, v_texCoord + offset) * weight;\r\n        totalWeight += weight;\r\n      }\r\n      \r\n      gl_FragColor = color / totalWeight;\r\n    }\r\n  `;\r\n\r\n  private constructor() {\r\n    this.canvas = document.createElement(\"canvas\");\r\n    this.canvas.width = GameConstants.WIDTH;\r\n    this.canvas.height = GameConstants.HEIGHT;\r\n\r\n    // Initialize downsampling canvas\r\n    this.downsampleCanvas = document.createElement(\"canvas\");\r\n    this.downsampleCtx = this.downsampleCanvas.getContext(\"2d\");\r\n    if (!this.downsampleCtx) {\r\n      throw new Error(\"Failed to initialize downsample canvas context.\");\r\n    }\r\n\r\n    const context = this.canvas.getContext(\"webgl\", {\r\n      antialias: false,\r\n      depth: false,\r\n      stencil: false,\r\n      alpha: true,\r\n      premultipliedAlpha: false,\r\n      preserveDrawingBuffer: false,\r\n      powerPreference: \"high-performance\",\r\n    }) as WebGLRenderingContext | null;\r\n\r\n    const experimentalContext = this.canvas.getContext(\"experimental-webgl\", {\r\n      antialias: false,\r\n      depth: false,\r\n      stencil: false,\r\n      alpha: true,\r\n      premultipliedAlpha: false,\r\n      preserveDrawingBuffer: false,\r\n      powerPreference: \"high-performance\",\r\n    }) as WebGLRenderingContext | null;\r\n\r\n    this.gl = context || experimentalContext;\r\n    if (!this.gl) {\r\n      throw new Error(\"WebGL not supported\");\r\n    }\r\n\r\n    // Optimize GL state\r\n    this.gl.disable(this.gl.DEPTH_TEST);\r\n    this.gl.disable(this.gl.CULL_FACE);\r\n    this.gl.disable(this.gl.BLEND);\r\n\r\n    this.initShaders();\r\n    this.initBuffers();\r\n    this.initTextures();\r\n  }\r\n\r\n  static getInstance(): WebGLBlurRenderer {\r\n    if (!WebGLBlurRenderer.instance) {\r\n      WebGLBlurRenderer.instance = new WebGLBlurRenderer();\r\n    }\r\n    return WebGLBlurRenderer.instance;\r\n  }\r\n\r\n  private initShaders(): void {\r\n    const vertexShader = this.createShader(\r\n      this.gl.VERTEX_SHADER,\r\n      this.vertexShaderSource,\r\n    );\r\n\r\n    // Create high quality shader program\r\n    const highQualityFragmentShader = this.createShader(\r\n      this.gl.FRAGMENT_SHADER,\r\n      this.highQualityFragmentShaderSource,\r\n    );\r\n\r\n    this.highQualityShaderProgram = this.gl.createProgram();\r\n    this.gl.attachShader(this.highQualityShaderProgram, vertexShader);\r\n    this.gl.attachShader(\r\n      this.highQualityShaderProgram,\r\n      highQualityFragmentShader,\r\n    );\r\n    this.gl.linkProgram(this.highQualityShaderProgram);\r\n\r\n    if (\r\n      !this.gl.getProgramParameter(\r\n        this.highQualityShaderProgram,\r\n        this.gl.LINK_STATUS,\r\n      )\r\n    ) {\r\n      throw new Error(\r\n        \"Unable to initialize high quality shader program: \" +\r\n          this.gl.getProgramInfoLog(this.highQualityShaderProgram),\r\n      );\r\n    }\r\n\r\n    // Create performance shader program\r\n    const performanceFragmentShader = this.createShader(\r\n      this.gl.FRAGMENT_SHADER,\r\n      this.performanceFragmentShaderSource,\r\n    );\r\n\r\n    this.performanceShaderProgram = this.gl.createProgram();\r\n    this.gl.attachShader(this.performanceShaderProgram, vertexShader);\r\n    this.gl.attachShader(\r\n      this.performanceShaderProgram,\r\n      performanceFragmentShader,\r\n    );\r\n    this.gl.linkProgram(this.performanceShaderProgram);\r\n\r\n    if (\r\n      !this.gl.getProgramParameter(\r\n        this.performanceShaderProgram,\r\n        this.gl.LINK_STATUS,\r\n      )\r\n    ) {\r\n      throw new Error(\r\n        \"Unable to initialize performance shader program: \" +\r\n          this.gl.getProgramInfoLog(this.performanceShaderProgram),\r\n      );\r\n    }\r\n\r\n    // Set default to high quality\r\n    this.currentShaderProgram = this.highQualityShaderProgram;\r\n    this.updateShaderProgram();\r\n  }\r\n\r\n  private updateShaderProgram(): void {\r\n    const useHighQuality = GameConstants.HIGH_QUALITY_BLUR;\r\n    const targetProgram = useHighQuality\r\n      ? this.highQualityShaderProgram\r\n      : this.performanceShaderProgram;\r\n\r\n    if (this.currentShaderProgram !== targetProgram) {\r\n      this.currentShaderProgram = targetProgram;\r\n      this.gl.useProgram(this.currentShaderProgram);\r\n\r\n      // Get attribute locations\r\n      this.positionLocation = this.gl.getAttribLocation(\r\n        this.currentShaderProgram,\r\n        \"a_position\",\r\n      );\r\n      this.texCoordLocation = this.gl.getAttribLocation(\r\n        this.currentShaderProgram,\r\n        \"a_texCoord\",\r\n      );\r\n\r\n      // Get uniform locations\r\n      this.resolutionLocation = this.gl.getUniformLocation(\r\n        this.currentShaderProgram,\r\n        \"u_resolution\",\r\n      );\r\n      this.textureLocation = this.gl.getUniformLocation(\r\n        this.currentShaderProgram,\r\n        \"u_texture\",\r\n      );\r\n      this.directionLocation = this.gl.getUniformLocation(\r\n        this.currentShaderProgram,\r\n        \"u_direction\",\r\n      );\r\n      this.radiusLocation = this.gl.getUniformLocation(\r\n        this.currentShaderProgram,\r\n        \"u_radius\",\r\n      );\r\n\r\n      // Set texture unit\r\n      this.gl.uniform1i(this.textureLocation, 0);\r\n    }\r\n  }\r\n\r\n  private createShader(type: number, source: string): WebGLShader {\r\n    const shader = this.gl.createShader(type);\r\n    this.gl.shaderSource(shader, source);\r\n    this.gl.compileShader(shader);\r\n\r\n    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n      const error = this.gl.getShaderInfoLog(shader);\r\n      this.gl.deleteShader(shader);\r\n      throw new Error(\"Unable to compile shader: \" + error);\r\n    }\r\n\r\n    return shader;\r\n  }\r\n\r\n  private initBuffers(): void {\r\n    // Position buffer\r\n    this.positionBuffer = this.gl.createBuffer();\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\r\n    this.gl.bufferData(\r\n      this.gl.ARRAY_BUFFER,\r\n      new Float32Array([\r\n        0,\r\n        0,\r\n        GameConstants.WIDTH,\r\n        0,\r\n        0,\r\n        GameConstants.HEIGHT,\r\n        0,\r\n        GameConstants.HEIGHT,\r\n        GameConstants.WIDTH,\r\n        0,\r\n        GameConstants.WIDTH,\r\n        GameConstants.HEIGHT,\r\n      ]),\r\n      this.gl.STATIC_DRAW,\r\n    );\r\n\r\n    // Texture coordinate buffer\r\n    this.texCoordBuffer = this.gl.createBuffer();\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer);\r\n    this.gl.bufferData(\r\n      this.gl.ARRAY_BUFFER,\r\n      new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]),\r\n      this.gl.STATIC_DRAW,\r\n    );\r\n  }\r\n\r\n  private initTextures(): void {\r\n    this.texture = this.gl.createTexture();\r\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\r\n    this.gl.texParameteri(\r\n      this.gl.TEXTURE_2D,\r\n      this.gl.TEXTURE_WRAP_S,\r\n      this.gl.CLAMP_TO_EDGE,\r\n    );\r\n    this.gl.texParameteri(\r\n      this.gl.TEXTURE_2D,\r\n      this.gl.TEXTURE_WRAP_T,\r\n      this.gl.CLAMP_TO_EDGE,\r\n    );\r\n    this.gl.texParameteri(\r\n      this.gl.TEXTURE_2D,\r\n      this.gl.TEXTURE_MIN_FILTER,\r\n      this.gl.LINEAR,\r\n    );\r\n    this.gl.texParameteri(\r\n      this.gl.TEXTURE_2D,\r\n      this.gl.TEXTURE_MAG_FILTER,\r\n      this.gl.LINEAR,\r\n    );\r\n\r\n    this.tempTexture = this.gl.createTexture();\r\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.tempTexture);\r\n    this.gl.texParameteri(\r\n      this.gl.TEXTURE_2D,\r\n      this.gl.TEXTURE_WRAP_S,\r\n      this.gl.CLAMP_TO_EDGE,\r\n    );\r\n    this.gl.texParameteri(\r\n      this.gl.TEXTURE_2D,\r\n      this.gl.TEXTURE_WRAP_T,\r\n      this.gl.CLAMP_TO_EDGE,\r\n    );\r\n    this.gl.texParameteri(\r\n      this.gl.TEXTURE_2D,\r\n      this.gl.TEXTURE_MIN_FILTER,\r\n      this.gl.LINEAR,\r\n    );\r\n    this.gl.texParameteri(\r\n      this.gl.TEXTURE_2D,\r\n      this.gl.TEXTURE_MAG_FILTER,\r\n      this.gl.LINEAR,\r\n    );\r\n\r\n    this.framebuffer = this.gl.createFramebuffer();\r\n    this.tempFramebuffer = this.gl.createFramebuffer();\r\n  }\r\n\r\n  // Optimized texture allocation/update method\r\n  private updateTexture(\r\n    texture: WebGLTexture,\r\n    width: number,\r\n    height: number,\r\n    currentWidth: number,\r\n    currentHeight: number,\r\n    data: HTMLCanvasElement | null = null,\r\n  ): { width: number; height: number } {\r\n    this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\r\n\r\n    // Only reallocate if dimensions changed\r\n    if (currentWidth !== width || currentHeight !== height) {\r\n      // Reallocate texture with new dimensions\r\n      if (data) {\r\n        // Use 6-parameter overload for HTMLCanvasElement\r\n        this.gl.texImage2D(\r\n          this.gl.TEXTURE_2D,\r\n          0,\r\n          this.gl.RGBA,\r\n          this.gl.RGBA,\r\n          this.gl.UNSIGNED_BYTE,\r\n          data,\r\n        );\r\n      } else {\r\n        // Use 9-parameter overload for null data\r\n        this.gl.texImage2D(\r\n          this.gl.TEXTURE_2D,\r\n          0,\r\n          this.gl.RGBA,\r\n          width,\r\n          height,\r\n          0,\r\n          this.gl.RGBA,\r\n          this.gl.UNSIGNED_BYTE,\r\n          null,\r\n        );\r\n      }\r\n      return { width, height };\r\n    } else if (data) {\r\n      // Reuse existing texture, just update the content\r\n      this.gl.texSubImage2D(\r\n        this.gl.TEXTURE_2D,\r\n        0,\r\n        0,\r\n        0,\r\n        this.gl.RGBA,\r\n        this.gl.UNSIGNED_BYTE,\r\n        data,\r\n      );\r\n      return { width: currentWidth, height: currentHeight };\r\n    }\r\n\r\n    return { width: currentWidth, height: currentHeight };\r\n  }\r\n\r\n  private getCachedCanvas(width: number, height: number): HTMLCanvasElement {\r\n    const key = `${width}x${height}`;\r\n    let canvas = this.resultCanvasCache.get(key);\r\n\r\n    if (!canvas) {\r\n      canvas = document.createElement(\"canvas\");\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n\r\n      // Manage cache size\r\n      if (this.resultCanvasCache.size >= this.maxCacheSize) {\r\n        const firstKey = this.resultCanvasCache.keys().next().value;\r\n        this.resultCanvasCache.delete(firstKey);\r\n      }\r\n\r\n      this.resultCanvasCache.set(key, canvas);\r\n    }\r\n\r\n    return canvas;\r\n  }\r\n\r\n  /**\r\n   * Apply blur with downsampling and texSubImage2D optimization\r\n   */\r\n  applyBlur(\r\n    sourceCanvas: HTMLCanvasElement,\r\n    blurRadius: number,\r\n  ): HTMLCanvasElement {\r\n    const originalWidth = sourceCanvas.width;\r\n    const originalHeight = sourceCanvas.height;\r\n\r\n    // Calculate downsampled dimensions\r\n    const downsampleFactor = GameConstants.BLUR_DOWNSAMPLE_FACTOR;\r\n    const downsampledWidth = Math.max(\r\n      1,\r\n      Math.floor(originalWidth / downsampleFactor),\r\n    );\r\n    const downsampledHeight = Math.max(\r\n      1,\r\n      Math.floor(originalHeight / downsampleFactor),\r\n    );\r\n\r\n    // Prepare downsampled canvas\r\n    if (\r\n      this.downsampleCanvas.width !== downsampledWidth ||\r\n      this.downsampleCanvas.height !== downsampledHeight\r\n    ) {\r\n      this.downsampleCanvas.width = downsampledWidth;\r\n      this.downsampleCanvas.height = downsampledHeight;\r\n    }\r\n\r\n    // Downsample the source canvas using canvas 2D (GPU accelerated)\r\n    this.downsampleCtx.clearRect(0, 0, downsampledWidth, downsampledHeight);\r\n    this.downsampleCtx.drawImage(\r\n      sourceCanvas,\r\n      0,\r\n      0,\r\n      originalWidth,\r\n      originalHeight,\r\n      0,\r\n      0,\r\n      downsampledWidth,\r\n      downsampledHeight,\r\n    );\r\n\r\n    // Apply blur to the downsampled canvas\r\n    const blurredDownsampledCanvas = this.applyBlurToCanvas(\r\n      this.downsampleCanvas,\r\n      blurRadius / downsampleFactor, // Adjust blur radius for smaller canvas\r\n      downsampledWidth,\r\n      downsampledHeight,\r\n    );\r\n\r\n    // Return result at original size - the caller will handle upscaling\r\n    // For now, we'll create a canvas at original size and let the GPU upscale\r\n    const resultCanvas = this.getCachedCanvas(originalWidth, originalHeight);\r\n    const resultCtx = resultCanvas.getContext(\"2d\");\r\n    resultCtx.clearRect(0, 0, originalWidth, originalHeight);\r\n\r\n    // Use bilinear filtering for upscaling (GPU accelerated)\r\n    resultCtx.imageSmoothingEnabled = true;\r\n    resultCtx.imageSmoothingQuality = \"high\";\r\n    resultCtx.drawImage(\r\n      blurredDownsampledCanvas,\r\n      0,\r\n      0,\r\n      downsampledWidth,\r\n      downsampledHeight,\r\n      0,\r\n      0,\r\n      originalWidth,\r\n      originalHeight,\r\n    );\r\n\r\n    return resultCanvas;\r\n  }\r\n\r\n  /**\r\n   * Internal method to apply blur to a specific canvas\r\n   */\r\n  private applyBlurToCanvas(\r\n    sourceCanvas: HTMLCanvasElement,\r\n    blurRadius: number,\r\n    width: number,\r\n    height: number,\r\n  ): HTMLCanvasElement {\r\n    // Reduce the multiplier significantly for bloom visibility\r\n    const enhancedRadius = blurRadius * 1;\r\n\r\n    // Update shader program if quality setting changed\r\n    const expectedShader = GameConstants.HIGH_QUALITY_BLUR\r\n      ? this.highQualityShaderProgram\r\n      : this.performanceShaderProgram;\r\n\r\n    if (this.currentShaderProgram !== expectedShader) {\r\n      this.updateShaderProgram();\r\n    }\r\n\r\n    if (this.canvas.width !== width || this.canvas.height !== height) {\r\n      this.canvas.width = width;\r\n      this.canvas.height = height;\r\n      this.gl.viewport(0, 0, width, height);\r\n\r\n      // Update position buffer for new dimensions\r\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\r\n      this.gl.bufferData(\r\n        this.gl.ARRAY_BUFFER,\r\n        new Float32Array([\r\n          0,\r\n          0,\r\n          width,\r\n          0,\r\n          0,\r\n          height,\r\n          0,\r\n          height,\r\n          width,\r\n          0,\r\n          width,\r\n          height,\r\n        ]),\r\n        this.gl.STATIC_DRAW,\r\n      );\r\n    }\r\n\r\n    // OPTIMIZED: Use texSubImage2D to avoid GPU memory reallocation\r\n    const updatedTexture = this.updateTexture(\r\n      this.texture,\r\n      width,\r\n      height,\r\n      this.textureWidth,\r\n      this.textureHeight,\r\n      sourceCanvas,\r\n    );\r\n    this.textureWidth = updatedTexture.width;\r\n    this.textureHeight = updatedTexture.height;\r\n\r\n    const updatedTempTexture = this.updateTexture(\r\n      this.tempTexture,\r\n      width,\r\n      height,\r\n      this.tempTextureWidth,\r\n      this.tempTextureHeight,\r\n      null,\r\n    );\r\n    this.tempTextureWidth = updatedTempTexture.width;\r\n    this.tempTextureHeight = updatedTempTexture.height;\r\n\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\r\n    this.gl.enableVertexAttribArray(this.positionLocation);\r\n    this.gl.vertexAttribPointer(\r\n      this.positionLocation,\r\n      2,\r\n      this.gl.FLOAT,\r\n      false,\r\n      0,\r\n      0,\r\n    );\r\n\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer);\r\n    this.gl.enableVertexAttribArray(this.texCoordLocation);\r\n    this.gl.vertexAttribPointer(\r\n      this.texCoordLocation,\r\n      2,\r\n      this.gl.FLOAT,\r\n      false,\r\n      0,\r\n      0,\r\n    );\r\n\r\n    this.gl.uniform2f(this.resolutionLocation, width, height);\r\n    this.gl.uniform1f(this.radiusLocation, enhancedRadius);\r\n\r\n    // First pass: horizontal blur\r\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.tempFramebuffer);\r\n    this.gl.framebufferTexture2D(\r\n      this.gl.FRAMEBUFFER,\r\n      this.gl.COLOR_ATTACHMENT0,\r\n      this.gl.TEXTURE_2D,\r\n      this.tempTexture,\r\n      0,\r\n    );\r\n\r\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\r\n    this.gl.uniform2f(this.directionLocation, 1.0, 0.0);\r\n    this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\r\n\r\n    // Second pass: vertical blur\r\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.framebuffer);\r\n    this.gl.framebufferTexture2D(\r\n      this.gl.FRAMEBUFFER,\r\n      this.gl.COLOR_ATTACHMENT0,\r\n      this.gl.TEXTURE_2D,\r\n      this.texture,\r\n      0,\r\n    );\r\n\r\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.tempTexture);\r\n    this.gl.uniform2f(this.directionLocation, 0.0, 1.0);\r\n    this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\r\n\r\n    // Final pass: render to screen\r\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\r\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\r\n    this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\r\n\r\n    return this.canvas;\r\n  }\r\n\r\n  clearCache(): void {\r\n    this.resultCanvasCache.clear();\r\n  }\r\n\r\n  dispose(): void {\r\n    this.clearCache();\r\n\r\n    if (this.gl) {\r\n      this.gl.deleteProgram(this.highQualityShaderProgram);\r\n      this.gl.deleteProgram(this.performanceShaderProgram);\r\n      this.gl.deleteBuffer(this.positionBuffer);\r\n      this.gl.deleteBuffer(this.texCoordBuffer);\r\n      this.gl.deleteTexture(this.texture);\r\n      this.gl.deleteTexture(this.tempTexture);\r\n      this.gl.deleteFramebuffer(this.framebuffer);\r\n      this.gl.deleteFramebuffer(this.tempFramebuffer);\r\n    }\r\n  }\r\n}\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Entity } from \"../entity\";\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { Door } from \"../../tile/door\";\r\nimport { DownLadder } from \"../../tile/downLadder\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { HitWarning } from \"../../drawable/hitWarning\";\r\n\r\nexport class CrusherEnemy extends Enemy {\r\n  ticks: number;\r\n  frame: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  static difficulty: number = 1;\r\n  static tileX: number = 8;\r\n  static tileY: number = 4;\r\n  animateY: number = 0;\r\n  softAnimateY: number = 0;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 3;\r\n    this.tileY = 4;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.name = \"crusher\";\r\n    this.orthogonalAttack = true;\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 24;\r\n    //if (drop) this.drop = drop;\r\n    this.drawYOffset = 2.5;\r\n    this.shouldDrawAbovePlayer = true;\r\n    this.collidable = false;\r\n    this.destroyable = false;\r\n\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  get alertText() {\r\n    return `New Enemy Spotted: Crab \r\n    Health: ${this.health}\r\n    Attack Pattern: Omnidirectional\r\n    Moves every other turn`;\r\n  }\r\n\r\n  hit = (): number => {\r\n    return 1;\r\n  };\r\n\r\n  applyShield = () => {};\r\n  applyBuff = () => {};\r\n\r\n  // Allow crushers to move onto a player's tile\r\n  readonly tryMove = (x: number, y: number, collide: boolean = true) => {\r\n    const entityCollide = (entity: Entity): boolean => {\r\n      if (entity.x >= x + this.w || entity.x + entity.w <= x) return false;\r\n      if (entity.y >= y + this.h || entity.y + entity.h <= y) return false;\r\n      return true;\r\n    };\r\n\r\n    // Keep collisions with other entities unless disabled\r\n    for (const e of this.room.entities) {\r\n      if (e !== this && entityCollide(e) && collide) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // DIFFERENCE from base: do NOT block moving into players\r\n    // (crushers can overlap players to crush them)\r\n\r\n    const tiles = [] as any[];\r\n    for (let xx = 0; xx < this.w; xx++) {\r\n      for (let yy = 0; yy < this.h; yy++) {\r\n        const targetTile = this.room.roomArray[x + xx][y + yy];\r\n        if (\r\n          targetTile &&\r\n          !targetTile.isSolid() &&\r\n          !(targetTile instanceof Door) &&\r\n          !(targetTile instanceof DownLadder)\r\n        ) {\r\n          tiles.push(targetTile);\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    for (let tile of tiles) {\r\n      tile.onCollideEnemy(this);\r\n    }\r\n    this.x = x;\r\n    this.y = y;\r\n  };\r\n\r\n  tryCrush = () => {\r\n    let flag = false;\r\n    for (const i in this.game.players) {\r\n      const p = this.game.players[i];\r\n      if (\r\n        this.game.rooms[p.levelID] === this.room &&\r\n        p.x === this.x &&\r\n        p.y === this.y\r\n      ) {\r\n        p.hurt(this.hit(), this.name, 400);\r\n        this.drawX += 0.5 * (this.x - p.x);\r\n        this.drawY += 0.5 * (this.y - p.y);\r\n        if (p === this.game.players[this.game.localPlayerID]) {\r\n          //this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n          //this.animateCrush();\r\n        }\r\n        flag = true;\r\n      }\r\n    }\r\n    return flag;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          this.ticks++;\r\n          if (this.ticks % 2 === 1) {\r\n            this.rumbling = true;\r\n            let oldX = this.x;\r\n            let oldY = this.y;\r\n            let disablePositions = Array<astar.Position>();\r\n\r\n            for (const e of this.room.entities) {\r\n              if (e !== this) {\r\n                disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n              }\r\n            }\r\n\r\n            for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n              for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n                if (\r\n                  this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                  (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n                ) {\r\n                  // don't walk on active spiketraps\r\n                  disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n                }\r\n              }\r\n            }\r\n\r\n            let grid = [];\r\n            for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n              grid[x] = [];\r\n              for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n                if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                  grid[x][y] = this.room.roomArray[x][y];\r\n                else grid[x][y] = false;\r\n              }\r\n            }\r\n            this.target =\r\n              this.getAverageLuminance() > 0 // 0.8\r\n                ? this.targetPlayer\r\n                : this.room.getExtremeLuminanceFromPoint(this.x, this.y)\r\n                    .darkest;\r\n            let moves = astar.AStar.search(\r\n              grid,\r\n              this,\r\n              this.target,\r\n              disablePositions,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              this.lastPlayerPos,\r\n            );\r\n            if (moves.length > 0) {\r\n              this.tryMove(moves[0].pos.x, moves[0].pos.y);\r\n              this.setDrawXY(oldX, oldY);\r\n              if (this.x > oldX) this.direction = Direction.RIGHT;\r\n              else if (this.x < oldX) this.direction = Direction.LEFT;\r\n              else if (this.y > oldY) this.direction = Direction.DOWN;\r\n              else if (this.y < oldY) this.direction = Direction.UP;\r\n\r\n              // If we ended up overlapping a player after moving, crush immediately\r\n              const crushed = this.tryCrush();\r\n              this.animateCrush();\r\n              //if (crushed) this.ticks++;\r\n\r\n              this.animateCrush();\r\n            } else {\r\n              const crushed = this.tryCrush();\r\n              //if (crushed) this.animateCrush();\r\n              //if (crushed) this.ticks++;\r\n\r\n              this.animateCrush();\r\n              //if (crushed) this.makeHitWarnings();\r\n            }\r\n\r\n            this.makeHitWarning();\r\n\r\n            this.rumbling = false;\r\n          } else {\r\n            this.rumbling = true;\r\n            /*\r\n            if (\r\n              (this.target.x === this.targetPlayer.x &&\r\n                this.target.y === this.targetPlayer.y) ||\r\n              Utils.distance(\r\n                this.targetPlayer.x,\r\n                this.targetPlayer.y,\r\n                this.x,\r\n                this.y,\r\n              ) <= 2\r\n            )\r\n              */ {\r\n              // Only attack when stationary: if overlapping the player now, crush them\r\n\r\n              this.makeHitWarnings();\r\n              this.makeHitWarning();\r\n            }\r\n          }\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                if (this.ticks % 2 === 0) {\r\n                  /*\r\n                  if (\r\n                    (this.target.x === this.targetPlayer.x &&\r\n                      this.target.y === this.targetPlayer.y) ||\r\n                    Utils.distance(\r\n                      this.targetPlayer.x,\r\n                      this.targetPlayer.y,\r\n                      this.x,\r\n                      this.y,\r\n                    ) <= 2\r\n                  ) */ {\r\n                    //this.makeHitWarnings();\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.makeHitWarning();\r\n    }\r\n  };\r\n\r\n  makeHitWarning = () => {\r\n    this.room.hitwarnings.push(\r\n      new HitWarning(\r\n        this.room.game,\r\n        this.x,\r\n        this.y,\r\n        this.x - 1,\r\n        this.y - 1,\r\n        false,\r\n        false,\r\n      ),\r\n    );\r\n  };\r\n\r\n  animateCrush = () => {\r\n    this.animateY = -1;\r\n    setTimeout(() => {\r\n      this.animateY = 3;\r\n      Sound.playCrush();\r\n      setTimeout(() => {\r\n        this.game.shakeScreen(2 * this.x, 2 * this.y, true);\r\n      }, 100);\r\n      setTimeout(() => {\r\n        this.animateY = 0;\r\n      }, 500);\r\n    }, 150);\r\n  };\r\n\r\n  updateAnimateY = (delta: number) => {\r\n    const diff = this.animateY - this.softAnimateY;\r\n    if (diff > 0.001) {\r\n      this.softAnimateY = this.softAnimateY + diff * 0.2 * delta;\r\n    } else if (diff < -0.001) {\r\n      this.softAnimateY = this.softAnimateY + diff * 0.2 * delta;\r\n    } else {\r\n      this.softAnimateY = this.animateY;\r\n    }\r\n    if (this.softAnimateY > 1.25) {\r\n      this.softAnimateY = 1.25;\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    this.drawableY = this.y + 0.1;\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.updateAnimateY(delta);\r\n\r\n      let rumbleX = this.rumble(this.rumbling, this.frame, this.direction).x;\r\n      let rumbleY = this.rumble(this.rumbling, this.frame, this.direction).y;\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        2,\r\n        2,\r\n        this.x - this.drawX + rumbleX - 0.5,\r\n        this.y - this.drawYOffset - this.drawY + rumbleY + this.softAnimateY,\r\n        2 * this.crushX,\r\n        2 * this.crushY,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n      if (this.crushed) {\r\n        this.crushAnim(delta);\r\n      }\r\n    }\r\n\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { EventEmitter } from \"./eventEmitter\";\r\n\r\nclass EventBus {\r\n  private static instance: EventBus;\r\n  private eventEmitter: EventEmitter;\r\n\r\n  private constructor() {\r\n    this.eventEmitter = new EventEmitter();\r\n  }\r\n\r\n  public static getInstance(): EventBus {\r\n    if (!EventBus.instance) {\r\n      EventBus.instance = new EventBus();\r\n    }\r\n    return EventBus.instance;\r\n  }\r\n\r\n  public emit<T>(event: string, data: T): void {\r\n    this.eventEmitter.emit(event, data);\r\n  }\r\n\r\n  public on<T>(event: string, callback: (data: T) => void): void {\r\n    this.eventEmitter.on(event, callback);\r\n  }\r\n\r\n  public off<T>(event: string, callback: (data: T) => void): void {\r\n    this.eventEmitter.off(event, callback);\r\n  }\r\n}\r\n\r\nexport const globalEventBus = EventBus.getInstance();\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Candle } from \"../../item/light/candle\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Fish } from \"../../item/usable/fish\";\r\nimport { statsTracker } from \"../../game/stats\";\r\nimport { XPPopup } from \"../../particle/xpPopup\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\n\r\nexport class FishingSpot extends Entity {\r\n  fishCount: number = 0;\r\n  active: boolean = false;\r\n  startFrame: number = 0;\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 11;\r\n    this.tileY = 0;\r\n    this.hasShadow = false;\r\n    this.chainPushable = false;\r\n    this.name = \"fishing spot\";\r\n    this.fishCount = Math.floor(Random.rand() * 6) - 3;\r\n    this.active = this.fishCount > 0;\r\n    this.startFrame = Math.floor(Random.rand() * 9);\r\n\r\n    //this.hitSound = Sound.potSmash;\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 29;\r\n    this.destroyable = false;\r\n    this.interactable = true;\r\n    let dropProb = Random.rand();\r\n    if (dropProb < 0.025) this.drops.push(new Heart(this.room, this.x, this.y));\r\n    else this.drops.push(new Coin(this.room, this.x, this.y));\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  fish = (player: Player): void => {\r\n    if (!player.inventory.canFish()) {\r\n      this.game.pushMessage(\"You need a fishing rod to fish.\");\r\n      return;\r\n    }\r\n    if (!this.active) {\r\n      this.game.pushMessage(\"There aren't any fish here.\");\r\n      return;\r\n    }\r\n    this.game.pushMessage(\"Fishing...\");\r\n\r\n    player.busyAnimating = true;\r\n    player.setHitXY(this.x, this.y, 0.5);\r\n    Sound.playFishingCast();\r\n    setTimeout(() => {\r\n      let message = \"\";\r\n      Sound.playFishingReel();\r\n\r\n      if (this.tryFish()) {\r\n        let added = player.inventory.addItem(\r\n          new Fish(this.room, this.x, this.y),\r\n        );\r\n        if (added === false) {\r\n          this.room.items.push(new Fish(this.room, player.x, player.y));\r\n        }\r\n        message = \"You catch a fish.\";\r\n        Sound.playFishingCatch();\r\n        let depthMultiplier = 1.5 ** this.room.depth; //Math.log((this.room.depth + 1) * 5);\r\n        let xp = Math.ceil((Random.rand() * 50 + 100) * depthMultiplier);\r\n        statsTracker.increaseXp(xp);\r\n\r\n        if (GameConstants.XP_POPUP_ENABLED) {\r\n          this.room.particles.push(new XPPopup(this.room, this.x, this.y, xp));\r\n        }\r\n        this.fishCount--;\r\n        if (this.fishCount <= 0) {\r\n          this.active = false;\r\n        }\r\n      } else {\r\n        message = \"You don't catch anything.\";\r\n      }\r\n      this.room.game.pushMessage(message);\r\n      player.busyAnimating = false;\r\n    }, 1200);\r\n\r\n    this.room.tick(player);\r\n  };\r\n\r\n  tryFish = (): boolean => {\r\n    if (Random.rand() < 0.3) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  interact = (player: Player): void => {\r\n    this.fish(player);\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead || !this.active) return;\r\n    if (this.startFrame !== 0) {\r\n      this.frame = this.startFrame;\r\n      this.startFrame = 0;\r\n    }\r\n    this.frame += 0.12 * delta;\r\n    if (this.frame >= 9) this.frame = 0;\r\n    Game.drawFX(\r\n      23 + Math.floor(this.frame),\r\n      0,\r\n      1,\r\n      1,\r\n      this.x - this.drawX,\r\n      this.y - this.drawY,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Sound } from \"../sound/sound\";\r\nimport { Menu } from \"./menu\";\r\nimport { MuteButton } from \"./muteButton\";\r\n\r\nexport class guiButton {\r\n  toggleable: boolean;\r\n  toggled: boolean;\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  text: string;\r\n  parent: Menu;\r\n  onClick: () => void;\r\n  // Optional styling\r\n  noFill?: boolean;\r\n  textColor?: string;\r\n  constructor(\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number,\r\n    text: string,\r\n    onClick: () => void,\r\n    toggleable: boolean = false,\r\n    parent?: Menu,\r\n  ) {\r\n    this.toggleable = toggleable;\r\n    this.toggled = false;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.text = text;\r\n    this.onClick = onClick;\r\n    this.parent = parent;\r\n    this.noFill = false;\r\n    this.textColor = undefined;\r\n  }\r\n\r\n  // Add a method to update the button's own text based on mute state\r\n  toggleMuteText = () => {\r\n    // 'this' refers to the guiButton instance\r\n    MuteButton.toggleMute();\r\n\r\n    this.text = Sound.audioMuted ? \"Sound Muted\" : \"Sound Unmuted\";\r\n    this.parent?.game.pushMessage(this.text);\r\n  };\r\n\r\n  // Check if a point is within the button bounds\r\n  isPointInButton(x: number, y: number): boolean {\r\n    return (\r\n      x >= this.x &&\r\n      x <= this.x + this.width &&\r\n      y >= this.y &&\r\n      y <= this.y + this.height\r\n    );\r\n  }\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { WeaponFragments } from \"../../item/usable/weaponFragments\";\r\nimport { Coin } from \"../../item/coin\";\r\n\r\nexport class DarkPillar extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 7;\r\n    this.tileY = 6;\r\n    this.hasShadow = true;\r\n    this.pushable = true;\r\n    this.name = \"dark pillar\";\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 25;\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Usable } from \"./usable\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class Fish extends Usable {\r\n  static itemName = \"fish\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 5;\r\n    this.tileY = 2;\r\n\r\n    this.stackable = true;\r\n    //this.animateToInventory = true;\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    if (player.health < player.maxHealth) {\r\n      player.health = Math.min(player.maxHealth, player.health + 1);\r\n      Sound.playEat();\r\n      if (this.stackCount > 1) {\r\n        this.stackCount--;\r\n      } else player.inventory.removeItem(this);\r\n      player.game.pushMessage(\"You eat the fish and feel better.\");\r\n    }\r\n  };\r\n\r\n  getDescription = (): string => {\r\n    return \"FISH\\nLooks spiky.\";\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Usable } from \"../usable/usable\";\r\nimport { Lantern } from \"../light/lantern\";\r\nimport { Light } from \"../light/light\";\r\nimport { Scythe } from \"./scythe\";\r\nimport { ScytheHandle } from \"./scytheHandle\";\r\n\r\nexport class ScytheBlade extends Usable {\r\n  static itemName = \"scythe blade\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 30;\r\n    this.tileY = 2;\r\n    this.stackable = false;\r\n    this.name = ScytheBlade.itemName;\r\n    this.description = \"The blade of a scythe. Find the handle to use it.\";\r\n    this.canUseOnOther = true;\r\n  }\r\n\r\n  onDrop = () => {\r\n    if (this.level.game.lastDroppedScythePiece === \"blade\") {\r\n      this.level.game.lastDroppedScythePiece = null;\r\n      this.level.items.push(new ScytheHandle(this.level, this.x, this.y));\r\n      this.level.items = this.level.items.filter((item) => item !== this);\r\n    } else if (this.level.game.lastDroppedScythePiece === null) {\r\n      this.level.game.lastDroppedScythePiece = \"blade\";\r\n    }\r\n  };\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (other instanceof ScytheHandle) {\r\n      player.inventory.removeItem(this);\r\n      player.inventory.removeItem(other);\r\n      player.game.pushMessage(\"You combine the scythe blade and handle.\");\r\n      const room = (player as any)?.getRoom\r\n        ? (player as any).getRoom()\r\n        : player.game.rooms[player.levelID];\r\n      const scythe = new Scythe(room, player.x, player.y);\r\n      player.inventory.addItem(scythe);\r\n    }\r\n  };\r\n}\r\n","import { Input, InputEnum } from \"../game/input\";\r\nimport type { Player } from \"./player\";\r\nimport { Direction, LevelState } from \"../game\";\r\nimport { MouseCursor } from \"../gui/mouseCursor\";\r\nimport { VendingMachine } from \"../entity/object/vendingMachine\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { MuteButton } from \"../gui/muteButton\";\r\nimport { Sound } from \"../sound/sound\";\r\n\r\nexport class PlayerInputHandler {\r\n  private player: Player;\r\n  mostRecentInput: string;\r\n  mostRecentMoveInput: string;\r\n  moveStartTime: number;\r\n  private mouseHoldInitialDirection: Direction | null = null;\r\n\r\n  constructor(player: Player) {\r\n    this.player = player;\r\n    this.mostRecentInput = \"keyboard\";\r\n    this.mostRecentMoveInput = \"keyboard\";\r\n    this.moveStartTime = 0;\r\n\r\n    if (player.isLocalPlayer) {\r\n      this.setupListeners();\r\n    }\r\n  }\r\n\r\n  setupListeners() {\r\n    // Prevent duplicate handler registrations after save/load by resetting arrays\r\n    // These arrays are only used for player input routing\r\n    try {\r\n      (Input.mouseRightClickListeners as any).length = 0;\r\n      (Input.mouseLeftClickListeners as any).length = 0;\r\n    } catch {}\r\n\r\n    Input.leftSwipeListener = () => this.handleInput(InputEnum.LEFT);\r\n    Input.rightSwipeListener = () => this.handleInput(InputEnum.RIGHT);\r\n    Input.upSwipeListener = () => this.handleInput(InputEnum.UP);\r\n    Input.downSwipeListener = () => this.handleInput(InputEnum.DOWN);\r\n    Input.commaListener = () => this.handleInput(InputEnum.COMMA);\r\n    Input.periodListener = () => this.handleInput(InputEnum.PERIOD);\r\n    Input.tapListener = () => this.handleTap();\r\n    Input.mouseMoveListener = () => this.handleInput(InputEnum.MOUSE_MOVE);\r\n    Input.mouseRightClickListeners.push(() =>\r\n      this.handleInput(InputEnum.RIGHT_CLICK),\r\n    );\r\n    Input.mouseDownListeners.push((x: number, y: number, button: number) =>\r\n      this.handleMouseDown(x, y, button),\r\n    );\r\n    Input.numKeyListener = (num) =>\r\n      this.handleInput(InputEnum.NUMBER_1 + num - 1);\r\n    Input.equalsListener = () => this.handleInput(InputEnum.EQUALS);\r\n    Input.minusListener = () => this.handleInput(InputEnum.MINUS);\r\n    Input.escapeListener = () => this.handleInput(InputEnum.ESCAPE);\r\n    Input.fListener = () => this.handleInput(InputEnum.F);\r\n    Input.wheelListener = (deltaY: number) => this.handleMouseWheel(deltaY);\r\n  }\r\n\r\n  handleInput(input: InputEnum) {\r\n    // If a camera animation is active, allow inputs that should fast-forward it\r\n    if (this.player.game.cameraAnimation.active) {\r\n      switch (input) {\r\n        case InputEnum.SPACE:\r\n        case InputEnum.LEFT_CLICK:\r\n          this.player.game.cameraAnimation.fast = true;\r\n          return;\r\n        default:\r\n          // Block other inputs while animation is active (until fast-forward completes)\r\n          return;\r\n      }\r\n    }\r\n    if (this.player.busyAnimating) return;\r\n\r\n    // Block input during level transitions, except for mouse movement\r\n    if (\r\n      (this.player.game.levelState === LevelState.TRANSITIONING ||\r\n        this.player.game.levelState === LevelState.TRANSITIONING_LADDER) &&\r\n      input !== InputEnum.MOUSE_MOVE\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (this.player.menu.open) {\r\n      this.player.menu.inputHandler(input);\r\n      return;\r\n    }\r\n\r\n    if (!this.player.game.started && input !== InputEnum.MOUSE_MOVE) {\r\n      // If start screen menu is active, do not auto-start; let the menu handle clicks\r\n      if ((this.player.game as any).startMenuActive) {\r\n        return;\r\n      }\r\n      this.player.game.startedFadeOut = true;\r\n      return;\r\n    }\r\n\r\n    switch (input) {\r\n      case InputEnum.I: {\r\n        const inv = this.player.inventory;\r\n        this.player.actionProcessor.process({\r\n          type: inv.isOpen ? \"CloseInventory\" : \"OpenInventory\",\r\n        });\r\n        break;\r\n      }\r\n      case InputEnum.Q:\r\n        this.player.actionProcessor.process({ type: \"InventoryDrop\" });\r\n        break;\r\n      case InputEnum.F:\r\n        //this.player.game.newGame();\r\n        //this.player.stall();\r\n        break;\r\n      case InputEnum.LEFT:\r\n        if (this.player.dead) {\r\n          this.navigateDeathScreen(-1);\r\n          break;\r\n        }\r\n        if (!this.ignoreDirectionInput())\r\n          this.player.actionProcessor.process({\r\n            type: \"Move\",\r\n            direction: Direction.LEFT,\r\n            targetX: this.player.x - 1,\r\n            targetY: this.player.y,\r\n          });\r\n        break;\r\n\r\n      case InputEnum.RIGHT:\r\n        if (this.player.dead) {\r\n          this.navigateDeathScreen(1);\r\n          break;\r\n        }\r\n        if (!this.ignoreDirectionInput())\r\n          this.player.actionProcessor.process({\r\n            type: \"Move\",\r\n            direction: Direction.RIGHT,\r\n            targetX: this.player.x + 1,\r\n            targetY: this.player.y,\r\n          });\r\n        break;\r\n\r\n      case InputEnum.UP:\r\n        if (this.player.dead) {\r\n          this.navigateDeathScreen(-1);\r\n          break;\r\n        }\r\n        if (!this.ignoreDirectionInput())\r\n          this.player.actionProcessor.process({\r\n            type: \"Move\",\r\n            direction: Direction.UP,\r\n            targetX: this.player.x,\r\n            targetY: this.player.y - 1,\r\n          });\r\n        break;\r\n\r\n      case InputEnum.DOWN:\r\n        if (this.player.dead) {\r\n          this.navigateDeathScreen(1);\r\n          break;\r\n        }\r\n        if (!this.ignoreDirectionInput())\r\n          this.player.actionProcessor.process({\r\n            type: \"Move\",\r\n            direction: Direction.DOWN,\r\n            targetX: this.player.x,\r\n            targetY: this.player.y + 1,\r\n          });\r\n        break;\r\n      case InputEnum.SPACE:\r\n        // If camera animation is running, speed it up\r\n        if (this.player.game.cameraAnimation.active) {\r\n          this.player.game.cameraAnimation.fast = true;\r\n          break;\r\n        }\r\n        const player = this.player;\r\n        this.setMostRecentInput(\"keyboard\");\r\n\r\n        if (player.game.chatOpen) return;\r\n\r\n        if (player.dead) {\r\n          player.restart();\r\n          return;\r\n        }\r\n\r\n        if (\r\n          this.player.openVendingMachine &&\r\n          this.player.openVendingMachine.open\r\n        ) {\r\n          this.player.openVendingMachine.space();\r\n          break;\r\n        }\r\n\r\n        if (\r\n          player.inventory.isOpen ||\r\n          player.game.levelState === LevelState.IN_LEVEL\r\n        ) {\r\n          this.setMostRecentInput(\"keyboard\");\r\n          this.player.actionProcessor.process({ type: \"InventoryUse\" });\r\n        }\r\n        break;\r\n      case InputEnum.COMMA:\r\n        this.setMostRecentInput(\"keyboard\");\r\n        this.player.actionProcessor.process({ type: \"InventoryLeft\" });\r\n        break;\r\n      case InputEnum.PERIOD:\r\n        this.setMostRecentInput(\"keyboard\");\r\n        this.player.actionProcessor.process({ type: \"InventoryRight\" });\r\n        break;\r\n      case InputEnum.LEFT_CLICK:\r\n        // Speed up camera animation on click\r\n        if (this.player.game.cameraAnimation.active) {\r\n          this.player.game.cameraAnimation.fast = true;\r\n          break;\r\n        }\r\n        this.handleMouseLeftClick();\r\n        break;\r\n      case InputEnum.RIGHT_CLICK:\r\n        this.handleMouseRightClick();\r\n        break;\r\n      case InputEnum.MOUSE_MOVE:\r\n        //when mouse moves\r\n        this.setMostRecentInput(\"mouse\");\r\n        this.player.inventory.mouseMove();\r\n\r\n        // Check if mouse hold should be cancelled\r\n        if (Input.mouseDown && Input.mouseDownHandled) {\r\n          let shouldCancelHold = false;\r\n\r\n          // Check distance from initial position\r\n          const dx = Input.mouseX - Input.lastMouseDownX;\r\n          const dy = Input.mouseY - Input.lastMouseDownY;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n          const maxHoldDistance = GameConstants.TILESIZE * 1.5; // 1.5 tiles\r\n\r\n          if (distance > maxHoldDistance) {\r\n            shouldCancelHold = true;\r\n          }\r\n\r\n          // Check if player direction changed from initial\r\n          if (\r\n            this.mouseHoldInitialDirection !== null &&\r\n            this.player.direction !== this.mouseHoldInitialDirection\r\n          ) {\r\n            shouldCancelHold = true;\r\n          }\r\n\r\n          if (shouldCancelHold) {\r\n            Input.mouseDownHandled = false;\r\n            Input.lastMouseDownTime = 0;\r\n            this.mouseHoldInitialDirection = null;\r\n          }\r\n        }\r\n\r\n        if (!this.ignoreDirectionInput() || GameConstants.isMobile) {\r\n          this.faceMouse();\r\n          this.player.setTileCursorPosition();\r\n        }\r\n        break;\r\n      case InputEnum.NUMBER_1:\r\n      case InputEnum.NUMBER_2:\r\n      case InputEnum.NUMBER_3:\r\n      case InputEnum.NUMBER_4:\r\n      case InputEnum.NUMBER_5:\r\n      case InputEnum.NUMBER_6:\r\n      case InputEnum.NUMBER_7:\r\n      case InputEnum.NUMBER_8:\r\n      case InputEnum.NUMBER_9:\r\n        this.setMostRecentInput(\"keyboard\");\r\n        this.handleNumKey(input - 13);\r\n        break;\r\n      case InputEnum.EQUALS:\r\n        this.player.game.increaseScale();\r\n        break;\r\n      case InputEnum.MINUS:\r\n        this.player.game.decreaseScale();\r\n        break;\r\n      case InputEnum.ESCAPE:\r\n        this.player.inventory.close();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private handleMouseWheel(deltaY: number) {\r\n    // Only handle while in-game\r\n    if (this.player.game.levelState !== LevelState.IN_LEVEL) return;\r\n    const inv = this.player.inventory;\r\n\r\n    // Scroll direction: positive deltaY -> scroll down (next slot), negative -> previous\r\n    const step = deltaY > 0 ? 1 : -1;\r\n\r\n    // Wrap-around across quickbar columns\r\n    const cols = this.player.inventory.cols;\r\n    let next = (this.player.inventory.selX + step) % cols;\r\n    if (next < 0) next += cols;\r\n    this.player.inventory.selX = next;\r\n    this.player.inventory.selY = 0;\r\n\r\n    // Treat wheel as keyboard-like input so selection highlights while inventory is open\r\n    this.setMostRecentInput(\"keyboard\");\r\n    inv.mostRecentInput = \"keyboard\";\r\n  }\r\n\r\n  handleNumKey = (num: number) => {\r\n    if (this.player.menu.open) return;\r\n    this.setMostRecentInput(\"keyboard\");\r\n    if (num <= 5) {\r\n      this.player.actionProcessor.process({\r\n        type: \"InventorySelect\",\r\n        index: num - 1,\r\n      });\r\n    } else {\r\n      if (GameConstants.DEVELOPER_MODE) {\r\n        switch (num) {\r\n          case 6:\r\n            GameConstants.SET_SHADE_LAYER_COMPOSITE_OPERATION(true);\r\n            break;\r\n          case 7:\r\n            GameConstants.SET_SHADE_LAYER_COMPOSITE_OPERATION(false);\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseRightClick() {\r\n    this.setMostRecentInput(\"mouse\");\r\n    const { x, y } = MouseCursor.getInstance().getPosition();\r\n    const bounds = this.player.inventory.isPointInInventoryBounds(x, y);\r\n\r\n    if (bounds.inBounds) {\r\n      this.player.inventory.drop();\r\n    }\r\n  }\r\n\r\n  handleMouseDown(x: number, y: number, button: number) {\r\n    if (button !== 0) return; // Only handle left mouse button\r\n\r\n    const player = this.player;\r\n\r\n    // Speed up camera animation on any mouse down\r\n    if (player.game.cameraAnimation.active) {\r\n      player.game.cameraAnimation.fast = true;\r\n      Input.mouseDownHandled = true;\r\n      return;\r\n    }\r\n\r\n    // On mobile, treat bottom-left hotspot as chat open/focus before any gameplay handling\r\n    if (\r\n      GameConstants.MOBILE_KEYBOARD_SUPPORT &&\r\n      player.game.isMobile &&\r\n      !player.game.chatOpen\r\n    ) {\r\n      // Block opening chat while the death screen is active\r\n      if (player.dead) return;\r\n      if (player.game.isPointInChatHotspot(x, y)) {\r\n        player.game.chatOpen = true;\r\n        player.game.chatTextBox.focus();\r\n        Input.mouseDownHandled = true;\r\n        return;\r\n      }\r\n    } else if (\r\n      GameConstants.MOBILE_KEYBOARD_SUPPORT &&\r\n      player.game.isMobile &&\r\n      player.game.chatOpen\r\n    ) {\r\n      // If chat is open, tapping anywhere closes chat (unless tapping hotspot again)\r\n      if (!player.game.isPointInChatHotspot(x, y)) {\r\n        player.game.chatOpen = false;\r\n        player.game.chatTextBox.blur?.();\r\n        Input.mouseDownHandled = true;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (player.game.levelState !== LevelState.IN_LEVEL) {\r\n      // Route clicks to start menu if active\r\n      if (\r\n        !(player.game as any).started &&\r\n        (player.game as any).startMenuActive\r\n      ) {\r\n        (player.game as any).startMenu?.mouseInputHandler(x, y);\r\n        Input.mouseDownHandled = true;\r\n        return;\r\n      }\r\n      Input.mouseDownHandled = false;\r\n      return;\r\n    }\r\n\r\n    this.setMostRecentInput(\"mouse\");\r\n\r\n    if (player.dead) {\r\n      this.handleDeathScreenInput(x, y);\r\n      Input.mouseDownHandled = true;\r\n      return;\r\n    }\r\n\r\n    // Handle game not started\r\n    if (!player.game.started) {\r\n      if ((player.game as any).startMenuActive) {\r\n        (player.game as any).startMenu?.mouseInputHandler(x, y);\r\n      } else {\r\n        player.game.startedFadeOut = true;\r\n      }\r\n      Input.mouseDownHandled = true;\r\n      return;\r\n    }\r\n\r\n    // Store mouse down info for repeat\r\n    Input.lastMouseDownTime = Date.now();\r\n    Input.lastMouseDownX = x;\r\n    Input.lastMouseDownY = y;\r\n\r\n    const inventory = player.inventory;\r\n\r\n    // Handle inventory toggle when clicking outside or on inventory button\r\n    const clickedOutsideInventory =\r\n      (inventory.isOpen &&\r\n        !inventory.isPointInInventoryBounds(x, y).inBounds) ||\r\n      inventory.isPointInInventoryButton(x, y);\r\n\r\n    if (clickedOutsideInventory) {\r\n      inventory.toggleOpen();\r\n      Input.mouseDownHandled = true;\r\n      return;\r\n    }\r\n\r\n    // Handle menu\r\n    if (this.player.menu.open) {\r\n      this.player.menu.mouseInputHandler(x, y);\r\n      Input.mouseDownHandled = true;\r\n      return;\r\n    }\r\n\r\n    // Check if click is on menu button\r\n    if (this.isPointInMenuButtonBounds(x, y)) {\r\n      this.handleMenuButtonClick();\r\n      Input.mouseDownHandled = true;\r\n      return;\r\n    }\r\n\r\n    // Handle vending machine\r\n    if (player.openVendingMachine) {\r\n      if (\r\n        VendingMachine.isPointInVendingMachineBounds(\r\n          x,\r\n          y,\r\n          player.openVendingMachine,\r\n        )\r\n      ) {\r\n        player.openVendingMachine.space();\r\n      } else {\r\n        player.openVendingMachine.close();\r\n      }\r\n      Input.mouseDownHandled = true;\r\n      return;\r\n    }\r\n\r\n    // Check if this is a UI interaction\r\n    const isUIInteraction =\r\n      inventory.isPointInInventoryButton(x, y) ||\r\n      inventory.isPointInQuickbarBounds(x, y).inBounds ||\r\n      inventory.isOpen ||\r\n      this.isPointInMenuButtonBounds(x, y);\r\n\r\n    if (!isUIInteraction) {\r\n      // Handle movement\r\n      if (!player.busyAnimating && !player.game.cameraAnimation.active) {\r\n        // Store the initial direction when starting mouse hold for movement\r\n        this.mouseHoldInitialDirection = this.player.direction;\r\n        player.moveWithMouse();\r\n        Input.mouseDownHandled = true;\r\n      } else {\r\n        Input.mouseDownHandled = false;\r\n      }\r\n    } else {\r\n      Input.mouseDownHandled = false;\r\n    }\r\n  }\r\n\r\n  handleMouseLeftClick() {\r\n    const player = this.player;\r\n    const cursor = MouseCursor.getInstance();\r\n    const { x, y } = cursor.getPosition();\r\n\r\n    if (player.game.levelState !== LevelState.IN_LEVEL) {\r\n      if (\r\n        !(player.game as any).started &&\r\n        (player.game as any).startMenuActive\r\n      ) {\r\n        (player.game as any).startMenu?.mouseInputHandler(x, y);\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.setMostRecentInput(\"mouse\");\r\n\r\n    if (player.dead) {\r\n      this.handleDeathScreenInput(x, y);\r\n      return;\r\n    }\r\n\r\n    const inventory = player.inventory;\r\n\r\n    const clickedOutsideInventory =\r\n      (inventory.isOpen &&\r\n        !inventory.isPointInInventoryBounds(x, y).inBounds) ||\r\n      inventory.isPointInInventoryButton(x, y);\r\n\r\n    if (clickedOutsideInventory) {\r\n      inventory.toggleOpen();\r\n    }\r\n\r\n    if (this.player.menu.open) {\r\n      this.player.menu.mouseInputHandler(x, y);\r\n      return;\r\n    } else {\r\n    }\r\n\r\n    // Check if click is on menu button\r\n    if (this.isPointInMenuButtonBounds(x, y)) {\r\n      this.handleMenuButtonClick();\r\n      return;\r\n    }\r\n\r\n    if (player.openVendingMachine) {\r\n      if (\r\n        VendingMachine.isPointInVendingMachineBounds(\r\n          x,\r\n          y,\r\n          player.openVendingMachine,\r\n        )\r\n      ) {\r\n        player.openVendingMachine.space();\r\n      } else {\r\n        player.openVendingMachine.close();\r\n        this.setMostRecentInput(\"mouse\");\r\n        const { x, y } = MouseCursor.getInstance().getPosition();\r\n        const bounds = this.player.inventory.isPointInInventoryBounds(x, y);\r\n      }\r\n      return;\r\n    }\r\n\r\n    const notInInventoryUI =\r\n      !inventory.isPointInInventoryButton(x, y) &&\r\n      !inventory.isPointInQuickbarBounds(x, y).inBounds &&\r\n      !inventory.isOpen;\r\n\r\n    // Only handle movement if it wasn't already handled on mousedown\r\n    if (notInInventoryUI && !Input.mouseDownHandled) {\r\n      player.moveWithMouse();\r\n    }\r\n  }\r\n\r\n  ignoreDirectionInput = (): boolean => {\r\n    return (\r\n      this.player.inventory.isOpen ||\r\n      this.player.dead ||\r\n      this.player.game.levelState !== LevelState.IN_LEVEL ||\r\n      this.player.menu.open ||\r\n      (this.player.inventory.isPointInQuickbarBounds(Input.mouseX, Input.mouseY)\r\n        .inBounds &&\r\n        this.player.game.isMobile)\r\n    );\r\n  };\r\n\r\n  handleTap() {\r\n    // If the interaction was already handled by mouseDown, don't process it again\r\n    if (Input.mouseDownHandled) {\r\n      return;\r\n    }\r\n\r\n    // Speed up camera animation on tap\r\n    if (this.player.game.cameraAnimation.active) {\r\n      this.player.game.cameraAnimation.fast = true;\r\n      return;\r\n    }\r\n\r\n    if (this.player.dead) {\r\n      this.handleDeathScreenInput(Input.mouseX, Input.mouseY);\r\n      return;\r\n    } else if (!this.player.game.started) {\r\n      if ((this.player.game as any).startMenuActive) {\r\n        (this.player.game as any).startMenu?.mouseInputHandler(\r\n          Input.mouseX,\r\n          Input.mouseY,\r\n        );\r\n      } else {\r\n        this.player.game.startedFadeOut = true;\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this.player.menu.open) {\r\n      this.player.menu.mouseInputHandler(Input.mouseX, Input.mouseY);\r\n      return;\r\n    }\r\n\r\n    const x = Input.mouseX;\r\n    const y = Input.mouseY;\r\n\r\n    // Check if tap is on menu button\r\n    if (this.isPointInMenuButtonBounds(x, y)) {\r\n      this.handleMenuButtonClick();\r\n      return;\r\n    }\r\n\r\n    const isInInventory = this.player.inventory.isPointInInventoryBounds(\r\n      x,\r\n      y,\r\n    ).inBounds;\r\n    const isInQuickbar = this.player.inventory.isPointInQuickbarBounds(\r\n      x,\r\n      y,\r\n    ).inBounds;\r\n\r\n    if (this.player.openVendingMachine && this.player.openVendingMachine.open) {\r\n      const isInVMUI = VendingMachine.isPointInVendingMachineBounds(\r\n        Input.mouseX,\r\n        Input.mouseY,\r\n        this.player.openVendingMachine,\r\n      );\r\n      if (isInVMUI) {\r\n        this.player.openVendingMachine.space();\r\n        return;\r\n      } else if (!isInVMUI) {\r\n        this.player.openVendingMachine.close();\r\n        this.setMostRecentInput(\"mouse\");\r\n        const { x, y } = MouseCursor.getInstance().getPosition();\r\n        const bounds = this.player.inventory.isPointInInventoryBounds(x, y);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !this.player.inventory.isOpen &&\r\n      this.player.inventory.isPointInInventoryButton(x, y)\r\n    ) {\r\n      this.player.inventory.open();\r\n    } else if (this.player.inventory.isOpen) {\r\n      if (isInInventory) {\r\n        this.handleInput(InputEnum.LEFT_CLICK);\r\n      } else {\r\n        this.player.inventory.close();\r\n      }\r\n    } else if (isInQuickbar) {\r\n      this.handleInput(InputEnum.LEFT_CLICK);\r\n    }\r\n  }\r\n\r\n  handleKeyboardKey(key: string) {\r\n    switch (key.toUpperCase()) {\r\n      case \"A\":\r\n      case \"ARROWLEFT\":\r\n        this.handleInput(InputEnum.LEFT);\r\n        break;\r\n      case \"D\":\r\n      case \"ARROWRIGHT\":\r\n        this.handleInput(InputEnum.RIGHT);\r\n        break;\r\n      case \"W\":\r\n      case \"ARROWUP\":\r\n        this.handleInput(InputEnum.UP);\r\n        break;\r\n      case \"S\":\r\n      case \"ARROWDOWN\":\r\n        this.handleInput(InputEnum.DOWN);\r\n        break;\r\n      case \" \":\r\n        this.handleInput(InputEnum.SPACE);\r\n        break;\r\n      case \"I\":\r\n        this.handleInput(InputEnum.I);\r\n        break;\r\n      case \"Q\":\r\n        this.handleInput(InputEnum.Q);\r\n        break;\r\n      // Possibly add number keys for inventory here too\r\n      default:\r\n        // Unknown key; ignore or log if needed\r\n        break;\r\n    }\r\n  }\r\n\r\n  setMostRecentInput = (input: string) => {\r\n    this.mostRecentInput = input;\r\n  };\r\n  setMostRecentMoveInput = (input: string) => {\r\n    this.mostRecentMoveInput = input;\r\n  };\r\n\r\n  mouseAngle = () => {\r\n    const mousePosition = MouseCursor.getInstance().getPosition();\r\n    const playerPixelPosition = {\r\n      x: GameConstants.WIDTH / 2,\r\n      y: GameConstants.HEIGHT / 2,\r\n    };\r\n    const dx = mousePosition.x - playerPixelPosition.x;\r\n    const dy = mousePosition.y - playerPixelPosition.y;\r\n    return Math.atan2(dy, dx);\r\n  };\r\n\r\n  faceMouse = () => {\r\n    if (\r\n      !GameConstants.MOVE_WITH_MOUSE ||\r\n      this.mostRecentMoveInput === \"keyboard\" ||\r\n      GameConstants.isMobile\r\n    )\r\n      return;\r\n    const angle = this.mouseAngle();\r\n\r\n    // Convert angle to direction\r\n    // atan2 returns angle in radians (-π to π)\r\n    // Divide the circle into 4 sectors for the 4 directions\r\n\r\n    if (angle >= -Math.PI / 4 && angle < Math.PI / 4) {\r\n      this.player.direction = Direction.RIGHT;\r\n    } else if (angle >= Math.PI / 4 && angle < (3 * Math.PI) / 4) {\r\n      this.player.direction = Direction.DOWN;\r\n    } else if (angle >= (-3 * Math.PI) / 4 && angle < -Math.PI / 4) {\r\n      this.player.direction = Direction.UP;\r\n    } else {\r\n      this.player.direction = Direction.LEFT;\r\n    }\r\n  };\r\n\r\n  // Dummy methods for mute button functionality\r\n  isPointInMuteButtonBounds(x: number, y: number): boolean {\r\n    const tile = GameConstants.TILESIZE;\r\n    //mute button is at the top left of the screen right below the fps counter and is 1 tile wide and tall\r\n    return x >= 0 && x <= tile && y >= 0 && y <= tile * 1.5;\r\n  }\r\n\r\n  handleMuteButtonClick() {\r\n    MuteButton.toggleMute();\r\n    this.player.game.pushMessage(\r\n      Sound.audioMuted ? \"Audio muted\" : \"Audio unmuted\",\r\n    );\r\n  }\r\n\r\n  isPointInMenuButtonBounds(x: number, y: number): boolean {\r\n    const tile = GameConstants.TILESIZE;\r\n    //menu button is at the top left of the screen right below the fps counter and is 1 tile wide and tall\r\n    return x >= 0 && x <= tile * 1.5 && y >= 0 && y <= tile;\r\n  }\r\n\r\n  handleMenuButtonClick() {\r\n    this.player.menu.toggleOpen();\r\n  }\r\n\r\n  private handleDeathScreenInput(x: number, y: number) {\r\n    if (this.isInteractingWithFeedbackButton(x, y)) {\r\n      this.player.game.feedbackButton.onClick();\r\n    } else {\r\n      this.player.restart();\r\n    }\r\n  }\r\n\r\n  private isInteractingWithFeedbackButton(x: number, y: number): boolean {\r\n    return (\r\n      this.player.game.feedbackButton &&\r\n      this.player.game.feedbackButton.isPointInButton(x, y)\r\n    );\r\n  }\r\n\r\n  private navigateDeathScreen(delta: number) {\r\n    this.setMostRecentInput(\"keyboard\");\r\n    const totalPages = Math.max(1, this.player.deathScreenPageCount || 1);\r\n    if (totalPages <= 1) return;\r\n    const current = this.player.deathScreenPageIndex || 0;\r\n    let next = (current + delta) % totalPages;\r\n    if (next < 0) next += totalPages;\r\n    this.player.deathScreenPageIndex = next;\r\n  }\r\n}\r\n","import { Entity, EntityDirection } from \"../entity\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Door } from \"../../tile/door\";\r\nimport { Enemy } from \"./enemy\";\r\n\r\nexport class BishopEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  static difficulty: number = 2;\r\n  static tileX: number = 31;\r\n  static tileY: number = 8;\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 2;\r\n    this.maxHealth = 2;\r\n    this.defaultMaxHealth = 2;\r\n    this.tileX = 31;\r\n    this.tileY = 8;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.name = \"bishop\";\r\n    this.jumpHeight = 1;\r\n    this.diagonalAttackRange = 1;\r\n    this.diagonalAttack = true;\r\n    this.orthogonalAttack = false;\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 26;\r\n    if (drop) this.drop = drop;\r\n    this.armored = true;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  tryMove = (x: number, y: number) => {\r\n    let pointWouldBeIn = (someX: number, someY: number): boolean => {\r\n      return (\r\n        someX >= x && someX < x + this.w && someY >= y && someY < y + this.h\r\n      );\r\n    };\r\n    let enemyCollide = (enemy: Entity): boolean => {\r\n      if (enemy.x >= x + this.w || enemy.x + enemy.w <= x) return false;\r\n      if (enemy.y >= y + this.h || enemy.y + enemy.h <= y) return false;\r\n      return true;\r\n    };\r\n    for (const e of this.room.entities) {\r\n      if (e !== this && enemyCollide(e)) {\r\n        return;\r\n      }\r\n    }\r\n    for (const i in this.game.players) {\r\n      if (pointWouldBeIn(this.game.players[i].x, this.game.players[i].y)) {\r\n        return;\r\n      }\r\n    }\r\n    let tiles = [];\r\n    for (let xx = 0; xx < this.w; xx++) {\r\n      for (let yy = 0; yy < this.h; yy++) {\r\n        if (!this.room.roomArray[x + xx][y + yy].isSolid()) {\r\n          tiles.push(this.room.roomArray[x + xx][y + yy]);\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    for (let tile of tiles) {\r\n      tile.onCollideEnemy(this);\r\n    }\r\n    this.x = x;\r\n    this.y = y;\r\n  };\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  jump = (delta: number) => {\r\n    let j = Math.max(Math.abs(this.drawX), Math.abs(this.drawY));\r\n\r\n    let jumpY = Math.abs(Math.sin(j * Math.PI)) * this.jumpHeight;\r\n    if (jumpY < 0.01) jumpY = 0;\r\n    if (jumpY > this.jumpHeight) jumpY = this.jumpHeight;\r\n    this.jumpY = jumpY;\r\n  };\r\n\r\n  behavior = () => {\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      this.ticks++;\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n            }\r\n          }\r\n          for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n              if (\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                // don't walk on active spiketraps\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n              if (this.room.roomArray[xx][yy] instanceof Door) {\r\n                // don't walk into doorways (normally wouldn't be an issue without diagonals)\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n          let grid = [];\r\n          for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n            grid[x] = [];\r\n            for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n              if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                grid[x][y] = this.room.roomArray[x][y];\r\n              else grid[x][y] = false;\r\n            }\r\n          }\r\n          disablePositions.push({ x: this.x + 1, y: this.y } as astar.Position);\r\n          disablePositions.push({ x: this.x - 1, y: this.y } as astar.Position);\r\n          disablePositions.push({ x: this.x, y: this.y + 1 } as astar.Position);\r\n          disablePositions.push({ x: this.x, y: this.y - 1 } as astar.Position);\r\n          disablePositions.push({ x: this.x, y: this.y } as astar.Position);\r\n          let moves = astar.AStar.search(\r\n            grid,\r\n            this,\r\n            this.targetPlayer,\r\n            disablePositions,\r\n            true, //diagonals\r\n          );\r\n          moves = moves.filter((move) => {\r\n            const dx = Math.abs(move.pos.x - this.x);\r\n            const dy = Math.abs(move.pos.y - this.y);\r\n            return dx === 1 && dy === 1;\r\n          });\r\n          if (this.justHurt) {\r\n            this.retreat(oldX, oldY);\r\n          } else if (moves.length > 0) {\r\n            let moveX = moves[0].pos.x;\r\n            let moveY = moves[0].pos.y;\r\n            let hitPlayer = false;\r\n            for (const i in this.game.players) {\r\n              if (\r\n                this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                this.game.players[i].x === moveX &&\r\n                this.game.players[i].y === moveY\r\n              ) {\r\n                this.game.players[i].hurt(this.hit(), this.name);\r\n                this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                hitPlayer = true;\r\n                if (\r\n                  this.game.players[i] ===\r\n                  this.game.players[this.game.localPlayerID]\r\n                )\r\n                  this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n              }\r\n            }\r\n            if (!hitPlayer) {\r\n              this.tryMove(moveX, moveY);\r\n              this.setDrawXY(oldX, oldY);\r\n            }\r\n          }\r\n          this.makeHitWarnings();\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.makeHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    let offsetTileY = this.health <= 1 || this.cloned === true ? 2 : 0;\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX + Math.floor(this.frame),\r\n        this.tileY + offsetTileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount() * (1 + this.jumpY / 3),\r\n      );\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Player } from \"../player/player\";\r\nimport { Game } from \"../game\";\r\nimport { Key } from \"../item/key\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { Door } from \"./door\";\r\nimport { DownLadder } from \"./downLadder\";\r\nimport { UpLadder } from \"./upLadder\";\r\nimport { Random } from \"../utility/random\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\n\r\nexport enum LockType {\r\n  NONE = 0,\r\n  LOCKED = 1,\r\n  GUARDED = 2,\r\n  TUNNEL = 3,\r\n}\r\n\r\nexport interface LockableConfig {\r\n  lockType: LockType;\r\n  keyID?: number;\r\n  iconTileX?: number;\r\n  iconXOffset?: number;\r\n  isTopDoor?: boolean;\r\n}\r\n\r\nexport class Lockable {\r\n  private locked: boolean = false;\r\n  private unlocking: boolean = false;\r\n  private iconAlpha: number = 1;\r\n  private iconYOffset: number = 0;\r\n  private frame: number = 0;\r\n  private lockType: LockType;\r\n  keyID: number = 0;\r\n  private iconTileX: number;\r\n  private iconXOffset: number;\r\n  private isTopDoor: boolean;\r\n  private game: Game;\r\n\r\n  constructor(game: Game, config: LockableConfig) {\r\n    this.game = game;\r\n    this.lockType = config.lockType;\r\n    this.keyID = config.keyID || 0;\r\n    this.iconTileX = config.iconTileX || 2;\r\n    this.iconXOffset = config.iconXOffset || 0;\r\n    this.isTopDoor = config.isTopDoor || false;\r\n\r\n    this.initializeLockState();\r\n  }\r\n\r\n  private initializeLockState() {\r\n    switch (this.lockType) {\r\n      case LockType.LOCKED:\r\n        this.lock();\r\n        break;\r\n      case LockType.GUARDED:\r\n        this.guard();\r\n        break;\r\n      case LockType.TUNNEL:\r\n        this.lock();\r\n        this.iconTileX = 10;\r\n        this.iconXOffset = 1 / 32;\r\n        break;\r\n      case LockType.NONE:\r\n        this.removeLock();\r\n        break;\r\n    }\r\n  }\r\n\r\n  isLocked(): boolean {\r\n    return this.locked;\r\n  }\r\n\r\n  isUnlocking(): boolean {\r\n    return this.unlocking;\r\n  }\r\n\r\n  lock() {\r\n    this.locked = true;\r\n    this.iconTileX = 10;\r\n    this.iconXOffset = 1 / 32;\r\n  }\r\n\r\n  guard() {\r\n    this.lockType = LockType.GUARDED;\r\n    this.locked = true;\r\n    this.iconTileX = 9;\r\n    this.iconXOffset = 1 / 32;\r\n  }\r\n\r\n  removeLock() {\r\n    this.lockType = LockType.NONE;\r\n    this.locked = false;\r\n  }\r\n\r\n  removeLockIcon() {\r\n    this.iconYOffset = 0;\r\n    this.unlocking = false;\r\n    this.iconTileX = 2;\r\n    this.iconXOffset = 0;\r\n    this.iconAlpha = 1;\r\n  }\r\n\r\n  canUnlock(player: Player): boolean {\r\n    if (GameConstants.DEVELOPER_MODE) return true;\r\n    if (this.lockType === LockType.LOCKED) {\r\n      const key = this.hasKeyWithID(this.keyID, player);\r\n      console.log(this.keyID);\r\n      if (key !== null) {\r\n        this.game.pushMessage(\"You use the key to unlock.\");\r\n        console.log(\"key.doorID\", key.doorID, \"lock.keyID\", this.keyID);\r\n        return true;\r\n      }\r\n\r\n      // If no matching key, check if player has any key at all\r\n      const hasAnyKey = player.inventory.hasItem(Key);\r\n      if (hasAnyKey) {\r\n        this.game.pushMessage(\"The key doesn't fit the lock.\");\r\n      } else {\r\n        this.game.pushMessage(\"It's locked tightly and won't budge.\");\r\n      }\r\n      return false;\r\n    }\r\n\r\n    if (this.lockType === LockType.GUARDED) {\r\n      // Check if room has no enemies - access through game.room\r\n      const hasEnemies = this.game.room.entities.some(\r\n        (entity) => entity.constructor.name.includes(\"Enemy\") && !entity.dead,\r\n      );\r\n      if (hasEnemies) {\r\n        this.game.pushMessage(\r\n          \"There are still remaining foes guarding this...\",\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  unlock(player: Player) {\r\n    if (this.lockType === LockType.LOCKED) {\r\n      const key = this.hasKeyWithID(this.keyID, player);\r\n      if (key !== null || GameConstants.DEVELOPER_MODE) {\r\n        player.inventory.removeItem(key);\r\n        Sound.unlock();\r\n        this.removeLock();\r\n        this.unlocking = true;\r\n      }\r\n    } else if (this.lockType === LockType.TUNNEL) {\r\n      this.locked = false;\r\n      this.unlocking = true;\r\n    }\r\n  }\r\n\r\n  hasKeyWithID(keyID: number, player: Player) {\r\n    const inventory = player.inventory;\r\n    for (const item of inventory.items) {\r\n      if (item instanceof Key) {\r\n        if (item.doorID === keyID) {\r\n          return item;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  unGuard() {\r\n    if (this.lockType === LockType.GUARDED) {\r\n      this.removeLock();\r\n      Sound.unlock();\r\n      this.game.tutorialActive = false;\r\n    }\r\n    setTimeout(() => {\r\n      this.removeLockIcon();\r\n    }, 1000);\r\n  }\r\n\r\n  update(delta: number) {\r\n    if (this.frame > 100) this.frame = 0;\r\n    this.frame += 1 * delta;\r\n  }\r\n\r\n  drawIcon(x: number, y: number, delta: number) {\r\n    Game.ctx.globalAlpha = this.iconAlpha;\r\n\r\n    let multiplier = 0.125;\r\n    if (this.unlocking) {\r\n      this.iconAlpha *= 0.92 ** delta;\r\n      this.iconYOffset -= 0.035 * delta;\r\n      multiplier = 0;\r\n      if (this.iconAlpha <= 0.01) {\r\n        this.removeLockIcon();\r\n      }\r\n    }\r\n\r\n    const iconY = this.isTopDoor ? y - 1.25 : y - 1.25;\r\n\r\n    // Only draw the arrow if not unlocking and lockType is NONE\r\n    if (this.lockType === LockType.NONE && !this.unlocking) {\r\n      Game.drawFX(\r\n        2,\r\n        2,\r\n        1,\r\n        1,\r\n        x,\r\n        y - 1.25 + multiplier * Math.sin((this.frame * Math.PI) / 50),\r\n        1,\r\n        1,\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Draw the lock icon (even when unlocking, to show the fade animation)\r\n    Game.drawFX(\r\n      this.iconTileX,\r\n      2,\r\n      1,\r\n      1,\r\n      x + this.iconXOffset,\r\n      iconY +\r\n        multiplier * Math.sin((this.frame * Math.PI) / 50) +\r\n        this.iconYOffset,\r\n      1,\r\n      1,\r\n    );\r\n\r\n    Game.ctx.globalAlpha = 1;\r\n  }\r\n\r\n  setKey(key: Key) {\r\n    this.keyID = Lockable.generateID();\r\n    key.doorID = this.keyID;\r\n  }\r\n\r\n  static generateID() {\r\n    return Math.floor(Random.rand() * 1000000);\r\n  }\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Candle } from \"../../item/light/candle\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class DarkPot extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 8;\r\n    this.tileY = 6;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"dark pot\";\r\n\r\n    this.hitSound = Sound.potSmash;\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 29;\r\n\r\n    let dropProb = Random.rand();\r\n    //if (dropProb < 0.025) this.drops.push(new Heart(this.room, this.x, this.y));\r\n    //else this.drops.push(new Coin(this.room, this.x, this.y));\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { guiButton } from \"./guiButton\";\r\nimport { InputEnum } from \"../game/input\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { MouseCursor } from \"../gui/mouseCursor\";\r\nimport { Player } from \"../player/player\";\r\n\r\nexport class Menu {\r\n  buttons: guiButton[];\r\n  closeButton: guiButton | null;\r\n  open: boolean;\r\n  selectedButton: number;\r\n  game: Game;\r\n  player?: Player;\r\n  private showCloseButton: boolean = true;\r\n  selectionTimeoutId: ReturnType<typeof setTimeout> | null = null;\r\n  // Add debouncing properties\r\n  private lastButtonClickTime: number = 0;\r\n  private lastButtonClickIndex: number = -1;\r\n  private readonly BUTTON_CLICK_DEBOUNCE_TIME = 150; // milliseconds\r\n\r\n  constructor(\r\n    arg:\r\n      | Player\r\n      | {\r\n          game: Game;\r\n          player?: Player;\r\n          showCloseButton?: boolean;\r\n        },\r\n  ) {\r\n    this.buttons = [];\r\n    this.open = false;\r\n    this.selectedButton = 0;\r\n    if (arg instanceof Player) {\r\n      this.game = arg.game;\r\n      this.player = arg;\r\n      this.showCloseButton = true;\r\n      this.initializeCloseButton();\r\n      this.initializeMainMenu();\r\n    } else {\r\n      this.game = arg.game;\r\n      this.player = arg.player;\r\n      this.showCloseButton = arg.showCloseButton !== false;\r\n      if (this.showCloseButton) this.initializeCloseButton();\r\n      // Do not auto-build buttons; caller decides what to add\r\n    }\r\n  }\r\n\r\n  static drawOpenMenuButton() {\r\n    Game.ctx.save();\r\n    Game.ctx.fillStyle = \"rgba(255, 255, 0, 1)\";\r\n    Game.ctx.globalAlpha = 0.1;\r\n\r\n    // Position in top right corner, 2 tiles away from right edge\r\n    const buttonWidth = Math.round(GameConstants.TILESIZE * 1.5 - 2);\r\n    const buttonHeight = Math.round(GameConstants.TILESIZE / 2 - 1);\r\n    const rightMargin = 2 * GameConstants.TILESIZE; // 2 tiles from right edge\r\n    const buttonX = GameConstants.WIDTH / 2;\r\n    const buttonY = GameConstants.TILESIZE / 2;\r\n\r\n    Game.drawFX(18, 0, 1, 1, 0, 0.5, 1, 1);\r\n\r\n    //Game.ctx.fillRect(buttonX, buttonY, buttonWidth, buttonHeight);\r\n\r\n    //Game.ctx.fillStyle = \"rgb(0, 0, 0)\"; //yellow text\r\n    Game.fillText(\"Menu\", 10, 10);\r\n    Game.ctx.globalAlpha = 1;\r\n\r\n    Game.ctx.restore();\r\n  }\r\n\r\n  initializeCloseButton() {\r\n    // Match the menu button dimensions\r\n    const buttonWidth = Math.round(GameConstants.TILESIZE * 1.5 - 2);\r\n    const buttonHeight = Math.round(GameConstants.TILESIZE * 1.5 - 2);\r\n\r\n    this.closeButton = new guiButton(\r\n      0,\r\n      -1,\r\n      Math.round(buttonWidth),\r\n      Math.round(buttonHeight),\r\n      \"X\",\r\n      () => this.close(),\r\n      false,\r\n      this,\r\n    );\r\n  }\r\n\r\n  initializeMainMenu() {\r\n    // Don't set fixed dimensions - let positionButtons() calculate optimal sizes\r\n    //this.addButton(new guiButton(0, 0, 0, 0, \"Start Game\", this.startGame));\r\n    //this.addButton(new guiButton(0, 0, 0, 0, \"Settings\", this.openSettings));\r\n    this.addButton(\r\n      new guiButton(0, 0, 0, 0, \"- Scale\", this.scaleDown, false, this),\r\n    );\r\n    this.addButton(\r\n      new guiButton(0, 0, 0, 0, \"+ Scale\", this.scaleUp, false, this),\r\n    );\r\n    const muteButton = new guiButton(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      \"Mute Sound\",\r\n      () => {},\r\n      false,\r\n      this,\r\n    );\r\n    muteButton.onClick = muteButton.toggleMuteText;\r\n    this.addButton(muteButton);\r\n    const smoothButton = new guiButton(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      \"Smooth Lighting\",\r\n      () => {\r\n        // Mirror the \"/smooth\" command behavior\r\n        GameConstants.SMOOTH_LIGHTING = !GameConstants.SMOOTH_LIGHTING;\r\n        const enabled = GameConstants.SMOOTH_LIGHTING ? \"enabled\" : \"disabled\";\r\n        this.game.pushMessage(`Smooth lighting is now ${enabled}`);\r\n        try {\r\n          const { saveSettings } = require(\"../game/settingsPersistence\");\r\n          saveSettings(this.game);\r\n        } catch {}\r\n      },\r\n      false,\r\n      this,\r\n    );\r\n    this.addButton(smoothButton);\r\n\r\n    const getScreenShakeLabel = () =>\r\n      GameConstants.SCREEN_SHAKE_ENABLED\r\n        ? \"Disable Screen Shake\"\r\n        : \"Enable Screen Shake\";\r\n\r\n    const screenShakeButton = new guiButton(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      getScreenShakeLabel(),\r\n      () => {\r\n        GameConstants.SCREEN_SHAKE_ENABLED =\r\n          !GameConstants.SCREEN_SHAKE_ENABLED;\r\n        // Update label based on new state\r\n        screenShakeButton.text = getScreenShakeLabel();\r\n        const enabled = GameConstants.SCREEN_SHAKE_ENABLED\r\n          ? \"enabled\"\r\n          : \"disabled\";\r\n        this.game.pushMessage(`Screen shake is now ${enabled}`);\r\n        try {\r\n          const { saveSettings } = require(\"../game/settingsPersistence\");\r\n          saveSettings(this.game);\r\n        } catch {}\r\n      },\r\n      false,\r\n      this,\r\n    );\r\n    this.addButton(screenShakeButton);\r\n\r\n    const hoverTextButton = new guiButton(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      \"Hover Text\",\r\n      () => {\r\n        GameConstants.HOVER_TEXT_ENABLED = !GameConstants.HOVER_TEXT_ENABLED;\r\n        const enabled = GameConstants.HOVER_TEXT_ENABLED\r\n          ? \"enabled\"\r\n          : \"disabled\";\r\n        this.game.pushMessage(`Hover text is now ${enabled}`);\r\n        try {\r\n          const { saveSettings } = require(\"../game/settingsPersistence\");\r\n          saveSettings(this.game);\r\n        } catch {}\r\n      },\r\n      false,\r\n      this,\r\n    );\r\n    this.addButton(hoverTextButton);\r\n\r\n    const saveBtn = new guiButton(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      \"Save Game\",\r\n      () => {\r\n        try {\r\n          const { saveToCookies } = require(\"../game/savePersistence\");\r\n          saveToCookies(this.game);\r\n        } catch (e) {\r\n          this.game.pushMessage(\"Save failed.\");\r\n        }\r\n      },\r\n      false,\r\n      this,\r\n    );\r\n    //this.addButton(saveBtn);\r\n\r\n    const loadBtn = new guiButton(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      \"Load Game\",\r\n      () => {\r\n        try {\r\n          const { loadFromCookies } = require(\"../game/savePersistence\");\r\n          loadFromCookies(this.game);\r\n        } catch (e) {\r\n          this.game.pushMessage(\"Load failed.\");\r\n        }\r\n      },\r\n      false,\r\n      this,\r\n    );\r\n    //this.addButton(loadBtn);\r\n\r\n    const newGameBtn = new guiButton(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      \"New Game\",\r\n      () => {\r\n        try {\r\n          this.game.newGame();\r\n        } catch (e) {\r\n          this.game.pushMessage(\"New Game failed.\");\r\n        }\r\n      },\r\n      false,\r\n      this,\r\n    );\r\n    this.addButton(newGameBtn);\r\n\r\n    const clearBtn = new guiButton(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      \"Clear Save\",\r\n      () => {\r\n        try {\r\n          const { clearCookieSave } = require(\"../game/savePersistence\");\r\n          clearCookieSave();\r\n          this.game.pushMessage(\"Cleared cookie/localStorage save.\");\r\n        } catch (e) {\r\n          this.game.pushMessage(\"Clear Save failed.\");\r\n        }\r\n      },\r\n      false,\r\n      this,\r\n    );\r\n    //this.addButton(clearBtn);\r\n    //this.addButton(new guiButton(0, 0, 0, 0, \"Exit\", this.exitGame));\r\n    this.positionButtons();\r\n  }\r\n\r\n  buildStartMenu() {\r\n    this.buttons = [];\r\n    const header = new guiButton(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      \"Welcome to Turnarchist\",\r\n      () => {},\r\n      false,\r\n      this,\r\n    );\r\n    header.noFill = true;\r\n    header.textColor = \"rgb(255, 255, 0)\"; // yellow text\r\n    this.addButton(header);\r\n    if (GameConstants.SAVING_ENABLED) {\r\n      const continueBtn = new guiButton(\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        \"Continue\",\r\n        () => {\r\n          try {\r\n            const { loadFromCookies } = require(\"../game/savePersistence\");\r\n            loadFromCookies(this.game).then((ok: boolean) => {\r\n              if (ok) {\r\n                this.game.pushMessage(\"Loaded save.\");\r\n                this.close();\r\n                (this.game as any).startedFadeOut = true;\r\n                (this.game as any).startMenuActive = false;\r\n              } else {\r\n                this.game.pushMessage(\"Load failed.\");\r\n              }\r\n            });\r\n          } catch (e) {\r\n            this.game.pushMessage(\"Load failed.\");\r\n          }\r\n        },\r\n        false,\r\n        this,\r\n      );\r\n      this.addButton(continueBtn);\r\n    }\r\n    const newBtn = new guiButton(\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      \"New Game\",\r\n      () => {\r\n        this.close();\r\n        (this.game as any).startedFadeOut = true;\r\n        (this.game as any).startMenuActive = false;\r\n      },\r\n      false,\r\n      this,\r\n    );\r\n    this.addButton(newBtn);\r\n    this.positionButtons();\r\n  }\r\n\r\n  addButton(button: guiButton) {\r\n    this.buttons.push(button);\r\n  }\r\n\r\n  draw() {\r\n    if (this.open) {\r\n      Game.ctx.save();\r\n      Game.ctx.fillStyle = \"rgba(0, 0, 0, 0)\";\r\n      Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n\r\n      // Draw main menu buttons\r\n      this.buttons.forEach((button) => {\r\n        this.drawButton(button);\r\n      });\r\n\r\n      // Draw close button\r\n      if (this.showCloseButton && this.closeButton) this.drawCloseButton();\r\n\r\n      Game.ctx.restore();\r\n    }\r\n  }\r\n\r\n  drawButton(button: guiButton) {\r\n    Game.ctx.save();\r\n    Game.ctx.imageSmoothingEnabled = false;\r\n\r\n    // Clear any stroke settings to prevent unwanted outlines\r\n    Game.ctx.strokeStyle = \"transparent\";\r\n    Game.ctx.lineWidth = 0;\r\n\r\n    // Optional no-fill for header-like buttons\r\n    if (!button.noFill) {\r\n      Game.ctx.fillStyle =\r\n        this.selectedButton === this.buttons.indexOf(button)\r\n          ? \"rgba(75, 75, 75, 0.5)\"\r\n          : \"rgba(100, 100, 100, 0.5)\";\r\n\r\n      // Round coordinates to prevent anti-aliasing outlines\r\n      Game.ctx.fillRect(\r\n        Math.round(button.x),\r\n        Math.round(button.y),\r\n        Math.round(button.width),\r\n        Math.round(button.height),\r\n      );\r\n    }\r\n\r\n    // Default text color: yellow (overridden by per-button textColor if provided)\r\n    Game.ctx.fillStyle = \"rgba(255, 255, 0, 1)\";\r\n    if (button.textColor) Game.ctx.fillStyle = button.textColor;\r\n\r\n    const textWidth = Game.measureText(button.text).width;\r\n    const textX = button.x + (button.width - textWidth) / 2;\r\n\r\n    // Center text vertically in the button, accounting for varying button heights\r\n    const textY = button.y + button.height / 2 - Game.letter_height / 2;\r\n\r\n    Game.fillText(button.text, Math.round(textX), Math.round(textY));\r\n    Game.ctx.restore();\r\n  }\r\n\r\n  drawCloseButton() {\r\n    Game.ctx.save();\r\n    Game.ctx.imageSmoothingEnabled = false;\r\n\r\n    // Close button styling - make it red-ish for better visibility\r\n    Game.ctx.fillStyle = \"rgba(220, 60, 60, 1)\"; // Red background\r\n    Game.ctx.fillRect(\r\n      Math.round(this.closeButton.x),\r\n      Math.round(this.closeButton.y),\r\n      Math.round(this.closeButton.width),\r\n      Math.round(this.closeButton.height),\r\n    );\r\n\r\n    // Border for the close button\r\n    Game.ctx.strokeStyle = \"rgba(0, 0, 0, 1)\";\r\n    Game.ctx.lineWidth = 1;\r\n    if (this.closeButton)\r\n      Game.ctx.strokeRect(\r\n        this.closeButton.x,\r\n        this.closeButton.y,\r\n        this.closeButton.width,\r\n        this.closeButton.height,\r\n      );\r\n\r\n    // Draw X text\r\n    Game.ctx.fillStyle = \"rgba(255, 255, 255, 1)\"; // White X\r\n    const textWidth = Game.measureText(this.closeButton.text).width;\r\n    const textX = this.closeButton.x + (this.closeButton.width - textWidth) / 2;\r\n    const textY =\r\n      this.closeButton.y + this.closeButton.height / 2 - Game.letter_height / 2;\r\n\r\n    Game.fillText(this.closeButton.text, textX, textY);\r\n    Game.ctx.restore();\r\n  }\r\n\r\n  inputHandler(input: InputEnum) {\r\n    if (!this.open) return;\r\n\r\n    switch (input) {\r\n      case InputEnum.ESCAPE:\r\n        this.open = false;\r\n        break;\r\n      case InputEnum.UP:\r\n        this.up();\r\n        break;\r\n      case InputEnum.DOWN:\r\n        this.down();\r\n        break;\r\n      case InputEnum.SPACE:\r\n        this.select();\r\n        break;\r\n      case InputEnum.LEFT_CLICK:\r\n        // Handle mouse clicks by getting current mouse position and calling mouseInputHandler\r\n        const { x, y } = MouseCursor.getInstance().getPosition();\r\n\r\n        this.mouseInputHandler(x, y);\r\n        break;\r\n      case InputEnum.RIGHT_CLICK:\r\n        // Handle right clicks if needed (for now just log)\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  mouseInputHandler(x: number, y: number) {\r\n    if (!this.open) {\r\n      return;\r\n    }\r\n\r\n    // Check close button first\r\n    if (this.showCloseButton && this.isPointInCloseButton(x, y)) {\r\n      // Add debouncing for close button too\r\n      const currentTime = Date.now();\r\n      if (\r\n        currentTime - this.lastButtonClickTime <\r\n        this.BUTTON_CLICK_DEBOUNCE_TIME\r\n      ) {\r\n        return;\r\n      }\r\n      this.lastButtonClickTime = currentTime;\r\n      this.closeButton.onClick();\r\n      return;\r\n    }\r\n\r\n    // Check main menu buttons\r\n    const bounds = this.isPointInMenuBounds(x, y);\r\n\r\n    if (bounds.inBounds && bounds.buttonIndex >= 0) {\r\n      const button = this.buttons[bounds.buttonIndex];\r\n      const currentTime = Date.now();\r\n\r\n      // Debounce check: prevent multiple rapid clicks on the same button\r\n      if (\r\n        bounds.buttonIndex === this.lastButtonClickIndex &&\r\n        currentTime - this.lastButtonClickTime < this.BUTTON_CLICK_DEBOUNCE_TIME\r\n      ) {\r\n        return; // Ignore this click as it's too soon after the last one\r\n      }\r\n\r\n      // Update debounce tracking\r\n      this.lastButtonClickTime = currentTime;\r\n      this.lastButtonClickIndex = bounds.buttonIndex;\r\n\r\n      // Clear any existing timeout\r\n      if (this.selectionTimeoutId !== null) {\r\n        clearTimeout(this.selectionTimeoutId);\r\n      }\r\n\r\n      // Set the selected button for visual feedback\r\n      this.selectedButton = bounds.buttonIndex;\r\n\r\n      // Set timeout to reset selection after 100ms\r\n      this.selectionTimeoutId = setTimeout(() => {\r\n        this.selectedButton = -1; // Reset to invalid index so no button appears selected\r\n        this.selectionTimeoutId = null;\r\n      }, 100);\r\n\r\n      button.onClick();\r\n    }\r\n  }\r\n\r\n  close() {\r\n    this.open = false;\r\n  }\r\n\r\n  openMenu() {\r\n    this.open = true;\r\n    this.selectedButton = -1;\r\n    this.buttons.forEach((button, index) => {});\r\n  }\r\n\r\n  toggleOpen() {\r\n    if (this.open) {\r\n      this.close();\r\n    } else {\r\n      this.openMenu();\r\n    }\r\n  }\r\n\r\n  select() {\r\n    if (this.buttons[this.selectedButton]) {\r\n      this.buttons[this.selectedButton].onClick();\r\n    }\r\n  }\r\n\r\n  up() {\r\n    if (this.buttons.length > 0) {\r\n      this.selectedButton =\r\n        (this.selectedButton - 1 + this.buttons.length) % this.buttons.length;\r\n    }\r\n  }\r\n\r\n  down() {\r\n    if (this.buttons.length > 0) {\r\n      this.selectedButton = (this.selectedButton + 1) % this.buttons.length;\r\n    }\r\n  }\r\n\r\n  // Action methods\r\n  startGame = () => {\r\n    this.close();\r\n    // Implement game start logic\r\n  };\r\n\r\n  exitGame = () => {\r\n    // Implement exit game logic\r\n  };\r\n\r\n  openSettings = () => {\r\n    // Implement settings logic later\r\n  };\r\n\r\n  scaleUp = () => {\r\n    this.game.increaseScale();\r\n    // Add scale up functionality here\r\n  };\r\n\r\n  scaleDown = () => {\r\n    this.game.decreaseScale();\r\n    // Add scale down functionality here\r\n  };\r\n\r\n  positionButtons() {\r\n    const screenWidth = GameConstants.WIDTH;\r\n    const screenHeight = GameConstants.HEIGHT;\r\n    const buttonCount = this.buttons.length;\r\n\r\n    // Position close button to match menu button position\r\n    if (this.showCloseButton && this.closeButton) {\r\n      this.closeButton.x = 1;\r\n      this.closeButton.y = GameConstants.TILESIZE / 2;\r\n    }\r\n\r\n    // Layout parameters: tighter margins and smaller spacing\r\n    const maxButtonWidth = Math.min(260, Math.floor(screenWidth * 0.8));\r\n    const verticalMargin = 8; // smaller top/bottom margin\r\n    const spacing = 6; // smaller space between buttons\r\n    const horizontalGap = 8; // gap between side-by-side buttons\r\n    const paddingX = 16; // left+right padding for text\r\n\r\n    // Rows count (scale +/- share one row)\r\n    const scaleButtonIndices = this.getScaleButtonIndices();\r\n    const rows = buttonCount - (scaleButtonIndices.length > 0 ? 1 : 0);\r\n    const totalSpacing = spacing * Math.max(0, rows - 1);\r\n    const availableHeight = Math.max(\r\n      0,\r\n      screenHeight - verticalMargin * 2 - totalSpacing,\r\n    );\r\n    const maxButtonHeight = 22; // shorter max height\r\n    const computedHeight =\r\n      rows > 0 ? Math.floor(availableHeight / rows) : maxButtonHeight;\r\n    const buttonHeight = Math.min(\r\n      maxButtonHeight,\r\n      Math.max(12, computedHeight), // shorter minimum height\r\n    );\r\n\r\n    // Update button dimensions and positions\r\n    if (rows <= 0) return;\r\n    const totalButtonsHeight = rows * buttonHeight + totalSpacing;\r\n    const availableRectTop = verticalMargin;\r\n    const availableRectHeight = screenHeight - verticalMargin * 2;\r\n    let currentY =\r\n      availableRectTop +\r\n      Math.floor((availableRectHeight - totalButtonsHeight) / 2);\r\n    for (let i = 0; i < this.buttons.length; i++) {\r\n      const button = this.buttons[i];\r\n\r\n      if (button.text === \"- Scale\" || button.text === \"+ Scale\") {\r\n        // Handle the scale pair together\r\n        const minusBtn =\r\n          this.buttons[i].text === \"- Scale\" ? this.buttons[i] : null;\r\n        const plusIdx = this.buttons[i].text === \"- Scale\" ? i + 1 : i - 1;\r\n        const plusBtn = this.buttons[plusIdx];\r\n\r\n        // Measure widths based on text\r\n        const minusTextW = Game.measureText(\"- Scale\").width;\r\n        const plusTextW = Game.measureText(\"+ Scale\").width;\r\n        const minusW = Math.min(maxButtonWidth, minusTextW + paddingX);\r\n        const plusW = Math.min(maxButtonWidth, plusTextW + paddingX);\r\n        const pairWidth = minusW + horizontalGap + plusW;\r\n        const startX = Math.floor((screenWidth - pairWidth) / 2);\r\n        const y = currentY;\r\n\r\n        // Place minus\r\n        const minus =\r\n          this.buttons[i].text === \"- Scale\"\r\n            ? this.buttons[i]\r\n            : this.buttons[plusIdx];\r\n        minus.x = startX;\r\n        minus.y = y;\r\n        minus.width = minusW;\r\n        minus.height = buttonHeight;\r\n\r\n        // Place plus\r\n        const plus = plusBtn;\r\n        plus.x = startX + minusW + horizontalGap;\r\n        plus.y = y;\r\n        plus.width = plusW;\r\n        plus.height = buttonHeight;\r\n\r\n        // Skip next index if we placed both in this iteration\r\n        if (this.buttons[i].text === \"- Scale\") {\r\n          i = Math.max(i, plusIdx);\r\n        }\r\n        currentY += buttonHeight + spacing;\r\n      } else {\r\n        const textW = Game.measureText(button.text).width;\r\n        const width = Math.min(maxButtonWidth, textW + paddingX);\r\n        button.width = width;\r\n        button.x = Math.floor((screenWidth - width) / 2);\r\n        button.y = currentY;\r\n        button.height = buttonHeight;\r\n        currentY += buttonHeight + spacing;\r\n      }\r\n    }\r\n  }\r\n\r\n  getScaleButtonIndices(): number[] {\r\n    const indices: number[] = [];\r\n    this.buttons.forEach((button, index) => {\r\n      if (button.text === \"- Scale\" || button.text === \"+ Scale\") {\r\n        indices.push(index);\r\n      }\r\n    });\r\n    return indices;\r\n  }\r\n\r\n  isPointInMenuBounds(\r\n    x: number,\r\n    y: number,\r\n  ): { inBounds: boolean; buttonIndex: number } {\r\n    if (!this.open) {\r\n      return { inBounds: false, buttonIndex: -1 };\r\n    }\r\n\r\n    for (let i = 0; i < this.buttons.length; i++) {\r\n      const button = this.buttons[i];\r\n      if (\r\n        x >= button.x &&\r\n        x <= button.x + button.width &&\r\n        y >= button.y &&\r\n        y <= button.y + button.height\r\n      ) {\r\n        return { inBounds: true, buttonIndex: i };\r\n      }\r\n    }\r\n\r\n    return { inBounds: false, buttonIndex: -1 };\r\n  }\r\n\r\n  isPointInCloseButton(x: number, y: number): boolean {\r\n    return (\r\n      !!this.closeButton &&\r\n      x >= this.closeButton.x &&\r\n      x <= this.closeButton.x + this.closeButton.width &&\r\n      y >= this.closeButton.y &&\r\n      y <= this.closeButton.y + this.closeButton.height\r\n    );\r\n  }\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Room } from \"../room/room\";\r\nimport { Player } from \"../player/player\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\nimport { Tile } from \"./tile\";\r\n\r\nexport class Trapdoor extends Tile {\r\n  game: Game;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, x, y);\r\n    this.game = game;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    Game.drawTile(\r\n      13,\r\n      this.skin,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n\r\n  onCollide = (player: Player) => {\r\n    // TODO\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { WeaponFragments } from \"../../item/usable/weaponFragments\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class PawnStatue extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 6;\r\n    this.tileY = 4;\r\n    this.hasShadow = true;\r\n    this.pushable = true;\r\n    this.name = \"pawnStatue\";\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 25;\r\n    if (Random.rand() < 0.1) {\r\n      this.drops.push(new WeaponFragments(this.room, this.x, this.y));\r\n    } else {\r\n      this.drops.push(new Coin(this.room, this.x, this.y));\r\n    }\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Partition, PartialLevel } from \"./partitionGenerator\";\r\nimport { LevelParameters } from \"./levelParametersGenerator\";\r\n\r\nexport interface AnimationConfig {\r\n  partitionSplitDelay: number;\r\n  pathfindingDelay: number;\r\n  largeStepDelay: number;\r\n  animationConstant: number;\r\n  enabled: boolean;\r\n}\r\n\r\nexport interface VisualizationState {\r\n  currentStep: string;\r\n  progress: number;\r\n  partitions: Partition[];\r\n  centerX: number;\r\n  centerY: number;\r\n}\r\n\r\nexport class GenerationVisualizer {\r\n  private game: Game;\r\n  private animationConfig: AnimationConfig;\r\n  private visualizationState: VisualizationState;\r\n  private debugMode: boolean;\r\n\r\n  constructor(game: Game) {\r\n    this.game = game;\r\n    this.debugMode = document.cookie.includes(\"showgeneration=true\");\r\n\r\n    this.animationConfig = {\r\n      partitionSplitDelay: this.debugMode ? 10 : 0,\r\n      pathfindingDelay: this.debugMode ? 100 : 0,\r\n      largeStepDelay: this.debugMode ? 100 : 0,\r\n      animationConstant: 1,\r\n      enabled: this.debugMode,\r\n    };\r\n\r\n    this.visualizationState = {\r\n      currentStep: \"initializing\",\r\n      progress: 0,\r\n      partitions: [],\r\n      centerX: 0,\r\n      centerY: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Updates the animation configuration\r\n   */\r\n  updateAnimationConfig(config: Partial<AnimationConfig>): void {\r\n    this.animationConfig = { ...this.animationConfig, ...config };\r\n  }\r\n\r\n  /**\r\n   * Sets the visualization state for rendering\r\n   */\r\n  setVisualizationState(\r\n    partitions: Partition[],\r\n    centerX: number,\r\n    centerY: number,\r\n    step: string = \"generating\",\r\n    progress: number = 0,\r\n  ): void {\r\n    this.visualizationState = {\r\n      currentStep: step,\r\n      progress,\r\n      partitions,\r\n      centerX,\r\n      centerY,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Draws the current generation state\r\n   */\r\n  draw(delta: number): void {\r\n    // Clear the canvas\r\n    Game.ctx.fillStyle = \"rgba(0, 0, 0, 1)\";\r\n    Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n\r\n    if (this.debugMode) {\r\n      this.drawGenerationProgress(delta);\r\n    } else {\r\n      this.drawSimpleLoadingScreen();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws detailed generation progress for debug mode\r\n   */\r\n  private drawGenerationProgress(delta: number): void {\r\n    if (this.visualizationState.partitions.length > 0) {\r\n      // Draw all partitions\r\n      this.visualizationState.partitions.forEach((partition) => {\r\n        this.drawPartition(\r\n          partition,\r\n          delta,\r\n          this.visualizationState.centerX,\r\n          this.visualizationState.centerY,\r\n        );\r\n      });\r\n\r\n      // Draw progress information\r\n      this.drawProgressInfo();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws a simple loading screen for normal mode\r\n   */\r\n  private drawSimpleLoadingScreen(): void {\r\n    this.game.drawTextScreen(\"generating level\");\r\n  }\r\n\r\n  /**\r\n   * Draws an individual partition\r\n   */\r\n  drawPartition(\r\n    partition: Partition,\r\n    delta: number,\r\n    levelCenterX: number,\r\n    levelCenterY: number,\r\n  ): void {\r\n    // Draw partition rectangle\r\n    Game.ctx.fillStyle = partition.fillStyle;\r\n    Game.ctx.fillRect(\r\n      Math.round(GameConstants.WIDTH / 2 + partition.x - levelCenterX),\r\n      Math.round(GameConstants.HEIGHT / 2 + partition.y - levelCenterY),\r\n      partition.w,\r\n      partition.h,\r\n    );\r\n\r\n    // Draw connections\r\n    this.drawPartitionConnections(partition, levelCenterX, levelCenterY);\r\n\r\n    // Draw partition info if in debug mode\r\n    if (this.debugMode) {\r\n      this.drawPartitionInfo(partition, levelCenterX, levelCenterY);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws connections for a partition\r\n   */\r\n  private drawPartitionConnections(\r\n    partition: Partition,\r\n    levelCenterX: number,\r\n    levelCenterY: number,\r\n  ): void {\r\n    Game.ctx.fillStyle = \"white\";\r\n    for (let connection of partition.connections) {\r\n      Game.ctx.fillRect(\r\n        Math.round(GameConstants.WIDTH / 2 + connection.x - levelCenterX),\r\n        Math.round(GameConstants.HEIGHT / 2 + connection.y - levelCenterY),\r\n        1,\r\n        1,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws debug information for a partition\r\n   */\r\n  private drawPartitionInfo(\r\n    partition: Partition,\r\n    levelCenterX: number,\r\n    levelCenterY: number,\r\n  ): void {\r\n    const x = Math.round(GameConstants.WIDTH / 2 + partition.x - levelCenterX);\r\n    const y = Math.round(GameConstants.HEIGHT / 2 + partition.y - levelCenterY);\r\n\r\n    Game.ctx.fillStyle = \"yellow\";\r\n    Game.ctx.font = \"8px Arial\";\r\n    Game.ctx.fillText(`${partition.type}`, x + 2, y + 10);\r\n    Game.ctx.fillText(`D:${partition.distance}`, x + 2, y + 20);\r\n  }\r\n\r\n  /**\r\n   * Draws progress information overlay\r\n   */\r\n  private drawProgressInfo(): void {\r\n    Game.ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\r\n    Game.ctx.fillRect(10, 10, 200, 60);\r\n\r\n    Game.ctx.fillStyle = \"white\";\r\n    Game.ctx.font = \"12px Arial\";\r\n    Game.ctx.fillText(`Step: ${this.visualizationState.currentStep}`, 20, 30);\r\n    Game.ctx.fillText(\r\n      `Partitions: ${this.visualizationState.partitions.length}`,\r\n      20,\r\n      45,\r\n    );\r\n    Game.ctx.fillText(\r\n      `Progress: ${Math.round(this.visualizationState.progress * 100)}%`,\r\n      20,\r\n      60,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates an animation delay promise\r\n   */\r\n  async createAnimationDelay(\r\n    delayType: \"partition\" | \"pathfinding\" | \"large\",\r\n  ): Promise<void> {\r\n    if (!this.animationConfig.enabled) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    let delay = 0;\r\n    switch (delayType) {\r\n      case \"partition\":\r\n        delay =\r\n          this.animationConfig.animationConstant *\r\n          this.animationConfig.partitionSplitDelay;\r\n        break;\r\n      case \"pathfinding\":\r\n        delay =\r\n          this.animationConfig.animationConstant *\r\n          this.animationConfig.pathfindingDelay;\r\n        break;\r\n      case \"large\":\r\n        delay =\r\n          this.animationConfig.animationConstant *\r\n          this.animationConfig.largeStepDelay;\r\n        break;\r\n    }\r\n\r\n    return new Promise((resolve) => setTimeout(resolve, delay));\r\n  }\r\n\r\n  /**\r\n   * Updates partition visual styles during generation\r\n   */\r\n  updatePartitionStyles(partitions: Partition[]): void {\r\n    // Sort partitions by area for consistent styling\r\n    const sortedPartitions = [...partitions].sort(\r\n      (a, b) => a.area() - b.area(),\r\n    );\r\n\r\n    if (sortedPartitions.length === 0) return;\r\n\r\n    const minArea = sortedPartitions[0].area();\r\n    const maxArea = sortedPartitions[sortedPartitions.length - 1].area();\r\n\r\n    // Apply area-based styling\r\n    partitions.forEach((partition) => {\r\n      if (partition.type === \"START\") {\r\n        partition.fillStyle = \"rgb(0, 255, 0)\";\r\n      } else if (partition.type === \"BOSS\") {\r\n        partition.fillStyle = \"rgb(255, 0, 0)\";\r\n      } else if (partition.type === \"DOWNLADDER\") {\r\n        partition.fillStyle = \"blue\";\r\n      } else if (partition.type === \"ROPEHOLE\") {\r\n        partition.fillStyle = \"purple\";\r\n      } else {\r\n        // Default area-based styling\r\n        const normalizedArea =\r\n          maxArea > minArea\r\n            ? (partition.area() - minArea) / (maxArea - minArea)\r\n            : 0;\r\n        const opacity = 0.3 + normalizedArea * 0.7;\r\n        partition.fillStyle = `rgba(128, 128, 128, ${opacity})`;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Visualizes partition layout in console (for debugging)\r\n   */\r\n  visualizePartitionsInConsole(\r\n    partitions: Partition[],\r\n    mapWidth: number,\r\n    mapHeight: number,\r\n  ): void {\r\n    if (!this.debugMode) return;\r\n\r\n    const grid = Array.from({ length: mapHeight }, () =>\r\n      Array(mapWidth).fill(\" . \"),\r\n    );\r\n\r\n    const maxIndex = partitions.length - 1;\r\n    const padLength = maxIndex.toString().length;\r\n\r\n    partitions.forEach((partition, index) => {\r\n      const paddedIndex = index.toString().padStart(padLength, \" \");\r\n\r\n      for (let x = partition.x; x < partition.x + partition.w; x++) {\r\n        for (let y = partition.y; y < partition.y + partition.h; y++) {\r\n          if (x >= 0 && x < mapWidth && y >= 0 && y < mapHeight) {\r\n            grid[y][x] = ` ${paddedIndex} `;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    console.log(\"Partition Layout:\");\r\n    console.log(\r\n      \"   \" + [...Array(mapWidth)].map((_, i) => i % 10).join(\"  \") + \" X\",\r\n    );\r\n    grid.forEach((row, index) => {\r\n      const paddedIndex = index.toString().padStart(2, \" \");\r\n      console.log(`${paddedIndex} ${row.join(\"\")}`);\r\n    });\r\n    console.log(\"Y\");\r\n  }\r\n\r\n  /**\r\n   * Logs generation progress messages\r\n   */\r\n  logGenerationStep(step: string, details?: string): void {\r\n    if (!this.debugMode) return;\r\n\r\n    const message = details ? `${step}: ${details}` : step;\r\n    console.log(`[GenerationVisualizer] ${message}`);\r\n\r\n    if (this.game && this.game.pushMessage) {\r\n      this.game.pushMessage(message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates visual effects for specific generation events\r\n   */\r\n  createVisualEffect(\r\n    effectType:\r\n      | \"partition_split\"\r\n      | \"room_connected\"\r\n      | \"boss_found\"\r\n      | \"generation_complete\",\r\n    partition?: Partition,\r\n  ): void {\r\n    if (!this.debugMode) return;\r\n\r\n    switch (effectType) {\r\n      case \"partition_split\":\r\n        if (partition) {\r\n          // Temporarily highlight the partition\r\n          const originalStyle = partition.fillStyle;\r\n          partition.fillStyle = \"yellow\";\r\n          setTimeout(() => {\r\n            partition.fillStyle = originalStyle;\r\n          }, 200);\r\n        }\r\n        break;\r\n      case \"room_connected\":\r\n        if (partition) {\r\n          partition.fillStyle = \"lightgreen\";\r\n        }\r\n        break;\r\n      case \"boss_found\":\r\n        if (partition) {\r\n          partition.fillStyle = \"rgb(255, 0, 0)\";\r\n        }\r\n        this.logGenerationStep(\"Boss room found!\");\r\n        break;\r\n      case \"generation_complete\":\r\n        this.logGenerationStep(\"Generation complete!\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the current generation progress\r\n   */\r\n  updateProgress(step: string, progress: number): void {\r\n    this.visualizationState.currentStep = step;\r\n    this.visualizationState.progress = Math.max(0, Math.min(1, progress));\r\n\r\n    this.logGenerationStep(step, `${Math.round(progress * 100)}%`);\r\n  }\r\n\r\n  /**\r\n   * Resets the visualizer state\r\n   */\r\n  reset(): void {\r\n    this.visualizationState = {\r\n      currentStep: \"initializing\",\r\n      progress: 0,\r\n      partitions: [],\r\n      centerX: 0,\r\n      centerY: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets the current animation configuration\r\n   */\r\n  getAnimationConfig(): AnimationConfig {\r\n    return { ...this.animationConfig };\r\n  }\r\n\r\n  /**\r\n   * Gets the current visualization state\r\n   */\r\n  getVisualizationState(): VisualizationState {\r\n    return { ...this.visualizationState };\r\n  }\r\n}\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class ArmoredSkullEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  ticksSinceFirstHit: number;\r\n  flashingFrame: number;\r\n  targetPlayer: Player;\r\n  readonly REGEN_TICKS = 5;\r\n  drop: Item;\r\n  static difficulty: number = 2;\r\n  static tileX: number = 5;\r\n  static tileY: number = 8;\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    if (this.cloned) return;\r\n\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 3;\r\n    this.maxHealth = 3;\r\n    this.defaultMaxHealth = 3;\r\n    this.tileX = 17;\r\n    this.tileY = 16;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.ticksSinceFirstHit = 0;\r\n    this.flashingFrame = 0;\r\n    this.deathParticleColor = \"#ffffff\";\r\n    this.name = \"armored skeleton\";\r\n    this.forwardOnlyAttack = true;\r\n    this.armored = true;\r\n    if (drop) this.drop = drop;\r\n    this.getDrop([\"weapon\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  hurt = (\r\n    playerHitBy: Player,\r\n    damage: number,\r\n    type: \"none\" | \"poison\" | \"blood\" | \"heal\" = \"none\",\r\n  ) => {\r\n    this.handleEnemyCase(playerHitBy);\r\n\r\n    let hitShield = false;\r\n    let shieldHealth = 0;\r\n    if (this.shielded) {\r\n      shieldHealth = this.shield.health;\r\n      if (shieldHealth > 0) {\r\n        this.shield.hurt(damage);\r\n        hitShield = true;\r\n      }\r\n    }\r\n    this.ticksSinceFirstHit = 0;\r\n    if (this.health == 2) this.unconscious = false;\r\n    this.health -= damage;\r\n    this.maxHealth -= shieldHealth;\r\n    this.startHurting();\r\n\r\n    this.healthBar.hurt();\r\n    this.createDamageNumber(damage, type);\r\n    this.playHitSound();\r\n    if (this.health === 2) Sound.playParry();\r\n\r\n    if (this.health === 1) {\r\n      this.unconscious = true;\r\n\r\n      ImageParticle.spawnCluster(this.room, this.x + 0.5, this.y + 0.5, 3, 28);\r\n    } else if (this.health === 2) {\r\n      ImageParticle.spawnCluster(this.room, this.x + 0.5, this.y + 0.5, 6, 26);\r\n    } else this.healthBar.hurt();\r\n\r\n    if (this.health <= 0) {\r\n      ImageParticle.spawnCluster(this.room, this.x + 0.5, this.y + 0.5, 0, 24);\r\n      this.kill();\r\n    } else this.hurtCallback();\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        this.ticks++;\r\n\r\n        return;\r\n      }\r\n\r\n      if (this.health <= 1) {\r\n        this.unconscious = true;\r\n        this.ticksSinceFirstHit++;\r\n        if (this.ticksSinceFirstHit >= this.REGEN_TICKS) {\r\n          this.healthBar.hurt();\r\n          this.health = 2;\r\n          this.unconscious = false;\r\n        }\r\n        this.ticks++;\r\n\r\n        return;\r\n      }\r\n\r\n      this.ticks++;\r\n      if (!this.seenPlayer) {\r\n        this.lookForPlayer();\r\n      } else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n            }\r\n          }\r\n          for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n              if (\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n          let grid = [];\r\n          for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n            grid[x] = [];\r\n            for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n              if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                grid[x][y] = this.room.roomArray[x][y];\r\n              else grid[x][y] = false;\r\n            }\r\n          }\r\n          let moves = astar.AStar.search(\r\n            grid,\r\n            this,\r\n            this.targetPlayer,\r\n            disablePositions,\r\n            false,\r\n            false,\r\n            true,\r\n            this.direction,\r\n            undefined,\r\n            undefined,\r\n          );\r\n          if (moves.length > 0) {\r\n            let moveX = moves[0].pos.x;\r\n            let moveY = moves[0].pos.y;\r\n            let oldDir = this.direction;\r\n            let player = this.targetPlayer;\r\n\r\n            this.facePlayer(player);\r\n\r\n            if (moveX > oldX) this.direction = Direction.RIGHT;\r\n            else if (moveX < oldX) this.direction = Direction.LEFT;\r\n            else if (moveY > oldY) this.direction = Direction.DOWN;\r\n            else if (moveY < oldY) this.direction = Direction.UP;\r\n\r\n            if (oldDir == this.direction) {\r\n              let hitPlayer = false;\r\n              for (const i in this.game.players) {\r\n                if (\r\n                  this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                  this.game.players[i].x === moveX &&\r\n                  this.game.players[i].y === moveY\r\n                ) {\r\n                  this.game.players[i].hurt(this.hit(), this.name);\r\n                  this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                  this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                  if (\r\n                    this.game.players[i] ===\r\n                    this.game.players[this.game.localPlayerID]\r\n                  )\r\n                    this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n                }\r\n              }\r\n              if (!hitPlayer) {\r\n                this.tryMove(moveX, moveY);\r\n                this.setDrawXY(oldX, oldY);\r\n\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (this.direction == Direction.LEFT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.RIGHT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.DOWN) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.UP) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          this.makeHitWarnings();\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.makeHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.tileX = 27;\r\n      this.tileY = 16;\r\n      if (this.health <= 2) {\r\n        this.tileX = 5;\r\n        this.tileY = 8;\r\n      }\r\n\r\n      if (this.health <= 1 || this.dying) {\r\n        this.tileX = 3;\r\n        this.tileY = 0;\r\n        if (this.ticksSinceFirstHit >= 3) {\r\n          this.flashingFrame += 0.1 * delta;\r\n          if (Math.floor(this.flashingFrame) % 2 === 0) {\r\n            this.tileX = 2;\r\n          }\r\n        }\r\n      }\r\n\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX +\r\n          (this.tileX % 5 && !this.unconscious && !this.dying\r\n            ? Math.floor(this.frame)\r\n            : 0),\r\n        this.tileY + this.direction * 2,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Entity, EntityDirection } from \"../entity\";\r\nimport { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { HitWarning } from \"../../drawable/hitWarning\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { RedGem } from \"../../item/resource/redgem\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Spear } from \"../../item/weapon/spear\";\r\nimport { DualDagger } from \"../../item/weapon/dualdagger\";\r\nimport { GreenGem } from \"../../item/resource/greengem\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Pickaxe } from \"../../item/tool/pickaxe\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Enemy } from \"./enemy\";\r\n\r\nexport class ZombieEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  dir: Direction;\r\n  static difficulty: number = 1;\r\n  static tileX: number = 17;\r\n  static tileY: number = 8;\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 17;\r\n    this.tileY = 8;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.dir = Direction.DOWN;\r\n    this.name = \"zombie\";\r\n    this.forwardOnlyAttack = true;\r\n    this.jumpHeight = 0.35;\r\n\r\n    if (drop) this.drop = drop;\r\n    this.getDrop([\"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  behavior = () => {\r\n    // Store the current position\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    // If the enemy is not dead\r\n    if (!this.dead) {\r\n      // Skip turns if necessary\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n\r\n      // Increment the tick counter\r\n      this.ticks++;\r\n\r\n      // If the enemy has not seen the player yet\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        // If the target player has taken their turn\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          // Decrement alert ticks\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n\r\n          // Store the old position\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          // Create a list of positions to avoid\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n            }\r\n          }\r\n          for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n              if (\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                // Don't walk on active spike traps\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Create a grid of the room\r\n          let grid = [];\r\n          for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n            grid[x] = [];\r\n            for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n              if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                grid[x][y] = this.room.roomArray[x][y];\r\n              else grid[x][y] = false;\r\n            }\r\n          }\r\n\r\n          // Find a path to the target player\r\n          let moves = astar.AStar.search(\r\n            grid,\r\n            this,\r\n            this.targetPlayer,\r\n            disablePositions,\r\n            false,\r\n            false,\r\n            true,\r\n            this.direction,\r\n          );\r\n\r\n          // If there are moves available\r\n          if (moves.length > 0) {\r\n            let moveX = moves[0].pos.x;\r\n            let moveY = moves[0].pos.y;\r\n            let oldDir = this.direction;\r\n            let player = this.targetPlayer;\r\n\r\n            // Face the target player\r\n            this.facePlayer(player);\r\n\r\n            // Determine the new direction based on the move\r\n            if (moveX > oldX) this.direction = Direction.RIGHT;\r\n            else if (moveX < oldX) this.direction = Direction.LEFT;\r\n            else if (moveY > oldY) this.direction = Direction.DOWN;\r\n            else if (moveY < oldY) this.direction = Direction.UP;\r\n\r\n            // If the direction hasn't changed, attempt to move or attack\r\n            if (oldDir == this.direction) {\r\n              let hitPlayer = false;\r\n              for (const i in this.game.players) {\r\n                if (\r\n                  this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                  this.game.players[i].x === moveX &&\r\n                  this.game.players[i].y === moveY\r\n                ) {\r\n                  // Attack the player if they are in the way\r\n                  this.game.players[i].hurt(this.hit(), this.name);\r\n                  this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                  this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                  if (\r\n                    this.game.players[i] ===\r\n                    this.game.players[this.game.localPlayerID]\r\n                  )\r\n                    this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n                }\r\n              }\r\n              if (!hitPlayer) {\r\n                // Move to the new position\r\n                this.tryMove(moveX, moveY);\r\n                this.setDrawXY(oldX, oldY);\r\n\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Add positions to avoid based on the current direction\r\n          if (this.direction == Direction.LEFT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.RIGHT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.DOWN) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.UP) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          // Make hit warnings\r\n          this.makeHitWarnings();\r\n        }\r\n\r\n        // Check if the target player is offline\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        // If the enemy is not aggro or the target player is offline, find a new target player\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.makeHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    //this.updateShadeColor(delta);\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    this.updateDrawXY(delta);\r\n    this.frame += 0.1 * delta;\r\n    if (this.frame >= 4) this.frame = 0;\r\n    if (this.hasShadow) this.drawShadow(delta);\r\n\r\n    Game.drawMob(\r\n      this.tileX + Math.floor(this.frame),\r\n      this.tileY + this.direction * 2,\r\n      1,\r\n      2,\r\n      this.x - this.drawX,\r\n      this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n      1,\r\n      2,\r\n      this.softShadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.globalAlpha = 1;\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { WeaponFragments } from \"../../item/usable/weaponFragments\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class Barrel extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 1;\r\n    this.tileY = 0;\r\n    this.hasShadow = true;\r\n    this.pushable = true;\r\n    this.name = \"barrel\";\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 25;\r\n    /*\r\n    if (Random.rand() < 0.1) {\r\n      this.drops.push(new WeaponFragments(this.room, this.x, this.y));\r\n    } else {\r\n      this.drops.push(new Coin(this.room, this.x, this.y));\r\n    }\r\n    */\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { WeaponFragments } from \"../../item/usable/weaponFragments\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class DarkCrate extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.tileX = 6;\r\n    this.tileY = 6;\r\n    this.hasShadow = true;\r\n    this.pushable = true;\r\n    this.name = \"dark crate\";\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 26;\r\n\r\n    /*\r\n    if (Random.rand() < 0.1) {\r\n      this.drops.push(new WeaponFragments(this.room, this.x, this.y, 10));\r\n    } else {\r\n      this.drops.push(new Coin(this.room, this.x, this.y));\r\n    }\r\n    */\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Shrooms } from \"../../item/usable/shrooms\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Resource } from \"../resource/resource\";\r\n\r\nexport class ObsidianBlock extends Resource {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 18;\r\n    this.tileY = 6;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"obsidian block\";\r\n    this.imageParticleX = 6;\r\n    this.imageParticleY = 24;\r\n    this.opaque = true;\r\n    this.hitSound = Sound.breakRock;\r\n    //this.drops.push(new Shrooms(this.room, this.x, this.y));\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        2,\r\n        2,\r\n        this.x - this.drawX - 0.5,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        2,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import {\r\n  Partition,\r\n  PartitionConnection,\r\n  PartialLevel,\r\n} from \"./partitionGenerator\";\r\nimport { RoomType } from \"../room/room\";\r\nimport { Random } from \"../utility/random\";\r\nimport { Game } from \"../game\";\r\n\r\ninterface Rectangle {\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n  color: string;\r\n}\r\n\r\n// Color-to-RoomType mapping for level designers\r\nconst COLOR_TO_ROOM_TYPE: { [color: string]: RoomType } = {\r\n  // Core room types\r\n  \"rgb(0, 255, 0)\": RoomType.START, // Green - Starting room\r\n  \"rgb(255, 0, 0)\": RoomType.BOSS, // Red - Boss room\r\n  \"rgb(0, 0, 255)\": RoomType.DOWNLADDER, // Blue - Stairs down\r\n  \"rgb(0, 255, 255)\": RoomType.UPLADDER, // Cyan - Stairs up\r\n\r\n  // Special rooms\r\n  \"rgb(255, 255, 0)\": RoomType.TREASURE, // Yellow - Treasure room\r\n  \"rgb(255, 0, 255)\": RoomType.SHOP, // Magenta - Shop\r\n  \"rgb(128, 0, 128)\": RoomType.FOUNTAIN, // Purple - Fountain room\r\n  \"rgb(139, 69, 19)\": RoomType.COFFIN, // Brown - Coffin room\r\n  \"rgb(255, 165, 0)\": RoomType.KEYROOM, // Orange - Key room\r\n\r\n  // Puzzle and special mechanics\r\n  \"rgb(64, 64, 64)\": RoomType.PUZZLE, // Dark gray - Puzzle room\r\n  \"rgb(0, 0, 0)\": RoomType.CHESSBOARD, // Black - Chess room\r\n  \"rgb(192, 192, 192)\": RoomType.MAZE, // Light gray - Maze\r\n  \"rgb(255, 192, 203)\": RoomType.SPAWNER, // Pink - Spawner room\r\n\r\n  // Environment types\r\n  \"rgb(34, 139, 34)\": RoomType.GRASS, // Forest green - Grass room\r\n  \"rgb(101, 67, 33)\": RoomType.CAVE, // Dark brown - Cave\r\n  \"rgb(85, 107, 47)\": RoomType.GRAVEYARD, // Olive - Graveyard\r\n  \"rgb(46, 125, 50)\": RoomType.FOREST, // Green - Forest\r\n\r\n  // Corridors and connections\r\n  \"rgb(160, 160, 160)\": RoomType.CORRIDOR, // Gray - Corridor\r\n  \"rgb(255, 87, 34)\": RoomType.SPIKECORRIDOR, // Red-orange - Spike corridor\r\n\r\n  // Cave system\r\n  \"rgb(121, 85, 72)\": RoomType.BIGCAVE, // Light brown - Big cave\r\n  \"rgb(78, 52, 46)\": RoomType.ROPECAVE, // Dark brown - Rope cave\r\n  \"rgb(156, 102, 68)\": RoomType.ROPEHOLE, // Medium brown - Rope hole\r\n  \"rgb(141, 110, 99)\": RoomType.ROPEUP, // Tan - Rope up\r\n\r\n  // Tutorial and misc\r\n  \"rgb(173, 216, 230)\": RoomType.TUTORIAL, // Light blue - Tutorial\r\n  \"rgb(250, 250, 250)\": RoomType.BIGDUNGEON, // Near white - Big dungeon\r\n\r\n  // Default fallback\r\n  \"rgb(255, 255, 255)\": RoomType.DUNGEON, // White - Standard dungeon room\r\n};\r\n\r\nexport class PngPartitionGenerator {\r\n  public async generatePartitionsFromPng(\r\n    imageUrl: string,\r\n    game: Game,\r\n    depth: number,\r\n    isSidePath: boolean = false, // Add this parameter\r\n  ): Promise<Partition[]> {\r\n    //console.log(\"=== PNG PARTITION GENERATION START ===\");\r\n    //console.log(`Processing image: ${imageUrl}`);\r\n    //console.log(`Game depth: ${depth}`);\r\n    //console.log(`Is side path: ${isSidePath}`);\r\n\r\n    try {\r\n      //console.log(\"Step 1: Loading image data...\");\r\n      const imageData = await this.loadImageData(imageUrl);\r\n      //console.log(\r\n      //  `✓ Image loaded: ${imageData.width}x${imageData.height} pixels`,\r\n      //);\r\n\r\n      //console.log(\"Step 2: Finding rectangles...\");\r\n      const rectangles = this.findRectangles(imageData);\r\n      //console.log(`✓ Found ${rectangles.length} rectangles:`, rectangles);\r\n\r\n      //console.log(\"Step 3: Creating partitions from rectangles...\");\r\n      const rawPartitions = this.createPartitionsFromRectangles(\r\n        rectangles,\r\n        isSidePath,\r\n      );\r\n      //console.log(`✓ Created ${rawPartitions.length} raw partitions`);\r\n\r\n      if (rawPartitions.length === 0) {\r\n        console.error(\"❌ No partitions created from image!\");\r\n        return [];\r\n      }\r\n\r\n      //console.log(\"Step 4: Processing partitions for gameplay...\");\r\n      const partialLevel = new PartialLevel();\r\n      partialLevel.partitions = rawPartitions;\r\n\r\n      await this.processPartitionsForGameplay(partialLevel, game, isSidePath);\r\n      console.log(\r\n        `✓ Final processed partitions: ${partialLevel.partitions.length}`,\r\n      );\r\n\r\n      //console.log(\"=== PNG PARTITION GENERATION COMPLETE ===\");\r\n      return partialLevel.partitions;\r\n    } catch (error) {\r\n      console.error(\"❌ Error in PNG partition generation:\", error);\r\n      console.error(\"Stack trace:\", error.stack);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private loadImageData(imageUrl: string): Promise<ImageData> {\r\n    //console.log(`  Loading image from: ${imageUrl}`);\r\n    return new Promise((resolve, reject) => {\r\n      const image = new Image();\r\n      image.crossOrigin = \"Anonymous\";\r\n\r\n      image.onload = () => {\r\n        //console.log(\r\n        //  `  ✓ Image loaded successfully: ${image.width}x${image.height}`,\r\n        //);\r\n        try {\r\n          const canvas = document.createElement(\"canvas\");\r\n          canvas.width = image.width;\r\n          canvas.height = image.height;\r\n          const ctx = canvas.getContext(\"2d\");\r\n\r\n          if (!ctx) {\r\n            throw new Error(\"Could not get canvas context\");\r\n          }\r\n\r\n          ctx.drawImage(image, 0, 0);\r\n          const imageData = ctx.getImageData(0, 0, image.width, image.height);\r\n          //    console.log(\r\n          //  `  ✓ Image data extracted: ${imageData.data.length} bytes`,\r\n          //);\r\n          resolve(imageData);\r\n        } catch (error) {\r\n          console.error(\"  ❌ Error processing image:\", error);\r\n          reject(error);\r\n        }\r\n      };\r\n\r\n      image.onerror = (err) => {\r\n        console.error(`  ❌ Failed to load image: ${err}`);\r\n        reject(new Error(`Failed to load image at ${imageUrl}: ${err}`));\r\n      };\r\n\r\n      image.src = imageUrl;\r\n      //console.log(\"  Image loading initiated...\");\r\n    });\r\n  }\r\n\r\n  private findRectangles(imageData: ImageData): Rectangle[] {\r\n    //console.log(\"  Finding rectangles in image...\");\r\n    const { width, height, data } = imageData;\r\n    const visited = new Array(width * height).fill(false);\r\n    const rectangles: Rectangle[] = [];\r\n\r\n    //console.log(`  Scanning ${width}x${height} pixels (${data.length} bytes)`);\r\n\r\n    let transparentPixels = 0;\r\n    let processedPixels = 0;\r\n\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        const index = y * width + x;\r\n        if (visited[index]) {\r\n          continue;\r\n        }\r\n\r\n        const pixelIndex = index * 4;\r\n        const alpha = data[pixelIndex + 3];\r\n\r\n        if (alpha === 0) {\r\n          transparentPixels++;\r\n          continue;\r\n        }\r\n\r\n        processedPixels++;\r\n        const r = data[pixelIndex];\r\n        const g = data[pixelIndex + 1];\r\n        const b = data[pixelIndex + 2];\r\n        const color = `rgb(${r}, ${g}, ${b})`;\r\n\r\n        //console.log(\r\n        //  `  Processing pixel at (${x}, ${y}): color ${color}, alpha ${alpha}`,\r\n        //);\r\n\r\n        let rectW = 1;\r\n        while (\r\n          x + rectW < width &&\r\n          !visited[y * width + (x + rectW)] &&\r\n          this.isSameColor(data, pixelIndex, (y * width + x + rectW) * 4)\r\n        ) {\r\n          rectW++;\r\n        }\r\n\r\n        let rectH = 1;\r\n        while (y + rectH < height) {\r\n          let isRowSolid = true;\r\n          for (let i = 0; i < rectW; i++) {\r\n            if (\r\n              visited[(y + rectH) * width + (x + i)] ||\r\n              !this.isSameColor(\r\n                data,\r\n                pixelIndex,\r\n                ((y + rectH) * width + x + i) * 4,\r\n              )\r\n            ) {\r\n              isRowSolid = false;\r\n              break;\r\n            }\r\n          }\r\n          if (isRowSolid) {\r\n            rectH++;\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n\r\n        // Mark all pixels in this rectangle as visited\r\n        for (let j = 0; j < rectH; j++) {\r\n          for (let i = 0; i < rectW; i++) {\r\n            visited[(y + j) * width + (x + i)] = true;\r\n          }\r\n        }\r\n\r\n        const rectangle = { x, y, w: rectW, h: rectH, color };\r\n        rectangles.push(rectangle);\r\n        //console.log(\r\n        //  `  ✓ Found rectangle: ${rectW}x${rectH} at (${x}, ${y}) with color ${color}`,\r\n        //);\r\n      }\r\n    }\r\n\r\n    //console.log(`  ✓ Rectangle finding complete:`);\r\n    //console.log(`    - Transparent pixels: ${transparentPixels}`);\r\n    //console.log(`    - Processed pixels: ${processedPixels}`);\r\n    //console.log(`    - Total rectangles found: ${rectangles.length}`);\r\n\r\n    return rectangles;\r\n  }\r\n\r\n  private isSameColor(\r\n    data: Uint8ClampedArray,\r\n    index1: number,\r\n    index2: number,\r\n  ): boolean {\r\n    const same =\r\n      data[index1] === data[index2] &&\r\n      data[index1 + 1] === data[index2 + 1] &&\r\n      data[index1 + 2] === data[index2 + 2] &&\r\n      data[index1 + 3] === data[index2 + 3];\r\n    return same;\r\n  }\r\n\r\n  private createPartitionsFromRectangles(\r\n    rectangles: Rectangle[],\r\n    isSidePath: boolean,\r\n  ): Partition[] {\r\n    //console.log(\"  Creating partitions from rectangles...\");\r\n    //console.log(`  Side path mode: ${isSidePath}`);\r\n\r\n    if (rectangles.length === 0) {\r\n      console.warn(\"  ⚠️  No rectangles to create partitions from!\");\r\n      return [];\r\n    }\r\n\r\n    const partitions = rectangles.map((rect, index) => {\r\n      //console.log(`  Processing rectangle ${index + 1}/${rectangles.length}:`);\r\n      //console.log(`    Position: (${rect.x}, ${rect.y})`);\r\n      //console.log(`    Size: ${rect.w}x${rect.h}`);\r\n      //console.log(`    Color: ${rect.color}`);\r\n\r\n      const partition = new Partition(\r\n        rect.x,\r\n        rect.y,\r\n        rect.w,\r\n        rect.h,\r\n        rect.color,\r\n      );\r\n\r\n      if (isSidePath) {\r\n        // For side paths, use cave-appropriate color mappings\r\n        const caveRoomType = this.getCaveRoomTypeFromColor(rect.color);\r\n        partition.type = caveRoomType;\r\n        //console.log(`    ✓ Cave room type assigned: ${caveRoomType}`);\r\n      } else {\r\n        // For main paths, use the existing color mapping\r\n        const roomType = COLOR_TO_ROOM_TYPE[rect.color];\r\n        if (roomType) {\r\n          partition.type = roomType;\r\n          //console.log(`    ✓ Main path room type assigned: ${roomType}`);\r\n        } else {\r\n          partition.type = RoomType.DUNGEON;\r\n          //  console.log(\r\n          //  `    ⚠️  Unknown color, defaulted to: ${RoomType.DUNGEON}`,\r\n          //);\r\n        }\r\n      }\r\n\r\n      //console.log(`    ✓ Partition created with area: ${partition.area()}`);\r\n      return partition;\r\n    });\r\n\r\n    //console.log(`  ✓ Created ${partitions.length} partitions`);\r\n    return partitions;\r\n  }\r\n\r\n  private getCaveRoomTypeFromColor(color: string): RoomType {\r\n    // Cave-specific color mappings\r\n    switch (color) {\r\n      case \"rgb(0, 255, 0)\": // Green - Cave spawn point\r\n        return RoomType.ROPECAVE;\r\n      case \"rgb(0, 255, 255)\": // Cyan - Up ladder (exit to main path)\r\n        return RoomType.UPLADDER;\r\n      case \"rgb(255, 255, 0)\": // Yellow - Treasure room\r\n        return RoomType.TREASURE;\r\n      case \"rgb(255, 0, 255)\": // Magenta - Shop\r\n        return RoomType.SHOP;\r\n      default:\r\n        return RoomType.CAVE; // Default cave room\r\n    }\r\n  }\r\n\r\n  private async processPartitionsForGameplay(\r\n    partialLevel: PartialLevel,\r\n    game: Game,\r\n    isSidePath: boolean,\r\n  ): Promise<void> {\r\n    //console.log(\"  === GAMEPLAY PROCESSING START ===\");\r\n    //console.log(`  Side path mode: ${isSidePath}`);\r\n\r\n    if (partialLevel.partitions.length === 0) {\r\n      console.error(\"  ❌ No partitions to process!\");\r\n      return;\r\n    }\r\n\r\n    //console.log(\r\n    //  `  Processing ${partialLevel.partitions.length} partitions for gameplay`,\r\n    //);\r\n\r\n    if (isSidePath) {\r\n      await this.processCavePartitions(partialLevel, game);\r\n    } else {\r\n      await this.processMainPathPartitions(partialLevel, game);\r\n    }\r\n\r\n    //console.log(\"  === GAMEPLAY PROCESSING COMPLETE ===\");\r\n  }\r\n\r\n  private async processCavePartitions(partialLevel: PartialLevel, game: Game) {\r\n    //console.log(\"  Processing as CAVE system...\");\r\n\r\n    // Log all room types found\r\n    const roomTypeCounts: { [key: string]: number } = {};\r\n    partialLevel.partitions.forEach((p) => {\r\n      roomTypeCounts[p.type] = (roomTypeCounts[p.type] || 0) + 1;\r\n    });\r\n    //console.log(\"  Cave room type distribution:\", roomTypeCounts);\r\n\r\n    // Find or assign ROPECAVE room\r\n    let spawn = partialLevel.partitions.find(\r\n      (p) => p.type === RoomType.ROPECAVE,\r\n    );\r\n\r\n    if (!spawn && partialLevel.partitions.length > 0) {\r\n      //console.log(\r\n      //  \"  No ROPECAVE room specified, assigning to smallest room...\",\r\n      //);\r\n      partialLevel.partitions.sort((a, b) => a.area() - b.area());\r\n      spawn = partialLevel.partitions[0];\r\n      spawn.type = RoomType.ROPECAVE;\r\n      spawn.fillStyle = \"rgb(0, 255, 0)\";\r\n      //console.log(`  ✓ Assigned ROPECAVE to room at (${spawn.x}, ${spawn.y})`);\r\n    }\r\n\r\n    // Make sure all other rooms are CAVE type (unless they're special rooms like TREASURE)\r\n    partialLevel.partitions.forEach((p) => {\r\n      if (p !== spawn && p.type === RoomType.DUNGEON) {\r\n        p.type = RoomType.CAVE;\r\n        //console.log(`  Converted DUNGEON to CAVE at (${p.x}, ${p.y})`);\r\n      }\r\n    });\r\n\r\n    //console.log(\"  Updating visual styles...\");\r\n    this.updatePartitionVisualStyles(partialLevel.partitions);\r\n\r\n    // CRITICAL: Move ROPECAVE room to index 0 for proper spawning\r\n    if (spawn) {\r\n      const startIndex = partialLevel.partitions.indexOf(spawn);\r\n      if (startIndex > 0) {\r\n        //  console.log(\r\n        //  `  Moving ROPECAVE room from index ${startIndex} to index 0`,\r\n        //);\r\n        partialLevel.partitions.splice(startIndex, 1);\r\n        partialLevel.partitions.unshift(spawn);\r\n        //console.log(`  ✓ ROPECAVE room is now at index 0`);\r\n      } else {\r\n        //console.log(`  ✓ ROPECAVE room already at index 0`);\r\n      }\r\n    }\r\n\r\n    // Connect partitions using cave logic\r\n    if (spawn) {\r\n      //console.log(\"  Connecting cave partitions...\");\r\n      await this.connectCavePartitions(partialLevel, spawn);\r\n      //console.log(\r\n      //  `  ✓ Cave connection complete. Remaining partitions: ${partialLevel.partitions.length}`,\r\n      //);\r\n    }\r\n\r\n    // Add cave loops\r\n    if (partialLevel.partitions.length > 0) {\r\n      //console.log(\"  Adding cave loop connections...\");\r\n      await this.addLoopConnections(partialLevel);\r\n    }\r\n\r\n    // Calculate distances (no stair room for caves)\r\n    if (partialLevel.partitions.length > 0 && spawn) {\r\n      //console.log(\"  Calculating cave distances...\");\r\n      await this.calculateDistances(partialLevel, spawn);\r\n      await this.addSpecialRooms(partialLevel);\r\n    }\r\n  }\r\n\r\n  private async processMainPathPartitions(\r\n    partialLevel: PartialLevel,\r\n    game: Game,\r\n  ) {\r\n    //console.log(\"  Processing as MAIN PATH...\");\r\n\r\n    // Log all room types found\r\n    const roomTypeCounts: { [key: string]: number } = {};\r\n    partialLevel.partitions.forEach((p) => {\r\n      roomTypeCounts[p.type] = (roomTypeCounts[p.type] || 0) + 1;\r\n    });\r\n    //console.log(\"  Room type distribution:\", roomTypeCounts);\r\n\r\n    // Find START and BOSS rooms from color assignments\r\n    let spawn = partialLevel.partitions.find((p) => p.type === RoomType.START);\r\n    let boss = partialLevel.partitions.find((p) => p.type === RoomType.BOSS);\r\n\r\n    //console.log(`  Found START room: ${spawn ? \"YES\" : \"NO\"}`);\r\n    //console.log(`  Found BOSS room: ${boss ? \"YES\" : \"NO\"}`);\r\n\r\n    // If no START room was specified by color, assign the smallest room\r\n    if (!spawn && partialLevel.partitions.length > 0) {\r\n      //console.log(\"  No START room specified, finding smallest room...\");\r\n      partialLevel.partitions.sort((a, b) => a.area() - b.area());\r\n      spawn = partialLevel.partitions[0];\r\n      spawn.type = RoomType.START;\r\n      spawn.fillStyle = \"rgb(0, 255, 0)\";\r\n      //console.log(\r\n      //  `  ✓ Assigned START to smallest room at (${spawn.x}, ${spawn.y}) with area ${spawn.area()}`,\r\n      //);\r\n    }\r\n\r\n    // If no BOSS room was specified by color, assign the largest room\r\n    if (!boss && partialLevel.partitions.length > 1) {\r\n      //console.log(\"  No BOSS room specified, finding largest room...\");\r\n      partialLevel.partitions.sort((a, b) => a.area() - b.area());\r\n      boss = partialLevel.partitions[partialLevel.partitions.length - 1];\r\n      if (boss.type === RoomType.DUNGEON) {\r\n        boss.type = RoomType.BOSS;\r\n        boss.fillStyle = \"red\";\r\n        //console.log(\r\n        //  `  ✓ Assigned BOSS to largest room at (${boss.x}, ${boss.y}) with area ${boss.area()}`,\r\n        //);\r\n      } else {\r\n        //  console.log(\r\n        //  `  ⚠️  Largest room is already ${boss.type}, not assigning BOSS`,\r\n        //);\r\n        boss = null;\r\n      }\r\n    }\r\n\r\n    //console.log(\"  Updating visual styles...\");\r\n    this.updatePartitionVisualStyles(partialLevel.partitions);\r\n\r\n    // CRITICAL: Move START room to index 0 for proper spawning\r\n    if (spawn) {\r\n      const startIndex = partialLevel.partitions.indexOf(spawn);\r\n      if (startIndex > 0) {\r\n        //console.log(`  Moving START room from index ${startIndex} to index 0`);\r\n        // Remove START room from current position\r\n        partialLevel.partitions.splice(startIndex, 1);\r\n        // Insert at beginning\r\n        partialLevel.partitions.unshift(spawn);\r\n        //console.log(`  ✓ START room is now at index 0`);\r\n      } else {\r\n        //console.log(`  ✓ START room already at index 0`);\r\n      }\r\n    }\r\n\r\n    // Connect partitions\r\n    if (spawn) {\r\n      //console.log(\"  Connecting partitions...\");\r\n      await this.connectPartitions(partialLevel, spawn);\r\n      //console.log(\r\n      //  `  ✓ Connection phase complete. Remaining partitions: ${partialLevel.partitions.length}`,\r\n      //);\r\n    } else {\r\n      console.error(\"  ❌ No spawn room found, cannot connect partitions!\");\r\n    }\r\n\r\n    // Add loop connections\r\n    if (partialLevel.partitions.length > 0) {\r\n      //console.log(\"  Adding loop connections...\");\r\n      await this.addLoopConnections(partialLevel);\r\n      //console.log(\"  ✓ Loop connections added\");\r\n    }\r\n\r\n    // Add stair room\r\n    const hasStairRoom = partialLevel.partitions.some(\r\n      (p) => p.type === RoomType.DOWNLADDER,\r\n    );\r\n    //console.log(`  Existing stair room: ${hasStairRoom ? \"YES\" : \"NO\"}`);\r\n\r\n    if (!hasStairRoom && partialLevel.partitions.length > 0) {\r\n      //console.log(\"  Adding automatic stair room...\");\r\n      await this.addStairRoom(partialLevel, game);\r\n      //console.log(\r\n      //  `  ✓ Stair room processing complete. Final partitions: ${partialLevel.partitions.length}`,\r\n      //);\r\n    }\r\n\r\n    // Calculate distances\r\n    if (partialLevel.partitions.length > 0 && spawn) {\r\n      //  console.log(\"  Calculating distances...\");\r\n      await this.calculateDistances(partialLevel, spawn);\r\n\r\n      //console.log(\"  Adding special rooms...\");\r\n      await this.addSpecialRooms(partialLevel);\r\n\r\n      //console.log(\"  ✓ Distance calculation complete\");\r\n\r\n      // Log final distances\r\n      partialLevel.partitions.forEach((p) => {\r\n        //console.log(\r\n        //  `    ${p.type} at (${p.x}, ${p.y}): distance ${p.distance}`,\r\n        //);\r\n      });\r\n    }\r\n  }\r\n\r\n  private updatePartitionVisualStyles(partitions: Partition[]) {\r\n    //console.log(\"    Updating visual styles...\");\r\n    for (const partition of partitions) {\r\n      const oldStyle = partition.fillStyle;\r\n      switch (partition.type) {\r\n        case RoomType.START:\r\n          partition.fillStyle = \"rgb(0, 255, 0)\";\r\n          break;\r\n        case RoomType.BOSS:\r\n          partition.fillStyle = \"red\";\r\n          break;\r\n        case RoomType.DOWNLADDER:\r\n        case RoomType.UPLADDER:\r\n          partition.fillStyle = \"blue\";\r\n          break;\r\n        case RoomType.TREASURE:\r\n          partition.fillStyle = \"rgb(255, 215, 0)\";\r\n          break;\r\n        case RoomType.SHOP:\r\n          partition.fillStyle = \"rgb(255, 0, 255)\";\r\n          break;\r\n        case RoomType.FOUNTAIN:\r\n          partition.fillStyle = \"rgb(128, 0, 128)\";\r\n          break;\r\n        case RoomType.CAVE:\r\n        case RoomType.BIGCAVE:\r\n          partition.fillStyle = \"rgb(101, 67, 33)\";\r\n          break;\r\n        default:\r\n          partition.fillStyle = \"white\";\r\n          break;\r\n      }\r\n\r\n      if (oldStyle !== partition.fillStyle) {\r\n        //console.log(\r\n        //  `      Updated ${partition.type} style: ${oldStyle} -> ${partition.fillStyle}`,\r\n        //);\r\n      }\r\n    }\r\n  }\r\n\r\n  private async connectPartitions(\r\n    partialLevel: PartialLevel,\r\n    spawn: Partition,\r\n  ) {\r\n    //console.log(\"    === PNG CONNECTION WITH DEAD ENDS ===\");\r\n\r\n    let connected = [spawn];\r\n    let frontier = [spawn];\r\n    let connectionsMade = 0;\r\n\r\n    while (frontier.length > 0) {\r\n      let room = frontier[0];\r\n      frontier.splice(0, 1);\r\n\r\n      //console.log(`    Processing ${room.type} at (${room.x}, ${room.y})`);\r\n\r\n      // Find all unconnected rooms that are adjacent to this room\r\n      const adjacentRooms = partialLevel.partitions.filter((p) => {\r\n        return (\r\n          p !== room &&\r\n          connected.indexOf(p) === -1 &&\r\n          this.arePartitionsAdjacent(room, p)\r\n        );\r\n      });\r\n\r\n      //console.log(\r\n      //  `      Found ${adjacentRooms.length} adjacent unconnected rooms`,\r\n      //);\r\n\r\n      // AGGRESSIVE: Connect to ALL adjacent rooms, not just 1-2\r\n      for (let i = 0; i < adjacentRooms.length; i++) {\r\n        const target = adjacentRooms[i];\r\n        const adjacencyInfo = this.arePartitionsAdjacent(room, target);\r\n\r\n        if (adjacencyInfo) {\r\n          const connectionPoint = adjacencyInfo.connectionPoint;\r\n\r\n          //console.log(\r\n          //  `      ✓ Connecting to ${target.type} at (${connectionPoint.x}, ${connectionPoint.y})`,\r\n          //);\r\n\r\n          // Create bidirectional connections\r\n          room.connections.push(\r\n            new PartitionConnection(\r\n              connectionPoint.x,\r\n              connectionPoint.y,\r\n              target,\r\n            ),\r\n          );\r\n          target.connections.push(\r\n            new PartitionConnection(connectionPoint.x, connectionPoint.y, room),\r\n          );\r\n\r\n          // Set wall openings\r\n          room.setOpenWall(\r\n            new PartitionConnection(\r\n              connectionPoint.x,\r\n              connectionPoint.y,\r\n              target,\r\n            ),\r\n          );\r\n          target.setOpenWall(\r\n            new PartitionConnection(connectionPoint.x, connectionPoint.y, room),\r\n          );\r\n\r\n          frontier.push(target);\r\n          connected.push(target);\r\n          connectionsMade++;\r\n        }\r\n      }\r\n\r\n      //console.log(\r\n      //  `      Room completed with ${room.connections.length} total connections`,\r\n      //);\r\n    }\r\n\r\n    //console.log(\r\n    //  `    ✓ Connected ${connected.length}/${partialLevel.partitions.length} rooms`,\r\n    //);\r\n\r\n    // PRESERVE UNCONNECTED ROOMS: Don't remove them, just log them\r\n    const unconnected = partialLevel.partitions.filter(\r\n      (p) => p.connections.length === 0,\r\n    );\r\n\r\n    if (unconnected.length > 0) {\r\n      //  console.log(\r\n      //  `    📍 Found ${unconnected.length} isolated rooms (keeping as dead ends):`,\r\n      //);\r\n      unconnected.forEach((partition) => {\r\n        //console.log(\r\n        //  `      - ${partition.type} at (${partition.x}, ${partition.y})`,\r\n        //);\r\n        // Make them accessible by connecting to the nearest connected room\r\n        this.connectIsolatedRoom(\r\n          partition,\r\n          partialLevel.partitions.filter((p) => p.connections.length > 0),\r\n        );\r\n      });\r\n    }\r\n\r\n    //console.log(\r\n    //  `    Final result: ${partialLevel.partitions.length} total rooms preserved`,\r\n    //);\r\n  }\r\n\r\n  private connectIsolatedRoom(\r\n    isolatedRoom: Partition,\r\n    connectedRooms: Partition[],\r\n  ) {\r\n    // Find the closest connected room and create a connection\r\n    let closestRoom = null;\r\n    let closestDistance = Infinity;\r\n\r\n    for (const room of connectedRooms) {\r\n      const distance =\r\n        Math.abs(isolatedRoom.x - room.x) + Math.abs(isolatedRoom.y - room.y);\r\n      if (distance < closestDistance) {\r\n        closestDistance = distance;\r\n        closestRoom = room;\r\n      }\r\n    }\r\n\r\n    if (closestRoom) {\r\n      // Create a connection point between the rooms\r\n      const connectionX = Math.floor((isolatedRoom.x + closestRoom.x) / 2);\r\n      const connectionY = Math.floor((isolatedRoom.y + closestRoom.y) / 2);\r\n\r\n      //console.log(\r\n      //  `      ✓ Linking isolated ${isolatedRoom.type} to ${closestRoom.type} via (${connectionX}, ${connectionY})`,\r\n      //);\r\n\r\n      isolatedRoom.connections.push(\r\n        new PartitionConnection(connectionX, connectionY, closestRoom),\r\n      );\r\n      closestRoom.connections.push(\r\n        new PartitionConnection(connectionX, connectionY, isolatedRoom),\r\n      );\r\n    }\r\n  }\r\n\r\n  private async connectCavePartitions(\r\n    partialLevel: PartialLevel,\r\n    spawn: Partition,\r\n  ) {\r\n    //console.log(\"    Connecting cave partitions...\");\r\n    let connected = [spawn];\r\n    let frontier = [spawn];\r\n    const maxRooms = partialLevel.partitions.length; // Connect all available rooms\r\n\r\n    while (frontier.length > 0 && connected.length < maxRooms) {\r\n      let room = frontier[0];\r\n      frontier.splice(0, 1);\r\n\r\n      //console.log(\r\n      //  `    Processing cave room ${room.type} at (${room.x}, ${room.y})`,\r\n      //);\r\n\r\n      // Find adjacent unconnected rooms\r\n      const adjacentRooms = partialLevel.partitions.filter((p) => {\r\n        return (\r\n          p !== room &&\r\n          connected.indexOf(p) === -1 &&\r\n          this.arePartitionsAdjacent(room, p)\r\n        );\r\n      });\r\n\r\n      const maxConnections = Math.min(\r\n        adjacentRooms.length,\r\n        Math.floor(Random.rand() * 2 + 1),\r\n      );\r\n\r\n      for (let i = 0; i < maxConnections && connected.length < maxRooms; i++) {\r\n        const target = adjacentRooms[i];\r\n        const adjacencyInfo = this.arePartitionsAdjacent(room, target);\r\n\r\n        if (adjacencyInfo) {\r\n          const connectionPoint = adjacencyInfo.connectionPoint;\r\n\r\n          room.connections.push(\r\n            new PartitionConnection(\r\n              connectionPoint.x,\r\n              connectionPoint.y,\r\n              target,\r\n            ),\r\n          );\r\n          target.connections.push(\r\n            new PartitionConnection(connectionPoint.x, connectionPoint.y, room),\r\n          );\r\n\r\n          frontier.push(target);\r\n          connected.push(target);\r\n          //console.log(`    ✓ Cave connection: ${room.type} <-> ${target.type}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove unconnected rooms\r\n    partialLevel.partitions = partialLevel.partitions.filter(\r\n      (p) => p.connections.length > 0,\r\n    );\r\n    //  console.log(\r\n    //  `    ✓ Cave connection complete: ${connected.length} rooms connected`,\r\n    //);\r\n  }\r\n\r\n  /**\r\n   * Check if two partitions are adjacent and return connection info\r\n   */\r\n  private arePartitionsAdjacent(\r\n    p1: Partition,\r\n    p2: Partition,\r\n  ): {\r\n    direction: string;\r\n    connectionPoint: { x: number; y: number };\r\n  } | null {\r\n    // Check if they're horizontally adjacent (side by side)\r\n    if (p1.y < p2.y + p2.h && p2.y < p1.y + p1.h) {\r\n      // p1 is to the left of p2\r\n      if (p1.x + p1.w === p2.x || p1.x + p1.w === p2.x - 1) {\r\n        const overlapStart = Math.max(p1.y, p2.y);\r\n        const overlapEnd = Math.min(p1.y + p1.h, p2.y + p2.h);\r\n        const connectionY = Math.floor(\r\n          overlapStart + (overlapEnd - overlapStart) / 2,\r\n        );\r\n        return {\r\n          direction: \"horizontal\",\r\n          connectionPoint: { x: p1.x + p1.w, y: connectionY },\r\n        };\r\n      }\r\n      // p2 is to the left of p1\r\n      if (p2.x + p2.w === p1.x || p2.x + p2.w === p1.x - 1) {\r\n        const overlapStart = Math.max(p1.y, p2.y);\r\n        const overlapEnd = Math.min(p1.y + p1.h, p2.y + p2.h);\r\n        const connectionY = Math.floor(\r\n          overlapStart + (overlapEnd - overlapStart) / 2,\r\n        );\r\n        return {\r\n          direction: \"horizontal\",\r\n          connectionPoint: { x: p2.x + p2.w, y: connectionY },\r\n        };\r\n      }\r\n    }\r\n\r\n    // Check if they're vertically adjacent (top/bottom)\r\n    if (p1.x < p2.x + p2.w && p2.x < p1.x + p1.w) {\r\n      // p1 is above p2\r\n      if (p1.y + p1.h === p2.y || p1.y + p1.h === p2.y - 1) {\r\n        const overlapStart = Math.max(p1.x, p2.x);\r\n        const overlapEnd = Math.min(p1.x + p1.w, p2.x + p2.w);\r\n        const connectionX = Math.floor(\r\n          overlapStart + (overlapEnd - overlapStart) / 2,\r\n        );\r\n        return {\r\n          direction: \"vertical\",\r\n          connectionPoint: { x: connectionX, y: p1.y + p1.h },\r\n        };\r\n      }\r\n      // p2 is above p1\r\n      if (p2.y + p2.h === p1.y || p2.y + p2.h === p1.y - 1) {\r\n        const overlapStart = Math.max(p1.x, p2.x);\r\n        const overlapEnd = Math.min(p1.x + p1.w, p2.x + p2.w);\r\n        const connectionX = Math.floor(\r\n          overlapStart + (overlapEnd - overlapStart) / 2,\r\n        );\r\n        return {\r\n          direction: \"vertical\",\r\n          connectionPoint: { x: connectionX, y: p2.y + p2.h },\r\n        };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Enhanced loop connections that work better with PNG layouts\r\n   */\r\n  private async addLoopConnections(partialLevel: PartialLevel) {\r\n    //console.log(\"    Adding PNG-optimized loop connections...\");\r\n    if (partialLevel.partitions.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Build adjacency map\r\n    const adjacencyMap = new Map<Partition, Partition[]>();\r\n\r\n    partialLevel.partitions.forEach((p1) => {\r\n      const adjacent = partialLevel.partitions.filter((p2) => {\r\n        return p2 !== p1 && this.arePartitionsAdjacent(p1, p2);\r\n      });\r\n      adjacencyMap.set(p1, adjacent);\r\n    });\r\n\r\n    let loopsAdded = 0;\r\n    const maxLoops = Math.min(\r\n      4,\r\n      Math.floor(partialLevel.partitions.length / 2),\r\n    );\r\n\r\n    //console.log(`    Attempting up to ${maxLoops} loop connections`);\r\n\r\n    for (let i = 0; i < maxLoops; i++) {\r\n      // Pick a random room\r\n      const roomIndex = Math.floor(\r\n        Random.rand() * partialLevel.partitions.length,\r\n      );\r\n      const room = partialLevel.partitions[roomIndex];\r\n\r\n      // Find adjacent rooms that aren't already connected\r\n      const adjacentRooms = adjacencyMap.get(room) || [];\r\n      const unconnectedAdjacent = adjacentRooms.filter(\r\n        (p) => !room.connections.some((c) => c.other === p),\r\n      );\r\n\r\n      if (unconnectedAdjacent.length > 0) {\r\n        const target =\r\n          unconnectedAdjacent[\r\n            Math.floor(Random.rand() * unconnectedAdjacent.length)\r\n          ];\r\n        const adjacencyInfo = this.arePartitionsAdjacent(room, target);\r\n\r\n        if (adjacencyInfo) {\r\n          const connectionPoint = adjacencyInfo.connectionPoint;\r\n\r\n          room.connections.push(\r\n            new PartitionConnection(\r\n              connectionPoint.x,\r\n              connectionPoint.y,\r\n              target,\r\n            ),\r\n          );\r\n          target.connections.push(\r\n            new PartitionConnection(connectionPoint.x, connectionPoint.y, room),\r\n          );\r\n\r\n          room.setOpenWall(\r\n            new PartitionConnection(\r\n              connectionPoint.x,\r\n              connectionPoint.y,\r\n              target,\r\n            ),\r\n          );\r\n          target.setOpenWall(\r\n            new PartitionConnection(connectionPoint.x, connectionPoint.y, room),\r\n          );\r\n\r\n          loopsAdded++;\r\n          //console.log(\r\n          //  `    ✓ Loop ${loopsAdded}: ${room.type} <-> ${target.type}`,\r\n          //);\r\n        }\r\n      }\r\n    }\r\n\r\n    //console.log(`    ✓ Added ${loopsAdded} loop connections`);\r\n  }\r\n\r\n  private async addStairRoom(partialLevel: PartialLevel, game: Game) {\r\n    //  console.log(\"    Adding stair room...\");\r\n\r\n    const hasBoss = partialLevel.partitions.some(\r\n      (p) => p.type === RoomType.BOSS,\r\n    );\r\n    const hasStairs = partialLevel.partitions.some(\r\n      (p) => p.type === RoomType.DOWNLADDER,\r\n    );\r\n\r\n    //console.log(`    Has boss room: ${hasBoss}`);\r\n    //console.log(`    Has existing stairs: ${hasStairs}`);\r\n\r\n    if (!hasBoss || hasStairs) {\r\n      //console.log(\"    Skipping stair room addition\");\r\n      return;\r\n    }\r\n\r\n    let boss = partialLevel.partitions.find((p) => p.type === RoomType.BOSS);\r\n    //console.log(`    Boss room at (${boss.x}, ${boss.y})`);\r\n\r\n    let found_stair = false;\r\n    const max_stair_tries = 5;\r\n    const stairRoomWidth = 5;\r\n    const stairRoomHeight = 5;\r\n\r\n    for (let stair_tries = 0; stair_tries < max_stair_tries; stair_tries++) {\r\n      const stairX = Game.rand(boss.x - 1, boss.x + boss.w - 2, Random.rand);\r\n      const stairY = boss.y - stairRoomHeight - 1;\r\n\r\n      //console.log(\r\n      //  `    Stair attempt ${stair_tries + 1}: trying position (${stairX}, ${stairY})`,\r\n      //);\r\n\r\n      let stair = new Partition(\r\n        stairX,\r\n        stairY,\r\n        stairRoomWidth,\r\n        stairRoomHeight,\r\n        \"white\",\r\n      );\r\n      stair.type = RoomType.DOWNLADDER;\r\n      stair.fillStyle = \"blue\";\r\n\r\n      const overlaps = partialLevel.partitions.some((p) => p.overlaps(stair));\r\n      //console.log(`    Overlap check: ${overlaps ? \"OVERLAPS\" : \"CLEAR\"}`);\r\n\r\n      if (!overlaps) {\r\n        found_stair = true;\r\n        partialLevel.partitions.push(stair);\r\n\r\n        const connectionX = stair.x + 1;\r\n        const connectionY = stair.y + stairRoomHeight;\r\n\r\n        stair.connections.push(\r\n          new PartitionConnection(connectionX, connectionY, boss),\r\n        );\r\n        boss.connections.push(\r\n          new PartitionConnection(connectionX, connectionY, stair),\r\n        );\r\n\r\n        stair.setOpenWall(\r\n          new PartitionConnection(connectionX, connectionY, boss),\r\n        );\r\n        boss.setOpenWall(\r\n          new PartitionConnection(connectionX, connectionY, stair),\r\n        );\r\n\r\n        //console.log(\r\n        //  `    ✓ Stair room added at (${stairX}, ${stairY}) connected to boss`,\r\n        //);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!found_stair) {\r\n      //console.log(\"    ❌ Could not place stair room after all attempts\");\r\n    }\r\n  }\r\n\r\n  private async calculateDistances(\r\n    partialLevel: PartialLevel,\r\n    spawn: Partition,\r\n  ) {\r\n    //console.log(\"    Calculating distances from spawn...\");\r\n    let frontier = [spawn];\r\n    let seen = [];\r\n    spawn.distance = 0;\r\n\r\n    let processedRooms = 0;\r\n\r\n    while (frontier.length > 0) {\r\n      let room = frontier[0];\r\n      frontier.splice(0, 1);\r\n      seen.push(room);\r\n      processedRooms++;\r\n\r\n      //console.log(\r\n      //  `    Processing room ${processedRooms}: ${room.type} at distance ${room.distance}`,\r\n      //);\r\n\r\n      for (let c of room.connections) {\r\n        let other = c.other;\r\n        const newDistance = room.distance + 1;\r\n        if (newDistance < other.distance) {\r\n          other.distance = newDistance;\r\n          //console.log(`    Updated ${other.type} distance to ${newDistance}`);\r\n        }\r\n        if (seen.indexOf(other) === -1) {\r\n          frontier.push(other);\r\n        }\r\n      }\r\n    }\r\n\r\n    //console.log(\r\n    //  `    ✓ Distance calculation complete for ${processedRooms} rooms`,\r\n    //);\r\n  }\r\n\r\n  private async addSpecialRooms(partialLevel: PartialLevel) {\r\n    //  console.log(\"    Adding special rooms...\");\r\n    let specialRoomsAdded = 0;\r\n\r\n    for (const p of partialLevel.partitions) {\r\n      if (p.type === RoomType.DUNGEON) {\r\n        if (p.distance > 4 && p.area() <= 30 && Random.rand() < 0.1) {\r\n          p.type = RoomType.TREASURE;\r\n          specialRoomsAdded++;\r\n          //console.log(\r\n          //  `    ✓ Converted DUNGEON to TREASURE at (${p.x}, ${p.y}), distance ${p.distance}`,\r\n          //);\r\n        }\r\n      }\r\n    }\r\n\r\n    //  console.log(`    ✓ Added ${specialRoomsAdded} special rooms`);\r\n  }\r\n\r\n  // Utility method to get color mapping documentation\r\n  public static getColorGuide(): string {\r\n    const guide = Object.entries(COLOR_TO_ROOM_TYPE)\r\n      .map(([color, type]) => `${color} -> ${type}`)\r\n      .join(\"\\n\");\r\n\r\n    return `PNG Level Designer Color Guide:\\n${guide}`;\r\n  }\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { GoldRing } from \"../jewelry/goldRing\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class GoldBar extends Item {\r\n  static itemName = \"gold bar\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 18;\r\n    this.tileY = 2;\r\n    this.name = GoldBar.itemName;\r\n    this.stackable = true;\r\n    this.description = \"A bar of gold. Hit it with a hammer to make a ring.\";\r\n  }\r\n\r\n  smith = (player: Player) => {\r\n    player.inventory.subtractItem(this, 1);\r\n    player.inventory.addItem(new GoldRing(this.level, this.x, this.y));\r\n    this.level.game.pushMessage(`You hammer the gold bar into a ring.`);\r\n\r\n    Sound.playSmith();\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Usable } from \"./usable\";\r\nimport { Equippable } from \"../equippable\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class SpellbookPage extends Usable {\r\n  static itemName = \"weapon fragments\";\r\n  constructor(level: Room, x: number, y: number, stackCount?: number) {\r\n    super(level, x, y);\r\n    this.tileX = 25;\r\n    this.tileY = 2;\r\n    this.offsetY = -0.3;\r\n    this.name = \"spellbook pages\";\r\n    this.canUseOnOther = true;\r\n    this.stackable = true;\r\n    this.stackCount = stackCount || Math.ceil(Random.rand() * 3);\r\n    this.description = \"Can be used to restore power to a depleted spellbook\";\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    player.health = Math.min(player.maxHealth, player.health + 1);\r\n    const room = (player as any)?.getRoom\r\n      ? (player as any).getRoom()\r\n      : this.level.game.rooms[player.levelID];\r\n    if (room === this.level.game.room) Sound.heal();\r\n    player.inventory.removeItem(this);\r\n\r\n    //this.level.items = this.level.items.filter((x) => x !== this); // removes itself from the level\r\n  };\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (\r\n      other instanceof Equippable &&\r\n      other.durabilityMax - other.durability >= 1 &&\r\n      other.name === \"spellbook\"\r\n    ) {\r\n      let repairAmount = Math.min(\r\n        other.durabilityMax - other.durability,\r\n        this.stackCount,\r\n      );\r\n      other.durability += repairAmount;\r\n      this.stackCount -= repairAmount;\r\n      other.broken = false;\r\n      this.level.game.pushMessage(\r\n        `You feel your ${other.name}'s power return as you add ${repairAmount} pages to it.`,\r\n      );\r\n      if (this.stackCount <= 0) player.inventory.removeItem(this);\r\n    }\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Equippable } from \"../equippable\";\r\n\r\nexport class ZirconRing extends Equippable {\r\n  static itemName = \"zircon ring\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 13;\r\n    this.tileY = 2;\r\n    this.name = ZirconRing.itemName;\r\n    this.stackable = false;\r\n    this.description = \"A ring of zircon\";\r\n  }\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Tile, SkinType } from \"./tile\";\r\nimport { Room } from \"../room/room\";\r\nimport { Random } from \"../utility/random\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\n\r\nexport class Floor extends Tile {\r\n  // all are in grid units\r\n  variation: number;\r\n\r\n  constructor(room: Room, x: number, y: number) {\r\n    super(room, x, y);\r\n    this.variation = 1;\r\n    if (this.skin == SkinType.DUNGEON)\r\n      this.variation = Game.randTable(\r\n        [1, 1, 1, 1, 1, 1, 8, 8, 8, 9, 10, 10, 10, 10, 10, 12],\r\n        Random.rand,\r\n      );\r\n    if (this.skin == SkinType.CAVE)\r\n      //this.variation = Game.randTable([1, 1, 1, 1, 8, 9, 10, 12], Random.rand);\r\n      this.variation = Game.randTable(\r\n        [1, 1, 1, 1, 1, 1, 8, 8, 8, 9, 10, 10, 10, 10, 10, 12],\r\n        Random.rand,\r\n      );\r\n    if (this.skin == SkinType.FOREST)\r\n      //this.variation = Game.randTable([1, 1, 1, 1, 8, 9, 10, 12], Random.rand);\r\n      this.variation = Game.randTable(\r\n        [1, 1, 1, 1, 1, 1, 8, 8, 8, 9, 10, 10, 10, 10, 10, 12],\r\n        Random.rand,\r\n      );\r\n    if (this.skin == SkinType.DESERT)\r\n      this.variation = Game.randTable(\r\n        [1, 1, 1, 1, 1, 1, 8, 8, 8, 9, 10, 10, 10, 10, 10, 12],\r\n        Random.rand,\r\n      );\r\n    if (this.skin == SkinType.MAGMA_CAVE) {\r\n      this.variation = Game.randTable(\r\n        [1, 1, 1, 1, 1, 1, 8, 8, 8, 9, 10, 10, 10, 10, 10, 12],\r\n        Random.rand,\r\n      );\r\n      if (\r\n        this.variation === 8 ||\r\n        this.variation === 9 ||\r\n        this.variation === 10\r\n      ) {\r\n        this.hasBloom = true;\r\n        this.bloomAlpha = 1;\r\n        this.bloomColor = \"#641900\";\r\n      }\r\n    }\r\n    if (this.skin == SkinType.DARK_DUNGEON) {\r\n      this.variation = Game.randTable(\r\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 9, 10, 12],\r\n        Random.rand,\r\n      );\r\n\r\n      if (Random.rand() < 0.2) {\r\n        this.hasBloom = true;\r\n        this.bloomAlpha = 1;\r\n        this.bloomColor = \"#306082\"; //deep blue hex;\r\n      }\r\n    }\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    Game.drawTile(\r\n      this.variation,\r\n      this.skin,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n}\r\n","import { Weapon } from \"./weapon\";\r\nimport { Room } from \"../../room/room\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\n\r\nexport class Slingshot extends Weapon {\r\n  static itemName = \"slingshot\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 26;\r\n    this.tileY = 0;\r\n    this.name = \"Slingshot\";\r\n  }\r\n\r\n  weaponMove = (newX: number, newY: number): boolean => {\r\n    let nextX = [newX];\r\n    let nextY = [newY];\r\n    //define arrays for coords beginning with function arguments\r\n    let range: number = 1;\r\n    let l = 0;\r\n    for (\r\n      let i = 0;\r\n      i < 5;\r\n      i++ //loop through range\r\n    ) {\r\n      if (newX === this.wielder.x) {\r\n        nextX.push(newX), nextY.push(nextY[l] + (newY - this.wielder.y));\r\n      }\r\n      if (newY === this.wielder.y) {\r\n        nextX.push(nextX[l] + (newX - this.wielder.x)), nextY.push(newY);\r\n      }\r\n      // push nex coordinates to array of possible moves\r\n      l++;\r\n    }\r\n    if (\r\n      !this.game.rooms[this.wielder.levelID].tileInside(newX, newY) ||\r\n      this.game.rooms[this.wielder.levelID].roomArray[newX][newY].isSolid()\r\n    ) {\r\n      //if current position is inside new position OR is solid\r\n      return true;\r\n    }\r\n    let c = 1;\r\n    for (let i = 0; i < 5; i++) {\r\n      if (\r\n        !this.game.rooms[this.wielder.levelID].tileInside(nextX[c], nextY[c]) ||\r\n        this.game.rooms[this.wielder.levelID].roomArray[nextX[c]][\r\n          nextY[c]\r\n        ].isSolid()\r\n      ) {\r\n        range = c;\r\n        //exit the function if wall is detected\r\n      }\r\n      c++;\r\n      //increase the range each loop until\r\n    }\r\n    //range = 15;\r\n    let enemyHitCandidates = [];\r\n    let firstPushable = range + 1;\r\n    let firstNonPushable = range + 2;\r\n    let firstNonDestroyable = range + 2;\r\n    for (let e of this.game.rooms[this.wielder.levelID].entities) {\r\n      //loop through enemies in this weapons wielders level\r\n      if (e.pushable) {\r\n        let p = 2;\r\n\r\n        //case for pushables\r\n        if (e.pointIn(newX, newY)) return true;\r\n        //if pushable is in new position return true\r\n        for (let i = 0; i < 15; i++) {\r\n          if (e.pointIn(nextX[p - 1], nextY[p - 1]) && range >= p) {\r\n            //enemyHitCandidates.push({ enemy: e, dist: p });\r\n            firstPushable = Math.min(firstPushable, p);\r\n          }\r\n          p++; //run that shit back\r\n        }\r\n      } else if (e.destroyable) {\r\n        //case for destroyables\r\n        if (e.pointIn(newX, newY) && range >= 1) {\r\n          firstNonPushable = 1;\r\n          enemyHitCandidates.push({ enemy: e, dist: 1 });\r\n        }\r\n        let d = 2;\r\n        for (let i = 0; i < 15; i++) {\r\n          if (e.pointIn(nextX[d - 1], nextY[d - 1]) && range >= d) {\r\n            firstNonPushable = Math.min(firstNonPushable, d);\r\n            enemyHitCandidates.push({ enemy: e, dist: d });\r\n          }\r\n          d++;\r\n        }\r\n      } else {\r\n        if (e.pointIn(newX, newY) && range >= 1) {\r\n          firstNonDestroyable = 1;\r\n        }\r\n        let n = 2;\r\n        for (let i = 0; i < 15; i++) {\r\n          if (e.pointIn(nextX[n - 1], nextY[n - 1]) && range >= n) {\r\n            firstNonDestroyable = Math.min(firstNonDestroyable, n);\r\n          }\r\n          n++;\r\n\r\n          //if enemy is in new position and range is enough set first non destroyable to 3\r\n        }\r\n      }\r\n    }\r\n    //enemyHitCandidates.splice(1, enemyHitCandidates.length - 1);\r\n\r\n    let targetX = newX; //nextX[range];\r\n    let targetY = newY; //nextY[range];\r\n\r\n    if (\r\n      firstNonDestroyable < firstNonPushable &&\r\n      firstNonDestroyable < firstPushable\r\n      //if a non destroyable comes before the first non pushable and before the first pushable\r\n    ) {\r\n      return true;\r\n      //return true and exit the function\r\n    }\r\n    if (firstNonPushable <= firstPushable) {\r\n      if (enemyHitCandidates.length > 0) {\r\n        const closestEnemy = enemyHitCandidates.reduce(\r\n          (minEnemy, currentEnemy) => {\r\n            if (currentEnemy.dist < minEnemy.dist) {\r\n              return currentEnemy;\r\n            } else return minEnemy;\r\n          },\r\n        );\r\n        closestEnemy.enemy.hurt(this.wielder, 1);\r\n      }\r\n\r\n      //finally bro\r\n      //for the array c of enemyHitCandidates if the enemy distance is 3 only do .5 damage\r\n      //if they're closer do the usual damage\r\n      //hits all candidates in enemyHitCandidates\r\n\r\n      this.hitSound();\r\n      this.wielder.setHitXY(newX, newY);\r\n\r\n      GenericParticle.shotgun(\r\n        this.game.rooms[this.wielder.levelID],\r\n        this.wielder.x + 0.5,\r\n        this.wielder.y,\r\n        targetX + 0.5,\r\n        targetY,\r\n        \"black\",\r\n      );\r\n      GenericParticle.shotgun(\r\n        this.game.rooms[this.wielder.levelID],\r\n        this.wielder.x + 0.5,\r\n        this.wielder.y,\r\n        targetX + 0.5,\r\n        targetY,\r\n        \"#ffddff\",\r\n      );\r\n      let gp = new GenericParticle(\r\n        this.game.rooms[this.wielder.levelID],\r\n        0.5 * (newX + this.wielder.x) + 0.5,\r\n        0.5 * (newY + this.wielder.y),\r\n        0,\r\n        1,\r\n        0,\r\n        0,\r\n        0,\r\n        \"white\",\r\n        0,\r\n      );\r\n      gp.expirationTimer = 10;\r\n      this.game.rooms[this.wielder.levelID].particles.push(gp);\r\n      //this.game.levels[this.wielder.levelID].particles.push(new SlashParticle(newX, newY));\r\n      //this.game.levels[this.wielder.levelID].particles.push(new SlashParticle(newX2, newY2));\r\n      //this.game.levels[this.wielder.levelID].particles.push(new SlashParticle(newX3, newY3));\r\n      this.game.rooms[this.wielder.levelID].tick(this.wielder);\r\n      this.shakeScreen(newX * 10, newY * 10);\r\n\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n}\r\n","import { Player } from \"../player/player\";\r\nimport { ChatMessage, Game } from \"../game\";\r\nimport { Room, RoomType } from \"../room/room\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { SkinType, Tile } from \"./tile\";\r\nimport { UpLadder } from \"./upLadder\";\r\nimport { EVENTS } from \"../event/events\";\r\nimport { EventEmitter } from \"../event/eventEmitter\";\r\nimport { globalEventBus } from \"../event/eventBus\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { EnvType } from \"../constants/environmentTypes\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\nimport { Lockable, LockType } from \"./lockable\";\r\nimport { Key } from \"../item/key\";\r\nimport { Passageway } from \"./passageway\";\r\nimport { SidePathManager, SidePathOptions } from \"../level/sidePathManager\";\r\n\r\nexport class DownLadder extends Passageway {\r\n  linkedRoom: Room;\r\n  isSidePath = false;\r\n  depth: number;\r\n  environment: EnvType;\r\n  lockable: Lockable;\r\n  opts?: SidePathOptions;\r\n  entryUpLadderPos?: { x: number; y: number };\r\n  private sidePathManager: SidePathManager;\r\n\r\n  constructor(\r\n    room: Room,\r\n    game: Game,\r\n    x: number,\r\n    y: number,\r\n    isSidePath: boolean = false,\r\n    environment: EnvType = EnvType.DUNGEON,\r\n    lockType: LockType = LockType.NONE,\r\n    opts?: SidePathOptions,\r\n    lockStateOverride?: { lockType: LockType; keyID?: number },\r\n  ) {\r\n    super(room, game, x, y);\r\n    this.linkedRoom = null;\r\n    this.depth = room.depth;\r\n    this.isSidePath = isSidePath;\r\n    this.environment = environment;\r\n    this.opts = opts;\r\n    this.sidePathManager = new SidePathManager(game);\r\n\r\n    // Determine effective lock based on save override, generator intent, or explicit param\r\n    const effectiveLockType = lockStateOverride\r\n      ? lockStateOverride.lockType\r\n      : isSidePath && !GameConstants.DEVELOPER_MODE\r\n        ? LockType.LOCKED\r\n        : lockType;\r\n\r\n    // Initialize lockable using effective state (include saved keyID if provided)\r\n    this.lockable = new Lockable(game, {\r\n      lockType: effectiveLockType,\r\n      keyID: lockStateOverride?.keyID,\r\n      isTopDoor: false,\r\n    });\r\n\r\n    this.addLightSource();\r\n  }\r\n\r\n  getName = () => {\r\n    return this.isSidePath ? \"rope down\" : \"staircase down\";\r\n  };\r\n\r\n  generate = async () => {\r\n    if (!this.linkedRoom) {\r\n      await this.sidePathManager.generateFor(this);\r\n    } else {\r\n      console.log(\"LinkedRoom already exists:\", this.linkedRoom);\r\n    }\r\n  };\r\n\r\n  // Linking logic is handled by SidePathManager\r\n\r\n  onCollide = (player: Player) => {\r\n    let allPlayersHere = true;\r\n    for (const i in this.game.players) {\r\n      const pl = this.game.players[i];\r\n      const plRoom = (pl as any).getRoom\r\n        ? (pl as any).getRoom()\r\n        : this.game.levels[pl.depth].rooms[pl.levelID];\r\n      if (plRoom !== this.room || pl.x !== this.x || pl.y !== this.y) {\r\n        allPlayersHere = false;\r\n      }\r\n    }\r\n    if (allPlayersHere) {\r\n      globalEventBus.emit(EVENTS.LEVEL_GENERATION_STARTED, {});\r\n      this.generate().then(() => {\r\n        globalEventBus.emit(EVENTS.LEVEL_GENERATION_COMPLETED, {});\r\n        // Switch active path to this ladder's sidepath before transitioning\r\n        this.sidePathManager.switchToPathBeforeTransition(this);\r\n        for (const i in this.game.players) {\r\n          this.game.changeLevelThroughLadder(this.game.players[i], this);\r\n        }\r\n      });\r\n    } else {\r\n      if (player === this.game.players[this.game.localPlayerID])\r\n        this.game.pushMessage(\"all players must be present\");\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    let xx = 4;\r\n    if (this.isSidePath) {\r\n      xx = 16;\r\n      if (this.lockable.isLocked()) xx = 17;\r\n    }\r\n    //if (this.environment === EnvType.FOREST) xx = 16;\r\n\r\n    Game.drawTile(\r\n      1,\r\n      this.skin,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n    Game.drawTile(\r\n      xx,\r\n      0, //this.skin,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n\r\n  drawAboveShading = (delta: number) => {\r\n    // Update lockable animation\r\n    this.lockable.update(delta);\r\n\r\n    // Draw lock icon\r\n    this.lockable.drawIcon(this.x, this.y, delta);\r\n\r\n    // Update frame using parent method\r\n    this.updateFrame(delta);\r\n  };\r\n\r\n  drawAbovePlayer = (delta: number) => {};\r\n\r\n  isLocked(): boolean {\r\n    return this.lockable.isLocked();\r\n  }\r\n}\r\n","import { Player } from \"src/player/player\";\r\nimport { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Room } from \"../room/room\";\r\nimport { Random } from \"../utility/random\";\r\nimport { Particle } from \"./particle\";\r\n\r\nexport class XPPopup extends Particle {\r\n  room: Room;\r\n  xp: number;\r\n  x: number;\r\n  y: number;\r\n  alpha: number = 0.25;\r\n  color: string;\r\n  outlineColor: string;\r\n  frame: number = 0;\r\n  xoffset: number = 0;\r\n  constructor(room: Room, x: number, y: number, xp: number) {\r\n    super();\r\n    this.room = room;\r\n    this.xp = xp;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.color = \"yellow\";\r\n    this.outlineColor = GameConstants.OUTLINE;\r\n    this.xoffset = 0;\r\n  }\r\n  getXoffset = () => {\r\n    if (this.room.particles.length > 0) {\r\n      let damageNumbers = this.room.particles.filter(\r\n        (p) => p instanceof XPPopup,\r\n      );\r\n      if (damageNumbers.length % 3 === 0) return 0.5;\r\n      if (damageNumbers.length % 3 === 1) return 0;\r\n      if (damageNumbers.length % 3 === 2) return 0.25;\r\n    }\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    Game.ctx.save();\r\n\r\n    if (this.dead) {\r\n      Game.ctx.restore();\r\n      return;\r\n    }\r\n    if (this.frame > 15) this.alpha -= 0.005 * delta;\r\n\r\n    this.y -= 0.03 * delta;\r\n    this.frame += delta;\r\n    let width = Game.measureText(this.xp.toString()).width;\r\n    if (this.alpha <= 0.002) {\r\n      this.alpha = 0;\r\n      this.dead = true;\r\n    }\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    const centerX = Game.measureText(`+${this.xp}xp`).width / 2;\r\n    Game.ctx.fillStyle = this.color;\r\n    Game.fillText(\r\n      `+${this.xp} xp`,\r\n      (this.x + 0.4 + this.xoffset) * GameConstants.TILESIZE - centerX,\r\n      (this.y - 0.75) * GameConstants.TILESIZE,\r\n    );\r\n\r\n    Game.ctx.globalAlpha = 1;\r\n\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\n\r\nexport class Shadow {\r\n  // Shared offscreen resources for shadow rendering\r\n  private static _canvas?: HTMLCanvasElement;\r\n  private static _ctx?: CanvasRenderingContext2D;\r\n  private static _blurRenderer?: any;\r\n\r\n  /**\r\n   * Draw a soft blurred shadow at the given tile-space coordinates.\r\n   * - x, y: world coordinates in tiles (e.g., entity.x - entity.drawX)\r\n   * - width, height: footprint size in tiles; default 1x1. Larger values scale the shadow ellipse.\r\n   * - radiusPx: optional blur radius in pixels; defaults to current behavior (~3px).\r\n   */\r\n  static draw(x: number, y: number, width: number = 1, height: number = 1) {\r\n    const tileSize = GameConstants.TILESIZE;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = 0.3;\r\n    if (width > 1 || height > 1) {\r\n      Game.drawFX(30, 3, 2, 2, x, y + 0.5, 2, 2, \"black\");\r\n    } else {\r\n      Game.drawFX(30, 1, 2, 2, x - 0.5, y - 0.5, 2, 2, \"black\");\r\n    }\r\n    Game.ctx.restore();\r\n  }\r\n}\r\n","import { Utils } from \"../utility/utils\";\r\nimport { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Particle } from \"./particle\";\r\n\r\nexport class KeyPathParticle extends Particle {\r\n  x: number;\r\n  y: number;\r\n  frame: number;\r\n  type: string;\r\n\r\n  constructor(x: number, y: number) {\r\n    super();\r\n    this.x = x;\r\n    this.y = y - 0.25;\r\n    this.dead = false;\r\n    this.frame = 0;\r\n  }\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    if (this.dead) return;\r\n    const frameOffset = Utils.distance(\r\n      this.x,\r\n      this.y,\r\n      this.room.game.players[this.room.game.localPlayerID].x,\r\n      this.room.game.players[this.room.game.localPlayerID].y,\r\n    );\r\n    this.frame += delta / 10;\r\n    const sinFrame = Math.sin(this.frame + frameOffset) * 1;\r\n    const cosFrame = Math.cos(this.frame + frameOffset) * 1;\r\n\r\n    Game.ctx.fillStyle = \"#FFFF00\";\r\n\r\n    Game.ctx.fillRect(\r\n      (this.x + 0.5) * GameConstants.TILESIZE - 1 + Math.round(sinFrame),\r\n      (this.y + 0.5) * GameConstants.TILESIZE - 1 + Math.round(cosFrame),\r\n      2,\r\n      2,\r\n    );\r\n  };\r\n}\r\n","import { Item } from \"./item\";\r\nimport { Equippable } from \"./equippable\";\r\nimport { Room } from \"../room/room\";\r\n\r\nexport class GoldenKey extends Equippable {\r\n  static itemName = \"goldenKey\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 6;\r\n    this.tileY = 0;\r\n    this.name = \"goldenKey\";\r\n  }\r\n\r\n  getDescription = (): string => {\r\n    return \"GOLD KEY\\nA heavy gold key.\";\r\n  };\r\n}\r\n","import { Game, LevelState } from \"../game\";\r\nimport { GameConstants } from \"./gameConstants\";\r\nimport { PlayerAction } from \"../player/playerAction\";\r\nimport { globalEventBus } from \"../event/eventBus\";\r\nimport { EVENTS } from \"../event/events\";\r\nimport { createGameState, loadGameState, GameState } from \"./gameState\";\r\nimport { Random } from \"../utility/random\";\r\n\r\nexport class ReplayManager {\r\n  private actions: Array<{ t: number; action: PlayerAction }> = [];\r\n  private startMs = 0;\r\n  private recording = false;\r\n  private replaying = false;\r\n  private seed: number | undefined = undefined;\r\n  private timer: number | null = null;\r\n  private baseState: GameState | null = null;\r\n\r\n  beginRecording(seed?: number, game?: Game) {\r\n    this.actions = [];\r\n    this.startMs = Date.now();\r\n    this.recording = true;\r\n    this.replaying = false;\r\n    this.seed = seed;\r\n    if (game) {\r\n      // Capture after the game is actually ready (entered level and player exists)\r\n      const tryCapture = () => {\r\n        try {\r\n          const local = game.players?.[game.localPlayerID];\r\n          const ready =\r\n            !!local &&\r\n            !!game.room &&\r\n            game.levelState === LevelState.IN_LEVEL &&\r\n            Array.isArray(game.rooms) &&\r\n            game.rooms.length > 0;\r\n          if (ready) {\r\n            if (!this.baseState) this.baseState = createGameState(game);\r\n            return; // stop polling\r\n          }\r\n        } catch {}\r\n        setTimeout(tryCapture, 16);\r\n      };\r\n      setTimeout(tryCapture, 0);\r\n    }\r\n  }\r\n\r\n  getStats() {\r\n    return {\r\n      count: this.actions.length,\r\n      seed: this.seed,\r\n      recording: this.recording,\r\n      replaying: this.replaying,\r\n    };\r\n  }\r\n\r\n  isReplaying(): boolean {\r\n    return this.replaying;\r\n  }\r\n\r\n  isRecording(): boolean {\r\n    return this.recording;\r\n  }\r\n\r\n  clearRecording() {\r\n    this.actions = [];\r\n    this.seed = undefined;\r\n    this.startMs = 0;\r\n    this.recording = false;\r\n    this.replaying = false;\r\n  }\r\n\r\n  stopRecording() {\r\n    this.recording = false;\r\n  }\r\n\r\n  recordAction(action: PlayerAction) {\r\n    if (!this.recording || this.replaying) return;\r\n    this.actions.push({ t: Date.now() - this.startMs, action });\r\n  }\r\n\r\n  replay(game: Game, stepMs: number = GameConstants.REPLAY_STEP_MS) {\r\n    if (this.replaying) return;\r\n    this.replaying = true;\r\n    this.recording = false;\r\n    // Snapshot actions and seed before restarting the game\r\n    const actions = this.actions.slice();\r\n    const seed = this.seed;\r\n    if (actions.length === 0 || seed === undefined) {\r\n      game.pushMessage(\"No actions recorded; replay aborted.\");\r\n      this.replaying = false;\r\n      return;\r\n    }\r\n    game.pushMessage(`Replay starting with ${actions.length} actions...`);\r\n    const startPlayback = () => {\r\n      const local = game.players?.[game.localPlayerID];\r\n      if (!local) {\r\n        // Try again next frame until player is ready\r\n        setTimeout(startPlayback, 16);\r\n        return;\r\n      }\r\n      // Do not mark the player as busy; that suppresses movement and actions\r\n      let i = 0;\r\n      const step = () => {\r\n        if (i >= actions.length) {\r\n          this.replaying = false;\r\n          this.recording = false;\r\n          game.pushMessage(\"Replay finished.\");\r\n          return;\r\n        }\r\n        try {\r\n          const action = actions[i].action;\r\n          const beforeX = local.x;\r\n          const beforeY = local.y;\r\n          let canMoveNow: boolean | undefined = undefined;\r\n          try {\r\n            canMoveNow = (local.movement as any)?.canMove?.();\r\n          } catch {}\r\n          const room = (local as any).getRoom?.();\r\n          const turn = room?.turn;\r\n          console.log(\"[replay] step begin\", {\r\n            index: i + 1,\r\n            total: actions.length,\r\n            type: action.type,\r\n            before: { x: beforeX, y: beforeY },\r\n            turn,\r\n            canMove: canMoveNow,\r\n          });\r\n          local.menu.open = false;\r\n          local.dead = false;\r\n          local.inventory.close();\r\n          local.actionProcessor.process(action);\r\n          const afterX = local.x;\r\n          const afterY = local.y;\r\n          const moved = beforeX !== afterX || beforeY !== afterY;\r\n          console.log(\"[replay] step end\", {\r\n            index: i + 1,\r\n            type: action.type,\r\n            after: { x: afterX, y: afterY },\r\n            moved,\r\n          });\r\n        } catch (e) {\r\n          // Swallow errors during replay to avoid interrupting\r\n        }\r\n        // Compute delay to next action using recorded timestamps\r\n        const minDelay = Math.max(GameConstants.MOVEMENT_COOLDOWN + 5, stepMs);\r\n\r\n        const recordedDelay = minDelay;\r\n        i < actions.length - 1\r\n          ? Math.max(1, actions[i + 1].t - actions[i].t)\r\n          : stepMs;\r\n        let nextDelay = Math.max(recordedDelay, minDelay);\r\n        // If computer turn is active, wait extra to allow it to complete\r\n        try {\r\n          const room = (local as any).getRoom?.();\r\n          if (room && room.turn !== undefined) {\r\n            // TurnState.computerTurn is 1 in current enum ordering\r\n            const isComputerTurn = room.turn === 1;\r\n            if (isComputerTurn)\r\n              nextDelay += GameConstants.REPLAY_COMPUTER_TURN_DELAY;\r\n          }\r\n        } catch {}\r\n        console.log(\"[replay] schedule next\", {\r\n          index: i + 1,\r\n          recordedDelay,\r\n          minDelay,\r\n          nextDelay,\r\n        });\r\n        i++;\r\n        if (this.timer) window.clearTimeout(this.timer);\r\n        this.timer = window.setTimeout(step, nextDelay);\r\n      };\r\n      step();\r\n    };\r\n    // Restore to captured base state instead of starting a new run\r\n    if (this.baseState) {\r\n      try {\r\n        const snapshot = JSON.parse(JSON.stringify(this.baseState));\r\n        const activeUsernames = Object.keys(game.players);\r\n        loadGameState(game, activeUsernames, snapshot, false)\r\n          .then(() => {\r\n            (game as any).started = true;\r\n            (game as any).startedFadeOut = false;\r\n            this.recording = false;\r\n            try {\r\n              console.log(\"[replay] seed/state after load\", {\r\n                seed: (game as any).levelgen?.seed,\r\n                expectedSeed: snapshot.seed,\r\n                randomState: (Random as any).state,\r\n                expectedRandom: snapshot.randomState,\r\n              });\r\n            } catch {}\r\n            startPlayback();\r\n          })\r\n          .catch(() => {\r\n            // Fallback to seed restart on failure\r\n            game.newGame(seed);\r\n            (game as any).started = true;\r\n            (game as any).startedFadeOut = false;\r\n            this.recording = false;\r\n            const onReady = () => {\r\n              if (game.levelState !== LevelState.IN_LEVEL) return;\r\n              globalEventBus.off(\r\n                EVENTS.LEVEL_GENERATION_COMPLETED,\r\n                onReady as any,\r\n              );\r\n              startPlayback();\r\n            };\r\n            globalEventBus.on(EVENTS.LEVEL_GENERATION_COMPLETED, onReady);\r\n            setTimeout(onReady, 0);\r\n          });\r\n        return; // handled via promise\r\n      } catch {}\r\n    }\r\n    // No base snapshot: use seed restart and wait for generation\r\n    game.newGame(seed);\r\n    (game as any).started = true;\r\n    (game as any).startedFadeOut = false;\r\n    this.recording = false;\r\n    const onReady = () => {\r\n      if (game.levelState !== LevelState.IN_LEVEL) return;\r\n      globalEventBus.off(EVENTS.LEVEL_GENERATION_COMPLETED, onReady as any);\r\n      startPlayback();\r\n    };\r\n    globalEventBus.on(EVENTS.LEVEL_GENERATION_COMPLETED, onReady);\r\n    setTimeout(onReady, 0);\r\n  }\r\n}\r\n","import { GameConstants } from \"./gameConstants\";\r\nimport { Game } from \"../game\";\r\nimport { MouseCursor } from \"../gui/mouseCursor\";\r\nimport { Direction } from \"../game\";\r\n\r\nexport enum InputEnum {\r\n  I,\r\n  M,\r\n  M_UP,\r\n  Q,\r\n  LEFT,\r\n  RIGHT,\r\n  UP,\r\n  DOWN,\r\n  SPACE,\r\n  COMMA,\r\n  PERIOD,\r\n  LEFT_CLICK,\r\n  RIGHT_CLICK,\r\n  MOUSE_MOVE,\r\n  NUMBER_1,\r\n  NUMBER_2,\r\n  NUMBER_3,\r\n  NUMBER_4,\r\n  NUMBER_5,\r\n  NUMBER_6,\r\n  NUMBER_7,\r\n  NUMBER_8,\r\n  NUMBER_9,\r\n  MINUS,\r\n  EQUALS,\r\n  ESCAPE,\r\n  F,\r\n}\r\n\r\nexport const Input = {\r\n  _pressed: {},\r\n\r\n  isTapHold: false,\r\n  tapStartTime: null,\r\n  IS_TAP_HOLD_THRESH: 300,\r\n  keyDownListener: function (key: string) {},\r\n  iListener: function () {},\r\n  mListener: function () {},\r\n  mUpListener: function () {},\r\n  qListener: function () {},\r\n  leftListener: function () {},\r\n  rightListener: function () {},\r\n  upListener: function () {},\r\n  downListener: function () {},\r\n  aListener: function () {\r\n    Input.leftListener();\r\n  },\r\n  dListener: function () {\r\n    Input.rightListener();\r\n  },\r\n  wListener: function () {\r\n    Input.upListener();\r\n  },\r\n  sListener: function () {\r\n    Input.downListener();\r\n  },\r\n  spaceListener: function () {},\r\n  leftSwipeListener: function () {},\r\n  rightSwipeListener: function () {},\r\n  upSwipeListener: function () {},\r\n  downSwipeListener: function () {},\r\n  tapListener: function () {},\r\n  commaListener: function () {},\r\n  periodListener: function () {},\r\n  numKeyListener: function (num: number) {},\r\n  equalsListener: function () {},\r\n  minusListener: function () {},\r\n  escapeListener: function () {},\r\n  fListener: function () {},\r\n  wheelListener: function (deltaY: number) {},\r\n  mouseLeftClickListeners: [],\r\n  mouseRightClickListeners: [],\r\n  mouseMoveListeners: [],\r\n  mouseDownListeners: [],\r\n  mouseUpListeners: [],\r\n\r\n  touchStartListeners: [],\r\n  touchEndListeners: [],\r\n\r\n  mouseX: 0,\r\n  mouseY: 0,\r\n  mouseDown: false,\r\n\r\n  lastPressTime: 0,\r\n  lastPressKey: \"\",\r\n\r\n  // Add mouse repeat tracking\r\n  lastMouseDownTime: 0,\r\n  lastMouseDownX: 0,\r\n  lastMouseDownY: 0,\r\n  mouseDownHandled: false,\r\n\r\n  SPACE: \"Space\",\r\n  LEFT: \"ArrowLeft\",\r\n  UP: \"ArrowUp\",\r\n  RIGHT: \"ArrowRight\",\r\n  DOWN: \"ArrowDown\",\r\n  W: \"KeyW\",\r\n  A: \"KeyA\",\r\n  S: \"KeyS\",\r\n  D: \"KeyD\",\r\n  M: \"KeyM\",\r\n  N: \"KeyN\",\r\n  I: \"KeyI\",\r\n  Q: \"KeyQ\",\r\n  NUMBER_1: \"Digit1\",\r\n  NUMBER_2: \"Digit2\",\r\n  NUMBER_3: \"Digit3\",\r\n  NUMBER_4: \"Digit4\",\r\n  NUMBER_5: \"Digit5\",\r\n  NUMBER_6: \"Digit6\",\r\n  NUMBER_7: \"Digit7\",\r\n  NUMBER_8: \"Digit8\",\r\n  NUMBER_9: \"Digit9\",\r\n  COMMA: \"Comma\",\r\n  PERIOD: \"Period\",\r\n  MINUS: \"Minus\",\r\n  EQUALS: \"Equal\",\r\n  ESCAPE: \"Escape\",\r\n  F: \"KeyF\",\r\n\r\n  rawMouseX: 0,\r\n  rawMouseY: 0,\r\n\r\n  isDown: function (keyCode: string) {\r\n    return this._pressed[keyCode];\r\n  },\r\n\r\n  onKeydown: (event: KeyboardEvent) => {\r\n    if (event.repeat) return; // ignore repeat keypresses\r\n    if (event.key) Input.keyDownListener(event.key);\r\n    if (event.cancelable && event.key != \"F12\" && event.key != \"F5\")\r\n      event.preventDefault();\r\n    Input.lastPressTime = Date.now();\r\n    Input.lastPressKey = event.key;\r\n    Input._pressed[event.code] = true;\r\n    switch (event.code) {\r\n      case Input.LEFT:\r\n        Input.leftListener();\r\n        break;\r\n      case Input.A:\r\n        Input.aListener();\r\n        break;\r\n      case Input.RIGHT:\r\n        Input.rightListener();\r\n        break;\r\n      case Input.D:\r\n        Input.dListener();\r\n        break;\r\n      case Input.UP:\r\n        Input.upListener();\r\n        break;\r\n      case Input.W:\r\n        Input.wListener();\r\n        break;\r\n      case Input.DOWN:\r\n        Input.downListener();\r\n        break;\r\n      case Input.S:\r\n        Input.sListener();\r\n        break;\r\n      case Input.SPACE:\r\n        Input.spaceListener();\r\n        break;\r\n      case Input.M:\r\n        Input.mListener();\r\n        break;\r\n      case Input.I:\r\n        Input.iListener();\r\n        break;\r\n      case Input.Q:\r\n        Input.qListener();\r\n        break;\r\n      case Input.COMMA:\r\n        Input.commaListener();\r\n        break;\r\n      case Input.PERIOD:\r\n        Input.periodListener();\r\n        break;\r\n      case Input.NUMBER_1:\r\n      case Input.NUMBER_2:\r\n      case Input.NUMBER_3:\r\n      case Input.NUMBER_4:\r\n      case Input.NUMBER_5:\r\n      case Input.NUMBER_6:\r\n      case Input.NUMBER_7:\r\n      case Input.NUMBER_8:\r\n      case Input.NUMBER_9:\r\n        Input.numKeyListener(parseInt(event.code.slice(-1)));\r\n        break;\r\n      case Input.EQUALS:\r\n        Input.equalsListener();\r\n        break;\r\n      case Input.MINUS:\r\n        Input.minusListener();\r\n        break;\r\n      case Input.ESCAPE:\r\n        Input.escapeListener();\r\n        break;\r\n      case Input.F:\r\n        Input.fListener();\r\n        break;\r\n    }\r\n  },\r\n\r\n  onKeyup: function (event: KeyboardEvent) {\r\n    delete this._pressed[event.code];\r\n    if (event.key === this.lastPressKey) {\r\n      this.lastPressTime = 0;\r\n      this.lastPressKey = 0;\r\n    }\r\n    if (event.code === Input.M) Input.mUpListener();\r\n  },\r\n\r\n  mouseLeftClickListener: function (x: number, y: number) {\r\n    for (let i = 0; i < Input.mouseLeftClickListeners.length; i++)\r\n      Input.mouseLeftClickListeners[i](x, y);\r\n  },\r\n\r\n  mouseRightClickListener: function (x: number, y: number) {\r\n    for (let i = 0; i < Input.mouseRightClickListeners.length; i++)\r\n      Input.mouseRightClickListeners[i](x, y);\r\n  },\r\n\r\n  mouseMoveListener: function (x: number, y: number) {\r\n    for (let i = 0; i < Input.mouseMoveListeners.length; i++)\r\n      Input.mouseMoveListeners[i](x, y);\r\n  },\r\n\r\n  mouseDownListener: function (x: number, y: number, button: number) {\r\n    for (let i = 0; i < Input.mouseDownListeners.length; i++)\r\n      Input.mouseDownListeners[i](x, y, button);\r\n  },\r\n\r\n  mouseUpListener: function (x: number, y: number, button: number) {\r\n    for (let i = 0; i < Input.mouseUpListeners.length; i++)\r\n      Input.mouseUpListeners[i](x, y, button);\r\n  },\r\n\r\n  mouseClickListener: function (event: MouseEvent) {\r\n    if (event.button === 0 || event.button === 2) {\r\n      let rect = window.document\r\n        .getElementById(\"gameCanvas\")\r\n        .getBoundingClientRect();\r\n      let x = event.clientX - rect.left;\r\n      let y = event.clientY - rect.top;\r\n      let scaledX = Math.floor(x / Game.scale);\r\n      let scaledY = Math.floor(y / Game.scale);\r\n\r\n      console.log(\r\n        `Input.mouseClickListener: raw x: ${x}, y: ${y}, scale: ${Game.scale}, scaledX: ${scaledX}, scaledY: ${scaledY}`,\r\n      );\r\n\r\n      if (event.button === 0) {\r\n        Input.mouseLeftClickListener(scaledX, scaledY);\r\n      } else if (event.button === 2) {\r\n        Input.mouseRightClickListener(scaledX, scaledY);\r\n      }\r\n    }\r\n  },\r\n\r\n  updateMousePos: function (event: MouseEvent) {\r\n    Game.inputReceived = true;\r\n\r\n    let rect = window.document\r\n      .getElementById(\"gameCanvas\")\r\n      .getBoundingClientRect();\r\n    let x = event.clientX - rect.left;\r\n    let y = event.clientY - rect.top;\r\n\r\n    // Store raw coordinates\r\n    Input.rawMouseX = x;\r\n    Input.rawMouseY = y;\r\n\r\n    // Calculate scaled coordinates\r\n    Input.mouseX = Math.floor(x / Game.scale);\r\n    Input.mouseY = Math.floor(y / Game.scale);\r\n\r\n    Input.mouseMoveListener(Input.mouseX, Input.mouseY);\r\n  },\r\n\r\n  recalculateMousePosition: function () {\r\n    if (Input.rawMouseX !== undefined && Input.rawMouseY !== undefined) {\r\n      Input.mouseX = Math.floor(Input.rawMouseX / Game.scale);\r\n      Input.mouseY = Math.floor(Input.rawMouseY / Game.scale);\r\n\r\n      // Also recalculate click animation position\r\n      MouseCursor.getInstance().recalculateClickPosition();\r\n    }\r\n  },\r\n\r\n  handleMouseDown: function (event: MouseEvent) {\r\n    if (Input.mouseDown) return; // Prevent multiple triggers\r\n    MouseCursor.getInstance().startClickAnim();\r\n    Input.mouseDown = true;\r\n    Input.mouseDownStartTime = Date.now();\r\n    Input.isMouseHold = false;\r\n    Input.mouseDownListener(Input.mouseX, Input.mouseY, event.button);\r\n\r\n    // Start checking for hold\r\n    if (!Input._holdCheckInterval) {\r\n      Input._holdCheckInterval = setInterval(Input.checkIsMouseHold, 16); // Check every frame\r\n    }\r\n  },\r\n\r\n  handleMouseUp: function (event: MouseEvent) {\r\n    Input.mouseDown = false;\r\n    Input.mouseDownStartTime = null;\r\n    Input.mouseUpListener(Input.mouseX, Input.mouseY, event.button);\r\n\r\n    // Reset mouse repeat tracking\r\n    Input.lastMouseDownTime = 0;\r\n    Input.mouseDownHandled = false;\r\n\r\n    // Clear hold check interval\r\n    if (Input._holdCheckInterval) {\r\n      clearInterval(Input._holdCheckInterval);\r\n      Input._holdCheckInterval = null;\r\n    }\r\n\r\n    // Clear isMouseHold after a short delay to ensure click handler sees it\r\n    setTimeout(() => {\r\n      Input.isMouseHold = false;\r\n    }, 50);\r\n  },\r\n\r\n  _holdCheckInterval: null,\r\n\r\n  checkIsMouseHold: function () {\r\n    if (!Input.mouseDown || Input.mouseDownStartTime === null) return;\r\n\r\n    if (Date.now() >= Input.mouseDownStartTime + Input.HOLD_THRESH) {\r\n      if (!Input.isMouseHold) {\r\n        Input.isMouseHold = true;\r\n        // Call the hold callback if one is registered\r\n        if (Input.holdCallback) {\r\n          Input.holdCallback();\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  getTouches: function (evt) {\r\n    Game.inputReceived = true;\r\n\r\n    return (\r\n      evt.touches || evt.originalEvent.touches // browser API\r\n    ); // jQuery\r\n  },\r\n\r\n  xDown: null,\r\n  yDown: null,\r\n  currentX: 0,\r\n  currentY: 0,\r\n  swiped: false,\r\n\r\n  handleTouchStart: function (evt: TouchEvent) {\r\n    //console.log(\"handleTouchStart triggered\");\r\n    Game.inputReceived = true;\r\n\r\n    evt.preventDefault();\r\n\r\n    const firstTouch = Input.getTouches(evt)[0];\r\n    Input.xDown = firstTouch.clientX;\r\n    Input.yDown = firstTouch.clientY;\r\n    Input.currentX = firstTouch.clientX;\r\n    Input.currentY = firstTouch.clientY;\r\n\r\n    Input.tapStartTime = Date.now();\r\n\r\n    Input.updateMousePos({\r\n      clientX: Input.currentX,\r\n      clientY: Input.currentY,\r\n    } as MouseEvent);\r\n\r\n    Input.swiped = false;\r\n\r\n    // Unify with mouseDown logic, but force button=0 (left-click equivalent)\r\n    Input.mouseDown = true;\r\n    Input.mouseDownStartTime = Date.now();\r\n    Input.isMouseHold = false;\r\n    Input.mouseDownListener(Input.mouseX, Input.mouseY, 0);\r\n\r\n    if (!Input._holdCheckInterval) {\r\n      Input._holdCheckInterval = setInterval(Input.checkIsMouseHold, 16);\r\n      // console.log(\"_holdCheckInterval started\");\r\n    }\r\n  },\r\n\r\n  handleTouchMove: function (evt) {\r\n    evt.preventDefault();\r\n\r\n    Input.currentX = evt.touches[0].clientX;\r\n    Input.currentY = evt.touches[0].clientY;\r\n\r\n    Input.updateMousePos({\r\n      clientX: Input.currentX,\r\n      clientY: Input.currentY,\r\n    } as MouseEvent);\r\n\r\n    if (Input.swiped) return;\r\n\r\n    var xDiff = Input.xDown - Input.currentX;\r\n    var yDiff = Input.yDown - Input.currentY;\r\n\r\n    // Check if we've swiped\r\n    if (xDiff ** 2 + yDiff ** 2 >= GameConstants.SWIPE_THRESH) {\r\n      if (Math.abs(xDiff) > Math.abs(yDiff)) {\r\n        if (xDiff > 0) {\r\n          Input.leftSwipeListener();\r\n          Input.lastSwipeDirection = Direction.LEFT;\r\n        } else {\r\n          Input.rightSwipeListener();\r\n          Input.lastSwipeDirection = Direction.RIGHT;\r\n        }\r\n        Input.swiped = true;\r\n        Input.lastSwipeTime = Date.now();\r\n        Input.swipeHoldActive = true;\r\n        Input.swipeHoldRepeating = false; // Start in non-repeating state\r\n      } else {\r\n        if (yDiff > 0) {\r\n          Input.upSwipeListener();\r\n          Input.lastSwipeDirection = Direction.UP;\r\n        } else {\r\n          Input.downSwipeListener();\r\n          Input.lastSwipeDirection = Direction.DOWN;\r\n        }\r\n        Input.swiped = true;\r\n        Input.lastSwipeTime = Date.now();\r\n        Input.swipeHoldActive = true;\r\n        Input.swipeHoldRepeating = false; // Start in non-repeating state\r\n      }\r\n    }\r\n  },\r\n\r\n  handleTouchEnd: function (evt: TouchEvent) {\r\n    evt.preventDefault();\r\n\r\n    if (!Input.isTapHold && !Input.swiped) Input.tapListener();\r\n    Input.isTapHold = false;\r\n    Input.tapStartTime = null;\r\n\r\n    // Reset swipe hold tracking\r\n    Input.swipeHoldActive = false;\r\n    Input.swipeHoldRepeating = false;\r\n    Input.lastSwipeTime = 0;\r\n    Input.lastSwipeDirection = null;\r\n\r\n    // Also unify with mouseUp logic, again forcing button=0\r\n    Input.mouseDown = false;\r\n    Input.mouseDownStartTime = null;\r\n    Input.mouseUpListener(Input.mouseX, Input.mouseY, 0);\r\n\r\n    if (Input._holdCheckInterval) {\r\n      clearInterval(Input._holdCheckInterval);\r\n      Input._holdCheckInterval = null;\r\n      //console.log(\"_holdCheckInterval cleared\");\r\n    }\r\n    setTimeout(() => {\r\n      Input.isMouseHold = false;\r\n      //console.log(\"isMouseHold reset\");\r\n    }, 50);\r\n  },\r\n\r\n  checkIsTapHold: function () {\r\n    if (\r\n      Input.tapStartTime !== null &&\r\n      Date.now() >= Input.tapStartTime + Input.IS_TAP_HOLD_THRESH\r\n    )\r\n      Input.isTapHold = true;\r\n  },\r\n\r\n  set isMouseHold(value: boolean) {\r\n    //console.log(`isMouseHold set to: ${value}`);\r\n    this._isMouseHold = value;\r\n  },\r\n\r\n  get isMouseHold() {\r\n    return this._isMouseHold;\r\n  },\r\n\r\n  _isMouseHold: false,\r\n\r\n  mouseDownStartTime: null,\r\n  HOLD_THRESH: 200, // Adjust this value as needed\r\n\r\n  holdCallback: null as (() => void) | null,\r\n\r\n  // Swipe hold tracking\r\n  lastSwipeTime: 0,\r\n  lastSwipeDirection: null as Direction | null,\r\n  swipeHoldActive: false,\r\n  swipeHoldRepeating: false, // Track if we're in repeat mode yet\r\n};\r\nwindow.addEventListener(\r\n  \"keyup\",\r\n  function (event) {\r\n    Input.onKeyup(event);\r\n  },\r\n  false,\r\n);\r\nwindow.addEventListener(\r\n  \"keydown\",\r\n  function (event) {\r\n    Input.onKeydown(event);\r\n  },\r\n  false,\r\n);\r\n\r\n/** \r\n\r\nwindow.addEventListener(\r\n  \"touchstart\",\r\n  function (event) {\r\n    Input.handleTouchStart(event);\r\n  },\r\n  false,\r\n);\r\n\r\nwindow.addEventListener(\r\n  \"touchend\",\r\n  function (event) {\r\n    Input.handleTouchEnd(event);\r\n  },\r\n  false,\r\n);\r\n*/\r\n\r\nwindow.document\r\n  .getElementById(\"gameCanvas\")\r\n  .addEventListener(\"mousemove\", (event) => Input.updateMousePos(event), false);\r\nwindow.document\r\n  .getElementById(\"gameCanvas\")\r\n  .addEventListener(\r\n    \"mousedown\",\r\n    (event) => Input.handleMouseDown(event),\r\n    false,\r\n  );\r\nwindow.document\r\n  .getElementById(\"gameCanvas\")\r\n  .addEventListener(\"mouseup\", (event) => Input.handleMouseUp(event), false);\r\nwindow.document\r\n  .getElementById(\"gameCanvas\")\r\n  .addEventListener(\"contextmenu\", (event) => event.preventDefault(), false);\r\nwindow.document.getElementById(\"gameCanvas\").addEventListener(\r\n  \"wheel\",\r\n  (event) => {\r\n    (event as WheelEvent).preventDefault();\r\n    Input.wheelListener((event as WheelEvent).deltaY);\r\n  },\r\n  { passive: false } as any,\r\n);\r\n/** \r\nwindow.document\r\n  .getElementById(\"gameCanvas\")\r\n  .addEventListener(\r\n    \"touchstart\",\r\n    (event) => Input.handleTouchStart(event),\r\n    false,\r\n  );\r\nwindow.document\r\n  .getElementById(\"gameCanvas\")\r\n  .addEventListener(\"touchend\", (event) => Input.handleTouchEnd(event), false);\r\n  */\r\n","import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Enemy } from \"./enemy\";\r\n\r\nexport class KingEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  static difficulty: number = 4;\r\n  static tileX: number = 23;\r\n  static tileY: number = 8;\r\n  justHurt: boolean = false;\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 2;\r\n    this.maxHealth = 2;\r\n    this.defaultMaxHealth = 2;\r\n    this.tileX = 51;\r\n    this.tileY = 15;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.destroyableByOthers = false;\r\n    this.name = \"king\";\r\n    this.orthogonalAttack = true;\r\n    this.diagonalAttack = true;\r\n    this.jumpHeight = 1;\r\n    this.imageParticleX = 6;\r\n    this.imageParticleY = 25; //includes crown particle\r\n    this.baseDamage = 2;\r\n    if (drop) this.drop = drop;\r\n    this.armored = true;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    if (this.health <= 1) this.imageParticleY = 29; //no crown particle\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      this.ticks++;\r\n      if (!this.seenPlayer) {\r\n        this.justHurt = false;\r\n\r\n        let p = this.nearestPlayer();\r\n        if (p !== false) {\r\n          let [distance, player] = p;\r\n          if (distance <= 4) {\r\n            this.targetPlayer = player;\r\n            this.facePlayer(player);\r\n            this.seenPlayer = true;\r\n            if (player === this.game.players[this.game.localPlayerID])\r\n              this.alertTicks = 1;\r\n            this.makeHitWarnings();\r\n          }\r\n        }\r\n      } else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n            }\r\n          }\r\n          for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n              if (\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                // don't walk on active spiketraps\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n\r\n          let grid = [];\r\n          for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n            grid[x] = [];\r\n            for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n              if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                grid[x][y] = this.room.roomArray[x][y];\r\n              else grid[x][y] = false;\r\n            }\r\n          }\r\n\r\n          let moves = astar.AStar.search(\r\n            grid,\r\n            this,\r\n            this.targetPlayer,\r\n            disablePositions,\r\n            true, //diagonals\r\n            false, //diagonalsOnly\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            false, //diagonalsOmni\r\n          );\r\n\r\n          if (this.justHurt) {\r\n            this.retreat(oldX, oldY);\r\n          } else if (moves.length > 0 && this.ticks % 2 === 0) {\r\n            disablePositions.push({ x: oldX + 1, y: oldY } as astar.Position);\r\n            disablePositions.push({ x: oldX - 1, y: oldY } as astar.Position);\r\n            disablePositions.push({ x: oldX, y: oldY + 1 } as astar.Position);\r\n            disablePositions.push({ x: oldX, y: oldY - 1 } as astar.Position);\r\n            let moveX = moves[0].pos.x;\r\n            let moveY = moves[0].pos.y;\r\n\r\n            let hitPlayer = false;\r\n            for (const i in this.game.players) {\r\n              if (\r\n                this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                this.game.players[i].x === moveX &&\r\n                this.game.players[i].y === moveY\r\n              ) {\r\n                this.game.players[i].hurt(this.hit(), this.name);\r\n                this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                if (\r\n                  this.game.players[i] ===\r\n                  this.game.players[this.game.localPlayerID]\r\n                )\r\n                  this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n              }\r\n            }\r\n            if (!hitPlayer) {\r\n              //if ()\r\n              this.tryMove(moveX, moveY);\r\n              this.setDrawXY(oldX, oldY);\r\n            }\r\n          }\r\n\r\n          if (this.ticks % 2 !== 0) this.makeHitWarnings();\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.makeHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  jump = (delta: number) => {\r\n    let j = Math.max(Math.abs(this.drawX), Math.abs(this.drawY));\r\n\r\n    let jumpY = Math.abs(Math.sin(j * Math.PI)) * this.jumpHeight;\r\n    if (jumpY < 0.01) jumpY = 0;\r\n    if (jumpY > this.jumpHeight) jumpY = this.jumpHeight;\r\n    this.jumpY = jumpY;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    let offsetTileY = this.health <= 1 ? 0 : -3;\r\n    if (this.cloned) offsetTileY = 0;\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX + Math.floor(this.frame),\r\n        this.tileY + offsetTileY,\r\n        1,\r\n        3,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY - this.jumpY - 1,\r\n        1,\r\n        3,\r\n        this.softShadeColor,\r\n        this.shadeAmount() * (1 + this.jumpY / 3),\r\n      );\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Item } from \"../../item/item\";\r\nimport { Game } from \"../../game\";\r\nimport { Key } from \"../../item/key\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { Armor } from \"../../item/armor\";\r\nimport { GreenGem } from \"../../item/resource/greengem\";\r\nimport { Resource } from \"./resource\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Geode } from \"../../item/resource/geode\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { RedGem } from \"../../item/resource/redgem\";\r\nimport { BlueGem } from \"../../item/resource/bluegem\";\r\nimport { OrangeGem } from \"../../item/resource/orangegem\";\r\nimport { LightSource } from \"../../lighting/lightSource\";\r\n\r\nexport class AmberResource extends Resource {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n\r\n    this.tileX = 17;\r\n    this.tileY = 0;\r\n    this.health = 3;\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#FFA500\"; //orange hex color;\r\n    this.bloomAlpha = 1;\r\n    this.softBloomAlpha = 0;\r\n    this.name = \"amber\";\r\n    if (Random.rand() < 0.025) {\r\n      this.drops.push(new Geode(this.room, this.x, this.y));\r\n    }\r\n    this.drops.push(new OrangeGem(this.room, this.x, this.y));\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      7,\r\n      [100, 30, 1],\r\n      1,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n  }\r\n}\r\n","type EventCallback<T = any> = (data: T) => void;\r\n\r\nexport class EventEmitter {\r\n  private events: Record<string, EventCallback[]> = {};\r\n\r\n  on<T>(event: string, listener: EventCallback<T>): void {\r\n    if (!this.events[event]) {\r\n      this.events[event] = [];\r\n    }\r\n    this.events[event].push(listener);\r\n  }\r\n\r\n  off<T>(event: string, listener: EventCallback<T>): void {\r\n    if (!this.events[event]) return;\r\n    this.events[event] = this.events[event].filter((l) => l !== listener);\r\n  }\r\n\r\n  emit<T>(event: string, data: T): void {\r\n    if (!this.events[event]) return;\r\n    this.events[event].forEach((listener) => listener(data));\r\n  }\r\n\r\n  // New method to remove all listeners for an event\r\n  removeAllListeners(event: string): void {\r\n    delete this.events[event];\r\n  }\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Weapon } from \"./weapon\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { PlayerFireball } from \"../../projectile/playerFireball\";\r\nimport type { Entity } from \"../../entity/entity\";\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { Direction } from \"../../game\";\r\nimport { SpellbookPage } from \"../usable/spellbookPage\";\r\nexport class Spellbook extends Weapon {\r\n  targets: Entity[];\r\n  isTargeting: boolean;\r\n  static itemName = \"spellbook\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.range = 4;\r\n    this.tileX = 25;\r\n    this.tileY = 0;\r\n    this.canMine = true;\r\n    this.name = Spellbook.itemName;\r\n    this.isTargeting = false;\r\n    this.durability = 15;\r\n    this.durabilityMax = 15;\r\n    this.description = \"Hits multiple enemies within a range of 4 tiles.\";\r\n    this.degradeable = true;\r\n    this.cooldownMax = 25;\r\n  }\r\n\r\n  getTargets = () => {\r\n    this.targets = [];\r\n    const room = (this.wielder as any)?.getRoom\r\n      ? (this.wielder as any).getRoom()\r\n      : this.game.rooms[this.wielder.levelID];\r\n    let entities = room.entities;\r\n    this.targets = entities.filter(\r\n      (e) =>\r\n        !e.pushable &&\r\n        Utils.distance(this.wielder.x, this.wielder.y, e.x, e.y) <=\r\n          this.range &&\r\n        e.destroyable,\r\n    );\r\n    let enemies = this.targets.filter((e) => e.isEnemy === true);\r\n    //console.log(enemies);\r\n    if (enemies.length > 0) return enemies;\r\n    else {\r\n      //console.log(this.targets);\r\n      return this.targets;\r\n    }\r\n  };\r\n\r\n  disassemble = () => {\r\n    if (this.equipped) {\r\n      this.game.pushMessage(\r\n        \"I should probably unequip this before I try to disassemble it...\",\r\n      );\r\n      return;\r\n    }\r\n    this.game.pushMessage(\r\n      `You tear the remaining pages out of your spellbook.`,\r\n    );\r\n\r\n    let inventory = this.wielder.inventory;\r\n    let inventoryX = this.x;\r\n    let inventoryY = this.y;\r\n    let numFragments = Math.floor(this.durability);\r\n    this.toggleEquip();\r\n    //inventory.weapon = null;\r\n    inventory.removeItem(this);\r\n    inventory.addItem(\r\n      new SpellbookPage(this.level, inventoryX, inventoryY, numFragments),\r\n    );\r\n  };\r\n\r\n  weaponMove = (newX: number, newY: number): boolean => {\r\n    //if (!this.checkForCollidables(newX, newY)) return true;\r\n\r\n    this.getTargets();\r\n    let direction = this.wielder.direction;\r\n    let flag = false;\r\n    let targets = this.targets;\r\n    const isTargetInDirection = (e: Entity): boolean => {\r\n      switch (direction) {\r\n        case Direction.UP:\r\n          return e.y <= newY;\r\n        case Direction.RIGHT:\r\n          return e.x >= newX;\r\n        case Direction.DOWN:\r\n          return e.y >= newY;\r\n        case Direction.LEFT:\r\n          return e.x <= newX;\r\n        default:\r\n          return false;\r\n      }\r\n    };\r\n    if (targets.length > 0) {\r\n      this.isTargeting = true;\r\n    } else {\r\n      this.isTargeting = false;\r\n    }\r\n\r\n    targets = targets.filter(isTargetInDirection);\r\n\r\n    // Store only the targets that actually get hit\r\n    const actuallyHitTargets: Entity[] = [];\r\n\r\n    for (let e of targets) {\r\n      const room = (this.wielder as any)?.getRoom\r\n        ? (this.wielder as any).getRoom()\r\n        : this.game.rooms[this.wielder.levelID];\r\n      if (!room.roomArray[e.x][e.y].isSolid()) {\r\n        e.hurt(this.wielder, this.damage + this.wielder.damageBonus);\r\n\r\n        room.projectiles.push(new PlayerFireball(this.wielder, e.x, e.y));\r\n\r\n        // Add to the list of actually hit targets\r\n        actuallyHitTargets.push(e);\r\n        flag = true;\r\n      }\r\n    }\r\n\r\n    // Update this.targets to only contain targets that were actually hit\r\n    this.targets = actuallyHitTargets;\r\n\r\n    if (flag) {\r\n      this.hitSound();\r\n      this.wielder.setHitXY(newX, newY);\r\n\r\n      const room = (this.wielder as any)?.getRoom\r\n        ? (this.wielder as any).getRoom()\r\n        : this.game.rooms[this.wielder.levelID];\r\n      room.tick(this.wielder);\r\n      this.shakeScreen(newX, newY);\r\n      Sound.playMagic();\r\n      this.degrade();\r\n      this.cooldown = this.cooldownMax;\r\n      for (let item of this.wielder.inventory.items) {\r\n        if (item instanceof Spellbook) {\r\n          item.cooldown = item.cooldownMax;\r\n        }\r\n      }\r\n\r\n      setTimeout(() => {\r\n        this.isTargeting = false;\r\n      }, 100);\r\n    }\r\n    return !flag;\r\n  };\r\n\r\n  drawBeams = (playerDrawX: number, playerDrawY: number, delta: number) => {\r\n    // Clear existing beam effects each frame\r\n    const room = (this.wielder as any)?.getRoom\r\n      ? (this.wielder as any).getRoom()\r\n      : this.game.rooms[this.wielder.levelID];\r\n    room.beamEffects = [];\r\n\r\n    if (this.isTargeting) {\r\n      for (let target of this.targets) {\r\n        // Create a new beam effect from the player to the enemy\r\n        room.addBeamEffect(\r\n          playerDrawX,\r\n          playerDrawY,\r\n          target.x - (target as any).drawX,\r\n          target.y - (target as any).drawY,\r\n          target,\r\n        );\r\n\r\n        // Retrieve the newly added beam effect\r\n        const beam = room.beamEffects[room.beamEffects.length - 1];\r\n\r\n        // Render the beam\r\n        beam.render(\r\n          playerDrawX,\r\n          playerDrawY,\r\n          target.x - (target as any).drawX,\r\n          target.y - (target as any).drawY,\r\n          \"cyan\",\r\n          2,\r\n          delta,\r\n        );\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { Projectile } from \"./projectile\";\r\nimport { Game } from \"../game\";\r\nimport { WizardEnemy } from \"../entity/enemy/wizardEnemy\";\r\nimport { Player } from \"../player/player\";\r\nimport { HitWarning } from \"../drawable/hitWarning\";\r\nimport { Lighting } from \"../lighting/lighting\";\r\nimport { Utils } from \"../utility/utils\";\r\nexport class PlayerFireball extends Projectile {\r\n  state: number;\r\n  frame: number;\r\n  delay: number;\r\n  parent: Player;\r\n  offsetFrame: number;\r\n\r\n  constructor(parent: Player, x: number, y: number) {\r\n    super(parent, x, y);\r\n    this.state = 0;\r\n    this.frame = 6;\r\n    this.offsetFrame =\r\n      -Utils.distance(this.parent.x, this.parent.y, this.x, this.y) * 50;\r\n    this.delay = 0;\r\n    Lighting.momentaryLight(\r\n      this.parent.game.rooms[this.parent.levelID],\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      0.5,\r\n      [255, 100, 0],\r\n      250,\r\n      10,\r\n      1,\r\n    );\r\n  }\r\n  drawTopLayer = (delta: number) => {\r\n    if (this.dead) return;\r\n    if (this.offsetFrame < 0) this.offsetFrame += 10 * delta;\r\n    if (this.offsetFrame >= 0) {\r\n      this.frame += 0.25 * delta;\r\n    }\r\n\r\n    if (this.frame > 17) this.dead = true;\r\n    Game.drawFX(Math.floor(this.frame), 6, 1, 2, this.x, this.y - 1, 1, 2);\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Shrooms } from \"../../item/usable/shrooms\";\r\nimport { EntityType } from \"../entity\";\r\nimport { LightSource } from \"../../lighting/lightSource\";\r\nimport { Spellbook } from \"../../item/weapon/spellbook\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Candle } from \"../../item/light/candle\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\n\r\nexport class Pumpkin extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 15;\r\n    this.tileY = 2;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"pumpkin\";\r\n    this.drops.push(new Candle(this.room, this.x, this.y));\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 25;\r\n    this.bloomColor = \"#FFA500\";\r\n    this.hasBloom = true;\r\n    this.bloomAlpha = 1;\r\n    this.softBloomAlpha = 0;\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      5,\r\n      [200, 30, 1],\r\n      3,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Equippable } from \"../equippable\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { SlashParticle } from \"../../particle/slashParticle\";\r\nimport type { Entity } from \"../../entity/entity\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { WeaponFragments } from \"../usable/weaponFragments\";\r\nimport { Enemy } from \"../../entity/enemy/enemy\";\r\nimport { AttackAnimation } from \"../../particle/attackAnimation\";\r\nimport { Direction } from \"../../game\";\r\nimport { Armor } from \"../armor\";\r\n\r\ninterface WeaponStatus {\r\n  poison: boolean;\r\n  blood: boolean;\r\n}\r\n\r\nexport abstract class Weapon extends Equippable {\r\n  game: Game;\r\n  range: number;\r\n  canMine: boolean;\r\n  damage: number;\r\n  status: WeaponStatus;\r\n  static itemName = \"weapon\";\r\n  name: string;\r\n  statusApplicationCount: number;\r\n  hitDelay: number;\r\n  cooldown: number;\r\n  cooldownMax: number;\r\n  twoHanded: boolean;\r\n  constructor(level: Room, x: number, y: number, status?: WeaponStatus) {\r\n    super(level, x, y);\r\n\r\n    if (level) this.game = level.game;\r\n\r\n    this.canMine = false;\r\n    this.range = 1;\r\n    this.damage = 1;\r\n    this.status = status || { poison: false, blood: false };\r\n    this.durability = 50;\r\n    this.durabilityMax = 50;\r\n    this.statusApplicationCount = 0;\r\n    this.equipTick = true;\r\n    this.name = this.constructor.prototype.itemName;\r\n    this.cooldown = 0;\r\n    this.cooldownMax = 0;\r\n    this.twoHanded = false;\r\n  }\r\n  hoverText = () => {\r\n    //return \"Equip \" + this.name;\r\n    return this.name;\r\n  };\r\n  break = () => {\r\n    this.durability = 0;\r\n    this.wielder.inventory.weapon = null;\r\n    this.toggleEquip();\r\n    //this.wielder.inventory.removeItem(this);\r\n    //this.wielder = null;\r\n    this.game.pushMessage(\"Your weapon breaks\");\r\n    if (this.status.poison || this.status.blood) {\r\n      this.clearStatus();\r\n    }\r\n    this.broken = true;\r\n  };\r\n\r\n  coEquippable = (other: Equippable): boolean => {\r\n    if (other instanceof Weapon) return false;\r\n    //if (other instanceof Armor && this.twoHanded) return false;\r\n    return true;\r\n  };\r\n\r\n  applyStatus = (status: WeaponStatus) => {\r\n    this.status = status;\r\n    if (this.status.blood) {\r\n      //this.damage = Math.max(0.5, this.damage - 0.5);\r\n    }\r\n  };\r\n\r\n  clearStatus = () => {\r\n    const status = this.status.poison ? \"poison\" : \"bleed\";\r\n    this.game.pushMessage(`Your ${this.name}'s ${status} effect dries up`);\r\n\r\n    this.status = { poison: false, blood: false };\r\n    this.statusApplicationCount = 0;\r\n  };\r\n\r\n  statusEffect = (entity: Entity) => {\r\n    if (!entity.isEnemy) return;\r\n    const enemy = entity as Enemy;\r\n    if (!enemy.status.poison.active && !enemy.status.bleed.active) {\r\n      if (this.wielder.applyStatus(enemy, this.status) && enemy.health > 0) {\r\n        this.statusApplicationCount++;\r\n        const message = this.status.poison\r\n          ? `Your weapon poisons the ${enemy.name}`\r\n          : `Your cursed weapon draws blood from the ${enemy.name}`;\r\n\r\n        //this.game.pushMessage(message);\r\n\r\n        //if (this.statusApplicationCount >= 10) this.clearStatus();\r\n      }\r\n    }\r\n  };\r\n\r\n  disassemble = () => {\r\n    if (!this.degradeable) {\r\n      this.game.pushMessage(\r\n        \"You can't disassemble this item because it's not degradeable.\",\r\n      );\r\n      return;\r\n    }\r\n    if (this.equipped) {\r\n      this.game.pushMessage(\r\n        \"I should probably unequip this before I try to disassemble it...\",\r\n      );\r\n      return;\r\n    }\r\n    this.game.pushMessage(`You dissassemble your ${this.name} into fragments.`);\r\n\r\n    let inventory = this.wielder.inventory;\r\n    let inventoryX = this.x;\r\n    let inventoryY = this.y;\r\n    let numFragments = Math.floor(this.durability / 1.5);\r\n    this.toggleEquip();\r\n    //inventory.weapon = null;\r\n    inventory.removeItem(this);\r\n    inventory.addItem(\r\n      new WeaponFragments(this.level, inventoryX, inventoryY),\r\n      numFragments,\r\n    );\r\n  };\r\n\r\n  dropFromInventory = () => {\r\n    if (this.wielder.inventory.weapon === this)\r\n      this.wielder.inventory.weapon = null;\r\n    this.wielder = null;\r\n    this.equipped = false;\r\n  };\r\n\r\n  checkForCollidables = (x: number, y: number): boolean => {\r\n    for (const e of this.getEntitiesAt(x, y)) {\r\n      if (e.collidable === true) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  weaponMove = (newX: number, newY: number): boolean => {\r\n    if (this.checkForPushables(newX, newY)) return true;\r\n\r\n    const hitSomething = this.executeAttack(newX, newY);\r\n\r\n    return !hitSomething;\r\n  };\r\n\r\n  attack = (enemy: Entity, damage?: number) => {\r\n    enemy.hurt(this.wielder, damage || this.damage);\r\n    this.statusEffect(enemy);\r\n  };\r\n\r\n  attackAnimation = (newX: number, newY: number) => {\r\n    this.wielder.setHitXY(newX, newY);\r\n\r\n    const room = (this.wielder as any)?.getRoom\r\n      ? (this.wielder as any).getRoom()\r\n      : this.game?.rooms?.[this.wielder.levelID];\r\n    if (!room) {\r\n      console.error(\"🔫 WEAPON: Cannot add particle - invalid room state\");\r\n      return;\r\n    }\r\n    room.particles.push(\r\n      new AttackAnimation(newX, newY, this.name, this.wielder.direction),\r\n    );\r\n  };\r\n\r\n  shakeScreen = (eX: number, eY: number) => {\r\n    const wielderRoom = (this.wielder as any)?.getRoom\r\n      ? (this.wielder as any).getRoom()\r\n      : this.wielder.game.rooms[this.wielder.levelID];\r\n    if (wielderRoom === this.wielder.game.room)\r\n      this.wielder.shakeScreen(this.wielder.x, this.wielder.y, eX, eY);\r\n  };\r\n\r\n  hitSound = () => {\r\n    Sound.swing();\r\n    Sound.hit();\r\n  };\r\n\r\n  drawStatus = (x: number, y: number) => {\r\n    if (this.status.poison || this.status.blood) {\r\n      let tileX = 3;\r\n      if (this.status.poison) {\r\n        tileX = 4;\r\n      }\r\n      if (this.status.blood) {\r\n        tileX = 3;\r\n      }\r\n\r\n      Game.drawFX(\r\n        tileX,\r\n        0,\r\n        1,\r\n        1,\r\n        x - 1 / GameConstants.TILESIZE,\r\n        y - 1 / GameConstants.TILESIZE,\r\n        1,\r\n        1,\r\n      );\r\n    }\r\n  };\r\n\r\n  getDescription = (): string => {\r\n    let broken = this.broken ? \" (broken)\" : \"\";\r\n    let status = [];\r\n    let durability = \"\";\r\n    if (this.status.poison) status.push(\"Poison\");\r\n    if (this.status.blood) status.push(\" Bleed\");\r\n    if (this.durability < this.durabilityMax)\r\n      durability = ` Durability: ${this.durability}/${this.durabilityMax}`;\r\n    return `${this.name}${broken}\\n${status.join(\", \")}\\n${durability}\\n${this.description}\\ndamage: ${this.damage}`;\r\n  };\r\n\r\n  tick = () => {\r\n    this.updateCooldown();\r\n  };\r\n\r\n  updateCooldown = () => {\r\n    if (this.cooldown > 0) {\r\n      this.cooldown--;\r\n      if (this.cooldown > 0 && this.equipped) {\r\n        this.equipped = false;\r\n        const hasPreviousWeapon = this.wielder.inventory.items.some(\r\n          (item) => item === this.previousWeapon,\r\n        );\r\n        if (\r\n          hasPreviousWeapon &&\r\n          this.previousWeapon !== null &&\r\n          this.previousWeapon.broken === false &&\r\n          this.previousWeapon.cooldown === 0\r\n        ) {\r\n          this.wielder.inventory.weapon = this.previousWeapon;\r\n          this.previousWeapon.equipped = true;\r\n        } else {\r\n          this.wielder.inventory.weapon = null;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // returns true if nothing was hit, false if the player should move\r\n\r\n  protected getEntitiesAt(x: number, y: number): Entity[] {\r\n    if (!this.game) {\r\n      console.error(\"🔫 WEAPON: this.game is undefined\");\r\n      return [];\r\n    }\r\n\r\n    if (!this.wielder) {\r\n      console.error(\"🔫 WEAPON: this.wielder is undefined\");\r\n      return [];\r\n    }\r\n\r\n    const room = (this.wielder as any)?.getRoom\r\n      ? (this.wielder as any).getRoom()\r\n      : this.game?.rooms?.[this.wielder.levelID];\r\n    if (!room) {\r\n      console.error(\"🔫 WEAPON: current room is undefined\");\r\n      return [];\r\n    }\r\n\r\n    return room.entities.filter((e) => e.destroyable && e.pointIn(x, y));\r\n  }\r\n\r\n  protected hitEntitiesAt(x: number, y: number, damage?: number): boolean {\r\n    const entities = this.getEntitiesAt(x, y).filter((e) => !e.pushable);\r\n    let hitSomething = false;\r\n\r\n    for (const entity of entities) {\r\n      this.attack(entity, damage);\r\n      hitSomething = true;\r\n    }\r\n\r\n    return hitSomething;\r\n  }\r\n\r\n  protected checkForPushables(x: number, y: number): boolean {\r\n    const direction = this.wielder.direction;\r\n    let behindX = x;\r\n    let behindY = y;\r\n    switch (direction) {\r\n      case Direction.DOWN:\r\n        behindY += 1;\r\n        break;\r\n      case Direction.UP:\r\n        behindY -= 1;\r\n        break;\r\n      case Direction.LEFT:\r\n        behindX -= 1;\r\n        break;\r\n      case Direction.RIGHT:\r\n        behindX += 1;\r\n        break;\r\n    }\r\n\r\n    const room = (this.wielder as any)?.getRoom\r\n      ? (this.wielder as any).getRoom()\r\n      : this.game?.rooms?.[this.wielder.levelID];\r\n    if (!room) return false;\r\n\r\n    const unpushables = this.getEntitiesAt(behindX, behindY).filter(\r\n      (e) => !e.pushable,\r\n    );\r\n    const hasUnpushablesBehind = unpushables.length > 0;\r\n\r\n    const behindTile = room.roomArray[behindX]?.[behindY];\r\n    const isSolidBehind = !behindTile || behindTile.isSolid();\r\n\r\n    const pushables = this.getEntitiesAt(x, y).filter((e) => e.pushable);\r\n    const hasSpaceToPush = !isSolidBehind && !hasUnpushablesBehind;\r\n\r\n    return pushables.length > 0 && hasSpaceToPush;\r\n  }\r\n\r\n  protected applyHitDelay = (hitSomething: boolean) => {\r\n    if (hitSomething) {\r\n      this.wielder.busyAnimating = true;\r\n      setTimeout(() => {\r\n        this.wielder.busyAnimating = false;\r\n      }, this.hitDelay || 0);\r\n    }\r\n  };\r\n\r\n  protected executeAttack(\r\n    targetX: number,\r\n    targetY: number,\r\n    animated: boolean = true,\r\n    damage: number = this.damage + this.wielder.damageBonus,\r\n    shakeScreen: boolean = true,\r\n    sound: boolean = true,\r\n    mainAttack: boolean = true,\r\n    shouldTick: boolean = true,\r\n  ): boolean {\r\n    const hitSomething = this.hitEntitiesAt(targetX, targetY, damage);\r\n\r\n    this.applyHitDelay(hitSomething);\r\n\r\n    if (hitSomething) {\r\n      if (sound) this.hitSound();\r\n      this.wielder.setHitXY(targetX, targetY);\r\n      if (animated) this.attackAnimation(targetX, targetY);\r\n      if (shouldTick) {\r\n        const room = (this.wielder as any)?.getRoom\r\n          ? (this.wielder as any).getRoom()\r\n          : this.game?.rooms?.[this.wielder.levelID];\r\n        if (room) room.tick(this.wielder);\r\n      }\r\n      if (shakeScreen) this.shakeScreen(targetX, targetY);\r\n      if (mainAttack) this.degrade();\r\n    }\r\n\r\n    return hitSomething;\r\n  }\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Usable } from \"./usable\";\r\nimport { Equippable } from \"../equippable\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class WeaponFragments extends Usable {\r\n  static itemName = \"weapon fragments\";\r\n  constructor(level: Room, x: number, y: number, stackCount?: number) {\r\n    super(level, x, y);\r\n    this.tileX = 3;\r\n    this.tileY = 0;\r\n    this.offsetY = -0.3;\r\n    this.name = \"weapon fragments\";\r\n    this.canUseOnOther = true;\r\n    this.stackable = true;\r\n    this.stackCount = stackCount || Math.ceil(Random.rand() * 10) + 7;\r\n    this.description = \"Can be used to repair broken weapons\";\r\n    this.maximumStackCount = 64;\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    player.health = Math.min(player.maxHealth, player.health + 1);\r\n    const room = (player as any)?.getRoom\r\n      ? (player as any).getRoom()\r\n      : this.level.game.rooms[player.levelID];\r\n    if (room === this.level.game.room) Sound.heal();\r\n    player.inventory.removeItem(this);\r\n\r\n    //this.level.items = this.level.items.filter((x) => x !== this); // removes itself from the level\r\n  };\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (\r\n      other instanceof Equippable &&\r\n      other.durabilityMax - other.durability >= 1 &&\r\n      other.name !== \"spellbook\"\r\n    ) {\r\n      let repairAmount = Math.min(\r\n        other.durabilityMax - other.durability,\r\n        this.stackCount,\r\n      );\r\n      other.durability += repairAmount;\r\n      this.stackCount -= repairAmount;\r\n      other.broken = false;\r\n      this.level.game.pushMessage(\r\n        `You repair your ${other.name} with ${repairAmount} fragments.`,\r\n      );\r\n      if (this.stackCount <= 0) player.inventory.removeItem(this);\r\n    } else if (other.name === \"spellbook\") {\r\n      this.level.game.pushMessage(\r\n        \"You'll need some book pages to replenish that.\",\r\n      );\r\n    }\r\n  };\r\n}\r\n","// #region imports\r\nimport { Wall } from \"../tile/wall\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\nimport { Floor } from \"../tile/floor\";\r\nimport { Direction, Game, LevelState } from \"../game\";\r\nimport { Door, DoorType } from \"../tile/door\";\r\nimport { Tile, SkinType } from \"../tile/tile\";\r\nimport { KnightEnemy } from \"../entity/enemy/knightEnemy\";\r\nimport { Entity, EntityType } from \"../entity/entity\";\r\nimport { Chest } from \"../entity/object/chest\";\r\nimport { Item } from \"../item/item\";\r\nimport { GoldenKey } from \"../item/goldenKey\";\r\nimport { SpawnFloor } from \"../tile/spawnfloor\";\r\nimport { Spike } from \"../tile/spike\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { SkullEnemy } from \"../entity/enemy/skullEnemy\";\r\nimport { Barrel } from \"../entity/object/barrel\";\r\nimport { Crate } from \"../entity/object/crate\";\r\nimport { Armor } from \"../item/armor\";\r\nimport { Particle } from \"../particle/particle\";\r\nimport { Projectile } from \"../projectile/projectile\";\r\nimport { SpikeTrap } from \"../tile/spiketrap\";\r\nimport { FountainTile } from \"../tile/fountainTile\";\r\nimport { CoffinTile } from \"../tile/coffinTile\";\r\nimport { PottedPlant } from \"../entity/object/pottedPlant\";\r\nimport { InsideLevelDoor } from \"../tile/insideLevelDoor\";\r\nimport { Button } from \"../tile/button\";\r\nimport { HitWarning } from \"../drawable/hitWarning\";\r\nimport { UpLadder } from \"../tile/upLadder\";\r\nimport { DownLadder } from \"../tile/downLadder\";\r\nimport { CoalResource } from \"../entity/resource/coalResource\";\r\nimport { GoldResource } from \"../entity/resource/goldResource\";\r\nimport { EmeraldResource } from \"../entity/resource/emeraldResource\";\r\nimport { Chasm } from \"../tile/chasm\";\r\nimport { Spawner } from \"../entity/enemy/spawner\";\r\nimport { VendingMachine } from \"../entity/object/vendingMachine\";\r\nimport { WallTorch } from \"../tile/wallTorch\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\nimport { ChargeEnemy } from \"../entity/enemy/chargeEnemy\";\r\nimport { Shotgun } from \"../item/weapon/shotgun\";\r\nimport { Heart } from \"../item/usable/heart\";\r\nimport { Spear } from \"../item/weapon/spear\";\r\nimport { Drawable } from \"../drawable/drawable\";\r\nimport { Player, PlayerDirection } from \"../player/player\";\r\nimport { CrabEnemy } from \"../entity/enemy/crabEnemy\";\r\nimport { ZombieEnemy } from \"../entity/enemy/zombieEnemy\";\r\nimport { BigSkullEnemy } from \"../entity/enemy/bigSkullEnemy\";\r\nimport { Random } from \"../utility/random\";\r\nimport { Lantern } from \"../item/light/lantern\";\r\nimport { DualDagger } from \"../item/weapon/dualdagger\";\r\nimport { Pot } from \"../entity/object/pot\";\r\nimport { BishopEnemy } from \"../entity/enemy/bishopEnemy\";\r\nimport { Rock } from \"../entity/resource/rockResource\";\r\nimport { Mushrooms } from \"../entity/object/mushrooms\";\r\nimport { ArmoredzombieEnemy } from \"../entity/enemy/armoredzombieEnemy\";\r\nimport { TombStone } from \"../entity/object/tombStone\";\r\nimport { Pumpkin } from \"../entity/object/pumpkin\";\r\nimport { QueenEnemy } from \"../entity/enemy/queenEnemy\";\r\nimport { FrogEnemy } from \"../entity/enemy/frogEnemy\";\r\nimport { BigKnightEnemy } from \"../entity/enemy/bigKnightEnemy\";\r\nimport { Enemy } from \"../entity/enemy/enemy\";\r\nimport { FireWizardEnemy } from \"../entity/enemy/fireWizard\";\r\nimport { EnergyWizardEnemy } from \"../entity/enemy/energyWizard\";\r\nimport { ReverbEngine } from \"../sound/reverb\";\r\nimport { astar } from \"../utility/astarclass\";\r\nimport { Level } from \"../level/level\";\r\nimport { Warhammer } from \"../item/weapon/warhammer\";\r\nimport { Spellbook } from \"../item/weapon/spellbook\";\r\nimport { Torch } from \"../item/light/torch\";\r\nimport { RookEnemy } from \"../entity/enemy/rookEnemy\";\r\nimport { BeamEffect } from \"../projectile/beamEffect\";\r\nimport { EnvType } from \"../constants/environmentTypes\";\r\nimport { Pickaxe } from \"../item/tool/pickaxe\";\r\nimport { OccultistEnemy } from \"../entity/enemy/occultistEnemy\";\r\nimport { Puddle } from \"../tile/decorations/puddle\";\r\nimport { Decoration } from \"../tile/decorations/decoration\";\r\nimport { Bomb } from \"../entity/object/bomb\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { Block } from \"../entity/object/block\";\r\nimport { Bestiary } from \"../game/bestiary\";\r\nimport { ArmoredSkullEnemy } from \"../entity/enemy/armoredSkullEnemy\";\r\nimport { MummyEnemy } from \"../entity/enemy/mummyEnemy\";\r\nimport { SpiderEnemy } from \"../entity/enemy/spiderEnemy\";\r\nimport { RoomBuilder } from \"./roomBuilder\";\r\nimport { BigZombieEnemy } from \"../entity/enemy/bigZombieEnemy\";\r\nimport { Bush } from \"../entity/object/bush\";\r\nimport { Sprout } from \"../entity/object/sprout\";\r\nimport { Candle } from \"../item/light/candle\";\r\nimport { GlowBugEnemy } from \"../entity/enemy/glowBugEnemy\";\r\nimport { GameplaySettings } from \"../game/gameplaySettings\";\r\nimport { ItemGroup } from \"../item/itemGroup\";\r\nimport { Sword } from \"../item/weapon/sword\";\r\nimport { WebGLBlurRenderer } from \"../gui/webglBlurRenderer\";\r\nimport { Utils } from \"../utility/utils\";\r\nimport { Tree } from \"../entity/object/tree\";\r\nimport { IdGenerator } from \"../globalStateManager/IdGenerator\";\r\nimport { WardenEnemy } from \"../entity/enemy/wardenEnemy\";\r\nimport { CrusherEnemy } from \"../entity/enemy/crusherEnemy\";\r\nimport { PawnEnemy } from \"../entity/enemy/pawnEnemy\";\r\nimport { BeetleEnemy } from \"../entity/enemy/beetleEnemy\";\r\nimport { BigFrogEnemy } from \"../entity/enemy/bigFrogEnemy\";\r\nimport { Key } from \"../item/key\";\r\nimport { ExalterEnemy } from \"../entity/enemy/exalterEnemy\";\r\nimport { KingEnemy } from \"../entity/enemy/kingEnemy\";\r\n\r\n// #endregion\r\n\r\n// #region Enums & Interfaces\r\n/**\r\n * Enumeration of available enemy types.\r\n */\r\nexport enum EnemyType {\r\n  crab = \"crab\",\r\n  frog = \"frog\",\r\n  zombie = \"zombie\",\r\n  skull = \"skull\",\r\n  energyWizard = \"energywizard\",\r\n  charge = \"charge\",\r\n  rook = \"rook\",\r\n  bishop = \"bishop\",\r\n  armoredzombie = \"armoredzombie\",\r\n  bigskull = \"bigskull\",\r\n  queen = \"queen\",\r\n  knight = \"knight\",\r\n  bigknight = \"bigknight\",\r\n  firewizard = \"firewizard\",\r\n  spawner = \"spawner\",\r\n  occultist = \"occultist\",\r\n  bomb = \"bomb\",\r\n  armoredskull = \"armoredskull\",\r\n  mummy = \"mummy\",\r\n  spider = \"spider\",\r\n  bigzombie = \"bigzombie\",\r\n  glowbug = \"glowbug\",\r\n  tree = \"tree\",\r\n  tombStone = \"tombstone\",\r\n  warden = \"warden\",\r\n  crusher = \"crusher\",\r\n  pawn = \"pawn\",\r\n  beetle = \"beetle\",\r\n  bigfrog = \"bigfrog\",\r\n  exalter = \"exalter\",\r\n  king = \"king\",\r\n  chest = \"chest\",\r\n  // Add other enemy types here\r\n}\r\n\r\n/**\r\n * Mapping of enemy types to their corresponding classes.\r\n */\r\nexport const EnemyTypeMap: { [key in EnemyType]: EnemyStatic } = {\r\n  [EnemyType.crab]: CrabEnemy,\r\n  [EnemyType.frog]: FrogEnemy,\r\n  [EnemyType.zombie]: ZombieEnemy,\r\n  [EnemyType.skull]: SkullEnemy,\r\n  [EnemyType.energyWizard]: EnergyWizardEnemy,\r\n  [EnemyType.charge]: ChargeEnemy,\r\n  [EnemyType.rook]: RookEnemy,\r\n  [EnemyType.bishop]: BishopEnemy,\r\n  [EnemyType.armoredzombie]: ArmoredzombieEnemy,\r\n  [EnemyType.bigskull]: BigSkullEnemy,\r\n  [EnemyType.queen]: QueenEnemy,\r\n  [EnemyType.knight]: KnightEnemy,\r\n  [EnemyType.bigknight]: BigKnightEnemy,\r\n  [EnemyType.firewizard]: FireWizardEnemy,\r\n  [EnemyType.spawner]: Spawner,\r\n  [EnemyType.occultist]: OccultistEnemy,\r\n  [EnemyType.bomb]: Bomb,\r\n  [EnemyType.armoredskull]: ArmoredSkullEnemy,\r\n  [EnemyType.mummy]: MummyEnemy,\r\n  [EnemyType.spider]: SpiderEnemy,\r\n  [EnemyType.bigzombie]: BigZombieEnemy,\r\n  [EnemyType.glowbug]: GlowBugEnemy,\r\n  [EnemyType.tree]: Tree,\r\n  [EnemyType.tombStone]: TombStone,\r\n  [EnemyType.warden]: WardenEnemy,\r\n  [EnemyType.crusher]: CrusherEnemy,\r\n  [EnemyType.pawn]: PawnEnemy,\r\n  [EnemyType.beetle]: BeetleEnemy,\r\n  [EnemyType.bigfrog]: BigFrogEnemy,\r\n  [EnemyType.exalter]: ExalterEnemy,\r\n  [EnemyType.king]: KingEnemy,\r\n  [EnemyType.chest]: Chest,\r\n  // Add other enemy mappings here\r\n};\r\n\r\nexport enum RoomType {\r\n  START = \"START\",\r\n  DUNGEON = \"DUNGEON\",\r\n  BOSS = \"BOSS\",\r\n  BIGDUNGEON = \"BIGDUNGEON\",\r\n  TREASURE = \"TREASURE\",\r\n  FOUNTAIN = \"FOUNTAIN\",\r\n  COFFIN = \"COFFIN\",\r\n  GRASS = \"GRASS\",\r\n  PUZZLE = \"PUZZLE\",\r\n  KEYROOM = \"KEYROOM\",\r\n  CHESSBOARD = \"CHESSBOARD\",\r\n  MAZE = \"MAZE\",\r\n  CORRIDOR = \"CORRIDOR\",\r\n  SPIKECORRIDOR = \"SPIKECORRIDOR\",\r\n  UPLADDER = \"UPLADDER\",\r\n  DOWNLADDER = \"DOWNLADDER\",\r\n  SHOP = \"SHOP\",\r\n  BIGCAVE = \"BIGCAVE\",\r\n  CAVE = \"CAVE\",\r\n  SPAWNER = \"SPAWNER\",\r\n  ROPEHOLE = \"ROPEHOLE\",\r\n  ROPECAVE = \"ROPECAVE\",\r\n  TUTORIAL = \"TUTORIAL\",\r\n  GRAVEYARD = \"GRAVEYARD\",\r\n  FOREST = \"FOREST\",\r\n  ROPEUP = \"ROPEUP\",\r\n}\r\n\r\nexport enum TurnState {\r\n  playerTurn,\r\n  computerTurn,\r\n}\r\n\r\nexport interface WallInfo {\r\n  isTopWall: boolean;\r\n  isBottomWall: boolean;\r\n  isLeftWall: boolean;\r\n  isRightWall: boolean;\r\n  isInnerWall: boolean;\r\n  isBelowDoorWall: boolean;\r\n  isDoorWall: boolean;\r\n  innerWallType: string | null;\r\n  shouldDrawBottom: boolean;\r\n  isAboveDoorWall: boolean;\r\n}\r\n\r\nexport enum WallDirection {\r\n  NORTH = \"North\",\r\n  EAST = \"East\",\r\n  SOUTH = \"South\",\r\n  WEST = \"West\",\r\n  TOPLEFT = \"TopLeft\",\r\n  TOPRIGHT = \"TopRight\",\r\n  BOTTOMLEFT = \"BottomLeft\",\r\n  BOTTOMRIGHT = \"BottomRight\",\r\n}\r\n\r\nexport interface EnemyStatic {\r\n  add(room: Room, game: Game, x: number, y: number, ...rest: any[]): void;\r\n}\r\n\r\n// #endregion\r\n\r\n// Add this interface after the existing interfaces\r\ninterface BlurCache {\r\n  color6px: HTMLCanvasElement | null;\r\n  color12px: HTMLCanvasElement | null;\r\n  shade5px: HTMLCanvasElement | null;\r\n  bloom8px: HTMLCanvasElement | null;\r\n  color8px: HTMLCanvasElement | null;\r\n  isValid: boolean;\r\n  lastLightingUpdate: number;\r\n}\r\n\r\nexport class Room {\r\n  globalId: string;\r\n  // Path identifier to group rooms that belong to the same path/sidepath\r\n  pathId: string;\r\n  roomArray: Tile[][];\r\n\r\n  softVis: number[][]; // this is the one we use for drawing (includes smoothing)\r\n  vis: number[][]; // visibility ranges from 0 (fully visible) to 1 (fully black)\r\n  softCol: [number, number, number][][];\r\n  col: [number, number, number][][];\r\n  renderBuffer: [number, number, number, number][][][]; // Array of color arrays (r,g,b,alpha) for each x,y position\r\n  oldVis: number[][];\r\n  oldCol: [number, number, number][][];\r\n\r\n  entities: Array<Entity>;\r\n  deadEntities: Array<Entity>;\r\n  items: Array<Item>;\r\n  doors: Array<Door>; // (Door | BottomDoor) just a reference for mapping, still access through levelArray\r\n  projectiles: Array<Projectile>;\r\n  particles: Array<Particle>;\r\n  hitwarnings: Array<HitWarning>;\r\n  private colorOffscreenCanvas: HTMLCanvasElement;\r\n  private colorOffscreenCtx: CanvasRenderingContext2D;\r\n\r\n  private shadeOffscreenCanvas: HTMLCanvasElement;\r\n  private shadeOffscreenCtx: CanvasRenderingContext2D;\r\n  // Temporary canvas used when Canvas2D filter blur is required for sliced drawing\r\n  private shadeBlurTempCanvas?: HTMLCanvasElement;\r\n  private shadeBlurTempCtx?: CanvasRenderingContext2D;\r\n  // Temporary canvas to apply per-slice gradient masking (post-blur) efficiently\r\n  private shadeSliceTempCanvas?: HTMLCanvasElement;\r\n  private shadeSliceTempCtx?: CanvasRenderingContext2D;\r\n  // Border tiles around shade content for sliced shading (ensures blur has room to spill)\r\n  private shadeSliceBorderTiles: number = 1;\r\n  private bloomOffscreenCanvas: HTMLCanvasElement;\r\n  private bloomOffscreenCtx: CanvasRenderingContext2D;\r\n\r\n  currentSpawnerCount: number;\r\n\r\n  game: Game;\r\n  roomX: number;\r\n  roomY: number;\r\n  width: number;\r\n  height: number;\r\n  type: RoomType;\r\n  depth: number;\r\n  mapGroup: number;\r\n  name: string = \"\";\r\n  message: string;\r\n  turn: TurnState;\r\n  playerTurnTime: number;\r\n  playerTicked: Player;\r\n  skin: SkinType;\r\n  entered: boolean; // has the player entered this level\r\n  lightSources: Array<LightSource>;\r\n  shadeColor = \"#000000\";\r\n  innerWalls: Array<Wall>;\r\n  wallInfo: Map<string, WallInfo> = new Map();\r\n  savePoint: Room;\r\n  lastEnemyCount: number;\r\n  outerWalls: Array<Wall>;\r\n  level: Level;\r\n  id: number;\r\n  tunnelDoor: Door = null; // this is the door that connects the start room to the exit room\r\n  active: boolean;\r\n  onScreen: boolean;\r\n  lastLightingUpdate: number;\r\n  walls: Array<Wall>;\r\n  decorations: Array<Decoration>;\r\n  blurOffsetX: number = 5;\r\n  blurOffsetY: number = 5;\r\n  lastDraw: number = 0;\r\n  drawTimestamp: number = 0;\r\n  drawInterval: number = 4;\r\n  builder: RoomBuilder;\r\n  envType: EnvType;\r\n  keyPathDots: Array<{ x: number; y: number }>;\r\n\r\n  // Add a list to keep track of BeamEffect instances\r\n  beamEffects: BeamEffect[] = [];\r\n\r\n  // Add this property to track created mask canvases\r\n  private maskCanvases: HTMLCanvasElement[] = [];\r\n\r\n  // Add blur cache property\r\n  private blurCache: BlurCache = {\r\n    color6px: null,\r\n    color12px: null,\r\n    shade5px: null,\r\n    bloom8px: null,\r\n    color8px: null,\r\n    isValid: false,\r\n    lastLightingUpdate: 0,\r\n  };\r\n  private isUpdatingLighting: boolean = false;\r\n  // Estimated number of tiles touched during lighting for dynamic tuning\r\n  estimatedLightingTiles: number = 0;\r\n\r\n  constructor(\r\n    game: Game,\r\n    x: number,\r\n    y: number,\r\n    w: number,\r\n    h: number,\r\n    type: RoomType,\r\n    depth: number,\r\n    mapGroup: number,\r\n    level: Level,\r\n    rand = Random.rand,\r\n    envType: EnvType,\r\n  ) {\r\n    this.globalId = IdGenerator.generate(\"R\");\r\n    this.pathId = \"main\";\r\n    this.game = game;\r\n    this.roomX = x; //Math.floor(- this.width / 2);\r\n    this.roomY = y; //Math.floor(- this.height / 2);\r\n    this.width = w;\r\n    this.height = h;\r\n    this.type = type;\r\n    this.depth = depth;\r\n    this.mapGroup = mapGroup;\r\n\r\n    this.entered = false;\r\n    this.turn = TurnState.playerTurn;\r\n    this.playerTurnTime = Date.now();\r\n\r\n    this.items = Array<Item>();\r\n    this.projectiles = Array<Projectile>();\r\n    this.hitwarnings = Array<HitWarning>();\r\n    this.particles = Array<Particle>();\r\n    this.doors = Array<Door>();\r\n    this.entities = Array<Entity>();\r\n    this.lightSources = Array<LightSource>();\r\n    this.innerWalls = Array<Wall>();\r\n    this.level = level;\r\n    this.id = 0;\r\n    this.currentSpawnerCount = 0;\r\n    this.deadEntities = Array<Entity>();\r\n    this.active = false;\r\n    this.lastLightingUpdate = 0;\r\n    this.walls = Array<Wall>();\r\n    this.decorations = Array<Decoration>();\r\n    // Initialize Color Offscreen Canvas\r\n    this.colorOffscreenCanvas = document.createElement(\"canvas\");\r\n    this.colorOffscreenCanvas.width =\r\n      (this.width + 10) * GameConstants.TILESIZE;\r\n    this.colorOffscreenCanvas.height =\r\n      (this.height + 10) * GameConstants.TILESIZE;\r\n    const colorCtx = this.colorOffscreenCanvas.getContext(\"2d\");\r\n    if (!colorCtx) {\r\n      throw new Error(\"Failed to initialize color offscreen canvas context.\");\r\n    }\r\n    this.colorOffscreenCtx = colorCtx;\r\n\r\n    // Initialize Shade Offscreen Canvas\r\n    this.shadeOffscreenCanvas = document.createElement(\"canvas\");\r\n    this.shadeOffscreenCanvas.width =\r\n      (this.width + 10) * GameConstants.TILESIZE;\r\n    this.shadeOffscreenCanvas.height =\r\n      (this.height + 10) * GameConstants.TILESIZE;\r\n    const shadeCtx = this.shadeOffscreenCanvas.getContext(\"2d\");\r\n    if (!shadeCtx) {\r\n      throw new Error(\"Failed to initialize shade offscreen canvas context.\");\r\n    }\r\n    this.shadeOffscreenCtx = shadeCtx;\r\n\r\n    // Initialize Bloom Offscreen Canvas\r\n    this.bloomOffscreenCanvas = document.createElement(\"canvas\");\r\n    this.bloomOffscreenCanvas.width =\r\n      (this.width + 10) * GameConstants.TILESIZE;\r\n    this.bloomOffscreenCanvas.height =\r\n      (this.height + 10) * GameConstants.TILESIZE;\r\n    const bloomCtx = this.bloomOffscreenCanvas.getContext(\"2d\");\r\n    if (!bloomCtx) {\r\n      throw new Error(\"Failed to initialize bloom offscreen canvas context.\");\r\n    }\r\n    this.bloomOffscreenCtx = bloomCtx;\r\n\r\n    // #region initialize arrays\r\n\r\n    //initialize room array\r\n\r\n    this.roomArray = [];\r\n    for (let x = this.roomX - 1; x < this.roomX + this.width + 1; x++) {\r\n      this.roomArray[x] = [];\r\n      for (let y = this.roomY - 1; y < this.roomY + this.height + 1; y++) {\r\n        this.roomArray[x][y] = null;\r\n      }\r\n    }\r\n\r\n    //initialize visibility & color arrays, as well as their soft variants\r\n    this.vis = [];\r\n    this.softVis = [];\r\n    this.col = [];\r\n    this.softCol = [];\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      this.vis[x] = [];\r\n      this.softVis[x] = [];\r\n      this.col[x] = [];\r\n      this.softCol[x] = [];\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        this.vis[x][y] = 1;\r\n        this.softVis[x][y] = 1;\r\n        this.col[x][y] = [0, 0, 0];\r\n        this.softCol[x][y] = [0, 0, 0];\r\n      }\r\n    }\r\n\r\n    //initialize the render buffer array\r\n    this.renderBuffer = [];\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      this.renderBuffer[x] = [];\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        this.renderBuffer[x][y] = [];\r\n      }\r\n    }\r\n\r\n    //initialize the skin for the given environment\r\n    this.envType = envType;\r\n    this.skin = envType as unknown as SkinType;\r\n    /*\r\n    if (this.type === RoomType.ROPECAVE || this.type === RoomType.CAVE) {\r\n      this.skin = SkinType.CAVE;\r\n    }\r\n    if (this.type === RoomType.ROPEUP || this.type === RoomType.FOREST) {\r\n      this.skin = SkinType.FOREST;\r\n    }\r\n    */\r\n\r\n    this.builder = new RoomBuilder(this);\r\n\r\n    // #endregion\r\n  }\r\n\r\n  playMusic = () => {\r\n    if (this.envType === EnvType.FOREST) {\r\n      Sound.playForestMusic();\r\n    } else if (this.envType === EnvType.CAVE) {\r\n      Sound.playCaveMusic();\r\n    } else {\r\n      Sound.stopMusic();\r\n    }\r\n  };\r\n\r\n  // #region TILE ADDING METHODS\r\n\r\n  removeWall = (x: number, y: number) => {\r\n    if (this.roomArray[x][y] instanceof Wall) {\r\n      this.roomArray[x][y] = null;\r\n    }\r\n    //this.innerWalls = this.innerWalls.filter((w) => w.x !== x && w.y !== y);\r\n    //this.outerWalls = this.outerWalls.filter((w) => w.x !== x && w.y !== y);\r\n  };\r\n\r\n  private addDoorTorches(x: number, y: number, doorDir: Direction) {\r\n    if (doorDir !== Direction.UP && doorDir !== Direction.DOWN) {\r\n      return;\r\n    }\r\n\r\n    if (x && y) {\r\n      this.calculateWallInfo();\r\n      const leftWallInfo = this.wallInfo.get(`${x - 1},${y}`);\r\n      const rightWallInfo = this.wallInfo.get(`${x + 1},${y}`);\r\n      const leftTile = this.roomArray[x - 1]?.[y];\r\n      const rightTile = this.roomArray[x + 1]?.[y];\r\n      const leftOpen = leftWallInfo?.isLeftWall === false;\r\n      const rightOpen = rightWallInfo?.isRightWall === false;\r\n\r\n      if (leftOpen) {\r\n        this.roomArray[x - 1][y] = new WallTorch(this, x - 1, y);\r\n      }\r\n\r\n      if (rightOpen) {\r\n        this.roomArray[x + 1][y] = new WallTorch(this, x + 1, y);\r\n      }\r\n    }\r\n  }\r\n\r\n  private addTorches(\r\n    numTorches: number,\r\n    rand: () => number,\r\n    placeX?: number,\r\n    placeY?: number,\r\n  ) {\r\n    if (\r\n      this.level.environment.type === EnvType.FOREST &&\r\n      this.type !== RoomType.DOWNLADDER\r\n    )\r\n      return;\r\n\r\n    if (\r\n      placeX !== undefined &&\r\n      placeY !== undefined &&\r\n      this.roomArray[placeX]?.[placeY] instanceof Wall\r\n    ) {\r\n      this.roomArray[placeX][placeY] = new WallTorch(this, placeX, placeY);\r\n\r\n      return;\r\n    }\r\n\r\n    let walls = [];\r\n    for (let xx = this.roomX + 1; xx < this.roomX + this.width - 2; xx++) {\r\n      for (let yy = this.roomY; yy < this.roomY + this.height - 1; yy++) {\r\n        if (\r\n          this.roomArray[xx][yy] instanceof Wall &&\r\n          !(this.roomArray[xx][yy + 1] instanceof Wall)\r\n        ) {\r\n          walls.push(this.roomArray[xx][yy]);\r\n        }\r\n      }\r\n    }\r\n    let bottomWalls = [];\r\n    // Separate loop for bottom wall\r\n    for (let xx = this.roomX + 1; xx < this.roomX + this.width - 2; xx++) {\r\n      const yy = this.roomY + this.height - 1; // Bottom wall\r\n      if (\r\n        this.roomArray[xx][yy] instanceof Wall &&\r\n        !(this.roomArray[xx][yy + 1] instanceof Wall)\r\n      ) {\r\n        bottomWalls.push(this.roomArray[xx][yy]);\r\n      }\r\n    }\r\n\r\n    // Randomly distribute torches between walls and bottom walls\r\n    const wallTorches = Game.rand(0, numTorches, rand);\r\n    const bottomWallTorches = numTorches - wallTorches;\r\n\r\n    for (let i = 0; i < wallTorches; i++) {\r\n      if (walls.length == 0) break;\r\n      const randomIndex = Game.rand(0, walls.length - 1, rand);\r\n      const t = walls.splice(randomIndex, 1)[0];\r\n      const x = t.x;\r\n      const y = t.y;\r\n      this.roomArray[x][y] = new WallTorch(this, x, y);\r\n    }\r\n    for (let i = 0; i < bottomWallTorches; i++) {\r\n      if (bottomWalls.length == 0) break;\r\n      const randomIndex = Game.rand(0, bottomWalls.length - 1, rand);\r\n      const t = bottomWalls.splice(randomIndex, 1)[0];\r\n      const x = t.x;\r\n      const y = t.y;\r\n      this.roomArray[x][y] = new WallTorch(this, x, y, true);\r\n    }\r\n  }\r\n\r\n  private addChasms(rand: () => number) {\r\n    // add chasms\r\n    let w = Game.rand(2, 4, rand);\r\n    let h = Game.rand(2, 4, rand);\r\n    let xmin = this.roomX + 2;\r\n    let xmax = this.roomX + this.width - w - 2;\r\n    let ymin = this.roomY + 2;\r\n    let ymax = this.roomY + this.height - h - 2;\r\n    if (xmax < xmin || ymax < ymin) return;\r\n    let x = Game.rand(xmin, xmax, rand);\r\n    let y = Game.rand(ymin, ymax, rand);\r\n\r\n    for (let xx = x - 1; xx < x + w + 1; xx++) {\r\n      for (let yy = y - 1; yy < y + h + 1; yy++) {\r\n        // add a floor border\r\n        if (xx === x - 1 || xx === x + w || yy === y - 1 || yy === y + h) {\r\n          if (!(this.roomArray[xx][yy] instanceof SpawnFloor))\r\n            this.roomArray[xx][yy] = new Floor(this, xx, yy);\r\n        } else\r\n          this.roomArray[xx][yy] = new Chasm(\r\n            this,\r\n            xx,\r\n            yy,\r\n            xx === x,\r\n            xx === x + w - 1,\r\n            yy === y,\r\n            yy === y + h - 1,\r\n          );\r\n      }\r\n    }\r\n  }\r\n\r\n  addDoor = (\r\n    x: number,\r\n    y: number,\r\n    room: Room = this,\r\n    tunnelDoor: boolean = false,\r\n  ) => {\r\n    let d;\r\n    let t = DoorType.DOOR;\r\n    if (room.type === RoomType.BOSS) t = DoorType.GUARDEDDOOR;\r\n    if (room.type === RoomType.KEYROOM) t = DoorType.LOCKEDDOOR;\r\n    if (tunnelDoor) t = DoorType.TUNNELDOOR;\r\n    if (x === room.roomX) {\r\n      d = new Door(room, room.game, x, y, Direction.RIGHT, t);\r\n      room.roomArray[x + 1][y] = new SpawnFloor(room, x + 1, y);\r\n    } else if (x === room.roomX + room.width - 1) {\r\n      d = new Door(room, room.game, x, y, Direction.LEFT, t);\r\n      room.roomArray[x - 1][y] = new SpawnFloor(room, x - 1, y);\r\n    } else if (y === room.roomY) {\r\n      d = new Door(room, room.game, x, y, Direction.UP, t);\r\n      room.roomArray[x][y + 1] = new SpawnFloor(room, x, y + 1);\r\n    } else if (y === room.roomY + room.height - 1) {\r\n      d = new Door(room, room.game, x, y, Direction.DOWN, t);\r\n      room.roomArray[x][y - 1] = new SpawnFloor(room, x, y - 1);\r\n    }\r\n\r\n    if (tunnelDoor) {\r\n      room.tunnelDoor = d;\r\n    }\r\n\r\n    room.doors.push(d);\r\n    if (room.roomArray[d.x] == undefined) {\r\n      //console.log(\"door not added\");\r\n    }\r\n    room.roomArray[d.x][d.y] = d;\r\n\r\n    return d;\r\n  };\r\n\r\n  // ... start of file ...\r\n\r\n  private addSpikeTraps(numSpikes: number, rand: () => number) {\r\n    if (\r\n      this.level.environment.type === EnvType.FOREST ||\r\n      this.envType === EnvType.FOREST\r\n    )\r\n      return;\r\n    // add spikes\r\n    let tiles = this.getEmptyTiles();\r\n    for (let i = 0; i < numSpikes; i++) {\r\n      const { x, y } = this.getRandomEmptyPosition(tiles);\r\n      this.roomArray[x][y] = new SpikeTrap(this, x, y);\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region ADDING ENTITIES\r\n\r\n  // Function to add enemies to the room\r\n  private addEnemies(numEnemies: number, rand: () => number) {\r\n    if (GameplaySettings.NO_ENEMIES === true) return;\r\n    if (this.envType === EnvType.FOREST) numEnemies /= 2;\r\n    // Get all empty tiles in the room\r\n    let tiles = this.getEmptyTiles();\r\n    if (tiles === null) return;\r\n    //don't put enemies near the entrances so you don't get screwed instantly\r\n\r\n    // Create a Set to store coordinates that should be excluded\r\n    const excludedCoords = new Set<string>();\r\n\r\n    // For each door, add coordinates in a 5x5 area around it to excluded set\r\n    for (const door of this.doors) {\r\n      for (let dx = -2; dx <= 2; dx++) {\r\n        for (let dy = -2; dy <= 2; dy++) {\r\n          excludedCoords.add(`${door.x + dx},${door.y + dy}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Filter tiles that aren't in the excluded set\r\n    tiles = tiles.filter((tile) => !excludedCoords.has(`${tile.x},${tile.y}`));\r\n    // Loop through the number of enemies to be added\r\n    for (let i = 0; i < numEnemies; i++) {\r\n      let rerolls = 1;\r\n\r\n      if (tiles.length === 0) {\r\n        console.warn(`No tiles left to spawn enemies`);\r\n        break;\r\n      }\r\n      let emptyTiles = this.getRandomEmptyPosition(tiles);\r\n      if (emptyTiles.x === null || emptyTiles.y === null) {\r\n        i = numEnemies;\r\n        break;\r\n      }\r\n      const { x, y } = emptyTiles;\r\n\r\n      // Define the enemy tables for each depth level\r\n      let tables = this.level.enemyParameters.enemyTables;\r\n      // Define the maximum depth level\r\n      let max_depth_table = this.level.enemyParameters.maxDepthTable;\r\n      // Get the current depth level, capped at the maximum\r\n      let d = Math.min(this.depth, max_depth_table);\r\n      // If there is a table for the current depth level\r\n      if (tables[d] && tables[d].length > 0) {\r\n        // Function to add an enemy to the room\r\n        let addEnemy = (enemy: Entity): boolean => {\r\n          // Check if the enemy overlaps with any other enemies\r\n          for (let xx = 0; xx < enemy.w; xx++) {\r\n            for (let yy = 0; yy < enemy.h; yy++) {\r\n              if (!tiles.some((tt) => tt.x === x + xx && tt.y === y + yy)) {\r\n                // If it does, increment the enemy count and return false\r\n                numEnemies++;\r\n                return false;\r\n              }\r\n            }\r\n          }\r\n          // If it doesn't, add the enemy to the room, remove the tiles used from the available pool, and return true\r\n          this.entities.push(enemy);\r\n          for (let xx = 0; xx < enemy.w; xx++) {\r\n            for (let yy = 0; yy < enemy.h; yy++) {\r\n              tiles = tiles.filter((t) => !(t.x === x + xx && t.y === y + yy));\r\n            }\r\n          }\r\n          return true;\r\n        };\r\n\r\n        // Randomly select an enemy type from the table\r\n        let type = Game.randTable(tables[d], Random.rand);\r\n\r\n        switch (type) {\r\n          case 1:\r\n            CrabEnemy.add(this, this.game, x, y);\r\n            break;\r\n          case 2:\r\n            FrogEnemy.add(this, this.game, x, y);\r\n            break;\r\n          case 3:\r\n            ZombieEnemy.add(this, this.game, x, y);\r\n            break;\r\n          case 4:\r\n            SkullEnemy.add(this, this.game, x, y);\r\n            break;\r\n          case 5:\r\n            EnergyWizardEnemy.add(this, this.game, x, y);\r\n            break;\r\n          case 6:\r\n            ChargeEnemy.add(this, this.game, x, y);\r\n            break;\r\n          case 7:\r\n            RookEnemy.add(this, this.game, x, y);\r\n            break;\r\n          case 8:\r\n            BishopEnemy.add(this, this.game, x, y);\r\n            break;\r\n          case 9:\r\n            ArmoredzombieEnemy.add(this, this.game, x, y);\r\n            break;\r\n          case 10:\r\n            if (addEnemy(new BigSkullEnemy(this, this.game, x, y))) {\r\n              // clear out some space\r\n              for (let xx = 0; xx < 2; xx++) {\r\n                for (let yy = 0; yy < 2; yy++) {\r\n                  this.roomArray[x + xx][y + yy] = new Floor(\r\n                    this,\r\n                    x + xx,\r\n                    y + yy,\r\n                  ); // remove any walls\r\n                }\r\n              }\r\n            }\r\n            break;\r\n          case 11:\r\n            QueenEnemy.add(this, this.game, x, y);\r\n            break;\r\n          case 12:\r\n            KnightEnemy.add(this, this.game, x, y);\r\n            break;\r\n          case 13:\r\n            if (addEnemy(new BigKnightEnemy(this, this.game, x, y))) {\r\n              // clear out some space\r\n              for (let xx = 0; xx < 2; xx++) {\r\n                for (let yy = 0; yy < 2; yy++) {\r\n                  this.roomArray[x + xx][y + yy] = new Floor(\r\n                    this,\r\n                    x + xx,\r\n                    y + yy,\r\n                  ); // remove any walls\r\n                }\r\n              }\r\n            }\r\n            break;\r\n          case 14:\r\n            ArmoredSkullEnemy.add(this, this.game, x, y);\r\n            break;\r\n          case 15:\r\n            FireWizardEnemy.add(this, this.game, x, y);\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    let spawnerAmounts = [\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n      0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,\r\n      2, 2, 3, 3, 4, 5, 3,\r\n    ];\r\n    if (this.depth > 0) {\r\n      let spawnerAmount = Game.randTable(spawnerAmounts, rand);\r\n      //console.log(`Adding ${spawnerAmount} spawners`);\r\n      this.addSpawners(spawnerAmount, rand);\r\n    }\r\n    let occultistAmounts = [\r\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n    ];\r\n    if (this.depth > 1) {\r\n      let occultistAmount = Game.randTable(occultistAmounts, rand);\r\n      //console.log(`Adding ${occultistAmount} occultists`);\r\n      this.addOccultists(occultistAmount, rand);\r\n    }\r\n  }\r\n\r\n  private addRandomEnemies() {\r\n    let numEmptyTiles = this.getEmptyTiles().length;\r\n    /*\r\n    let numEnemies = Math.ceil(\r\n      numEmptyTiles * Math.min(this.depth * 0.1 + 0.5, 0.15), //this.depth * 0.01 is starting value\r\n    );\r\n    */\r\n    const factor = Math.min((this.depth + 2) * 0.05, 0.3);\r\n    const numEnemies = Math.ceil(\r\n      Math.max(\r\n        Utils.randomNormalInt(0, numEmptyTiles * factor),\r\n        numEmptyTiles * factor,\r\n      ),\r\n    );\r\n    //if (numEnemies > numEmptyTiles / 2) numEnemies = numEmptyTiles / 2;\r\n    this.addEnemies(numEnemies, Random.rand);\r\n  }\r\n\r\n  private addSpawners(numSpawners: number, rand: () => number) {\r\n    let tiles = this.getEmptyTiles();\r\n    if (tiles === null) {\r\n      //console.log(`No tiles left to spawn spawners`);\r\n      return;\r\n    }\r\n    for (let i = 0; i < numSpawners; i++) {\r\n      const { x, y } = this.getRandomEmptyPosition(tiles);\r\n      let spawnTable = this.level.populator\r\n        .getEnemyPoolForDepth(Math.max(0, this.depth - 1))\r\n        .filter((t) => t !== 7);\r\n      const spawner = Spawner.add(this, this.game, x, y, spawnTable);\r\n      return spawner;\r\n    }\r\n  }\r\n  private addOccultists(numOccultists: number, rand: () => number) {\r\n    let tiles = this.getEmptyTiles();\r\n    if (tiles === null) {\r\n      //console.log(`No tiles left to spawn spawners`);\r\n      return;\r\n    }\r\n    for (let i = 0; i < numOccultists; i++) {\r\n      const { x, y } = this.getRandomEmptyPosition(tiles);\r\n      const occultist = OccultistEnemy.add(this, this.game, x, y);\r\n      return occultist;\r\n    }\r\n  }\r\n\r\n  private addBosses(depth: number) {\r\n    if (GameplaySettings.NO_ENEMIES === true) return;\r\n    let tiles = this.getEmptyTiles();\r\n    if (tiles === null) {\r\n      //console.log(`No tiles left to spawn spawners`);\r\n      return;\r\n    }\r\n\r\n    let bosses = [\"reaper\", \"queen\", \"bigskullenemy\", \"bigzombieenemy\"];\r\n    if (depth > 0) {\r\n      bosses.push(\"occultist\");\r\n      bosses.filter((b) => b !== \"queen\");\r\n    }\r\n    const boss = Game.randTable(bosses, Random.rand);\r\n\r\n    const { x, y } = boss.startsWith(\"big\")\r\n      ? this.getBigRandomEmptyPosition(tiles)\r\n      : this.getRandomEmptyPosition(tiles);\r\n\r\n    switch (boss) {\r\n      case \"reaper\":\r\n        const spawner = this.addSpawners(1, Random.rand);\r\n        spawner.dropTable = [\"weapon\", \"equipment\"];\r\n        spawner.dropChance = 1;\r\n        break;\r\n      case \"queen\":\r\n        const queen = QueenEnemy.add(this, this.game, x, y);\r\n        queen.dropTable = [\"weapon\", \"equipment\"];\r\n        queen.dropChance = 1;\r\n        break;\r\n      case \"bigskullenemy\":\r\n        const bigSkull = BigSkullEnemy.add(this, this.game, x, y);\r\n        bigSkull.dropTable = [\r\n          \"weapon\",\r\n          \"equipment\",\r\n          \"consumable\",\r\n          \"gem\",\r\n          \"tool\",\r\n        ];\r\n\r\n        break;\r\n      case \"occultist\":\r\n        const occultist = this.addOccultists(1, Random.rand);\r\n        occultist.dropTable = [\"weapon\", \"equipment\"];\r\n        occultist.dropChance = 1;\r\n\r\n        break;\r\n      case \"bigzombieenemy\":\r\n        const bigZombie = BigZombieEnemy.add(this, this.game, x, y);\r\n        bigZombie.dropTable = [\r\n          \"weapon\",\r\n          \"equipment\",\r\n          \"consumable\",\r\n          \"gem\",\r\n          \"tool\",\r\n        ];\r\n        bigZombie.dropChance = 1;\r\n        break;\r\n    }\r\n  }\r\n  //used for spawn commands, implement elsewhere later\r\n  /**\r\n   * Adds a new enemy to the room based on the provided enemy type string.\r\n   *\r\n   * @param enemyType - The string identifier for the enemy type.\r\n   */\r\n  addNewEnemy = (enemyType: EnemyType): void => {\r\n    const EnemyClass = EnemyTypeMap[enemyType];\r\n    if (!EnemyClass) {\r\n      console.error(`Enemy type \"${enemyType}\" is not recognized.`);\r\n      return;\r\n    }\r\n\r\n    const tiles = this.getEmptyTiles();\r\n    if (!tiles || tiles.length === 0) {\r\n      // console.log(`No tiles left to spawn enemies.`);\r\n      return;\r\n    }\r\n\r\n    let position = this.getRandomEmptyPosition(tiles);\r\n    if (!position) {\r\n      return;\r\n    }\r\n    let { x, y } = position;\r\n\r\n    if (enemyType === EnemyType.bigzombie) {\r\n      position = this.getBigRandomEmptyPosition(tiles);\r\n      if (!position) {\r\n        return;\r\n      }\r\n      ({ x, y } = position);\r\n    }\r\n\r\n    EnemyClass.add(this, this.game, x, y);\r\n  };\r\n\r\n  addNewSpawner = (enemyType: EnemyType): void => {\r\n    const EnemyClass = EnemyTypeMap[enemyType];\r\n    if (!EnemyClass) {\r\n      //console.error(`Enemy type \"${enemyType}\" is not recognized.`);\r\n      return;\r\n    }\r\n\r\n    const tiles = this.getEmptyTiles();\r\n    if (!tiles || tiles.length === 0) {\r\n      // console.log(`No tiles left to spawn enemies.`);\r\n      return;\r\n    }\r\n\r\n    const { x, y } = this.getRandomEmptyPosition(tiles);\r\n    Spawner.add(this, this.game, x, y);\r\n  };\r\n\r\n  private addChests(numChests: number, rand: () => number) {\r\n    // add chests\r\n    let tiles = this.getEmptyTiles();\r\n    for (let i = 0; i < numChests; i++) {\r\n      const position = this.getRandomEmptyPosition(tiles);\r\n      if (!position) {\r\n        // No more empty tiles available, break out of loop\r\n        break;\r\n      }\r\n      const { x, y } = position;\r\n      this.entities.push(new Chest(this, this.game, x, y));\r\n    }\r\n  }\r\n\r\n  addBombs(numBombs: number, rand: () => number) {\r\n    let tiles = this.getEmptyTiles();\r\n    for (let i = 0; i < this.getEmptyTiles().length; i++) {\r\n      const { x, y } = this.getRandomEmptyPosition(tiles);\r\n      Bomb.add(this, this.game, x, y);\r\n    }\r\n  }\r\n\r\n  private addResources(numResources: number, rand: () => number) {\r\n    let tiles = this.getEmptyTiles();\r\n    for (let i = 0; i < numResources; i++) {\r\n      const { x, y } = this.getRandomEmptyPosition(tiles);\r\n\r\n      let r = rand();\r\n      if (r <= (10 - this.depth ** 3) / 10)\r\n        CoalResource.add(this, this.game, x, y);\r\n      else if (r <= (10 - (this.depth - 2) ** 3) / 10)\r\n        GoldResource.add(this, this.game, x, y);\r\n      else EmeraldResource.add(this, this.game, x, y);\r\n    }\r\n  }\r\n\r\n  private addVendingMachine(\r\n    rand: () => number,\r\n    placeX?: number,\r\n    placeY?: number,\r\n    item?: Item,\r\n  ) {\r\n    if (this.height <= 2 || this.width <= 2) return;\r\n    const pos = this.getRandomEmptyPosition(this.getEmptyTiles());\r\n\r\n    let x = placeX ? placeX : pos.x;\r\n    let y = placeY ? placeY : pos.y;\r\n\r\n    let table =\r\n      this.depth > 0\r\n        ? [\r\n            1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 4, 5, 5, 5,\r\n            5, 5,\r\n          ]\r\n        : [1, 1, 1];\r\n    let type = Game.randTable(table, rand);\r\n    if (item) {\r\n      VendingMachine.add(this, this.game, x, y, item);\r\n      return;\r\n    }\r\n    switch (type) {\r\n      case 1:\r\n        VendingMachine.add(this, this.game, x, y, new Heart(this, x, y));\r\n        break;\r\n      case 2:\r\n        VendingMachine.add(this, this.game, x, y, new Candle(this, x, y));\r\n        break;\r\n      case 3:\r\n        VendingMachine.add(this, this.game, x, y, new Armor(this, x, y));\r\n        break;\r\n      case 4:\r\n        VendingMachine.add(this, this.game, x, y, new Spear(this, x, y));\r\n        break;\r\n      case 5:\r\n        VendingMachine.add(this, this.game, x, y, new Torch(this, x, y));\r\n        break;\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region ENTERING / EXITING ROOM METHODS\r\n\r\n  linkExitToStart = (startRoom?: Room) => {\r\n    //if (this.type === RoomType.ROPEHOLE) return;\r\n    if (!startRoom) startRoom = this.level.startRoom;\r\n    if (\r\n      this.addDoorWithOffset(\r\n        startRoom.roomX + Math.floor(startRoom.width / 2) + 1,\r\n        startRoom.roomY,\r\n        startRoom,\r\n        true,\r\n      ) &&\r\n      this.addDoorWithOffset(\r\n        this.roomX + Math.floor(this.width / 2) - 1,\r\n        this.roomY,\r\n        this,\r\n        true,\r\n      )\r\n    ) {\r\n      startRoom.tunnelDoor.startRoom = true;\r\n      this.tunnelDoor.linkedDoor = startRoom.tunnelDoor;\r\n      startRoom.tunnelDoor.linkedDoor = this.tunnelDoor;\r\n    }\r\n  };\r\n\r\n  exitLevel = () => {\r\n    //this.game.onResize(); // stupid hack to keep fps high\r\n\r\n    Game.shade_canvases = {};\r\n    Game.text_rendering_canvases = {};\r\n\r\n    for (let door of this.doors) {\r\n      if (!door || !door.linkedDoor) continue;\r\n      const ld = door.linkedDoor;\r\n      if (!ld.lightSource) continue;\r\n      if (!ld.room) continue;\r\n      if (!ld.room.active && ld.room.entered) {\r\n        ld.lightSource.b = 0;\r\n        ld.lightSource.r = 0;\r\n        // Update the linked room's lighting since we changed its door light\r\n        ld.room.updateLighting();\r\n      }\r\n    }\r\n    this.active = false;\r\n\r\n    this.updateLighting();\r\n\r\n    this.particles.splice(0, this.particles.length);\r\n    this.disableFuseSounds();\r\n  };\r\n\r\n  disableFuseSounds = () => {\r\n    for (const b of this.entities.filter((e) => e instanceof Bomb)) {\r\n      //if (!bomb.soundPaused) {\r\n      //bomb.soundPaused = true;\r\n      const bomb = b as Bomb;\r\n      Sound.stopSound(bomb.fuseSound);\r\n      //}\r\n    }\r\n  };\r\n\r\n  enableFuseSounds = () => {\r\n    for (const b of this.entities.filter((e) => e instanceof Bomb)) {\r\n      //if (!bomb.soundPaused) {\r\n      //bomb.soundPaused = true;\r\n\r\n      const bomb = b as Bomb;\r\n      if (bomb.lit) {\r\n        Sound.playWithReverb(bomb.fuseSound);\r\n      }\r\n    }\r\n  };\r\n\r\n  onEnterRoom = (player: Player) => {\r\n    this.enableFuseSounds();\r\n    for (let room of this.level.rooms) {\r\n      room.roomOnScreen(player);\r\n    }\r\n\r\n    this.entered = true;\r\n\r\n    this.clearDeadStuff();\r\n    this.calculateWallInfo();\r\n    this.resetDoorLightSources();\r\n\r\n    this.particles = [];\r\n    this.syncKeyPathParticles();\r\n\r\n    this.alertEnemiesOnEntry();\r\n    this.message = this.name;\r\n    player.map.saveMapData();\r\n    this.setReverb();\r\n    this.active = true;\r\n    //this.invalidateBlurCache(); // Invalidate cache when room becomes active\r\n\r\n    this.updateLighting();\r\n  };\r\n\r\n  enterLevel = (player: Player, position?: { x: number; y: number }) => {\r\n    this.game.updateLevel(this);\r\n\r\n    // Prefer explicit entry position from ladder transition, then provided arg, then center\r\n    let ladderEntry = (this as any).__entryPositionFromLadder as\r\n      | { x: number; y: number }\r\n      | undefined;\r\n    if (ladderEntry) {\r\n      delete (this as any).__entryPositionFromLadder;\r\n    }\r\n    let roomCenter = ladderEntry || position || this.getRoomCenter();\r\n\r\n    if (this.roomArray[roomCenter.x][roomCenter.y].isSolid()) {\r\n      roomCenter = this.getRandomEmptyPosition(this.getEmptyTiles());\r\n    }\r\n\r\n    let x = roomCenter.x;\r\n    let y = roomCenter.y;\r\n\r\n    // If no explicit position given, try to position on a DownLadder tile if presentz\r\n    if (!position && !ladderEntry) {\r\n      for (let i = this.roomX; i < this.roomX + this.width; i++) {\r\n        for (let j = this.roomY; j < this.roomY + this.height; j++) {\r\n          const tile = this.roomArray[i]?.[j];\r\n          if (tile instanceof DownLadder) {\r\n            x = tile.x;\r\n            y = tile.y;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    player.moveSnap(x, y);\r\n    this.onEnterRoom(player);\r\n    this.playMusic();\r\n  };\r\n\r\n  enterLevelThroughDoor = (player: Player, door: Door, side?: number) => {\r\n    // console.log(door.linkedDoor.x, door.linkedDoor.y, door.x, door.y);\r\n    if (door.doorDir === door.linkedDoor.doorDir) {\r\n      door.opened = true;\r\n      player.moveSnap(door.x, door.y + 1);\r\n      setTimeout(() => {\r\n        player.direction = Direction.DOWN;\r\n      }, 150);\r\n    }\r\n    if (door instanceof Door && door.doorDir === Direction.UP) {\r\n      //if top door\r\n      door.opened = true;\r\n      player.moveNoSmooth(door.x, door.y + 1);\r\n    } else if (door instanceof Door && door.doorDir === Direction.DOWN) {\r\n      //if bottom door\r\n      player.moveNoSmooth(door.x, door.y - 1);\r\n    } else if (\r\n      door instanceof Door &&\r\n      [Direction.RIGHT, Direction.LEFT].includes(door.doorDir)\r\n    ) {\r\n      // if side door\r\n      player.moveNoSmooth(door.x + side, door.y);\r\n    }\r\n    this.onEnterRoom(player);\r\n  };\r\n\r\n  alertEnemiesOnEntry = () => {\r\n    for (const e of this.entities) {\r\n      if (e instanceof Enemy) e.lookForPlayer(false);\r\n    }\r\n  };\r\n\r\n  // #endregion\r\n\r\n  // #region LOGIC METHODS\r\n\r\n  tick = (player: Player) => {\r\n    this.updateLighting();\r\n    player.updateSlowMotion();\r\n    this.syncKeyPathParticles();\r\n\r\n    this.lastEnemyCount = this.entities.filter(\r\n      (e) => e instanceof Enemy,\r\n    ).length;\r\n    for (const h of this.hitwarnings) {\r\n      h.tick();\r\n    }\r\n    for (const p of this.projectiles) {\r\n      p.tick();\r\n    }\r\n\r\n    this.clearDeadStuff();\r\n    this.calculateWallInfo();\r\n\r\n    this.entities = this.entities.filter((e) => !e.dead);\r\n\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        this.roomArray[x][y].tick();\r\n      }\r\n    }\r\n\r\n    this.turn = TurnState.computerTurn;\r\n\r\n    this.playerTurnTime = Date.now();\r\n    this.playerTicked = player;\r\n\r\n    this.updateLighting();\r\n    player.map.saveMapData();\r\n\r\n    this.clearDeadStuff();\r\n  };\r\n\r\n  computerTurn = () => {\r\n    // take computer turn\r\n    for (const e of this.entities) {\r\n      e.tick();\r\n    }\r\n    this.entities = this.entities.filter((e) => !e.dead);\r\n    for (const i of this.items) {\r\n      i.tick();\r\n    }\r\n\r\n    for (const p in this.game.players) {\r\n      for (const i of this.game.players[p].inventory.items) {\r\n        if (i) i.tick();\r\n      }\r\n    }\r\n\r\n    for (const h of this.hitwarnings) {\r\n      if (\r\n        !this.roomArray[h.x] ||\r\n        !this.roomArray[h.x][h.y] ||\r\n        this.roomArray[h.x][h.y].isSolid()\r\n      ) {\r\n        h.dead = true;\r\n      }\r\n      h.removeOverlapping();\r\n    }\r\n\r\n    for (const p of this.projectiles) {\r\n      if (\r\n        this.roomArray[p.x] &&\r\n        this.roomArray[p.x][p.y] &&\r\n        this.roomArray[p.x][p.y].isSolid()\r\n      )\r\n        p.dead = true;\r\n      for (const i in this.game.players) {\r\n        if (\r\n          (this.game.players[i] as any).getRoom?.() === this &&\r\n          p.x === this.game.players[i].x &&\r\n          p.y === this.game.players[i].y\r\n        ) {\r\n          p.hitPlayer(this.game.players[i]);\r\n        }\r\n      }\r\n      for (const e of this.entities) {\r\n        if (p.x === e.x && p.y === e.y) {\r\n          p.hitEnemy(e);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        this.roomArray[x][y].tickEnd();\r\n      }\r\n    }\r\n    this.entities = this.entities.filter((e) => !e.dead); // enemies may be killed by spiketrap\r\n\r\n    this.clearDeadStuff();\r\n\r\n    this.playerTicked.finishTick();\r\n\r\n    // After inventory ticks (keys update keyPathDots), sync key path particles\r\n\r\n    this.checkForNoEnemies();\r\n    //console.log(this.entities.filter((e) => e instanceof Enemy).length);\r\n\r\n    this.turn = TurnState.playerTurn;\r\n    this.updateLighting();\r\n  };\r\n\r\n  update = () => {\r\n    if (this.turn == TurnState.computerTurn) {\r\n      const delay = (this.game as any).replayManager?.isReplaying?.()\r\n        ? GameConstants.REPLAY_COMPUTER_TURN_DELAY\r\n        : LevelConstants.COMPUTER_TURN_DELAY;\r\n      if (Date.now() - this.playerTurnTime >= delay) {\r\n        this.computerTurn();\r\n      }\r\n    }\r\n  };\r\n\r\n  clearDeadStuff = () => {\r\n    this.deadEntities = this.deadEntities.filter((e) => e && !e.dead);\r\n    this.entities = this.entities.filter((e) => e && !e.dead);\r\n    this.projectiles = this.projectiles.filter((p) => p && !p.dead);\r\n    this.lightSources = this.lightSources.filter((ls) => ls && !ls.dead);\r\n    this.hitwarnings = this.hitwarnings.filter((h) => h && !h.dead);\r\n    this.particles = this.particles.filter((p) => p && !p.dead);\r\n  };\r\n\r\n  /**\r\n   * Aligns KeyPathParticles with `this.keyPathDots`. Adds particles for any\r\n   * positions missing a live particle and marks particles not on the path as dead.\r\n   */\r\n  syncKeyPathParticles = () => {\r\n    let hasKey = false;\r\n    let showPath = false;\r\n    for (const player of Object.values(this.game.players)) {\r\n      for (const i of player.inventory.items) {\r\n        if (i instanceof Key) {\r\n          i.updatePathToDoor();\r\n          hasKey = true;\r\n          showPath = i.showPath;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!hasKey) {\r\n      return;\r\n    }\r\n    const path = this.keyPathDots as\r\n      | Array<{ x: number; y: number }>\r\n      | undefined;\r\n    if (!path || path.length === 0 || !showPath) {\r\n      // When no path, mark existing key-path particles as dead\r\n      let had = false;\r\n      for (const p of this.particles) {\r\n        if (p.constructor?.name === \"KeyPathParticle\") {\r\n          p.dead = true;\r\n          had = true;\r\n        }\r\n      }\r\n      if (had || !showPath) return;\r\n    }\r\n\r\n    // Mark any existing KeyPathParticles not on the current path as dead\r\n    const positions = new Set<string>((path || []).map((p) => `${p.x},${p.y}`));\r\n    for (const p of this.particles) {\r\n      if (p.constructor?.name === \"KeyPathParticle\") {\r\n        const key = `${Math.floor(p.x)},${Math.floor(p.y + 0.25)}`; // reverse the y-offset used in ctor\r\n        if (!positions.has(key)) {\r\n          p.dead = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Add particles for any path positions lacking one\r\n    const hasParticleAt = (x: number, y: number): boolean => {\r\n      if (!showPath) return false;\r\n      for (const p of this.particles) {\r\n        if (\r\n          p.constructor?.name === \"KeyPathParticle\" &&\r\n          Math.floor(p.x) === x &&\r\n          Math.floor(p.y + 0.25) === y &&\r\n          !p.dead\r\n        )\r\n          return true;\r\n      }\r\n      return false;\r\n    };\r\n    if (!path || !showPath) return;\r\n    for (const pos of path) {\r\n      if (!hasParticleAt(pos.x, pos.y)) {\r\n        const particle =\r\n          new (require(\"../particle/keyPathParticle\").KeyPathParticle)(\r\n            pos.x,\r\n            pos.y,\r\n          );\r\n        particle.room = this;\r\n        this.particles.push(particle);\r\n        if (Math.random() < 0.1)\r\n          console.log(\r\n            `Room.syncKeyPathParticles: spawned at (${pos.x},${pos.y})`,\r\n          );\r\n      }\r\n    }\r\n  };\r\n\r\n  catchUp = () => {\r\n    if (this.turn === TurnState.computerTurn) this.computerTurn(); // player skipped computer's turn, catch up\r\n  };\r\n\r\n  tickHitWarnings = () => {\r\n    for (const h of this.hitwarnings) {\r\n      if (h.parent && (h.parent.dead || h.parent.unconscious)) {\r\n        h.tick();\r\n      }\r\n    }\r\n  };\r\n\r\n  // #endregion\r\n\r\n  // #region LIGHTING METHODS\r\n\r\n  fadeLighting = (delta: number) => {\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        let visDiff = this.softVis[x][y] - this.vis[x][y];\r\n        let softVis = this.softVis[x][y];\r\n        let flag = false;\r\n        if (Math.abs(visDiff) > 0.01) flag = true;\r\n\r\n        if (!flag) continue;\r\n\r\n        visDiff *= 0.05 * delta;\r\n\r\n        softVis -= visDiff;\r\n\r\n        if (softVis < 0) softVis = 0;\r\n        if (softVis > 1) softVis = 1;\r\n\r\n        this.softVis[x][y] = softVis;\r\n\r\n        // if (this.softVis[x][y] < 0.01) this.softVis[x][y] = 0;\r\n      }\r\n    }\r\n  };\r\n\r\n  fadeRgb = (delta: number) => {\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        const [softR, softG, softB] = this.softCol[x][y];\r\n        const [targetR, targetG, targetB] = this.col[x][y];\r\n\r\n        // Calculate differences\r\n        let diffR = softR - targetR;\r\n        let diffG = softG - targetG;\r\n        let diffB = softB - targetB;\r\n\r\n        let flagR = false;\r\n        let flagG = false;\r\n        let flagB = false;\r\n        if (Math.abs(diffR) > 0.001) flagR = true;\r\n        if (Math.abs(diffG) > 0.001) flagG = true;\r\n        if (Math.abs(diffB) > 0.001) flagB = true;\r\n\r\n        if (!flagR && !flagG && !flagB) {\r\n          continue;\r\n        }\r\n\r\n        // Apply smoothing similar to fadeLighting\r\n        if (flagR) {\r\n          diffR *= 0.05 * delta;\r\n          this.softCol[x][y][0] = this.clamp(Math.round(softR - diffR), 0, 255);\r\n        }\r\n        if (flagG) {\r\n          diffG *= 0.05 * delta;\r\n          this.softCol[x][y][1] = this.clamp(Math.round(softG - diffG), 0, 255);\r\n        }\r\n        if (flagB) {\r\n          diffB *= 0.05 * delta;\r\n          this.softCol[x][y][2] = this.clamp(Math.round(softB - diffB), 0, 255);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  resetDoorLightSources = () => {\r\n    this.doors.forEach((d) => {\r\n      if (d && d.lightSource) d.lightSource.r = 0;\r\n      if (d && d.linkedDoor && d.linkedDoor.lightSource)\r\n        d.linkedDoor.lightSource.r = 0;\r\n    });\r\n  };\r\n\r\n  tileValuesToLightSource = (x: number, y: number, room: Room) => {\r\n    if (!room.roomArray[x]) return null;\r\n    if (!room.roomArray[x][y]) return null;\r\n    const color = room.col[x][y];\r\n    const brightness = (1 - room.vis[x][y]) / 4;\r\n    const radius = 9;\r\n    return { color, brightness, radius };\r\n  };\r\n\r\n  updateDoorLightSources = () => {\r\n    //works from inactive rooms onto their connected rooms\r\n    if (!this.active) return;\r\n\r\n    const directionOffsets = {\r\n      [Direction.UP]: { x: 0, y: -1 },\r\n      [Direction.DOWN]: { x: 0, y: 1 },\r\n      [Direction.LEFT]: { x: 1, y: 0 },\r\n      [Direction.RIGHT]: { x: -1, y: 0 },\r\n    };\r\n    let linkedDoors: Door[] = [];\r\n    this.doors.forEach((d) => {\r\n      if (d.linkedDoor && d.room.entered) linkedDoors.push(d.linkedDoor);\r\n    });\r\n\r\n    this.doors.forEach((d) => {\r\n      d.lightSource.b = 0.1;\r\n    });\r\n\r\n    for (const d of linkedDoors) {\r\n      const srcDoor = d.linkedDoor; // door on this room's side\r\n      const dirOff = directionOffsets[srcDoor.doorDir] || { x: 0, y: 0 };\r\n      // Sample one tile inside this room from the door, i.e., opposite of door facing\r\n      const sampleX = srcDoor.x - dirOff.x;\r\n      const sampleY = srcDoor.y - dirOff.y;\r\n\r\n      let vals = this.tileValuesToLightSource(sampleX, sampleY, this);\r\n      if (!vals)\r\n        vals = this.tileValuesToLightSource(srcDoor.x, srcDoor.y, this);\r\n      if (vals) {\r\n        d.lightSource.c = vals.color;\r\n        d.lightSource.b = vals.brightness;\r\n        d.lightSource.r = LevelConstants.LIGHTING_MAX_DISTANCE;\r\n      }\r\n    }\r\n\r\n    let connectedRooms: Set<Room> = new Set(\r\n      this.doors\r\n        .filter((d) => d && d.linkedDoor) // Ensure door and linkedDoor exist\r\n        .map((d) => d.linkedDoor.room)\r\n        .filter((r) => r), // Ensure room exists\r\n    );\r\n\r\n    // Update connected rooms once to propagate door light without infinite recursion\r\n    for (const r of Array.from(connectedRooms)) {\r\n      if (r.entered && !r.isUpdatingLighting) r.updateLighting();\r\n    }\r\n  };\r\n\r\n  setLightingAngleStep = () => {\r\n    if (!this.active) return;\r\n    // Estimate total tiles we will compute for lighting this frame\r\n    const roomTiles = this.width * this.height;\r\n\r\n    // Count players currently in this room\r\n    const playersInRoom = Object.values(this.game.players || {}).filter(\r\n      (p: any) => p?.getRoom?.() === this,\r\n    ).length;\r\n\r\n    // Rays per emitter at the current angular resolution\r\n    const raysPerEmitter = Math.ceil(360 / LevelConstants.LIGHTING_ANGLE_STEP);\r\n\r\n    // Estimate steps per ray by summing radii of lights (capped) and players\r\n    let totalRayDistance = 0;\r\n    for (const ls of this.lightSources) {\r\n      totalRayDistance += Math.min(ls.r, LevelConstants.LIGHTING_MAX_DISTANCE);\r\n    }\r\n    totalRayDistance += playersInRoom * LevelConstants.LIGHTING_MAX_DISTANCE;\r\n\r\n    // Total tiles touched by rays plus per-tile blending work\r\n    const estimatedRayTiles = totalRayDistance * raysPerEmitter;\r\n    const tilesToCompute = roomTiles + estimatedRayTiles;\r\n\r\n    // Store for diagnostics/dynamic tuning usage\r\n    this.estimatedLightingTiles = tilesToCompute;\r\n\r\n    //console.log(\r\n    //  `Estimated lighting tiles: ${this.estimatedLightingTiles} (room: ${roomTiles}, rays: ${estimatedRayTiles}, players: ${playersInRoom})`,\r\n    //);\r\n  };\r\n\r\n  updateLighting = () => {\r\n    if (!this.onScreen) return;\r\n    if (this.isUpdatingLighting) return;\r\n    this.isUpdatingLighting = true;\r\n\r\n    // Invalidate cache when lighting is updated\r\n    this.invalidateBlurCache();\r\n\r\n    // Start timing the initial setup\r\n    //console.time(\"updateLighting: Initial Setup\");\r\n    this.updateDoorLightSources();\r\n\r\n    let oldVis = [];\r\n    let oldCol = [];\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      oldVis[x] = [];\r\n      oldCol[x] = [];\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        oldVis[x][y] = this.vis[x][y];\r\n        oldCol[x][y] = this.col[x][y];\r\n\r\n        this.vis[x][y] = 1;\r\n        this.col[x][y] = [1, 1, 1];\r\n        this.renderBuffer[x][y] = [];\r\n      }\r\n    }\r\n    // End timing the initial setup\r\n    //console.timeEnd(\"updateLighting: Initial Setup\");\r\n\r\n    // Start timing the processing of light sources\r\n    //console.time(\"updateLighting: Process LightSources\");\r\n    // Prune orphaned light sources. Allow a small neighborhood check so\r\n    // lights slightly offset from their owning tile (e.g., bottom-wall torches)\r\n    // are not removed incorrectly.\r\n    try {\r\n      this.lightSources = this.lightSources.filter((ls) => {\r\n        const lx = Math.floor(ls.x);\r\n        const ly = Math.floor(ls.y);\r\n        // quick in-bounds check\r\n        if (\r\n          lx < this.roomX - 1 ||\r\n          lx > this.roomX + this.width ||\r\n          ly < this.roomY - 1 ||\r\n          ly > this.roomY + this.height\r\n        )\r\n          return false;\r\n\r\n        // keep if any nearby tile exists\r\n        for (let dx = -1; dx <= 1; dx++) {\r\n          for (let dy = -1; dy <= 1; dy++) {\r\n            if (this.roomArray[lx + dx]?.[ly + dy]) return true;\r\n          }\r\n        }\r\n        return false;\r\n      });\r\n    } catch {}\r\n\r\n    for (const l of this.lightSources) {\r\n      if (l.shouldUpdate()) {\r\n        for (let i = 0; i < 360; i += LevelConstants.LIGHTING_ANGLE_STEP) {\r\n          this.castTintAtAngle(\r\n            i,\r\n            l.x,\r\n            l.y,\r\n            l.r,\r\n            l.c,\r\n            l.b * LevelConstants.LIGHTING_ANGLE_BRIGHTNESS_COMPENSATION,\r\n          ); // RGB color in sRGB\r\n        }\r\n      }\r\n    }\r\n    //console.timeEnd(\"updateLighting: Process LightSources\");\r\n    //console.time(\"updateLighting: Process Players\");\r\n    this.setLightingAngleStep();\r\n\r\n    let lightingAngleStep = LevelConstants.LIGHTING_ANGLE_STEP;\r\n\r\n    for (const p in this.game.players) {\r\n      let player = this.game.players[p];\r\n      if ((player as any).getRoom?.() === this) {\r\n        //console.log(`i: ${player.angle}`);\r\n        for (let i = 0; i < 360; i += lightingAngleStep) {\r\n          let lightColor = LevelConstants.AMBIENT_LIGHT_COLOR;\r\n          let lightBrightness = 5;\r\n          if (player.lightEquipped) {\r\n            lightColor = player.lightColor;\r\n            lightBrightness = player.lightBrightness;\r\n          }\r\n          let offsetX = 0;\r\n          let offsetY = 0;\r\n          switch (player.direction) {\r\n            case Direction.UP:\r\n              offsetY = -0;\r\n              break;\r\n            case Direction.DOWN:\r\n              offsetY = 0;\r\n              break;\r\n            case Direction.LEFT:\r\n              offsetX = -0;\r\n              break;\r\n            case Direction.RIGHT:\r\n              offsetX = 0;\r\n          }\r\n          this.castTintAtAngle(\r\n            i,\r\n            player.x + 0.5 + offsetX,\r\n            player.y + 0.5 + offsetY,\r\n            /*\r\n            Math.min(\r\n              Math.max(\r\n                player.sightRadius - this.depth + 2,\r\n                Player.minSightRadius,\r\n              ),\r\n              10,\r\n            ),\r\n            */\r\n            LevelConstants.LIGHTING_MAX_DISTANCE,\r\n            lightColor, // RGB color in sRGB\r\n            lightBrightness *\r\n              LevelConstants.LIGHTING_ANGLE_BRIGHTNESS_COMPENSATION, // intensity\r\n          );\r\n        }\r\n      }\r\n    }\r\n    // End timing the processing of player lighting\r\n    //console.timeEnd(\"updateLighting: Process Players\");\r\n\r\n    // Start timing the blending of colors\r\n    //console.time(\"updateLighting: Blend Colors Array\");\r\n    const roomX = this.roomX;\r\n    const roomY = this.roomY;\r\n    const width = this.width;\r\n    const height = this.height;\r\n    const renderBuffer = this.renderBuffer;\r\n\r\n    for (let x = roomX; x < roomX + width; x++) {\r\n      for (let y = roomY; y < roomY + height; y++) {\r\n        this.col[x][y] = this.blendColorsArray(renderBuffer[x][y]);\r\n      }\r\n    }\r\n    // End timing the blending of colors\r\n    //console.timeEnd(\"updateLighting: Blend Colors Array\");\r\n\r\n    // Start timing the conversion to luminance\r\n    //console.time(\"updateLighting: Convert to Luminance\");\r\n    for (let x = roomX; x < roomX + width; x++) {\r\n      for (let y = roomY; y < roomY + height; y++) {\r\n        this.vis[x][y] = this.rgbToLuminance(this.col[x][y]);\r\n      }\r\n    }\r\n    // End timing the conversion to luminance\r\n    //console.timeEnd(\"updateLighting: Convert to Luminance\");\r\n    this.updateDoorLightSources();\r\n    // Bump lighting update version so blur cache can detect changes\r\n    this.lastLightingUpdate++;\r\n    this.isUpdatingLighting = false;\r\n  };\r\n\r\n  updateLightSources = (lightSource?: LightSource, remove?: boolean) => {\r\n    this.oldCol = [];\r\n    this.oldVis = [];\r\n    this.oldCol = this.col;\r\n    this.oldVis = this.vis;\r\n    if (lightSource) {\r\n      for (let i = 0; i < 360; i += LevelConstants.LIGHTING_ANGLE_STEP) {\r\n        if (!remove) {\r\n          this.castTintAtAngle(\r\n            i,\r\n            lightSource.x,\r\n            lightSource.y,\r\n            lightSource.r,\r\n            lightSource.c,\r\n            lightSource.b *\r\n              LevelConstants.LIGHTING_ANGLE_BRIGHTNESS_COMPENSATION,\r\n          ); // RGB color in sRGB\r\n        } else {\r\n          this.unCastTintAtAngle(\r\n            i,\r\n            lightSource.x,\r\n            lightSource.y,\r\n            lightSource.r,\r\n            lightSource.c,\r\n            lightSource.b *\r\n              LevelConstants.LIGHTING_ANGLE_BRIGHTNESS_COMPENSATION,\r\n          );\r\n        }\r\n      }\r\n    }\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        this.col[x][y] = this.blendColorsArray(this.renderBuffer[x][y]);\r\n      }\r\n    }\r\n\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        this.vis[x][y] = this.rgbToLuminance(this.col[x][y]);\r\n      }\r\n    }\r\n  };\r\n\r\n  revertLightSources = () => {\r\n    //console.log(\"reverting lighting\");\r\n    this.oldCol = [];\r\n    this.oldVis = [];\r\n    this.col = this.oldCol;\r\n    this.vis = this.oldVis;\r\n  };\r\n\r\n  /**\r\n   * Casts or uncategorizes a tint from a light source at a specific angle.\r\n   *\r\n   * @param angle - The angle in degrees at which to cast or uncast the tint.\r\n   * @param px - The x-coordinate of the light source.\r\n   * @param py - The y-coordinate of the light source.\r\n   * @param radius - The radius of the light's influence.\r\n   * @param color - The RGB color tuple representing the tint.\r\n   * @param brightness - The brightness of the light source.\r\n   * @param action - 'cast' to add tint, 'unCast' to remove tint.\r\n   */\r\n  private processTintAtAngle = (\r\n    angle: number,\r\n    px: number,\r\n    py: number,\r\n    radius: number,\r\n    color: [number, number, number],\r\n    brightness: number,\r\n    action: \"cast\" | \"unCast\" = \"cast\",\r\n  ) => {\r\n    const dx = Math.cos((angle * Math.PI) / 180);\r\n    const dy = Math.sin((angle * Math.PI) / 180);\r\n\r\n    // Convert input color from sRGB to linear RGB\r\n    const linearColor: [number, number, number] = [\r\n      this.sRGBToLinear(color[0]),\r\n      this.sRGBToLinear(color[1]),\r\n      this.sRGBToLinear(color[2]),\r\n    ];\r\n\r\n    for (\r\n      let i = 0;\r\n      i <= Math.min(LevelConstants.LIGHTING_MAX_DISTANCE, radius);\r\n      i++\r\n    ) {\r\n      const currentX = Math.floor(px + dx * i);\r\n      const currentY = Math.floor(py + dy * i);\r\n\r\n      if (!this.isPositionInRoom(currentX, currentY)) return; // Outside the room\r\n\r\n      const tile = this.roomArray[currentX][currentY];\r\n      if (tile.isOpaque()) return; // Stop processing through opaque tiles\r\n\r\n      // Handle i=0 separately to ensure correct intensity\r\n      let intensity: number;\r\n      if (i === 0) {\r\n        intensity = brightness * 0.1;\r\n      } else {\r\n        intensity = brightness / Math.E ** (i - 0.25);\r\n      }\r\n      if (intensity < 0.005) intensity = 0;\r\n\r\n      if (intensity <= 0) continue;\r\n\r\n      if (!this.renderBuffer[currentX]) {\r\n        this.renderBuffer[currentX] = [];\r\n      }\r\n      if (!this.renderBuffer[currentX][currentY]) {\r\n        this.renderBuffer[currentX][currentY] = [];\r\n      }\r\n\r\n      if (GameConstants.ENEMIES_BLOCK_LIGHT) {\r\n        //begin processing opaque entities\r\n        const entity = this.entities.find(\r\n          (e) => e.x === currentX && e.y === currentY && e.opaque,\r\n        );\r\n        if (entity) {\r\n          //intensity = intensity * (1 - entity.opacity);\r\n          // Set the intensity for this tile and then terminate to create shadow effect\r\n          const weightedLinearColor: [number, number, number, number] = [\r\n            linearColor[0],\r\n            linearColor[1],\r\n            linearColor[2],\r\n            intensity,\r\n          ];\r\n\r\n          if (action === \"cast\") {\r\n            this.renderBuffer[currentX][currentY].push(weightedLinearColor);\r\n          } else if (action === \"unCast\") {\r\n            this.renderBuffer[currentX][currentY] = this.renderBuffer[currentX][\r\n              currentY\r\n            ].filter(\r\n              (colorEntry) =>\r\n                !(\r\n                  Math.abs(colorEntry[0] - weightedLinearColor[0]) < 0.0001 &&\r\n                  Math.abs(colorEntry[1] - weightedLinearColor[1]) < 0.0001 &&\r\n                  Math.abs(colorEntry[2] - weightedLinearColor[2]) < 0.0001 &&\r\n                  Math.abs(colorEntry[3] - weightedLinearColor[3]) < 0.0001\r\n                ),\r\n            );\r\n          }\r\n          return; // Terminate after processing the opaque entity\r\n        }\r\n      }\r\n      //end processing opaque entities\r\n\r\n      // Process inner walls like entities - terminate after processing\r\n      if (tile instanceof Wall && tile.isOpaque() && tile.isInnerWall()) {\r\n        const weightedLinearColor: [number, number, number, number] = [\r\n          linearColor[0],\r\n          linearColor[1],\r\n          linearColor[2],\r\n          intensity,\r\n        ];\r\n\r\n        if (action === \"cast\") {\r\n          this.renderBuffer[currentX][currentY].push(weightedLinearColor);\r\n        } else if (action === \"unCast\") {\r\n          this.renderBuffer[currentX][currentY] = this.renderBuffer[currentX][\r\n            currentY\r\n          ].filter(\r\n            (colorEntry) =>\r\n              !(\r\n                Math.abs(colorEntry[0] - weightedLinearColor[0]) < 0.0001 &&\r\n                Math.abs(colorEntry[1] - weightedLinearColor[1]) < 0.0001 &&\r\n                Math.abs(colorEntry[2] - weightedLinearColor[2]) < 0.0001 &&\r\n                Math.abs(colorEntry[3] - weightedLinearColor[3]) < 0.0001\r\n              ),\r\n          );\r\n        }\r\n        return; // Terminate after processing the opaque wall\r\n      }\r\n\r\n      const weightedLinearColor: [number, number, number, number] = [\r\n        linearColor[0],\r\n        linearColor[1],\r\n        linearColor[2],\r\n        intensity,\r\n      ];\r\n\r\n      if (action === \"cast\") {\r\n        this.renderBuffer[currentX][currentY].push(weightedLinearColor);\r\n      } else if (action === \"unCast\") {\r\n        this.renderBuffer[currentX][currentY] = this.renderBuffer[currentX][\r\n          currentY\r\n        ].filter(\r\n          (colorEntry) =>\r\n            !(\r\n              Math.abs(colorEntry[0] - weightedLinearColor[0]) < 0.0001 &&\r\n              Math.abs(colorEntry[1] - weightedLinearColor[1]) < 0.0001 &&\r\n              Math.abs(colorEntry[2] - weightedLinearColor[2]) < 0.0001 &&\r\n              Math.abs(colorEntry[3] - weightedLinearColor[3]) < 0.0001\r\n            ),\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Applies Gaussian blur to the specified offscreen canvas.\r\n   *\r\n   * @param {HTMLCanvasElement} canvas - The offscreen canvas to blur.\r\n   * @param {number} radius - The radius of the blur.\r\n   */\r\n  applyGaussianBlur(canvas: HTMLCanvasElement, radius: number): void {\r\n    //DEPRECATED\r\n    //const StackBlur = require(\"stackblur-canvas\");\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) {\r\n      throw new Error(\"Failed to get canvas context for Gaussian blur.\");\r\n    }\r\n\r\n    // Get the image data from the canvas\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    //const imageData = ctx.getImageData(0, 0, width, height);\r\n    let r = radius;\r\n    if (!GameConstants.BLUR_ENABLED) r = 0;\r\n    // Apply StackBlur\r\n    //StackBlur.canvasRGBA(canvas, 0, 0, width, height, Math.floor(r / 2));\r\n  }\r\n\r\n  /**\r\n   * Casts a tint from a light source at a specific angle.\r\n   *\r\n   * @param angle - The angle in degrees at which to cast the tint.\r\n   * @param px - The x-coordinate of the light source.\r\n   * @param py - The y-coordinate of the light source.\r\n   * @param radius - The radius of the light's influence.\r\n   * @param color - The RGB color tuple representing the tint.\r\n   * @param brightness - The brightness of the light source.\r\n   */\r\n  castTintAtAngle = (\r\n    angle: number,\r\n    px: number,\r\n    py: number,\r\n    radius: number,\r\n    color: [number, number, number],\r\n    brightness: number,\r\n  ) => {\r\n    this.processTintAtAngle(\r\n      angle,\r\n      px,\r\n      py,\r\n      radius,\r\n      color,\r\n      brightness / 3,\r\n      \"cast\",\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Uncasts a tint from a light source at a specific angle.\r\n   *\r\n   * @param angle - The angle in degrees at which to uncast the tint.\r\n   * @param px - The x-coordinate of the light source.\r\n   * @param py - The y-coordinate of the light source.\r\n   * @param radius - The radius of the light's influence.\r\n   * @param color - The RGB color tuple representing the tint.\r\n   * @param brightness - The brightness of the light source.\r\n   */\r\n  unCastTintAtAngle = (\r\n    angle: number,\r\n    px: number,\r\n    py: number,\r\n    radius: number,\r\n    color: [number, number, number],\r\n    brightness: number,\r\n  ) => {\r\n    this.processTintAtAngle(\r\n      angle,\r\n      px,\r\n      py,\r\n      radius,\r\n      color,\r\n      brightness / 3, // added this\r\n      \"unCast\",\r\n    );\r\n  };\r\n\r\n  private sRGBToLinear = (value: number): number => {\r\n    const normalized = value / 255;\r\n    if (normalized <= 0.04045) {\r\n      return normalized / 12.92;\r\n    } else {\r\n      return Math.pow((normalized + 0.055) / 1.055, 2.2);\r\n    }\r\n  };\r\n\r\n  private linearToSRGB = (value: number): number => {\r\n    if (value <= 0.0031308) {\r\n      return Math.round(12.92 * value * 255);\r\n    } else {\r\n      return Math.round(\r\n        (1.055 * Math.pow(value, 1 / 2.2 /*gamma*/) - 0.055) * 255,\r\n      );\r\n    }\r\n  };\r\n\r\n  clamp = (value: number, min: number = 0, max: number = 1): number => {\r\n    return Math.min(Math.max(value, min), max);\r\n  };\r\n\r\n  /**\r\n   * Blends an array of RGB colors into a single color without excessive darkness or clipping to white.\r\n   *\r\n   * @param colors - An array of RGB tuples to blend.\r\n   * @returns A single RGB tuple representing the blended color.\r\n   */\r\n  private blendColorsArray = (\r\n    colors: [red: number, green: number, blue: number, alpha: number][],\r\n  ): [red: number, green: number, blue: number] => {\r\n    if (colors.length === 0) return [0, 0, 0];\r\n\r\n    // Sum all color channels in linear RGB\r\n    const sum = colors.reduce(\r\n      (accumulator, color) => [\r\n        accumulator[0] + color[0] * color[3],\r\n        accumulator[1] + color[1] * color[3],\r\n        accumulator[2] + color[2] * color[3],\r\n      ],\r\n      [0, 0, 0],\r\n    );\r\n\r\n    // Apply scaling factor to manage overall brightness\r\n    const scalingFactor = 0.45 * 2.5; // Adjust as needed\r\n    const scaledSum = [\r\n      sum[0] * scalingFactor,\r\n      sum[1] * scalingFactor,\r\n      sum[2] * scalingFactor,\r\n    ];\r\n\r\n    // Clamp each channel to [0, 1] to prevent overflow\r\n    const clampedSum: [number, number, number] = [\r\n      this.clamp(scaledSum[0], 0, 1),\r\n      this.clamp(scaledSum[1], 0, 1),\r\n      this.clamp(scaledSum[2], 0, 1),\r\n    ];\r\n    // Convert back to sRGB\r\n    return [\r\n      this.linearToSRGB(clampedSum[0]),\r\n      this.linearToSRGB(clampedSum[1]),\r\n      this.linearToSRGB(clampedSum[2]),\r\n    ];\r\n  };\r\n\r\n  rgbToLuminance = (color: [number, number, number]): number => {\r\n    //map to 1-0 range\r\n    return 1 - (0.299 * color[0] + 0.587 * color[1] + 0.114 * color[2]) / 255;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (!this.onScreen) return;\r\n\r\n    if (this.active) {\r\n      HitWarning.updateFrame(delta);\r\n      this.drawInterval = 4;\r\n    } else if (!this.active) {\r\n      this.drawInterval = 8;\r\n    }\r\n\r\n    this.drawTimestamp += delta;\r\n\r\n    if (this.drawTimestamp - this.lastDraw >= this.drawInterval) {\r\n      this.fadeRgb(delta + this.drawInterval);\r\n      this.fadeLighting(delta + this.drawInterval);\r\n      this.lastDraw = this.drawTimestamp;\r\n    }\r\n  };\r\n  // added a multiplier to the input rgb values to avoid clipping to white\r\n  drawColorLayer = () => {\r\n    if (!this.onScreen) return;\r\n\r\n    Game.ctx.save();\r\n    // Clear the offscreen color canvas\r\n    this.colorOffscreenCtx.clearRect(\r\n      0,\r\n      0,\r\n      this.colorOffscreenCanvas.width,\r\n      this.colorOffscreenCanvas.height,\r\n    );\r\n\r\n    let lastFillStyle = \"\";\r\n    // Match original shade layer positioning using the blur offsets\r\n    const offsetX = this.blurOffsetX;\r\n    const offsetY = this.blurOffsetY;\r\n\r\n    // Draw all color rectangles without any filters\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        const [r, g, b] = this.softCol[x][y];\r\n        if (r === 0 && g === 0 && b === 0) continue; // Skip if no color\r\n\r\n        const fillStyle = `rgba(${r}, ${g}, ${b}, 1)`;\r\n\r\n        if (fillStyle !== lastFillStyle) {\r\n          this.colorOffscreenCtx.fillStyle = fillStyle;\r\n          lastFillStyle = fillStyle;\r\n        }\r\n\r\n        this.colorOffscreenCtx.fillRect(\r\n          (x - this.roomX + offsetX) * GameConstants.TILESIZE,\r\n          (y - this.roomY + offsetY) * GameConstants.TILESIZE,\r\n          GameConstants.TILESIZE,\r\n          GameConstants.TILESIZE,\r\n        );\r\n      }\r\n    }\r\n\r\n    // Choose blur method based on setting\r\n    if (GameConstants.USE_WEBGL_BLUR) {\r\n      // Use WebGL blur with caching\r\n      const blurRenderer = WebGLBlurRenderer.getInstance();\r\n\r\n      // Check if we can use cached results\r\n      if (\r\n        this.shouldUseBlurCache() &&\r\n        this.blurCache.color6px &&\r\n        this.blurCache.color12px\r\n      ) {\r\n        // Use cached blurred results\r\n        Game.ctx.globalCompositeOperation = \"soft-light\";\r\n        Game.ctx.globalAlpha = 0.6;\r\n        Game.ctx.drawImage(\r\n          this.blurCache.color6px,\r\n          (this.roomX - offsetX) * GameConstants.TILESIZE,\r\n          (this.roomY - offsetY) * GameConstants.TILESIZE,\r\n        );\r\n\r\n        Game.ctx.globalCompositeOperation = \"lighten\";\r\n        Game.ctx.globalAlpha = 0.05;\r\n        Game.ctx.drawImage(\r\n          this.blurCache.color12px,\r\n          (this.roomX - offsetX) * GameConstants.TILESIZE,\r\n          (this.roomY - offsetY) * GameConstants.TILESIZE,\r\n        );\r\n      } else {\r\n        // Generate new blur and cache if inactive\r\n        Game.ctx.globalCompositeOperation = \"soft-light\";\r\n        Game.ctx.globalAlpha = 0.6;\r\n\r\n        // Apply 6px blur using WebGL\r\n        const blurred8px = blurRenderer.applyBlur(this.colorOffscreenCanvas, 8);\r\n        Game.ctx.drawImage(\r\n          blurred8px,\r\n          (this.roomX - offsetX) * GameConstants.TILESIZE,\r\n          (this.roomY - offsetY) * GameConstants.TILESIZE,\r\n        );\r\n\r\n        // Cache the result if room is inactive\r\n        if (!this.active) {\r\n          this.cacheBlurResult(\"color8px\", blurred8px);\r\n        }\r\n\r\n        Game.ctx.globalCompositeOperation = \"lighten\";\r\n        Game.ctx.globalAlpha = 0.05;\r\n\r\n        // Apply 12px blur using WebGL\r\n        const blurred12px = blurRenderer.applyBlur(\r\n          this.colorOffscreenCanvas,\r\n          12,\r\n        );\r\n        Game.ctx.drawImage(\r\n          blurred12px,\r\n          (this.roomX - offsetX) * GameConstants.TILESIZE,\r\n          (this.roomY - offsetY) * GameConstants.TILESIZE,\r\n        );\r\n\r\n        // Cache the result if room is inactive\r\n        if (!this.active) {\r\n          this.cacheBlurResult(\"color12px\", blurred12px);\r\n        }\r\n      }\r\n    } else {\r\n      // Use Canvas2D blur (fallback) - matching original settings\r\n      Game.ctx.globalCompositeOperation =\r\n        GameConstants.COLOR_LAYER_COMPOSITE_OPERATION as GlobalCompositeOperation;\r\n      Game.ctx.globalAlpha = 0.6;\r\n\r\n      if (GameConstants.ctxBlurEnabled) {\r\n        Game.ctx.filter = \"blur(6px)\";\r\n      }\r\n\r\n      Game.ctx.drawImage(\r\n        this.colorOffscreenCanvas,\r\n        (this.roomX - offsetX) * GameConstants.TILESIZE,\r\n        (this.roomY - offsetY) * GameConstants.TILESIZE,\r\n      );\r\n\r\n      // Draw slight haze\r\n      Game.ctx.globalCompositeOperation = \"lighten\";\r\n      Game.ctx.globalAlpha = 0.05;\r\n\r\n      if (GameConstants.ctxBlurEnabled) {\r\n        Game.ctx.filter = \"blur(12px)\";\r\n      }\r\n\r\n      Game.ctx.drawImage(\r\n        this.colorOffscreenCanvas,\r\n        (this.roomX - offsetX) * GameConstants.TILESIZE,\r\n        (this.roomY - offsetY) * GameConstants.TILESIZE,\r\n      );\r\n\r\n      Game.ctx.filter = \"none\";\r\n    }\r\n\r\n    this.colorOffscreenCtx.clearRect(\r\n      0,\r\n      0,\r\n      this.colorOffscreenCanvas.width,\r\n      this.colorOffscreenCanvas.height,\r\n    );\r\n\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawShadeLayer = () => {\r\n    if (GameConstants.isIOS || !GameConstants.SHADE_ENABLED) return;\r\n    if (GameConstants.SHADE_INLINE_IN_ENTITY_LAYER) return; // handled inline in drawEntities\r\n    if (!this.onScreen) return;\r\n\r\n    Game.ctx.save();\r\n\r\n    Game.ctx.globalCompositeOperation =\r\n      GameConstants.SHADE_LAYER_COMPOSITE_OPERATION as GlobalCompositeOperation;\r\n\r\n    // Clear the offscreen shade canvas\r\n    this.shadeOffscreenCtx.clearRect(\r\n      0,\r\n      0,\r\n      this.shadeOffscreenCanvas.width,\r\n      this.shadeOffscreenCanvas.height,\r\n    );\r\n\r\n    const offsetX = this.shadeSliceBorderTiles;\r\n    const offsetY = this.shadeSliceBorderTiles;\r\n\r\n    let lastFillStyle = \"\";\r\n\r\n    // Draw all shade rectangles without any filters\r\n    for (let x = this.roomX - 2; x < this.roomX + this.width + 4; x++) {\r\n      for (let y = this.roomY - 2; y < this.roomY + this.height + 4; y++) {\r\n        const tile = this.roomArray[x]?.[y];\r\n        //if (!tile) return;\r\n\r\n        let alpha =\r\n          this.softVis[x] && this.softVis[x][y] ? this.softVis[x][y] : 0;\r\n        if (tile instanceof WallTorch) continue;\r\n        let factor = !GameConstants.SMOOTH_LIGHTING ? 2 : 2;\r\n        let smoothFactor = !GameConstants.SMOOTH_LIGHTING ? 0 : 1;\r\n        let computedAlpha = alpha ** factor * smoothFactor;\r\n\r\n        let fillX = x;\r\n        let fillY = y;\r\n        let fillWidth = 1;\r\n        let fillHeight = 1;\r\n        if (tile instanceof Wall) {\r\n          const wall = tile as Wall;\r\n          if (!this.innerWalls.includes(wall)) {\r\n            switch (wall.direction) {\r\n              case Direction.UP:\r\n                fillY = y - 0.5;\r\n                fillHeight = 0.5;\r\n                break;\r\n              case Direction.DOWN:\r\n                fillY = y - 0.5;\r\n                fillHeight = 1.5;\r\n                break;\r\n              case Direction.LEFT:\r\n                fillX = x + 0.25;\r\n                fillWidth = 0.75;\r\n                break;\r\n              case Direction.RIGHT:\r\n                fillX = x;\r\n                fillWidth = 0.75;\r\n                break;\r\n              case Direction.DOWN_LEFT:\r\n                fillX = x + 0.25;\r\n                fillY = y - 0.5;\r\n                fillWidth = 0.75;\r\n                fillHeight = 1.5;\r\n                break;\r\n              case Direction.DOWN_RIGHT:\r\n                fillX = x;\r\n                fillY = y - 0.5;\r\n                fillWidth = 0.75;\r\n                fillHeight = 1.5;\r\n                break;\r\n              case Direction.UP_LEFT:\r\n                fillX = x + 0.25;\r\n                fillY = y - 0.5;\r\n                fillWidth = 0.75;\r\n                fillHeight = 0.5;\r\n                break;\r\n              case Direction.UP_RIGHT:\r\n                fillX = x - 0.5;\r\n                fillY = y - 0.5;\r\n                fillWidth = 0.75;\r\n                fillHeight = 0.5;\r\n                break;\r\n            }\r\n          }\r\n        } else if (tile instanceof Door) {\r\n          const door = tile as Door;\r\n          if (door.opened === true) computedAlpha = computedAlpha / 2;\r\n          switch (door.doorDir) {\r\n            case Direction.UP:\r\n              fillY = y - 0.5;\r\n              fillHeight = 1.5;\r\n              break;\r\n            case Direction.DOWN:\r\n              fillY = y - 0.5;\r\n              fillHeight = 1.5;\r\n              break;\r\n            case Direction.RIGHT:\r\n              fillX = x - 0.5;\r\n              fillY = y - 1.25;\r\n              fillWidth = 1.5;\r\n              fillHeight = 2;\r\n              break;\r\n            case Direction.LEFT:\r\n              fillX = x;\r\n              fillY = y - 1.25;\r\n              fillWidth = 1.5;\r\n              fillHeight = 2;\r\n              break;\r\n          }\r\n        }\r\n        const alphaMultiplier = !GameConstants.SMOOTH_LIGHTING ? 0.5 : 1.25;\r\n\r\n        const fillStyle = `rgba(0, 0, 0, ${computedAlpha * alphaMultiplier})`;\r\n\r\n        if (fillStyle !== lastFillStyle) {\r\n          this.shadeOffscreenCtx.fillStyle = fillStyle;\r\n          lastFillStyle = fillStyle;\r\n        }\r\n\r\n        this.shadeOffscreenCtx.fillRect(\r\n          (fillX - this.roomX + offsetX) * GameConstants.TILESIZE,\r\n          (fillY - this.roomY + offsetY) * GameConstants.TILESIZE,\r\n          fillWidth * GameConstants.TILESIZE,\r\n          fillHeight * GameConstants.TILESIZE,\r\n        );\r\n      }\r\n    }\r\n\r\n    // Choose blur method based on setting\r\n    if (GameConstants.USE_WEBGL_BLUR) {\r\n      // Use WebGL blur with caching\r\n      const blurRenderer = WebGLBlurRenderer.getInstance();\r\n\r\n      // Check if we can use cached results\r\n      if (this.shouldUseBlurCache() && this.blurCache.shade5px) {\r\n        // Use cached blurred result\r\n        Game.ctx.globalAlpha = 1;\r\n        Game.ctx.drawImage(\r\n          this.blurCache.shade5px,\r\n          (this.roomX - offsetX) * GameConstants.TILESIZE,\r\n          (this.roomY - offsetY) * GameConstants.TILESIZE,\r\n        );\r\n      } else {\r\n        // Generate new blur and cache if inactive\r\n        Game.ctx.globalAlpha = 1;\r\n\r\n        // Apply 5px blur using WebGL\r\n        const blurred5px = blurRenderer.applyBlur(this.shadeOffscreenCanvas, 5);\r\n        Game.ctx.drawImage(\r\n          blurred5px,\r\n          (this.roomX - offsetX) * GameConstants.TILESIZE,\r\n          (this.roomY - offsetY) * GameConstants.TILESIZE,\r\n        );\r\n\r\n        // Cache the result if room is inactive\r\n        if (!this.active) {\r\n          this.cacheBlurResult(\"shade5px\", blurred5px);\r\n        }\r\n      }\r\n    } else {\r\n      // Use Canvas2D blur (fallback) - matching original settings\r\n      Game.ctx.globalAlpha = 1;\r\n\r\n      const blurAmount = !GameConstants.SMOOTH_LIGHTING ? 5 : 5;\r\n\r\n      if (GameConstants.ctxBlurEnabled) {\r\n        Game.ctx.filter = `blur(${blurAmount}px)`;\r\n      }\r\n\r\n      Game.ctx.drawImage(\r\n        this.shadeOffscreenCanvas,\r\n        (this.roomX - offsetX) * GameConstants.TILESIZE,\r\n        (this.roomY - offsetY) * GameConstants.TILESIZE,\r\n      );\r\n\r\n      Game.ctx.filter = \"none\";\r\n    }\r\n\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  // Build the unblurred shade offscreen using the exact logic as drawShadeLayer's fill pass\r\n  private buildShadeOffscreenForSlicing = () => {\r\n    // Clear the offscreen shade canvas\r\n    this.shadeOffscreenCtx.clearRect(\r\n      0,\r\n      0,\r\n      this.shadeOffscreenCanvas.width,\r\n      this.shadeOffscreenCanvas.height,\r\n    );\r\n\r\n    const offsetX = this.blurOffsetX;\r\n    const offsetY = this.blurOffsetY;\r\n\r\n    let lastFillStyle = \"\";\r\n\r\n    for (let x = this.roomX - 2; x < this.roomX + this.width + 4; x++) {\r\n      for (let y = this.roomY - 2; y < this.roomY + this.height + 4; y++) {\r\n        const tile = this.roomArray[x]?.[y];\r\n        let alpha =\r\n          this.softVis[x] && this.softVis[x][y] ? this.softVis[x][y] : 0;\r\n        if (tile instanceof WallTorch) continue;\r\n        let factor = !GameConstants.SMOOTH_LIGHTING ? 2 : 1;\r\n        let smoothFactor = !GameConstants.SMOOTH_LIGHTING ? 0 : 1;\r\n        let computedAlpha = alpha ** factor * smoothFactor;\r\n\r\n        let fillX = x;\r\n        let fillY = y;\r\n        let fillWidth = 1;\r\n        let fillHeight = 1;\r\n        if (tile instanceof Wall) {\r\n          const wall = tile as Wall;\r\n          if (!this.innerWalls.includes(wall)) {\r\n            switch (wall.direction) {\r\n              case Direction.UP:\r\n                fillY = y - 0.5;\r\n                fillHeight = 0.5;\r\n                break;\r\n              case Direction.DOWN:\r\n                fillY = y - 0.5;\r\n                fillHeight = 1.5;\r\n                break;\r\n              case Direction.LEFT:\r\n                fillX = x + 0.25;\r\n                fillWidth = 0.75;\r\n                break;\r\n              case Direction.RIGHT:\r\n                fillX = x;\r\n                fillWidth = 0.75;\r\n                break;\r\n              case Direction.DOWN_LEFT:\r\n                fillX = x + 0.25;\r\n                fillY = y - 0.5;\r\n                fillWidth = 0.75;\r\n                fillHeight = 1.5;\r\n                break;\r\n              case Direction.DOWN_RIGHT:\r\n                fillX = x;\r\n                fillY = y - 0.5;\r\n                fillWidth = 0.75;\r\n                fillHeight = 1.5;\r\n                break;\r\n              case Direction.UP_LEFT:\r\n                fillX = x + 0.25;\r\n                fillY = y - 0.5;\r\n                fillWidth = 0.75;\r\n                fillHeight = 0.5;\r\n                break;\r\n              case Direction.UP_RIGHT:\r\n                fillX = x - 0.5;\r\n                fillY = y - 0.5;\r\n                fillWidth = 0.75;\r\n                fillHeight = 0.5;\r\n                break;\r\n            }\r\n          }\r\n        } else if (tile instanceof Door) {\r\n          const door = tile as Door;\r\n          if (door.opened === true) {\r\n            computedAlpha = computedAlpha / 2;\r\n            switch (door.doorDir) {\r\n              case Direction.UP:\r\n                fillY = y - 1.5;\r\n                fillHeight = 1.5;\r\n                fillWidth = 2;\r\n                fillX = x - 0.5;\r\n                break;\r\n              case Direction.DOWN:\r\n                fillY = y - 0.5;\r\n                fillHeight = 1.5;\r\n                fillWidth = 2;\r\n                fillX = x - 0.5;\r\n                break;\r\n              case Direction.RIGHT:\r\n                fillX = x - 2;\r\n                fillY = y - 2;\r\n                fillWidth = 3;\r\n                fillHeight = 3;\r\n                break;\r\n              case Direction.LEFT:\r\n                fillX = x;\r\n                fillY = y - 2;\r\n                fillWidth = 3;\r\n                fillHeight = 3;\r\n                break;\r\n            }\r\n          } else {\r\n            switch (door.doorDir) {\r\n              case Direction.UP:\r\n                fillY = y - 0.5;\r\n                fillHeight = 1.5;\r\n                break;\r\n              case Direction.DOWN:\r\n                fillY = y - 1;\r\n                fillHeight = 3;\r\n                fillWidth = 3;\r\n                fillX = x - 0.5;\r\n                break;\r\n              case Direction.RIGHT:\r\n                fillX = x - 2;\r\n                fillY = y - 2;\r\n                fillWidth = 3;\r\n                fillHeight = 3;\r\n                break;\r\n              case Direction.LEFT:\r\n                fillX = x;\r\n                fillY = y - 2;\r\n                fillWidth = 3;\r\n                fillHeight = 3;\r\n                break;\r\n            }\r\n          }\r\n        }\r\n        const alphaMultiplier = !GameConstants.SMOOTH_LIGHTING ? 0.5 : 1;\r\n        const fillStyle = `rgba(0, 0, 0, ${computedAlpha * alphaMultiplier})`;\r\n        if (fillStyle !== lastFillStyle) {\r\n          this.shadeOffscreenCtx.fillStyle = fillStyle;\r\n          lastFillStyle = fillStyle;\r\n        }\r\n        fillY += 1;\r\n        fillX += 1;\r\n        this.shadeOffscreenCtx.fillRect(\r\n          (fillX - this.roomX + offsetX) * GameConstants.TILESIZE,\r\n          (fillY - this.roomY + offsetY) * GameConstants.TILESIZE,\r\n          fillWidth * GameConstants.TILESIZE,\r\n          fillHeight * GameConstants.TILESIZE,\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // Returns a blurred shade canvas to sample slices from, reusing the WebGL blur/cache when possible\r\n  private getBlurredShadeSourceForSlicing = (): HTMLCanvasElement => {\r\n    if (GameConstants.USE_WEBGL_BLUR) {\r\n      const blurRenderer = WebGLBlurRenderer.getInstance();\r\n      if (this.shouldUseBlurCache() && this.blurCache.shade5px) {\r\n        return this.blurCache.shade5px as HTMLCanvasElement;\r\n      } else {\r\n        // Blur radius should match layer draw\r\n        const blurred5px = blurRenderer.applyBlur(this.shadeOffscreenCanvas, 8);\r\n        if (!this.active) this.cacheBlurResult(\"shade5px\", blurred5px);\r\n        return blurred5px;\r\n      }\r\n    } else {\r\n      // Canvas2D blur path: we cannot use ctx.filter during main slicing draws.\r\n      // So we pre-blur into a temporary canvas once.\r\n      if (!this.shadeBlurTempCanvas) {\r\n        this.shadeBlurTempCanvas = document.createElement(\"canvas\");\r\n        this.shadeBlurTempCanvas.width = this.shadeOffscreenCanvas.width;\r\n        this.shadeBlurTempCanvas.height = this.shadeOffscreenCanvas.height;\r\n        this.shadeBlurTempCtx = this.shadeBlurTempCanvas.getContext(\r\n          \"2d\",\r\n        ) as CanvasRenderingContext2D;\r\n      }\r\n      const tctx = this.shadeBlurTempCtx as CanvasRenderingContext2D;\r\n      tctx.clearRect(\r\n        0,\r\n        0,\r\n        this.shadeBlurTempCanvas!.width,\r\n        this.shadeBlurTempCanvas!.height,\r\n      );\r\n      if (GameConstants.ctxBlurEnabled) {\r\n        tctx.filter = `blur(5px)`;\r\n      } else {\r\n        tctx.filter = \"none\";\r\n      }\r\n      // Draw offscreen into temp at 0,0 (coordinates already include internal padding)\r\n      tctx.drawImage(this.shadeOffscreenCanvas, 0, 0);\r\n      tctx.filter = \"none\";\r\n      return this.shadeBlurTempCanvas as HTMLCanvasElement;\r\n    }\r\n  };\r\n\r\n  // Draw shade slices directly above a given tile\r\n  private drawShadeSliceForTile = (\r\n    shadeSrc: HTMLCanvasElement,\r\n    tileX: number,\r\n    tileY: number,\r\n    fadeDir?: \"left\" | \"right\" | \"up\" | \"down\",\r\n  ) => {\r\n    const ts = GameConstants.TILESIZE;\r\n    // Source position in the blurred offscreen matches drawShadeLayer mapping\r\n    const sx = (tileX + 1 - this.roomX + this.blurOffsetX) * ts;\r\n    const sy = (tileY + 1 - this.roomY + this.blurOffsetY) * ts;\r\n    const dx = tileX * ts;\r\n    const dy = tileY * ts;\r\n    if (!fadeDir) {\r\n      Game.ctx.drawImage(shadeSrc, sx, sy, ts, ts, dx, dy, ts, ts);\r\n      return;\r\n    }\r\n\r\n    // Lazy init temp slice canvas\r\n    if (!this.shadeSliceTempCanvas) {\r\n      this.shadeSliceTempCanvas = document.createElement(\"canvas\");\r\n      this.shadeSliceTempCanvas.width = ts;\r\n      this.shadeSliceTempCanvas.height = ts;\r\n      this.shadeSliceTempCtx = this.shadeSliceTempCanvas.getContext(\r\n        \"2d\",\r\n      ) as CanvasRenderingContext2D;\r\n    }\r\n    const tctx = this.shadeSliceTempCtx as CanvasRenderingContext2D;\r\n    tctx.clearRect(0, 0, ts, ts);\r\n    // Copy slice into temp\r\n    tctx.globalCompositeOperation = \"source-over\";\r\n    tctx.drawImage(shadeSrc, sx, sy, ts, ts, 0, 0, ts, ts);\r\n    // Apply gradient alpha mask (destination-in)\r\n    let grad: CanvasGradient | null = null;\r\n    if (fadeDir === \"right\") {\r\n      grad = tctx.createLinearGradient(0, 0, ts, 0);\r\n      grad.addColorStop(0, \"rgba(0,0,0,0)\");\r\n      grad.addColorStop(1, \"rgba(0,0,0,1)\");\r\n    } else if (fadeDir === \"left\") {\r\n      grad = tctx.createLinearGradient(0, 0, ts, 0);\r\n      grad.addColorStop(0, \"rgba(0,0,0,1)\");\r\n      grad.addColorStop(1, \"rgba(0,0,0,0)\");\r\n    } else if (fadeDir === \"up\") {\r\n      grad = tctx.createLinearGradient(0, 0, 0, ts);\r\n      grad.addColorStop(0, \"rgba(0,0,0,0)\");\r\n      grad.addColorStop(1, \"rgba(0,0,0,1)\");\r\n    } else if (fadeDir === \"down\") {\r\n      grad = tctx.createLinearGradient(0, 0, 0, ts);\r\n      grad.addColorStop(0, \"rgba(0,0,0,1)\");\r\n      grad.addColorStop(1, \"rgba(0,0,0,0)\");\r\n    }\r\n    if (grad) {\r\n      tctx.globalCompositeOperation = \"destination-in\";\r\n      tctx.fillStyle = grad;\r\n      tctx.fillRect(0, 0, ts, ts);\r\n    }\r\n    // Blit to main ctx\r\n    Game.ctx.drawImage(this.shadeSliceTempCanvas as HTMLCanvasElement, dx, dy);\r\n  };\r\n\r\n  drawBloomLayer = (delta: number) => {\r\n    if (!this.onScreen) return;\r\n\r\n    Game.ctx.save();\r\n    // Clear the offscreen shade canvas\r\n    this.bloomOffscreenCtx.clearRect(\r\n      0,\r\n      0,\r\n      this.bloomOffscreenCanvas.width,\r\n      this.bloomOffscreenCanvas.height,\r\n    );\r\n    const offsetX = this.blurOffsetX;\r\n    const offsetY = this.blurOffsetY;\r\n\r\n    let lastFillStyle = \"\";\r\n\r\n    // Draw all bloom rectangles without any filters\r\n    const allEntities = this.entities.concat(this.deadEntities);\r\n    if (allEntities.length > 0)\r\n      for (let e of this.entities) {\r\n        if (e.hasBloom) {\r\n          e.updateBloom(delta);\r\n          this.bloomOffscreenCtx.globalAlpha =\r\n            1 * (1 - this.softVis[e.x][e.y]) * e.softBloomAlpha;\r\n          this.bloomOffscreenCtx.fillStyle = e.bloomColor;\r\n\r\n          this.bloomOffscreenCtx.fillRect(\r\n            (e.x - e.drawX - this.roomX + offsetX + 0.5 - e.bloomSize / 2) *\r\n              GameConstants.TILESIZE,\r\n            (e.y -\r\n              e.drawY -\r\n              this.roomY -\r\n              0.5 +\r\n              offsetY +\r\n              0.5 -\r\n              e.bloomSize / 2) *\r\n              GameConstants.TILESIZE +\r\n              e.bloomOffsetY,\r\n            GameConstants.TILESIZE * e.bloomSize,\r\n            GameConstants.TILESIZE * e.bloomSize,\r\n          );\r\n        }\r\n      }\r\n\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        if (this.roomArray[x][y].hasBloom) {\r\n          this.roomArray[x][y].updateBloom(delta);\r\n          this.bloomOffscreenCtx.globalAlpha =\r\n            1 * (1 - this.softVis[x][y]) * this.roomArray[x][y].softBloomAlpha;\r\n          this.bloomOffscreenCtx.fillStyle = this.roomArray[x][y].bloomColor;\r\n\r\n          this.bloomOffscreenCtx.fillRect(\r\n            (x - this.roomX + offsetX) * GameConstants.TILESIZE,\r\n            (y - this.roomY - 0.25 + offsetY) * GameConstants.TILESIZE,\r\n            GameConstants.TILESIZE,\r\n            GameConstants.TILESIZE * 0.75,\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.projectiles.length > 0)\r\n      for (let p of this.projectiles) {\r\n        if (p.hasBloom) {\r\n          p.updateBloom(delta);\r\n          this.bloomOffscreenCtx.globalAlpha =\r\n            1 * (1 - this.softVis[p.x][p.y]) * p.softBloomAlpha;\r\n          this.bloomOffscreenCtx.fillStyle = p.bloomColor;\r\n\r\n          this.bloomOffscreenCtx.fillRect(\r\n            (p.x - this.roomX + offsetX) * GameConstants.TILESIZE,\r\n            (p.y - this.roomY + offsetY + p.bloomOffsetY) *\r\n              GameConstants.TILESIZE,\r\n            GameConstants.TILESIZE,\r\n            GameConstants.TILESIZE,\r\n          );\r\n        }\r\n      }\r\n\r\n    // Choose blur method based on setting\r\n    if (GameConstants.USE_WEBGL_BLUR) {\r\n      // Use WebGL blur with caching\r\n      const blurRenderer = WebGLBlurRenderer.getInstance();\r\n\r\n      // Check if we can use cached results\r\n      if (this.shouldUseBlurCache() && this.blurCache.bloom8px) {\r\n        // Use cached blurred result\r\n        Game.ctx.globalCompositeOperation = \"screen\";\r\n        Game.ctx.globalAlpha = 1;\r\n        Game.ctx.drawImage(\r\n          this.blurCache.bloom8px,\r\n          (this.roomX - offsetX) * GameConstants.TILESIZE,\r\n          (this.roomY - offsetY) * GameConstants.TILESIZE,\r\n        );\r\n      } else {\r\n        // Generate new blur and cache if inactive\r\n        Game.ctx.globalCompositeOperation = \"screen\";\r\n        Game.ctx.globalAlpha = 1;\r\n\r\n        // Apply 8px blur using WebGL\r\n        const blurred8px = blurRenderer.applyBlur(this.bloomOffscreenCanvas, 8);\r\n        Game.ctx.drawImage(\r\n          blurred8px,\r\n          (this.roomX - offsetX) * GameConstants.TILESIZE,\r\n          (this.roomY - offsetY) * GameConstants.TILESIZE,\r\n        );\r\n\r\n        // Cache the result if room is inactive\r\n        if (!this.active) {\r\n          this.cacheBlurResult(\"bloom8px\", blurred8px);\r\n        }\r\n      }\r\n    } else {\r\n      // Use Canvas2D blur (fallback) - matching original settings\r\n      Game.ctx.globalCompositeOperation = \"screen\";\r\n      Game.ctx.globalAlpha = 1;\r\n\r\n      if (GameConstants.ctxBlurEnabled) {\r\n        Game.ctx.filter = \"blur(8px)\";\r\n      }\r\n\r\n      Game.ctx.drawImage(\r\n        this.bloomOffscreenCanvas,\r\n        (this.roomX - offsetX) * GameConstants.TILESIZE,\r\n        (this.roomY - offsetY) * GameConstants.TILESIZE,\r\n      );\r\n\r\n      Game.ctx.filter = \"none\";\r\n    }\r\n\r\n    this.bloomOffscreenCtx.fillStyle = \"rgba(0, 0, 0, 1)\";\r\n    this.bloomOffscreenCtx.fillRect(\r\n      0,\r\n      0,\r\n      this.bloomOffscreenCanvas.width,\r\n      this.bloomOffscreenCanvas.height,\r\n    );\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawEntities = (delta: number, skipLocalPlayer?: boolean) => {\r\n    if (!this.onScreen) return;\r\n\r\n    Game.ctx.save();\r\n    // If using inline sliced shade, prepare the blurred shade source once\r\n    let useInlineShade =\r\n      GameConstants.SHADE_ENABLED && GameConstants.SHADE_INLINE_IN_ENTITY_LAYER;\r\n    let shadeSrc: HTMLCanvasElement | null = null;\r\n    if (useInlineShade) {\r\n      // Build unblurred shade and get blurred source\r\n      this.buildShadeOffscreenForSlicing();\r\n      shadeSrc = this.getBlurredShadeSourceForSlicing();\r\n    }\r\n\r\n    let tiles = [];\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        const tile = this.roomArray[x][y];\r\n        tile.drawUnderPlayer(delta);\r\n        tiles.push(tile);\r\n      }\r\n    }\r\n\r\n    let drawables = new Array<Drawable>();\r\n    let entities = new Array<Entity>();\r\n    entities = entities.concat(this.entities, this.deadEntities);\r\n\r\n    drawables = drawables.concat(\r\n      tiles,\r\n      this.decorations,\r\n      entities,\r\n      this.hitwarnings,\r\n      this.projectiles,\r\n      this.particles,\r\n      this.items,\r\n    );\r\n\r\n    for (const i in this.game.players) {\r\n      if ((this.game.players[i] as any).getRoom?.() === this) {\r\n        if (\r\n          !(\r\n            skipLocalPlayer &&\r\n            this.game.players[i] === this.game.players[this.game.localPlayerID]\r\n          )\r\n        )\r\n          drawables.push(this.game.players[i]);\r\n      }\r\n    }\r\n\r\n    drawables.sort((a, b) => {\r\n      if (a instanceof Floor || a instanceof SpawnFloor) {\r\n        return -1;\r\n      } else if (b instanceof Floor || b instanceof SpawnFloor) {\r\n        return 1;\r\n      } else if (a instanceof Decoration) {\r\n        return -1;\r\n      } else if (b instanceof Decoration) {\r\n        return 1;\r\n      }\r\n      if (Math.abs(a.drawableY - b.drawableY) < 0.1) {\r\n        const aAbove = (a as any).shouldDrawAbovePlayer === true;\r\n        const bAbove = (b as any).shouldDrawAbovePlayer === true;\r\n        // Special-case: when tied in Y, draw flagged objects above players\r\n        if (a instanceof Player && bAbove) {\r\n          return -1; // player before flagged -> flagged drawn later\r\n        } else if (b instanceof Player && aAbove) {\r\n          return 1; // flagged after player\r\n        }\r\n        // Default near-equal behavior\r\n        if (a instanceof Player) {\r\n          return 1;\r\n        } else if (b instanceof Player) {\r\n          return -1;\r\n        } else if (a instanceof Entity) {\r\n          return 1;\r\n        } else if (b instanceof Entity) {\r\n          return -1;\r\n        } else if (a instanceof Particle) {\r\n          return 1;\r\n        } else if (b instanceof Particle) {\r\n          return -1;\r\n        } else return 0;\r\n      } else {\r\n        return a.drawableY - b.drawableY;\r\n      }\r\n    });\r\n\r\n    // Draw in sorted order; apply inline tile shade immediately after each tile\r\n    for (const d of drawables) {\r\n      d.draw(delta);\r\n      if (useInlineShade && shadeSrc && d instanceof Tile) {\r\n        const tx = (d as Tile).x;\r\n        const ty = (d as Tile).y;\r\n        const sv =\r\n          this.softVis[tx] && this.softVis[tx][ty] ? this.softVis[tx][ty] : 0;\r\n        if (sv > 0) {\r\n          const prevOp = Game.ctx\r\n            .globalCompositeOperation as GlobalCompositeOperation;\r\n          if (\r\n            prevOp !==\r\n            (GameConstants.SHADE_LAYER_COMPOSITE_OPERATION as GlobalCompositeOperation)\r\n          ) {\r\n            Game.ctx.globalCompositeOperation =\r\n              GameConstants.SHADE_LAYER_COMPOSITE_OPERATION as GlobalCompositeOperation;\r\n          }\r\n\r\n          const prevAlpha = Game.ctx.globalAlpha;\r\n          Game.ctx.globalAlpha = 1;\r\n\r\n          let fade: \"left\" | \"right\" | \"up\" | \"down\" | undefined;\r\n          if (d instanceof Door && d.opened) {\r\n            switch (d.doorDir) {\r\n              case Direction.LEFT:\r\n                fade = \"left\";\r\n                break;\r\n              case Direction.RIGHT:\r\n                fade = \"right\";\r\n                break;\r\n              case Direction.UP:\r\n                fade = undefined;\r\n                break;\r\n              case Direction.DOWN:\r\n                // No gradient mask for down doors\r\n                fade = \"down\";\r\n                break;\r\n            }\r\n          } else if (d instanceof Wall) {\r\n            const info = this.wallInfo.get(`${tx},${ty}`);\r\n            if (info && (info as any).isBelowDoorWall) {\r\n              const below = this.roomArray[tx]?.[ty + 1];\r\n              if (below instanceof Door && below.opened) {\r\n                if (below.doorDir === Direction.LEFT) fade = \"left\";\r\n                else if (below.doorDir === Direction.RIGHT) fade = \"right\";\r\n              }\r\n            }\r\n          }\r\n\r\n          this.drawShadeSliceForTile(shadeSrc, tx, ty, fade);\r\n          Game.ctx.globalAlpha = prevAlpha;\r\n          if (\r\n            prevOp !==\r\n            (GameConstants.SHADE_LAYER_COMPOSITE_OPERATION as GlobalCompositeOperation)\r\n          ) {\r\n            Game.ctx.globalCompositeOperation = prevOp;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.drawAbovePlayer(delta);\r\n    for (const i of this.items) {\r\n      i.drawTopLayer(delta);\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawAbovePlayer = (delta: number) => {\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        //if (this.softVis[x][y] < 1) this.roomArray[x][y].drawAbovePlayer(delta);\r\n      }\r\n    }\r\n  };\r\n\r\n  drawShade = (delta: number) => {\r\n    if (!this.onScreen) return;\r\n\r\n    Game.ctx.save();\r\n    let bestSightRadius = 0;\r\n    for (const p in this.game.players) {\r\n      Game.ctx.globalCompositeOperation = \"source-over\"; // \"soft-light\";\r\n      Game.ctx.globalAlpha = 1;\r\n      const player = this.game.players[p];\r\n      const playerRoom = (player as any).getRoom\r\n        ? (player as any).getRoom()\r\n        : this.level.rooms[player.levelID];\r\n      if (playerRoom === this && player.defaultSightRadius > bestSightRadius) {\r\n        bestSightRadius = this.game.players[p].defaultSightRadius;\r\n      }\r\n    }\r\n    let shadingAlpha = Math.max(0, Math.min(0.8, 2 / bestSightRadius));\r\n    if (GameConstants.ALPHA_ENABLED) {\r\n      Game.ctx.globalAlpha = 0.25; //this.shadeOpacity();\r\n      //Game.ctx.resetTransform();\r\n      //Game.ctx.fillStyle = \"#4a5d23\"; // hex dark misty green\r\n      Game.ctx.fillStyle = this.shadeColor;\r\n      Game.ctx.fillRect(\r\n        this.roomX * GameConstants.TILESIZE,\r\n        (this.roomY - 1) * GameConstants.TILESIZE,\r\n        this.width * GameConstants.TILESIZE,\r\n        (this.height + 1) * GameConstants.TILESIZE,\r\n      );\r\n      Game.ctx.globalAlpha = 1;\r\n      Game.ctx.globalCompositeOperation = \"source-over\";\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  shadeOpacity = () => {\r\n    if (this.active) {\r\n      return 0.25;\r\n    } else {\r\n      return 0.25;\r\n    }\r\n  };\r\n\r\n  drawOverShade = (delta: number) => {\r\n    Game.ctx.save();\r\n    for (const e of this.entities) {\r\n      e.drawTopLayer(delta); // health bars\r\n    }\r\n\r\n    for (const p of this.projectiles) {\r\n      p.drawTopLayer(delta);\r\n    }\r\n    //Game.ctx.globalCompositeOperation = \"overlay\";\r\n    for (const h of this.hitwarnings) {\r\n      h.drawTopLayer(delta);\r\n    }\r\n    //Game.ctx.globalCompositeOperation = \"source-over\";\r\n\r\n    for (const s of this.particles) {\r\n      s.drawTopLayer(delta);\r\n    }\r\n    // draw over dithered shading\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        this.roomArray[x][y].drawAboveShading(delta);\r\n      }\r\n    }\r\n    //added for coin animation\r\n    for (const i of this.items) {\r\n      i.drawAboveShading(delta);\r\n    }\r\n\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  // for stuff rendered on top of the player\r\n  drawTopLayer = (delta: number) => {\r\n    Game.ctx.save();\r\n\r\n    // gui stuff\r\n\r\n    // room name\r\n    let old = Game.ctx.font;\r\n    Game.ctx.font = GameConstants.SCRIPT_FONT_SIZE + \"px Script\";\r\n    Game.ctx.fillStyle = LevelConstants.LEVEL_TEXT_COLOR;\r\n    Game.fillText(\r\n      this.message,\r\n      GameConstants.WIDTH / 2 - Game.measureText(this.name).width / 2,\r\n      5,\r\n    );\r\n    Game.ctx.font = old;\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  // src/room.ts\r\n  createWallMask = (): HTMLCanvasElement => {\r\n    const maskCanvas = document.createElement(\"canvas\");\r\n    this.maskCanvases.push(maskCanvas); // <-- Track the canvas\r\n    maskCanvas.width = this.width * GameConstants.TILESIZE;\r\n    maskCanvas.height = this.height * GameConstants.TILESIZE;\r\n    const ctx = maskCanvas.getContext(\"2d\");\r\n    if (!ctx) {\r\n      throw new Error(\"Failed to create mask canvas context.\");\r\n    }\r\n\r\n    // Fill the canvas with opaque color\r\n    ctx.fillStyle = \"rgba(255, 255, 255, 1)\";\r\n    ctx.fillRect(\r\n      this.roomX * GameConstants.TILESIZE,\r\n      this.roomY * GameConstants.TILESIZE,\r\n      maskCanvas.width,\r\n      maskCanvas.height,\r\n    );\r\n\r\n    // Make wall areas transparent\r\n    /*\r\n    for (let x = this.roomX - 1; x < this.roomX + 1 + this.width; x++) {\r\n      for (let y = this.roomY - 1; y < this.roomY + 1 + this.height; y++) {\r\n        const tile = this.getTile(x, y);\r\n        if (tile instanceof Wall) {\r\n          let offsetY = 0;\r\n          if (tile.direction === Direction.DOWN) offsetY = 1;\r\n          ctx.clearRect(\r\n            (x - this.roomX) * GameConstants.TILESIZE,\r\n            (y - 1 - this.roomY) * GameConstants.TILESIZE,\r\n            GameConstants.TILESIZE,\r\n            GameConstants.TILESIZE,\r\n          );\r\n        }\r\n      }\r\n    }\r\n      */\r\n    return maskCanvas;\r\n  };\r\n\r\n  //calculate wall info for proper wall rendering\r\n  calculateWallInfo() {\r\n    this.wallInfo.clear();\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        const tile = this.getTile(x, y);\r\n        if (tile instanceof Wall || tile instanceof WallTorch) {\r\n          this.walls.push(tile);\r\n          const isTopWall = y === this.roomY;\r\n          const isBottomWall = y === this.roomY + this.height - 1;\r\n          const isLeftWall = x === this.roomX;\r\n          const isRightWall = x === this.roomX + this.width - 1;\r\n          const isInnerWall =\r\n            !isTopWall && !isBottomWall && !isLeftWall && !isRightWall;\r\n          const isBelowDoorWall =\r\n            y < this.roomY + this.height - 1 && this.getTile(x, y + 1)?.isDoor;\r\n          const isAboveDoorWall =\r\n            y < this.roomY + this.height - 1 && this.getTile(x, y - 1)?.isDoor;\r\n          const isDoorWall =\r\n            y < this.roomY + this.height && this.getTile(x, y + 1)?.isDoor;\r\n\r\n          let innerWallType = null;\r\n          if (isInnerWall) {\r\n            const hasWallAbove = this.getTile(x, y - 1) instanceof Wall;\r\n            const hasWallBelow = this.getTile(x, y + 1) instanceof Wall;\r\n\r\n            if (!hasWallAbove && hasWallBelow) {\r\n              innerWallType = \"topInner\";\r\n            } else if (hasWallAbove && !hasWallBelow) {\r\n              innerWallType = \"bottomInner\";\r\n            } else if (hasWallAbove && hasWallBelow) {\r\n              innerWallType = \"surroundedInner\";\r\n            } else {\r\n              innerWallType = \"isolatedInner\";\r\n            }\r\n          }\r\n\r\n          this.wallInfo.set(`${x},${y}`, {\r\n            isTopWall,\r\n            isBottomWall,\r\n            isLeftWall,\r\n            isRightWall,\r\n            isInnerWall,\r\n            isBelowDoorWall,\r\n            isDoorWall,\r\n            innerWallType,\r\n            isAboveDoorWall,\r\n            shouldDrawBottom:\r\n              isDoorWall ||\r\n              isBelowDoorWall ||\r\n              (isTopWall && !isLeftWall && !isRightWall) ||\r\n              isInnerWall,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and returns the darkest and lightest tiles in the room based on their visibility.\r\n   * Loops through the roomArray, sums all the vis values, sorts them, and identifies the extremes.\r\n   *\r\n   * @returns An object containing the darkest and lightest tiles with their coordinates and vis values.\r\n   */\r\n  getExtremeLuminance = (): {\r\n    darkest: { x: number; y: number; vis: number } | null;\r\n    lightest: { x: number; y: number; vis: number } | null;\r\n  } => {\r\n    const visValues: { x: number; y: number; vis: number }[] = [];\r\n\r\n    // Loop through each tile in the room\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        if (this.vis[x] && this.vis[x][y] !== undefined) {\r\n          visValues.push({ x, y, vis: this.vis[x][y] });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (visValues.length === 0) {\r\n      return { darkest: null, lightest: null };\r\n    }\r\n\r\n    // Sort the vis values in ascending order\r\n    visValues.sort((a, b) => a.vis - b.vis);\r\n\r\n    return {\r\n      darkest: visValues[visValues.length - 1],\r\n      lightest: visValues[0],\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Finds and returns the darkest and lightest tiles adjacent to a given point.\r\n   * It checks the tiles above, below, to the left, and to the right of the specified point.\r\n   *\r\n   * @param px - The x-coordinate of the reference point.\r\n   * @param py - The y-coordinate of the reference point.\r\n   * @returns An object containing the darkest and lightest adjacent tiles with their coordinates and vis values,\r\n   *          or null if no valid adjacent tiles are found.\r\n   */\r\n  getExtremeLuminanceFromPoint = (\r\n    px: number,\r\n    py: number,\r\n  ): {\r\n    darkest: { x: number; y: number; vis: number } | null;\r\n    lightest: { x: number; y: number; vis: number } | null;\r\n  } => {\r\n    const adjacentPositions = [\r\n      { x: px, y: py - 1 }, // Up\r\n      { x: px, y: py + 1 }, // Down\r\n      { x: px - 1, y: py }, // Left\r\n      { x: px + 1, y: py }, // Right\r\n    ];\r\n\r\n    const visValues: { x: number; y: number; vis: number }[] = [];\r\n\r\n    adjacentPositions.forEach((pos) => {\r\n      const { x, y } = pos;\r\n      if (this.vis[x] && this.vis[x][y] !== undefined) {\r\n        if (this.roomArray[x] && this.roomArray[x][y]) {\r\n          if (this.roomArray[x][y] instanceof Floor) {\r\n            visValues.push({ x, y, vis: this.vis[x][y] });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (visValues.length === 0) {\r\n      return { darkest: null, lightest: null };\r\n    }\r\n\r\n    // Sort the vis values in ascending order\r\n    visValues.sort((a, b) => a.vis - b.vis);\r\n\r\n    return {\r\n      darkest: visValues[visValues.length - 1],\r\n      lightest: visValues[0],\r\n    };\r\n  };\r\n\r\n  getAverageLuminance = (): number => {\r\n    let total = 0;\r\n    let count = 0;\r\n    for (let x = this.roomX - 2; x <= this.roomX + 2; x++) {\r\n      if (this.roomArray[x] && this.roomArray[x][this.roomY]) {\r\n        for (let y = this.roomY - 2; y <= this.roomY + 2; y++) {\r\n          if (this.vis[x][y]) {\r\n            total += this.vis[x][y];\r\n            count++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return total / count;\r\n  };\r\n\r\n  // #endregion\r\n\r\n  // #region UTILITIES\r\n\r\n  pointInside(\r\n    x: number,\r\n    y: number,\r\n    rX: number,\r\n    rY: number,\r\n    rW: number,\r\n    rH: number,\r\n  ): boolean {\r\n    if (x < rX || x >= rX + rW) return false;\r\n    if (y < rY || y >= rY + rH) return false;\r\n    return true;\r\n  }\r\n\r\n  tileInside = (tileX: number, tileY: number): boolean => {\r\n    return this.pointInside(\r\n      tileX,\r\n      tileY,\r\n      this.roomX,\r\n      this.roomY,\r\n      this.width,\r\n      this.height,\r\n    );\r\n  };\r\n\r\n  getEmptyTiles = (): Tile[] => {\r\n    let returnVal: Tile[] = [];\r\n    for (let x = this.roomX + 1; x < this.roomX + this.width - 1; x++) {\r\n      for (let y = this.roomY + 1; y < this.roomY + this.height - 1; y++) {\r\n        if (\r\n          !this.roomArray[x][y].isSolid() &&\r\n          !(this.roomArray[x][y] instanceof SpikeTrap) &&\r\n          !(this.roomArray[x][y] instanceof SpawnFloor) &&\r\n          !(this.roomArray[x][y] instanceof UpLadder) &&\r\n          !(this.roomArray[x][y] instanceof DownLadder)\r\n        ) {\r\n          returnVal.push(this.roomArray[x][y]);\r\n        }\r\n      }\r\n    }\r\n    for (const e of this.entities) {\r\n      returnVal = returnVal.filter((t) => !e.pointIn(t.x, t.y));\r\n    }\r\n    return returnVal;\r\n  };\r\n\r\n  getTile = (x: number, y: number) => {\r\n    if (this.roomArray[x]) return this.roomArray[x][y];\r\n    else return undefined;\r\n  };\r\n\r\n  getBossDoor = () => {\r\n    for (const door of this.doors) {\r\n      if (door.linkedDoor.room.type === RoomType.DOWNLADDER)\r\n        return { x: door.x, y: door.y, doorDir: door.doorDir };\r\n    }\r\n    return null;\r\n  };\r\n\r\n  path = (): Room[] => {\r\n    // Traverse rooms via linked doors (BFS), tracking visited by room globalId\r\n    const visited = new Set<string>();\r\n    const connectedRooms: Room[] = [];\r\n    const queue: Room[] = [this as unknown as Room];\r\n\r\n    while (queue.length > 0) {\r\n      const current = queue.shift();\r\n      if (!current) continue;\r\n      const gid = (current as any).globalId as string | undefined;\r\n      if (!gid || visited.has(gid)) continue;\r\n\r\n      visited.add(gid);\r\n      connectedRooms.push(current);\r\n\r\n      try {\r\n        const doors = (current as any).doors as Array<any>;\r\n        if (!doors) continue;\r\n        for (const door of doors) {\r\n          const linked = (door as any)?.linkedDoor;\r\n          const nextRoom = linked && (linked as any).room;\r\n          if (nextRoom) {\r\n            const nextGid = (nextRoom as any).globalId as string | undefined;\r\n            if (nextGid && !visited.has(nextGid)) {\r\n              queue.push(nextRoom);\r\n            }\r\n          }\r\n        }\r\n      } catch {}\r\n    }\r\n\r\n    return connectedRooms;\r\n  };\r\n\r\n  /**\r\n   * Returns true if this room contains an ladder tile.\r\n   */\r\n  hasLadder = (ladderType: \"up\" | \"down\"): boolean => {\r\n    for (let x = this.roomX; x < this.roomX + this.width; x++) {\r\n      if (!this.roomArray[x]) continue;\r\n      for (let y = this.roomY; y < this.roomY + this.height; y++) {\r\n        const t = this.roomArray[x][y];\r\n        if (t instanceof UpLadder && ladderType === \"up\") return true;\r\n        if (t instanceof DownLadder && ladderType === \"down\" && t.isSidePath)\r\n          return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  hasKey = (): boolean => {\r\n    for (const item of this.items) {\r\n      if (item instanceof Key) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Computes the shortest number of room hops (through linked doors) to reach\r\n   * a room that contains an `UpLadder`. Returns 0 if this room already has one,\r\n   * or null if no such room is reachable.\r\n   */\r\n  getDistanceToNearestLadder = (ladderType: \"up\" | \"down\"): number | null => {\r\n    const currentRoom = this;\r\n    if (currentRoom.hasLadder(ladderType)) return 0;\r\n\r\n    const visited = new Set<string>();\r\n    const queue: Array<{ room: Room; dist: number }> = [];\r\n\r\n    visited.add(currentRoom.globalId);\r\n    queue.push({ room: currentRoom, dist: 0 });\r\n\r\n    while (queue.length > 0) {\r\n      const { room, dist } = queue.shift();\r\n      for (const d of room.doors) {\r\n        const nextRoom = d && d.linkedDoor && d.linkedDoor.room;\r\n        if (!nextRoom) continue;\r\n        const gid = nextRoom.globalId;\r\n        if (visited.has(gid)) continue;\r\n        if (nextRoom.hasLadder(ladderType)) {\r\n          return dist + 1;\r\n        }\r\n        visited.add(gid);\r\n        queue.push({ room: nextRoom, dist: dist + 1 });\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  hasNoEnemies = () => {\r\n    let enemies = this.entities.filter((e) => e instanceof Enemy);\r\n    const cleared = enemies.length === 0 && this.lastEnemyCount > 0;\r\n\r\n    return cleared;\r\n  };\r\n\r\n  roomCleared = () => {\r\n    const enemies = this.entities.filter((e) => e instanceof Enemy);\r\n    return enemies.length === 0;\r\n  };\r\n\r\n  hasHitwarning = (x: number, y: number): boolean => {\r\n    /*\r\n    for (const e of this.entities) {\r\n      if (e instanceof Enemy && e.x === x && e.y === y) danger += 1;\r\n    }\r\n    */\r\n    for (const h of this.hitwarnings) {\r\n      if (h.x === x && h.y === y && !h.dead) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  hasEnemy = (x: number, y: number): boolean => {\r\n    for (const e of this.entities) {\r\n      if (e instanceof Enemy && e.x === x && e.y === y) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Checks if a tile at the given coordinates is empty (not solid and no entities).\r\n   * This is a comprehensive check that combines tile solidity and entity presence.\r\n   *\r\n   * @param x - The x-coordinate to check\r\n   * @param y - The y-coordinate to check\r\n   * @returns True if the tile is empty (walkable and no entities), false otherwise\r\n   */\r\n  isTileEmpty = (x: number, y: number): boolean => {\r\n    // First check if the position exists in the room array\r\n    if (!this.roomArray[x] || !this.roomArray[x][y]) {\r\n      return false;\r\n    }\r\n\r\n    const tile = this.roomArray[x][y];\r\n\r\n    // Check if the tile is solid\r\n    if (tile.isSolid()) {\r\n      return false;\r\n    }\r\n\r\n    // Check for specific tile types that should be considered non-empty\r\n    if (\r\n      tile instanceof SpikeTrap ||\r\n      tile instanceof SpawnFloor ||\r\n      tile instanceof UpLadder ||\r\n      tile instanceof DownLadder\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    // Check if there are any entities at this position\r\n    for (const entity of this.entities) {\r\n      if (entity.pointIn(x, y)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  hasEnemyInRadius = (x: number, y: number): boolean => {\r\n    const radius = 2;\r\n    const radiusSquared = radius * radius; // Calculate once\r\n\r\n    for (let dx = -radius; dx <= radius; dx++) {\r\n      for (let dy = -radius; dy <= radius; dy++) {\r\n        // Check if point is within radius (circular check)\r\n        if (dx * dx + dy * dy <= radiusSquared) {\r\n          const checkX = x + dx;\r\n          const checkY = y + dy;\r\n\r\n          // Add bounds checking if needed\r\n          if (this.hasEnemy(checkX, checkY)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  checkForNoEnemies = () => {\r\n    if (this.hasNoEnemies()) {\r\n      let bossFlag = false;\r\n      this.doors.forEach((d) => {\r\n        if (d.type === DoorType.GUARDEDDOOR) {\r\n          d.unGuard();\r\n          bossFlag = true;\r\n          this.game.startCameraAnimation(\r\n            this.getBossDoor().x,\r\n            this.getBossDoor().y,\r\n            175,\r\n          );\r\n        }\r\n      });\r\n      if (bossFlag) {\r\n        this.game.pushMessage(\r\n          \"The foes have been slain and the door allows you passage.\",\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // This pattern appears in multiple methods like addVendingMachine, addChests, addSpikes, etc.\r\n  getRandomEmptyPosition(\r\n    tiles: Tile[],\r\n    ignore?: { x: number; y: number },\r\n  ): { x: number; y: number } | null {\r\n    if (tiles.length === 0) return null;\r\n    const tile = tiles.splice(\r\n      Game.rand(0, tiles.length - 1, Random.rand),\r\n      1,\r\n    )[0];\r\n    if (ignore && tile.x === ignore.x && tile.y === ignore.y) {\r\n      return this.getRandomEmptyPosition(tiles, ignore);\r\n    }\r\n    return { x: tile.x, y: tile.y };\r\n  }\r\n\r\n  getBigRandomEmptyPosition(tiles: Tile[]): {\r\n    x: number;\r\n    y: number;\r\n  } {\r\n    if (tiles.length === 0) return null;\r\n\r\n    // Create a set for O(1) lookup of tile coordinates\r\n    const tileSet = new Set(tiles.map((t) => `${t.x},${t.y}`));\r\n\r\n    // Find all tiles that can be the top-left corner of a 2x2 patch\r\n    const bigTilePositions = tiles.filter((t) => {\r\n      // Check if this tile and the 3 adjacent tiles (right, below, diagonal) are all empty\r\n      return (\r\n        tileSet.has(`${t.x + 1},${t.y}`) && // right\r\n        tileSet.has(`${t.x},${t.y + 1}`) && // below\r\n        tileSet.has(`${t.x + 1},${t.y + 1}`)\r\n      ); // diagonal\r\n    });\r\n\r\n    if (bigTilePositions.length === 0) return null;\r\n\r\n    // Randomly select one of the valid 2x2 positions\r\n    const selectedTile =\r\n      bigTilePositions[Game.rand(0, bigTilePositions.length - 1, Random.rand)];\r\n    return { x: selectedTile.x, y: selectedTile.y };\r\n  }\r\n\r\n  /**\r\n   * Returns the top-left coordinates of an empty rectangular area of size w x h, or null if none.\r\n   * Uses only the provided tiles array, which should come from getEmptyTiles() or a filtered variant.\r\n   */\r\n  getEmptyAreaPosition(\r\n    tiles: Tile[],\r\n    w: number,\r\n    h: number,\r\n  ): { x: number; y: number } | null {\r\n    if (!tiles || tiles.length === 0) return null;\r\n    if (w <= 0 || h <= 0) return null;\r\n\r\n    // Build a set for O(1) membership checks\r\n    const tileSet = new Set(tiles.map((t) => `${t.x},${t.y}`));\r\n\r\n    // Candidate top-left tiles must themselves be empty\r\n    const candidates = tiles.filter((t) => {\r\n      // Early bounds check using room limits\r\n      if (\r\n        t.x + w > this.roomX + this.width ||\r\n        t.y + h > this.roomY + this.height ||\r\n        t.x < this.roomX ||\r\n        t.y < this.roomY\r\n      )\r\n        return false;\r\n\r\n      // Ensure entire w x h area is in the tile set\r\n      for (let dx = 0; dx < w; dx++) {\r\n        for (let dy = 0; dy < h; dy++) {\r\n          if (!tileSet.has(`${t.x + dx},${t.y + dy}`)) return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n\r\n    if (candidates.length === 0) return null;\r\n    const pick = candidates[Game.rand(0, candidates.length - 1, Random.rand)];\r\n    return { x: pick.x, y: pick.y };\r\n  }\r\n  // Used in populateUpLadder, populateDownLadder, populateRopeHole, populateRopeCave\r\n  getRoomCenter(): { x: number; y: number } {\r\n    return {\r\n      x: Math.floor(this.roomX + this.width / 2),\r\n      y: Math.floor(this.roomY + this.height / 2),\r\n    };\r\n  }\r\n\r\n  // Used in multiple methods including castShadowsAtAngle\r\n  isPositionInRoom(x: number, y: number): boolean {\r\n    return !(\r\n      Math.floor(x) < this.roomX ||\r\n      Math.floor(x) >= this.roomX + this.width ||\r\n      Math.floor(y) < this.roomY ||\r\n      Math.floor(y) >= this.roomY + this.height\r\n    );\r\n  }\r\n\r\n  pathIsBlockedBy(tile: Tile, otherTile: Tile): Entity[] {\r\n    const entities = [];\r\n    if (tile.isSolid()) entities.push(tile);\r\n    if (otherTile.isSolid()) entities.push(otherTile);\r\n    return entities;\r\n  }\r\n\r\n  // checks for obstructions between doors and finds paths avoiding obstacles.\r\n\r\n  removeDoorObstructions = () => {\r\n    let obstacles = [];\r\n    for (const door of this.doors) {\r\n      for (const otherDoor of this.doors) {\r\n        if (door === otherDoor || door === null || otherDoor === null) continue; // Fixed: use continue instead of break\r\n        const pathObstacles = this.findPath(door, otherDoor);\r\n        if (pathObstacles.length > 0) {\r\n          obstacles.push(...pathObstacles); // Fixed: actually collect the obstacles\r\n        }\r\n      }\r\n    }\r\n    if (obstacles.length > 0) {\r\n      for (let obstacle of obstacles) {\r\n        // console.log(`Removing obstacle at (${obstacle.x},${obstacle.y})`);\r\n        this.entities = this.entities.filter((e) => e !== obstacle);\r\n        obstacle = null;\r\n      }\r\n    }\r\n  };\r\n\r\n  // avoid blocking doorways with unbreakable entities\r\n  findPath = (\r\n    startTile: Tile,\r\n    targetTile: Tile,\r\n    additionalBlockedPositions?: astar.Position[],\r\n  ): Array<Entity> => {\r\n    let disablePositions = Array<astar.Position>();\r\n    let obstacleCandidates = [];\r\n\r\n    // Expand entity types that can block paths\r\n    for (const e of this.entities) {\r\n      if (\r\n        e instanceof VendingMachine ||\r\n        e instanceof Rock ||\r\n        e instanceof Barrel ||\r\n        e instanceof Crate ||\r\n        e instanceof Block ||\r\n        e instanceof TombStone ||\r\n        e instanceof PottedPlant\r\n      ) {\r\n        disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n        obstacleCandidates.push(e);\r\n      }\r\n    }\r\n\r\n    // Add any additional blocked positions (for testing if a position would block)\r\n    if (additionalBlockedPositions) {\r\n      disablePositions.push(...additionalBlockedPositions);\r\n    }\r\n\r\n    // Create a grid of the room - Fixed bounds\r\n    let grid = [];\r\n    for (let x = 0; x < this.width; x++) {\r\n      grid[x] = [];\r\n      for (let y = 0; y < this.height; y++) {\r\n        const roomX = this.roomX + x;\r\n        const roomY = this.roomY + y;\r\n        if (this.roomArray[roomX] && this.roomArray[roomX][roomY])\r\n          grid[x][y] = this.roomArray[roomX][roomY];\r\n        else grid[x][y] = false;\r\n      }\r\n    }\r\n\r\n    // Adjust start and target positions to grid coordinates\r\n    const startGridPos = {\r\n      x: startTile.x - this.roomX,\r\n      y: startTile.y - this.roomY,\r\n    };\r\n    const targetGridPos = {\r\n      x: targetTile.x - this.roomX,\r\n      y: targetTile.y - this.roomY,\r\n    };\r\n\r\n    // Adjust disabled positions to grid coordinates\r\n    const gridDisabledPositions = disablePositions.map((pos) => ({\r\n      x: pos.x - this.roomX,\r\n      y: pos.y - this.roomY,\r\n    }));\r\n\r\n    let moves = astar.AStar.search(\r\n      grid,\r\n      startGridPos,\r\n      targetGridPos,\r\n      gridDisabledPositions,\r\n      false,\r\n      false,\r\n      false,\r\n    );\r\n\r\n    if (moves.length === 0) {\r\n      return obstacleCandidates;\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Checks if placing an entity at the given coordinates would block any door-to-door paths.\r\n   * This is useful for preventing placement of objects that would obstruct navigation.\r\n   *\r\n   * @param x - The x-coordinate to test\r\n   * @param y - The y-coordinate to test\r\n   * @returns True if placing an entity here would block a door, false otherwise\r\n   */\r\n  wouldBlockDoor = (x: number, y: number): boolean => {\r\n    // If there are fewer than 2 doors, no paths to block\r\n    if (this.doors.length < 2) {\r\n      return false;\r\n    }\r\n\r\n    // Test each pair of doors\r\n    for (let i = 0; i < this.doors.length; i++) {\r\n      for (let j = i + 1; j < this.doors.length; j++) {\r\n        const door1 = this.doors[i];\r\n        const door2 = this.doors[j];\r\n\r\n        if (!door1 || !door2) continue;\r\n\r\n        // First test: can we find a path WITHOUT the blocking position?\r\n        const obstaclesWithoutBlock = this.findPath(door1, door2);\r\n\r\n        // If there's already no path without our test position, skip this door pair\r\n        if (obstaclesWithoutBlock.length > 0) {\r\n          continue;\r\n        }\r\n\r\n        // Second test: can we find a path WITH the blocking position?\r\n        const additionalBlockedPos = [{ x, y }];\r\n        const obstaclesWithBlock = this.findPath(\r\n          door1,\r\n          door2,\r\n          additionalBlockedPos,\r\n        );\r\n\r\n        // If path existed without block but doesn't exist with block, then this position blocks the door\r\n        if (obstaclesWithBlock.length > 0) {\r\n          console.warn(\"DOOR WOULD BE BLOCKED!\");\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Gets empty tiles that don't block door-to-door paths.\r\n   * This is a filtered version of getEmptyTiles() that excludes positions that would obstruct navigation.\r\n   *\r\n   * @returns Array of tiles that are empty and don't block door paths\r\n   */\r\n  getEmptyTilesNotBlockingDoors = (): Tile[] => {\r\n    const emptyTiles = this.getEmptyTiles();\r\n    return emptyTiles.filter((tile) => !this.wouldBlockDoor(tile.x, tile.y));\r\n  };\r\n\r\n  // #endregion\r\n\r\n  // #region KEY PATHFINDING HELPERS\r\n\r\n  /**\r\n   * Finds the shortest sequence of doors to traverse from this room to the target room.\r\n   * Returns an ordered array of doors that begins with a door in this room and ends with\r\n   * the door that enters the target room. If no path is found, returns null.\r\n   * If samePathOnly is true, restrict traversal to rooms that share the same pathId.\r\n   */\r\n  findShortestDoorPathTo = (\r\n    target: Room,\r\n    samePathOnly: boolean = true,\r\n  ): Door[] | null => {\r\n    if (!target) return null;\r\n    if (target === (this as unknown as Room)) return [];\r\n\r\n    try {\r\n      const start: Room = this as unknown as Room;\r\n      const targetGid = (target as any).globalId as string | undefined;\r\n      const startPathId = (start as any).pathId;\r\n\r\n      const queue: Room[] = [start];\r\n      const visited = new Set<string>();\r\n      const prev = new Map<\r\n        string,\r\n        { prevRoomGID: string | null; viaDoor: Door | null }\r\n      >();\r\n\r\n      const setIfUnset = (\r\n        gid: string,\r\n        value: { prevRoomGID: string | null; viaDoor: Door | null },\r\n      ) => {\r\n        if (!prev.has(gid)) prev.set(gid, value);\r\n      };\r\n\r\n      const getRoomGID = (r: Room | undefined) =>\r\n        (r as any)?.globalId as string | undefined;\r\n\r\n      const allowRoom = (r: Room) =>\r\n        !samePathOnly || (r as any).pathId === startPathId;\r\n\r\n      const startGid = getRoomGID(start);\r\n      if (!startGid) return null;\r\n      visited.add(startGid);\r\n      setIfUnset(startGid, { prevRoomGID: null, viaDoor: null });\r\n\r\n      while (queue.length > 0) {\r\n        const current = queue.shift();\r\n        if (!current) continue;\r\n        const currentGid = getRoomGID(current);\r\n        if (!currentGid) continue;\r\n\r\n        if (current === target) {\r\n          // Reconstruct door path by backtracking from target to start\r\n          const doors: Door[] = [];\r\n          let cursorGid: string | undefined = currentGid;\r\n          while (cursorGid && cursorGid !== startGid) {\r\n            const entry = prev.get(cursorGid);\r\n            if (!entry) break;\r\n            if (entry.viaDoor) doors.push(entry.viaDoor);\r\n            cursorGid = entry.prevRoomGID || undefined;\r\n          }\r\n          doors.reverse();\r\n          return doors;\r\n        }\r\n\r\n        const doors = (current as any).doors as Array<Door> | undefined;\r\n        if (!doors) continue;\r\n        for (const door of doors) {\r\n          const nextRoom = (door as any)?.linkedDoor?.room as Room | undefined;\r\n          if (!nextRoom) continue;\r\n          if (!allowRoom(nextRoom)) continue;\r\n          const nextGid = getRoomGID(nextRoom);\r\n          if (!nextGid || visited.has(nextGid)) continue;\r\n          visited.add(nextGid);\r\n          setIfUnset(nextGid, { prevRoomGID: currentGid, viaDoor: door });\r\n          queue.push(nextRoom);\r\n        }\r\n      }\r\n\r\n      return null;\r\n    } catch {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // getWalkableNeighborNear removed: we now allow dots on doors and downladders\r\n\r\n  /**\r\n   * Builds an in-room path (list of world tile positions) from (sx,sy) to (tx,ty).\r\n   * Uses the room's A* configuration. If the target tile is not walkable, pass a\r\n   * walkable adjacent tile as the target and append the original target afterwards for display.\r\n   */\r\n  buildTilePathPositions = (\r\n    sx: number,\r\n    sy: number,\r\n    tx: number,\r\n    ty: number,\r\n  ): Array<{ x: number; y: number }> => {\r\n    // Build grid mirroring findPath()\r\n    const grid: any[][] = [];\r\n    for (let x = 0; x < this.width; x++) {\r\n      grid[x] = [];\r\n      for (let y = 0; y < this.height; y++) {\r\n        const roomX = this.roomX + x;\r\n        const roomY = this.roomY + y;\r\n        if (this.roomArray[roomX] && this.roomArray[roomX][roomY])\r\n          grid[x][y] = this.roomArray[roomX][roomY];\r\n        else grid[x][y] = false;\r\n      }\r\n    }\r\n\r\n    const startGridPos = { x: sx - this.roomX, y: sy - this.roomY };\r\n    const targetGridPos = { x: tx - this.roomX, y: ty - this.roomY };\r\n\r\n    const moves = astar.AStar.search(\r\n      grid,\r\n      startGridPos,\r\n      targetGridPos,\r\n      undefined,\r\n      false,\r\n      false,\r\n      false,\r\n    );\r\n\r\n    const path = moves.map((m) => ({\r\n      x: m.pos.x + this.roomX,\r\n      y: m.pos.y + this.roomY,\r\n    }));\r\n    return path;\r\n  };\r\n\r\n  // #endregion\r\n\r\n  // #region MISC\r\n\r\n  /**\r\n   * Adds a new BeamEffect to the room.\r\n   *\r\n   * @param x1 - Starting tile X coordinate.\r\n   * @param y1 - Starting tile Y coordinate.\r\n   * @param x2 - Ending tile X coordinate.\r\n   * @param y2 - Ending tile Y coordinate.\r\n   */\r\n  public addBeamEffect(\r\n    x1: number,\r\n    y1: number,\r\n    x2: number,\r\n    y2: number,\r\n    parent: Entity,\r\n  ): void {\r\n    const beam = new BeamEffect(x1, y1, x2, y2, parent);\r\n    this.beamEffects.push(beam);\r\n  }\r\n\r\n  public async changeReverb(newImpulsePath: string) {\r\n    await ReverbEngine.setReverbImpulse(newImpulsePath);\r\n  }\r\n  get roomArea() {\r\n    let area = (this.width - 2) * (this.height - 2);\r\n    let openTiles = [];\r\n    for (let x = this.roomX + 1; x < this.roomX + this.width - 1; x++) {\r\n      for (let y = this.roomY + 1; y < this.roomY + this.height - 1; y++) {\r\n        if (this.roomArray[x][y] instanceof Floor) openTiles.push({ x, y });\r\n      }\r\n    }\r\n    //console.log(area, openTiles.length);\r\n    return openTiles.length;\r\n  }\r\n  /**\r\n   * Determines if the room is currently on screen.\r\n   * Uses a buffer of 2 tiles beyond the room's dimensions to account for partial visibility.\r\n   *\r\n   * @returns {boolean} - True if the room is on screen, otherwise false.\r\n   */\r\n  public roomOnScreen(player: Player) {\r\n    const tileSize = GameConstants.TILESIZE;\r\n\r\n    // Calculate room boundaries with a buffer of 2 tiles\r\n    const roomLeft = (this.roomX - 2) * tileSize;\r\n    const roomRight = (this.roomX + this.width + 2) * tileSize;\r\n    const roomTop = (this.roomY - 2) * tileSize;\r\n    const roomBottom = (this.roomY + this.height + 2) * tileSize;\r\n\r\n    // Convert player position from tiles to pixels\r\n    const playerPosX = player.x * tileSize;\r\n    const playerPosY = player.y * tileSize;\r\n\r\n    // Calculate camera position in pixels\r\n    const cameraX =\r\n      playerPosX -\r\n      player.drawX +\r\n      0.5 * tileSize -\r\n      0.5 * GameConstants.WIDTH -\r\n      this.game.screenShakeX; // X-coordinate of the camera's top-left corner\r\n    const cameraY =\r\n      playerPosY -\r\n      player.drawY +\r\n      0.5 * tileSize -\r\n      0.5 * GameConstants.HEIGHT - // Corrected from WIDTH to HEIGHT\r\n      this.game.screenShakeY; // Y-coordinate of the camera's top-left corner\r\n    const cameraWidth = GameConstants.WIDTH; // Corrected from innerWidth\r\n    const cameraHeight = GameConstants.HEIGHT; // Corrected from innerHeight\r\n\r\n    // Define the camera's boundaries\r\n    const cameraLeft = cameraX;\r\n    const cameraRight = cameraX + cameraWidth;\r\n    const cameraTop = cameraY;\r\n    const cameraBottom = cameraY + cameraHeight;\r\n\r\n    // Check if the room's boundaries overlap with the camera's view\r\n    const isOverlapping = !(\r\n      roomRight < cameraLeft ||\r\n      roomLeft > cameraRight ||\r\n      roomBottom < cameraTop ||\r\n      roomTop > cameraBottom\r\n    );\r\n\r\n    this.onScreen = isOverlapping;\r\n  }\r\n\r\n  private setReverb() {\r\n    const roomArea = this.roomArea;\r\n    if (roomArea < 10) {\r\n      this.changeReverb(`res/SFX/impulses/small.mp3`);\r\n    } else if (roomArea < 55) {\r\n      this.changeReverb(`res/SFX/impulses/medium.mp3`);\r\n    } else {\r\n      this.changeReverb(`res/SFX/impulses/large.mp3`);\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * Adds a door with offset to prevent overlapping doors.\r\n   * If a door already exists at the desired (x, y) position, it offsets the door randomly to either side.\r\n   * Ensures the new door is at least one tile away from the room's edge based on its direction.\r\n   *\r\n   * @param x - The x-coordinate for the door placement.\r\n   * @param y - The y-coordinate for the door placement.\r\n   * @param room - The Room object where the door is being placed. Defaults to the current room.\r\n   * @param tunnelDoor - Whether the door is a tunnel door. Defaults to false.\r\n   * @returns The created Door object or null if placement failed.\r\n   */\r\n  addDoorWithOffset = (\r\n    x: number,\r\n    y: number,\r\n    room: Room = this,\r\n    tunnelDoor: boolean = false,\r\n  ) => {\r\n    // Helper function to check if any vending machine is at a position\r\n    const hasVendingMachineAt = (checkX: number, checkY: number): boolean => {\r\n      return room.entities.some(\r\n        (entity) =>\r\n          entity instanceof VendingMachine &&\r\n          entity.x === checkX &&\r\n          entity.y === checkY,\r\n      );\r\n    };\r\n\r\n    // Check if a door already exists at the desired position\r\n    if (room.roomArray[x]?.[y] instanceof Door) {\r\n      // Determine the direction based on the door's position\r\n      let direction: Direction | null = null;\r\n      if (x === room.roomX) {\r\n        direction = Direction.RIGHT;\r\n      } else if (x === room.roomX + room.width - 1) {\r\n        direction = Direction.LEFT;\r\n      } else if (y === room.roomY) {\r\n        direction = Direction.DOWN;\r\n      } else if (y === room.roomY + room.height - 1) {\r\n        direction = Direction.UP;\r\n      }\r\n\r\n      if (!direction) {\r\n        // console.log(\"Invalid door position.\");\r\n        return null;\r\n      }\r\n\r\n      // Define possible offset adjustments based on door direction\r\n      const offsetOptions: Array<{ dx: number; dy: number }> = [];\r\n      switch (direction) {\r\n        case Direction.RIGHT:\r\n        case Direction.LEFT:\r\n          // Offsets along the y-axis for vertical walls\r\n          offsetOptions.push({ dx: 0, dy: 1 }, { dx: 0, dy: -1 });\r\n          break;\r\n      }\r\n\r\n      // Shuffle the offset options to randomize placement\r\n      const shuffledOffsets = offsetOptions.sort(() => Random.rand() - 0.5);\r\n\r\n      // Check if original position has vending machine\r\n      if (hasVendingMachineAt(x, y)) {\r\n        return null;\r\n      }\r\n\r\n      for (const offset of shuffledOffsets) {\r\n        const newX = x + offset.dx;\r\n        const newY = y + offset.dy;\r\n\r\n        // Ensure the new position is within bounds and not on the edge\r\n        const isWithinBounds =\r\n          newX > room.roomX &&\r\n          newX < room.roomX + room.width - 1 &&\r\n          newY > room.roomY &&\r\n          newY < room.roomY + room.height - 1;\r\n\r\n        if (\r\n          isWithinBounds &&\r\n          !(room.roomArray[newX]?.[newY] instanceof Door) &&\r\n          !hasVendingMachineAt(newX, newY)\r\n        ) {\r\n          // Offset the door placement\r\n          return room.addDoor(newX, newY, room, tunnelDoor);\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    // Check for vending machine at original position before placing door normally\r\n    if (hasVendingMachineAt(x, y)) {\r\n      return null;\r\n    }\r\n\r\n    // If no door exists at the desired position and no vending machine, place it normally\r\n    return room.addDoor(x, y, room, tunnelDoor);\r\n  };\r\n\r\n  findPathToDoor = (door: Door) => {\r\n    let disablePositions = Array<astar.Position>();\r\n    for (const e of this.entities) {\r\n      disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n    }\r\n    const path = astar.AStar.search(\r\n      this.roomArray,\r\n      this,\r\n      door,\r\n      [],\r\n      false,\r\n      false,\r\n      false,\r\n    );\r\n    return path;\r\n  };\r\n\r\n  /**\r\n   * Finds all wall tiles that do not have a door in them or adjacent to them.\r\n   * @returns An array of wall tiles without doors or adjacent doors.\r\n   */\r\n  getEmptyWall(): Wall[] {\r\n    const emptyWalls: Wall[] = [];\r\n\r\n    for (let x = this.roomX + 1; x < this.roomX + this.width - 1; x++) {\r\n      for (let y = this.roomY - 1; y < this.roomY + this.height - 1; y++) {\r\n        const tile = this.roomArray[x][y];\r\n\r\n        if (tile instanceof Wall || tile instanceof WallTorch) {\r\n          // Check if the current wall tile is not a door\r\n          if (!(tile instanceof Door)) {\r\n            // Check adjacent tiles for doors\r\n            const adjacentTiles = [\r\n              this.roomArray[x + 1]?.[y],\r\n              this.roomArray[x - 1]?.[y],\r\n              this.roomArray[x]?.[y + 1],\r\n              this.roomArray[x]?.[y - 1],\r\n            ];\r\n\r\n            const hasAdjacentDoor = adjacentTiles.some(\r\n              (adjTile) => adjTile instanceof Door,\r\n            );\r\n\r\n            if (!hasAdjacentDoor) {\r\n              emptyWalls.push(tile);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return emptyWalls;\r\n  }\r\n\r\n  pointExists = (x: number, y: number) => {\r\n    return this.roomArray[x] && this.roomArray[x][y];\r\n  };\r\n\r\n  /**\r\n   * Removes a specified empty wall from the room.\r\n   * @param wall - The wall tile to remove.\r\n   * @returns An object containing the x and y coordinates of the removed wall.\r\n   */\r\n  removeEmptyWall(wall: Wall): { x: number; y: number } | null {\r\n    if (!(wall instanceof Wall)) return null;\r\n\r\n    const { x, y } = wall;\r\n\r\n    // Replace the wall with a Floor tile to maintain room integrity\r\n    this.roomArray[x][y] = new Floor(this, x, y);\r\n\r\n    // Remove from innerWalls or outerWalls if applicable\r\n    const initialInnerWallsCount = this.innerWalls.length;\r\n    this.innerWalls = this.innerWalls.filter((w) => w !== wall);\r\n    const finalInnerWallsCount = this.innerWalls.length;\r\n\r\n    return { x, y };\r\n  }\r\n\r\n  /**\r\n   * Places a VendingMachine in an empty wall.\r\n   */\r\n  placeVendingMachineInWall(item?: Item): void {\r\n    let emptyWalls = this.getEmptyWall();\r\n    emptyWalls = emptyWalls.filter((wall) => {\r\n      const wallInfo = wall.wallInfo();\r\n      return wallInfo && !wallInfo.isInnerWall;\r\n    });\r\n    if (emptyWalls.length === 0) return;\r\n\r\n    // Select a random empty wall\r\n    const selectedWall = Game.randTable(emptyWalls, Random.rand);\r\n    if (!selectedWall) return;\r\n\r\n    // Remove the selected wall\r\n    const removedWallInfo = this.removeEmptyWall(selectedWall);\r\n    if (!removedWallInfo) return;\r\n\r\n    const { x, y } = removedWallInfo;\r\n\r\n    // Create and add the VendingMachine\r\n    this.addVendingMachine(Random.rand, x, y, item);\r\n  }\r\n\r\n  // Add methods to manage blur cache\r\n  private invalidateBlurCache = () => {\r\n    this.blurCache.isValid = false;\r\n    this.blurCache.lastLightingUpdate = this.lastLightingUpdate;\r\n  };\r\n\r\n  private shouldUseBlurCache = (): boolean => {\r\n    return (\r\n      !this.active &&\r\n      this.blurCache.isValid &&\r\n      this.blurCache.lastLightingUpdate === this.lastLightingUpdate\r\n    );\r\n  };\r\n\r\n  readonly getPlayer = () => {\r\n    for (const i in this.game.players) {\r\n      if ((this.game.players[i] as any).getRoom?.() === this) {\r\n        return this.game.players[i];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  private cacheBlurResult = (\r\n    type: \"color6px\" | \"color12px\" | \"shade5px\" | \"bloom8px\" | \"color8px\",\r\n    canvas: HTMLCanvasElement,\r\n  ) => {\r\n    if (!this.active) {\r\n      // Clone the canvas to cache it\r\n      const cachedCanvas = document.createElement(\"canvas\");\r\n      cachedCanvas.width = canvas.width;\r\n      cachedCanvas.height = canvas.height;\r\n      const ctx = cachedCanvas.getContext(\"2d\");\r\n      if (ctx) {\r\n        ctx.drawImage(canvas, 0, 0);\r\n        this.blurCache[type] = cachedCanvas;\r\n        this.blurCache.isValid = true;\r\n        this.blurCache.lastLightingUpdate = this.lastLightingUpdate;\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Floor } from \"../../tile/floor\";\r\nimport { Bones } from \"../../tile/bones\";\r\nimport { DeathParticle } from \"../../particle/deathParticle\";\r\nimport { WizardTeleportParticle } from \"../../particle/wizardTeleportParticle\";\r\nimport { WizardFireball } from \"../../projectile/wizardFireball\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Item } from \"../../item/item\";\r\nimport { WizardEnemy } from \"./wizardEnemy\";\r\n\r\nexport enum WizardState {\r\n  idle,\r\n  attack,\r\n  justAttacked,\r\n  teleport,\r\n}\r\n\r\nexport class FireWizardEnemy extends WizardEnemy {\r\n  static difficulty: number = 3;\r\n  static tileX: number = 35;\r\n  static tileY: number = 8;\r\n  readonly ATTACK_RADIUS = 5;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 35;\r\n    this.tileY = 8;\r\n    this.frame = 0;\r\n    this.state = WizardState.attack;\r\n    this.seenPlayer = false;\r\n    this.alertTicks = 0;\r\n    this.name = \"fire wizard\";\r\n    this.projectileColor = [200, 20, 0];\r\n    if (drop) this.drop = drop;\r\n    this.jumpHeight = 0.5;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return 1;\r\n  };\r\n\r\n  withinAttackingRangeOfPlayer = (): boolean => {\r\n    let withinRange = false;\r\n    for (const i in this.game.players) {\r\n      if (\r\n        (this.x - this.game.players[i].x) ** 2 +\r\n          (this.y - this.game.players[i].y) ** 2 <=\r\n        this.ATTACK_RADIUS ** 2\r\n      ) {\r\n        withinRange = true;\r\n      }\r\n    }\r\n    return withinRange;\r\n  };\r\n\r\n  shuffle = (a) => {\r\n    let j, x, i;\r\n    for (i = a.length - 1; i > 0; i--) {\r\n      j = Math.floor(Random.rand() * (i + 1));\r\n      x = a[i];\r\n      a[i] = a[j];\r\n      a[j] = x;\r\n    }\r\n    return a;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n        switch (this.state) {\r\n          case WizardState.attack:\r\n            const nearestPlayerInfo = this.nearestPlayer();\r\n            if (nearestPlayerInfo !== false) {\r\n              const [distance, targetPlayer] = nearestPlayerInfo;\r\n              const attackLength = 20;\r\n\r\n              const offsets = this.calculateProjectileOffsets(\r\n                targetPlayer.x,\r\n                targetPlayer.y,\r\n                10,\r\n              );\r\n\r\n              this.attemptProjectilePlacement(\r\n                [\r\n                  { x: -1, y: 0 },\r\n                  { x: 1, y: 0 },\r\n                  { x: 0, y: -1 },\r\n                  { x: 0, y: 1 },\r\n                ],\r\n                WizardFireball,\r\n                false,\r\n              );\r\n            }\r\n            this.state = WizardState.justAttacked;\r\n            break;\r\n          case WizardState.justAttacked:\r\n            this.attemptProjectilePlacement(\r\n              [\r\n                { x: -1, y: -1 },\r\n                { x: 1, y: 1 },\r\n                { x: 1, y: -1 },\r\n                { x: -1, y: 1 },\r\n              ],\r\n              WizardFireball,\r\n              false,\r\n            );\r\n            this.state = WizardState.idle;\r\n            break;\r\n          case WizardState.teleport:\r\n            let oldX = this.x;\r\n            let oldY = this.y;\r\n            let min = 100000;\r\n            let bestPos;\r\n            let emptyTiles = this.shuffle(this.room.getEmptyTiles());\r\n            emptyTiles = emptyTiles.filter(\r\n              (tile) =>\r\n                !this.room.projectiles.some(\r\n                  (projectile) =>\r\n                    projectile.x === tile.x && projectile.y === tile.y,\r\n                ),\r\n            );\r\n\r\n            if (\r\n              emptyTiles.length === 0 ||\r\n              Object.keys(this.game.players).length === 0\r\n            ) {\r\n              this.state = WizardState.idle;\r\n              break;\r\n            }\r\n\r\n            let optimalDist = Game.randTable(\r\n              [2, 2, 3, 3, 3, 3, 3],\r\n              Random.rand,\r\n            );\r\n            let player_ids = [];\r\n            for (const i in this.game.players) player_ids.push(i);\r\n            let target_player_id = Game.randTable(player_ids, Random.rand);\r\n\r\n            if (!this.game.players[target_player_id]) {\r\n              this.state = WizardState.idle;\r\n              break;\r\n            }\r\n\r\n            for (let t of emptyTiles) {\r\n              let newPos = t;\r\n              let dist =\r\n                Math.abs(newPos.x - this.game.players[target_player_id].x) +\r\n                Math.abs(newPos.y - this.game.players[target_player_id].y);\r\n              if (Math.abs(dist - optimalDist) < Math.abs(min - optimalDist)) {\r\n                min = dist;\r\n                bestPos = newPos;\r\n              }\r\n            }\r\n\r\n            if (!bestPos) {\r\n              bestPos = emptyTiles[0];\r\n            }\r\n\r\n            this.tryMove(bestPos.x, bestPos.y);\r\n            this.drawX = this.x - oldX;\r\n            this.drawY = this.y - oldY;\r\n            this.frame = 0;\r\n            this.room.particles.push(new WizardTeleportParticle(oldX, oldY));\r\n            if (this.withinAttackingRangeOfPlayer()) {\r\n              this.state = WizardState.attack;\r\n            } else {\r\n              this.state = WizardState.idle;\r\n            }\r\n            break;\r\n          case WizardState.idle:\r\n            this.state = WizardState.teleport;\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      if (this.state === WizardState.attack) this.tileX = 36;\r\n      else this.tileX = 35;\r\n\r\n      if (this.hasShadow && this.state !== WizardState.idle)\r\n        this.drawShadow(delta);\r\n      if (this.frame >= 0) {\r\n        Game.drawMob(\r\n          Math.floor(this.frame) + 5,\r\n          18,\r\n          1,\r\n          2,\r\n          this.x,\r\n          this.y - 1.3,\r\n          1,\r\n          2,\r\n          this.softShadeColor,\r\n          this.shadeAmount(),\r\n        );\r\n        this.frame += 0.4 * delta;\r\n        if (this.frame > 12) this.frame = -1;\r\n      } else {\r\n        Game.drawMob(\r\n          this.tileX,\r\n          this.tileY,\r\n          1,\r\n          2,\r\n          this.x - this.drawX,\r\n          this.y - 1.3 - this.drawY,\r\n          1,\r\n          2,\r\n          this.softShadeColor,\r\n          this.shadeAmount(),\r\n        );\r\n      }\r\n      if (!this.cloned) {\r\n        if (!this.seenPlayer) {\r\n          this.drawSleepingZs(delta);\r\n        }\r\n        if (this.alertTicks > 0) {\r\n          this.drawExclamation(delta);\r\n        }\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Item } from \"./item\";\r\nimport { Player } from \"../player/player\";\r\nimport { Game } from \"../game\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { Room } from \"../room/room\";\r\nimport { Usable } from \"./usable/usable\";\r\n//import { Bomb } from \"../entity/object/bomb\";\r\n\r\nexport class BombItem extends Usable {\r\n  static itemName = \"bomb\";\r\n\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.tileX = 20;\r\n    this.tileY = 2;\r\n    this.offsetY = -0.3;\r\n    this.name = BombItem.itemName;\r\n    this.description = \"explodes\";\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    const { Bomb } = require(\"../entity/object/bomb\");\r\n    Bomb.add(player.game.room, player.game, player.x, player.y);\r\n    player.inventory.removeItem(this);\r\n    Sound.mine();\r\n  };\r\n}\r\n","/*!\n *  howler.js v2.2.4\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/(\\d+)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (!node.bufferSource) {\n        return self;\n      }\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.4\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Create a new panner node if one doesn't already exist.\n        var panner = sound._panner;\n        if (!panner) {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n          panner = sound._panner\n        }\n\n        // Update the panner values or create a new panner if none exists.\n        panner.coneInnerAngle = pa.coneInnerAngle;\n        panner.coneOuterAngle = pa.coneOuterAngle;\n        panner.coneOuterGain = pa.coneOuterGain;\n        panner.distanceModel = pa.distanceModel;\n        panner.maxDistance = pa.maxDistance;\n        panner.refDistance = pa.refDistance;\n        panner.rolloffFactor = pa.rolloffFactor;\n        panner.panningModel = pa.panningModel;\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Usable } from \"./usable\";\r\n\r\nexport class Hourglass extends Usable {\r\n  static itemName = \"hourglass\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.tileX = 0;\r\n    this.tileY = 2;\r\n    this.offsetY = -0.3;\r\n    this.durability = 30;\r\n    this.durabilityMax = 30;\r\n    this.name = Hourglass.itemName;\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    if (this.broken) return;\r\n    player.stall();\r\n    player.game.pushMessage(\"turn skipped\");\r\n    this.durability -= 1;\r\n    if (this.durability <= 0) {\r\n      this.broken = true;\r\n    }\r\n    //this.level.items = this.level.items.filter((x) => x !== this); // removes itself from the level\r\n  };\r\n\r\n  getDescription = () => {\r\n    return \"HOURGLASS\\nSkips a turn\";\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Usable } from \"./usable\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class Shrooms extends Usable {\r\n  static itemName = \"mushrooms\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 6;\r\n    this.tileY = 0;\r\n\r\n    this.stackable = true;\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    if (player.health < player.maxHealth) {\r\n      player.health = Math.min(player.maxHealth, player.health + 0.5);\r\n      Sound.playEat();\r\n      if (this.stackCount > 1) {\r\n        this.stackCount--;\r\n      } else player.inventory.removeItem(this);\r\n      player.game.pushMessage(\"You eat the mushrooms and feel better.\");\r\n    }\r\n  };\r\n\r\n  getDescription = (): string => {\r\n    return \"SHROOMS\\nI don't think I should eat these...\";\r\n  };\r\n}\r\n","import { Input } from \"../game/input\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Direction, Game, LevelState } from \"../game\";\r\nimport { Door } from \"../tile/door\";\r\nimport { Trapdoor } from \"../tile/trapdoor\";\r\nimport { Inventory } from \"../inventory/inventory\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\nimport { Map } from \"../gui/map\";\r\nimport { HealthBar } from \"../drawable/healthbar\";\r\nimport { VendingMachine } from \"../entity/object/vendingMachine\";\r\nimport { Drawable } from \"../drawable/drawable\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Item } from \"../item/item\";\r\n\r\nimport { Enemy } from \"../entity/enemy/enemy\";\r\nimport { MouseCursor } from \"../gui/mouseCursor\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\n\r\nimport { Menu } from \"../gui/menu\";\r\nimport { Bestiary } from \"../game/bestiary\";\r\nimport { PlayerInputHandler } from \"./playerInputHandler\";\r\nimport { PlayerActionProcessor } from \"./playerActionProcessor\";\r\nimport { PlayerMovement } from \"./playerMovement\";\r\nimport { PlayerRenderer } from \"./playerRenderer\";\r\nimport { UpLadder } from \"../tile/upLadder\";\r\nimport { DownLadder } from \"../tile/downLadder\";\r\nimport { IdGenerator } from \"../globalStateManager/IdGenerator\";\r\nimport { globalEventBus } from \"../event/eventBus\";\r\nimport { EVENTS } from \"../event/events\";\r\n\r\nexport enum PlayerDirection {\r\n  DOWN,\r\n  UP,\r\n  RIGHT,\r\n  LEFT,\r\n}\r\n\r\nenum DrawDirection {\r\n  X,\r\n  Y,\r\n}\r\n\r\nexport class Player extends Drawable {\r\n  globalId: string;\r\n  id: string;\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n  direction: Direction;\r\n  lastDirection: Direction;\r\n  game: Game;\r\n  levelID: number; // which room we're in (legacy index; avoid using directly)\r\n  roomGID?: string;\r\n  health: number;\r\n  maxHealth: number;\r\n  healthBar: HealthBar;\r\n  dead: boolean;\r\n  lastTickHealth: number;\r\n  inventory: Inventory;\r\n  sightRadius: number;\r\n  defaultSightRadius: number;\r\n  static minSightRadius: number = 2; //hard minimum sight radius that ignores depth\r\n  map: Map;\r\n  openVendingMachine: VendingMachine;\r\n  isLocalPlayer: boolean;\r\n  mapToggled: boolean;\r\n  lastHitBy: string;\r\n  turnCount: number;\r\n  triedMove: boolean;\r\n  tutorialRoom: boolean;\r\n\r\n  moveRange: number;\r\n  tileCursor: { x: number; y: number };\r\n  lightEquipped: boolean;\r\n  lightSource: LightSource;\r\n  hurtShield: boolean; // handles logic to take damage or not\r\n  lightBrightness: number;\r\n  moveDistance: number;\r\n  moveQueue: { x: number; y: number; direction: Direction }[];\r\n  lastX: number;\r\n  lastY: number;\r\n  justMoved: DrawDirection;\r\n  depth: number;\r\n  menu: Menu;\r\n  busyAnimating: boolean;\r\n  lightColor: [number, number, number];\r\n  damageBonus: number;\r\n\r\n  inputHandler: PlayerInputHandler;\r\n  actionProcessor: PlayerActionProcessor;\r\n  movement: PlayerMovement;\r\n\r\n  cooldownRemaining: number;\r\n  // Death screen pagination state\r\n  deathScreenPageIndex: number;\r\n  deathScreenPageCount: number;\r\n\r\n  private renderer: PlayerRenderer;\r\n\r\n  private drawMoveQueue: {\r\n    drawX: number;\r\n    drawY: number;\r\n  }[] = [];\r\n\r\n  seenEnemies: Set<typeof Enemy> = new Set();\r\n  bestiary: Bestiary = null;\r\n  constructor(game: Game, x: number, y: number, isLocalPlayer: boolean) {\r\n    super();\r\n    this.globalId = IdGenerator.generate(\"P\");\r\n\r\n    this.game = game;\r\n\r\n    this.levelID = 0;\r\n    this.roomGID = undefined;\r\n\r\n    this.x = x;\r\n    this.y = y;\r\n    this.w = 1;\r\n    this.h = 1;\r\n    this.moveDistance = 0;\r\n    this.direction = Direction.UP;\r\n    this.lastDirection = Direction.UP;\r\n\r\n    this.lastX = 0;\r\n    this.lastY = 0;\r\n    this.isLocalPlayer = isLocalPlayer;\r\n    this.depth = 0;\r\n    this.menu = new Menu(this);\r\n    this.busyAnimating = false;\r\n\r\n    this.mapToggled = true;\r\n    this.health = 2;\r\n    this.maxHealth = 2;\r\n    this.healthBar = new HealthBar();\r\n    this.dead = false;\r\n    this.lastTickHealth = this.health;\r\n    this.damageBonus = 0;\r\n\r\n    this.inventory = new Inventory(game, this);\r\n    this.defaultSightRadius = 3;\r\n    this.sightRadius = LevelConstants.LIGHTING_MAX_DISTANCE; //this.defaultSightRadius;\r\n    this.map = new Map(this.game, this);\r\n    this.turnCount = 0;\r\n    this.triedMove = false;\r\n    this.tutorialRoom = false;\r\n\r\n    this.tileCursor = { x: 0, y: 0 };\r\n    this.moveRange = 1;\r\n    this.lightEquipped = false;\r\n    this.lightColor = LevelConstants.AMBIENT_LIGHT_COLOR;\r\n\r\n    this.hurtShield = false;\r\n    this.lightBrightness = 0.3;\r\n\r\n    this.moveQueue = [];\r\n    this.justMoved = DrawDirection.Y;\r\n\r\n    this.inputHandler = new PlayerInputHandler(this);\r\n    this.actionProcessor = new PlayerActionProcessor(this);\r\n    this.movement = new PlayerMovement(this);\r\n    this.renderer = new PlayerRenderer(this);\r\n\r\n    this.bestiary = new Bestiary(this.game, this);\r\n\r\n    this.cooldownRemaining = 0;\r\n    this.deathScreenPageIndex = 0;\r\n    this.deathScreenPageCount = 1;\r\n  }\r\n\r\n  getRoom = () => {\r\n    const byId = (this.game as any).getRoomById?.(this.roomGID);\r\n    return byId || this.game.levels[this.depth].rooms[this.levelID];\r\n  };\r\n\r\n  get hitX() {\r\n    return this.renderer?.drawX ?? 0;\r\n  }\r\n  get hitY() {\r\n    return this.renderer?.drawY ?? 0;\r\n  }\r\n\r\n  get drawX() {\r\n    return this.renderer?.drawX ?? 0;\r\n  }\r\n  get drawY() {\r\n    return this.renderer?.drawY ?? 0;\r\n  }\r\n\r\n  setHitXY = (newX: number, newY: number, distance = 0.5) => {\r\n    this.renderer.hitX = distance * (this.x - newX);\r\n    this.renderer.hitY = distance * (this.y - newY);\r\n  };\r\n\r\n  applyStatus = (\r\n    enemy: Entity,\r\n    status: { poison: boolean; blood: boolean },\r\n  ) => {\r\n    if (enemy instanceof Enemy) {\r\n      if (status.poison) {\r\n        enemy.poison();\r\n        return true;\r\n      }\r\n      if (status.blood) {\r\n        enemy.bleed();\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  isMouseOnPlayerTile = () => {\r\n    return this.mouseToTile().x === this.x && this.mouseToTile().y === this.y;\r\n  };\r\n\r\n  isMouseAboveFloor = (offsetY: number = 0) => {\r\n    const mouseTile = this.mouseToTile(offsetY);\r\n\r\n    // Handle undefined coordinates\r\n    if (mouseTile.x === undefined || mouseTile.y === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const mouseX = mouseTile.x;\r\n    const mouseY = mouseTile.y;\r\n\r\n    if (\r\n      this.game.levelState === LevelState.LEVEL_GENERATION ||\r\n      !this.game.started ||\r\n      !this.game.room ||\r\n      !this.game.room.roomArray ||\r\n      !Array.isArray(this.game.room.roomArray[mouseX]) ||\r\n      this.game.room.roomArray[mouseX][mouseY] === undefined\r\n    )\r\n      return false;\r\n\r\n    return !(\r\n      !this.game.room?.tileInside(mouseX, mouseY) ||\r\n      (this.game.room?.tileInside(mouseX, mouseY) &&\r\n        this.game.room?.roomArray[mouseX][mouseY].isSolid() &&\r\n        !(this.game.room?.roomArray[mouseX][mouseY] instanceof Door))\r\n    );\r\n  };\r\n\r\n  mouseInLine = () => {\r\n    const mouseTile = this.mouseToTile();\r\n\r\n    // Handle undefined coordinates\r\n    if (mouseTile.x === undefined || mouseTile.y === undefined) {\r\n      return false;\r\n    }\r\n\r\n    return mouseTile.x === this.x || mouseTile.y === this.y;\r\n  };\r\n\r\n  canMoveWithMouse = () => {\r\n    if (this.inventory.isOpen) {\r\n      return null;\r\n    }\r\n\r\n    const isFloorNormal = this.isMouseAboveFloor();\r\n    const isFloorOffset = this.isMouseAboveFloor(8);\r\n\r\n    if (!isFloorNormal && !isFloorOffset) {\r\n      return null;\r\n    }\r\n\r\n    const mouseTile = this.mouseToTile();\r\n    const offsetMouseTile = this.mouseToTile(8);\r\n\r\n    if (\r\n      mouseTile.x === undefined ||\r\n      mouseTile.y === undefined ||\r\n      offsetMouseTile.x === undefined ||\r\n      offsetMouseTile.y === undefined\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    if (\r\n      !this.game.room.roomArray ||\r\n      !this.game.room.roomArray[mouseTile.x] ||\r\n      !this.game.room.roomArray[mouseTile.x][mouseTile.y]\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    let targetY = mouseTile.y;\r\n    const hasEntityAtOffset = this.checkTileForEntity(offsetMouseTile);\r\n\r\n    if (isFloorOffset && hasEntityAtOffset) {\r\n      targetY = offsetMouseTile.y;\r\n    }\r\n\r\n    const sameX = mouseTile.x === this.x;\r\n    const sameY = targetY === this.y;\r\n\r\n    if (sameX && sameY) {\r\n      return null;\r\n    }\r\n\r\n    if (sameX) {\r\n      const nextY = targetY < this.y ? this.y - 1 : this.y + 1;\r\n\r\n      if (\r\n        !this.game.room.roomArray[this.x] ||\r\n        !this.game.room.roomArray[this.x][nextY]\r\n      ) {\r\n        return null;\r\n      }\r\n\r\n      return targetY < this.y\r\n        ? { direction: Direction.UP, x: this.x, y: nextY }\r\n        : { direction: Direction.DOWN, x: this.x, y: nextY };\r\n    }\r\n\r\n    if (sameY) {\r\n      const nextX = mouseTile.x < this.x ? this.x - 1 : this.x + 1;\r\n\r\n      if (\r\n        !this.game.room.roomArray[nextX] ||\r\n        !this.game.room.roomArray[nextX][this.y]\r\n      ) {\r\n        return null;\r\n      }\r\n\r\n      return mouseTile.x < this.x\r\n        ? { direction: Direction.LEFT, x: nextX, y: this.y }\r\n        : { direction: Direction.RIGHT, x: nextX, y: this.y };\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  stall = () => {\r\n    if (!this.game.started || !this.game.room || !this.renderer) return;\r\n    if (this.game.levelState === LevelState.IN_LEVEL) {\r\n      this.game?.room?.tick(this);\r\n      this.shakeScreen(this.x - 0.5, this.y, this.x + 0.5, this.y, 5);\r\n      this.game.pushMessage(\"Equipping an item takes a turn.\");\r\n    }\r\n  };\r\n\r\n  moveWithMouse = () => {\r\n    this.inputHandler.setMostRecentMoveInput(\"mouse\");\r\n    if (!GameConstants.MOVE_WITH_MOUSE) return;\r\n    const moveData = this.canMoveWithMouse();\r\n    if (moveData !== null) {\r\n      this.actionProcessor.process({\r\n        type: \"MouseMove\",\r\n        direction: moveData.direction,\r\n        targetX: moveData.x,\r\n        targetY: moveData.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  mouseToTile = (offsetY: number = 0) => {\r\n    // Handle undefined mouse coordinates\r\n    if (Input.mouseX === undefined || Input.mouseY === undefined) {\r\n      return { x: undefined, y: undefined };\r\n    }\r\n\r\n    // Get screen center coordinates\r\n    const screenCenterX = GameConstants.WIDTH / 2;\r\n    const screenCenterY = GameConstants.HEIGHT / 2;\r\n\r\n    // Convert pixel offset to tile offset\r\n    const tileOffsetX = Math.floor(\r\n      (Input.mouseX - screenCenterX + GameConstants.TILESIZE / 2) /\r\n        GameConstants.TILESIZE,\r\n    );\r\n    const tileOffsetY = Math.floor(\r\n      (Input.mouseY + offsetY - screenCenterY + GameConstants.TILESIZE / 2) /\r\n        GameConstants.TILESIZE,\r\n    );\r\n\r\n    return {\r\n      x: this.x + tileOffsetX,\r\n      y: this.y + tileOffsetY,\r\n    };\r\n  };\r\n\r\n  tileToMouse = (tileX, tileY) => {\r\n    // Get screen center coordinates\r\n    const screenCenterX = GameConstants.WIDTH / 2;\r\n    const screenCenterY = GameConstants.HEIGHT / 2;\r\n\r\n    // Calculate the offset from the center position\r\n    const tileOffsetX = tileX - this.x;\r\n    const tileOffsetY = tileY - this.y;\r\n\r\n    // Convert tile offset to pixel coordinates\r\n    const pixelX = screenCenterX + tileOffsetX * GameConstants.TILESIZE;\r\n    const pixelY = screenCenterY + tileOffsetY * GameConstants.TILESIZE;\r\n\r\n    return {\r\n      x: pixelX,\r\n      y: pixelY,\r\n    };\r\n  };\r\n\r\n  setTileCursorPosition = () => {\r\n    const offsetX =\r\n      Math.floor(GameConstants.WIDTH / 2) / GameConstants.TILESIZE;\r\n    const offsetY =\r\n      Math.floor(GameConstants.HEIGHT / 2) / GameConstants.TILESIZE;\r\n\r\n    const mousePosition = this.mouseToTile();\r\n\r\n    // Calculate cursor position relative to center\r\n    let cursorX = mousePosition.x - this.x + offsetX - 0.5;\r\n    let cursorY = mousePosition.y - this.y + offsetY - 0.5;\r\n\r\n    // Clamp cursor to be no further than 1 tile from center\r\n    // Center is at (offsetX, offsetY)\r\n    const centerX = offsetX;\r\n    const centerY = offsetY;\r\n\r\n    // Calculate distance from center (before the 0.5 offset)\r\n    const distanceX = Math.abs(cursorX + 0.5 - centerX);\r\n    const distanceY = Math.abs(cursorY + 0.5 - centerY);\r\n\r\n    // Clamp if needed\r\n    if (distanceX > 1) {\r\n      // Preserve direction but limit distance\r\n      const direction = cursorX > centerX ? 1 : -1;\r\n      cursorX = centerX + direction - 0.5; // -0.5 to account for the offset\r\n    }\r\n\r\n    if (distanceY > 1) {\r\n      // Preserve direction but limit distance\r\n      const direction = cursorY > centerY ? 1 : -1;\r\n      cursorY = centerY + direction - 0.5; // -0.5 to account for the offset\r\n    }\r\n\r\n    this.tileCursor = {\r\n      x: cursorX,\r\n      y: cursorY,\r\n    };\r\n  };\r\n\r\n  enemyInRange = (eX: number, eY: number, range: number | null) => {\r\n    // Use nullish coalescing operator for cleaner default value\r\n    const r = range ?? 1;\r\n\r\n    // Same tile - not in range\r\n    if (eX === this.x && eY === this.y) return false;\r\n\r\n    // Diagonal - not in range\r\n    if (eX !== this.x && eY !== this.y) return false;\r\n\r\n    // Check horizontal range\r\n    if (eY === this.y) {\r\n      return Math.abs(eX - this.x) <= r;\r\n    }\r\n\r\n    // Check vertical range\r\n    if (eX === this.x) {\r\n      return Math.abs(eY - this.y) <= r;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  getDirectionFromCoords = (inputX: number, inputY: number): string => {\r\n    // Same position - no direction\r\n    if (inputX === this.x && inputY === this.y) return \"\";\r\n\r\n    // Diagonal - no direction\r\n    if (inputX !== this.x && inputY !== this.y) return \"\";\r\n\r\n    // Check horizontal\r\n    if (inputY === this.y) {\r\n      return inputX > this.x ? \"right\" : \"left\";\r\n    }\r\n\r\n    // Check vertical\r\n    if (inputX === this.x) {\r\n      return inputY > this.y ? \"down\" : \"up\";\r\n    }\r\n\r\n    return \"arrow\";\r\n  };\r\n\r\n  setCursorIcon = () => {\r\n    // Early return cases\r\n    if (this.inventory.isDragging) {\r\n      MouseCursor.getInstance().setIcon(\"grab\");\r\n      return;\r\n    }\r\n\r\n    const cursor = MouseCursor.getInstance();\r\n    const mousePos = cursor.getPosition();\r\n    const mouseTile = this.mouseToTile();\r\n\r\n    // Check cursor states in order of priority\r\n    const cursorState = this.getCursorState(mousePos, mouseTile);\r\n    cursor.setIcon(cursorState);\r\n  };\r\n\r\n  private getCursorState = (\r\n    mousePos: { x: number; y: number },\r\n    mouseTile: { x: number; y: number },\r\n  ): string => {\r\n    // 1. Check UI interactions\r\n    if (this.isMouseInUI(mousePos)) {\r\n      return \"hand\";\r\n    }\r\n    if (this.isEntityAttackable(mouseTile)) {\r\n      return \"sword\";\r\n    }\r\n\r\n    // 2. Check game world interactions\r\n    if (this.isMouseAboveFloor() && this.mouseInLine()) {\r\n      // 2a. Check for attackable entities\r\n\r\n      // 2b. Check for movement target\r\n      if (this.enemyInRange(mouseTile.x, mouseTile.y, 1)) {\r\n        return this.getDirectionFromCoords(mouseTile.x, mouseTile.y);\r\n      }\r\n\r\n      // 2c. Default floor interaction\r\n      return \"hand\";\r\n    }\r\n\r\n    // 3. Default cursor state\r\n    return \"arrow\";\r\n  };\r\n\r\n  private isMouseInUI = (mousePos: { x: number; y: number }): boolean => {\r\n    const { x, y } = mousePos;\r\n\r\n    return (\r\n      this.inventory.isPointInInventoryButton(x, y) ||\r\n      this.isInventoryItemInteraction(x, y)\r\n    );\r\n  };\r\n\r\n  private isInventoryItemInteraction = (x: number, y: number): boolean => {\r\n    const hasSelectedItem = this.inventory.itemAtSelectedSlot() instanceof Item;\r\n\r\n    return (\r\n      (this.inventory.isPointInQuickbarBounds(x, y).inBounds &&\r\n        hasSelectedItem) ||\r\n      (this.inventory.isOpen &&\r\n        this.inventory.isPointInInventoryBounds(x, y).inBounds &&\r\n        hasSelectedItem)\r\n    );\r\n  };\r\n\r\n  private isEntityAttackable = (mouseTile: {\r\n    x: number;\r\n    y: number;\r\n  }): boolean => {\r\n    // Check current tile\r\n    const currentTileCheck = this.checkTileForEntity(mouseTile);\r\n    if (currentTileCheck) return true;\r\n\r\n    // Check tile above with 0.5 tile offset\r\n    const belowTileCheck = this.checkTileForEntity({\r\n      x: mouseTile.x,\r\n      y: this.mouseToTile(GameConstants.TILESIZE / 2).y,\r\n    });\r\n\r\n    return belowTileCheck;\r\n  };\r\n\r\n  private checkTileForEntity = (tile: { x: number; y: number }): boolean => {\r\n    const range = this.inventory.weapon?.range ?? 1;\r\n    return this.game.room.entities.some((entity) => {\r\n      return (\r\n        entity.x === tile.x &&\r\n        entity.y === tile.y &&\r\n        this.enemyInRange(entity.x, entity.y, range)\r\n      );\r\n    });\r\n  };\r\n\r\n  restart = () => {\r\n    this.dead = false;\r\n    this.game.newGame();\r\n    // Reset pagination on restart\r\n    this.deathScreenPageIndex = 0;\r\n    this.deathScreenPageCount = 1;\r\n  };\r\n\r\n  hit = (): number => {\r\n    return 1;\r\n  };\r\n\r\n  tryCollide = (other: any, newX: number, newY: number) => {\r\n    if (other.collidable === false) return false;\r\n    if (newX >= other.x + other.w || newX + this.w <= other.x) return false;\r\n    if (newY >= other.y + other.h || newY + this.h <= other.y) return false;\r\n    return true;\r\n  };\r\n\r\n  tryMove = (x: number, y: number) => {\r\n    if (\r\n      this.busyAnimating ||\r\n      this.game.levelState === LevelState.TRANSITIONING ||\r\n      this.game.levelState === LevelState.TRANSITIONING_LADDER\r\n    )\r\n      return;\r\n    // TODO don't move if hit by enemy\r\n    this.getRoom().catchUp();\r\n    //this.game.room.catchUp();\r\n    if (!this.game.room) {\r\n      console.warn(\"oi bruv, game.room isn't even there!\");\r\n      return;\r\n    }\r\n    if (this.dead) return;\r\n\r\n    let collide = false;\r\n\r\n    for (let e of this.getRoom().entities) {\r\n      if (e.collidable === true) {\r\n        if (e.x === x && e.y === y) {\r\n          collide = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    //for (let i = 0; i < 2; i++) //no idea why we would loop this...\r\n    // if (collide === true) {\r\n    if (\r\n      this.inventory.hasWeapon() &&\r\n      !this.inventory.getWeapon().weaponMove(x, y)\r\n    ) {\r\n      //for (let h of this.game.levels[this.levelID].hitwarnings) {\r\n      //if (newMove instanceof HitWarning)\r\n      return;\r\n      //}\r\n    } else if (!this.inventory.hasWeapon()) {\r\n      this.game.pushMessage(\"No weapon equipped.\");\r\n    }\r\n    //}\r\n    for (let e of this.getRoom().entities) {\r\n      e.lastX = e.x;\r\n      e.lastY = e.y;\r\n      //console.log(`e.lastX, e.lastY: ${e.lastX}, ${e.lastY}`);\r\n      if (this.tryCollide(e, x, y)) {\r\n        if (e.pushable) {\r\n          // pushing a crate or barrel\r\n\r\n          let dx = x - this.x;\r\n          let dy = y - this.y;\r\n          let nextX = x + dx;\r\n          let nextY = y + dy;\r\n          let foundEnd = false; // end of the train of whatever we're pushing\r\n          let enemyEnd = false; // end of the train is a solid enemy (i.e. potted plant)\r\n          let pushedEnemies = [];\r\n          while (true) {\r\n            foundEnd = true;\r\n            for (const f of this.getRoom().entities) {\r\n              f.lastX = f.x;\r\n              f.lastY = f.y;\r\n              if (f.pointIn(nextX, nextY)) {\r\n                if (!f.chainPushable) {\r\n                  enemyEnd = true;\r\n                  foundEnd = true;\r\n                  break;\r\n                }\r\n                foundEnd = false;\r\n                pushedEnemies.push(f);\r\n                break;\r\n              }\r\n            }\r\n            if (foundEnd) break;\r\n            nextX += dx * pushedEnemies[pushedEnemies.length - 1].w;\r\n            nextY += dy * pushedEnemies[pushedEnemies.length - 1].h;\r\n          }\r\n          /* if no enemies and there is a wall, no move\r\n          otherwise, push everything, killing last enemy if there is a wall */\r\n          // here, (nextX, nextY) is the position immediately after the end of the train\r\n\r\n          if (\r\n            pushedEnemies.length === 0 &&\r\n            (this.getRoom().roomArray[nextX][nextY].canCrushEnemy() || enemyEnd)\r\n          ) {\r\n            if (e.destroyable) {\r\n              //fallback if no weapon equipped\r\n              e.hurt(this, e.health, \"none\");\r\n              if (this.getRoom() === this.game.room) Sound.hit();\r\n\r\n              this.shakeScreen(this.x, this.y, e.x, e.y);\r\n              this.hitShake(this.x, this.y, e.x, e.y);\r\n\r\n              this.getRoom().tick(this);\r\n              return;\r\n            }\r\n          } else {\r\n            if (this.getRoom() === this.game.room) Sound.push();\r\n            // here pushedEnemies may still be []\r\n\r\n            for (const f of pushedEnemies) {\r\n              f.lastX = f.x;\r\n              f.lastY = f.y;\r\n              f.x += dx;\r\n              f.y += dy;\r\n              f.drawX = dx;\r\n              f.drawY = dy;\r\n              f.skipNextTurns = 1; // skip next turn, so they don't move while we're pushing them\r\n            }\r\n            if (\r\n              this.getRoom().roomArray[nextX][nextY].canCrushEnemy() ||\r\n              enemyEnd\r\n            ) {\r\n              const pushedEnemy = pushedEnemies[pushedEnemies.length - 1];\r\n              pushedEnemy.crush();\r\n              if (pushedEnemy.isEnemy) {\r\n                Sound.playSquish();\r\n              }\r\n              if (this.getRoom() === this.game.room) Sound.hit();\r\n            }\r\n\r\n            e.x += dx;\r\n            e.y += dy;\r\n            e.drawX = dx;\r\n            e.drawY = dy;\r\n            this.move(x, y);\r\n            this.moveDistance++;\r\n            this.getRoom().tick(this);\r\n            return;\r\n          }\r\n        } else {\r\n          // if we're trying to hit an enemy, check if it's destroyable\r\n          if (!e.dead) {\r\n            if (e.interactable) e.interact(this);\r\n            //this.actionTab.actionState = ActionState.ATTACK;\r\n            //sets the action tab state to Attack\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    let other = this.getRoom()?.roomArray?.[x]?.[y];\r\n    if (!other) {\r\n      console.warn(\"oi bruv, tile to check for collision isn't even there!\");\r\n      return;\r\n    }\r\n    if (!this.getRoom()) {\r\n      console.warn(\"oi bruv, room to check for collision isn't even there!\");\r\n      return;\r\n    }\r\n    if (!this.getRoom().roomArray) {\r\n      console.warn(\"oi bruv, level to check for collision isn't even there!\");\r\n      return;\r\n    }\r\n    if (!other.isSolid()) {\r\n      if (other instanceof UpLadder || other instanceof DownLadder) {\r\n        const locked = other.isLocked();\r\n\r\n        if (locked) {\r\n          this.shakeScreen(this.x, this.y, x, y);\r\n          if (other.lockable.canUnlock(this)) {\r\n            other.lockable.unlock(this);\r\n          } else {\r\n            Sound.playLocked();\r\n          }\r\n          other.addLightSource();\r\n          this.game.room.updateLighting();\r\n          return;\r\n        }\r\n      }\r\n      this.move(x, y);\r\n      other.onCollide(this);\r\n      if (\r\n        !(\r\n          other instanceof Door ||\r\n          other instanceof Trapdoor ||\r\n          other instanceof UpLadder ||\r\n          other instanceof DownLadder\r\n        )\r\n      )\r\n        this.getRoom().tick(this);\r\n    } else {\r\n      if (other instanceof Door) {\r\n        this.shakeScreen(this.x, this.y, x, y);\r\n\r\n        if (other.canUnlock(this)) {\r\n          other.unlock(this);\r\n        } else {\r\n          Sound.playLocked();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private updateLastPosition = (x: number, y: number) => {\r\n    this.lastX = x;\r\n    this.lastY = y;\r\n  };\r\n\r\n  hurt = (damage: number, enemy: string, delay: number = 0) => {\r\n    //if (GameConstants.DEVELOPER_MODE) return;\r\n    // Play hurt sound if in current room\r\n    if (this.getRoom() === this.game.room) {\r\n      setTimeout(() => {\r\n        Sound.hurt();\r\n        Sound.playGrunt();\r\n        this.renderer.flash();\r\n        this.renderer.hurt();\r\n      }, delay);\r\n    }\r\n\r\n    // Handle armor damage\r\n    const armor = this.inventory.getArmor();\r\n    let diff = 0;\r\n    if (armor && armor.health > 0) {\r\n      diff = armor.health - damage;\r\n      armor.hurt(damage);\r\n      this.renderer.hurtShield();\r\n      this.hurtShield = true;\r\n    }\r\n\r\n    // Update player state\r\n    this.lastHitBy = enemy;\r\n    this.healthBar.hurt();\r\n    this.enemyHurtMessage(damage, enemy);\r\n\r\n    // Apply damage if no shield\r\n    if (!this.hurtShield) {\r\n      this.health -= damage;\r\n      // Emit damage taken event for statistics tracking\r\n      globalEventBus.emit(EVENTS.DAMAGE_TAKEN, { amount: damage });\r\n    } else if (diff < 0) {\r\n      this.health += diff;\r\n      globalEventBus.emit(EVENTS.DAMAGE_TAKEN, { amount: -diff });\r\n    }\r\n    this.hurtShield = false;\r\n\r\n    // Check for death\r\n    if (this.health <= 0 && !GameConstants.DEVELOPER_MODE) {\r\n      this.dead = true;\r\n      // Reset death screen pagination when death occurs\r\n      this.deathScreenPageIndex = 0;\r\n      this.deathScreenPageCount = 1;\r\n    }\r\n  };\r\n\r\n  enemyHurtMessage = (damage: number, enemy: string) => {\r\n    if (!GameConstants.DEVELOPER_MODE)\r\n      this.game.pushMessage(`The ${enemy} hits you for ${damage} damage.`);\r\n  };\r\n\r\n  beginSlowMotion = () => {\r\n    this.renderer.beginSlowMotion();\r\n  };\r\n\r\n  endSlowMotion = () => {\r\n    this.renderer.endSlowMotion();\r\n  };\r\n\r\n  move = (x: number, y: number) => {\r\n    this.updateLastPosition(this.x, this.y);\r\n\r\n    //this.actionTab.setState(ActionState.MOVE);\r\n    if (this.getRoom() === this.game.room)\r\n      Sound.playerStoneFootstep(this.game.room.envType);\r\n\r\n    if (this.openVendingMachine) this.openVendingMachine.close();\r\n\r\n    this.renderer.setNewDrawXY(x, y);\r\n    this.drawMoveQueue.push({\r\n      drawX: x - this.x,\r\n      drawY: y - this.y,\r\n    });\r\n\r\n    /*\r\n    if (this.drawX > 1) this.drawX = 1;\r\n    if (this.drawY > 1) this.drawY = 1;\r\n    if (this.drawX < -1) this.drawX = -1;\r\n    if (this.drawY < -1) this.drawY = -1;\r\n    */\r\n\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    for (let i of this.getRoom().items) {\r\n      if (i.x === x && i.y === y) {\r\n        i.onPickup(this);\r\n      }\r\n    }\r\n    let diffX = x - this.lastX;\r\n    let diffY = y - this.lastY;\r\n    if (diffX === 0 && diffY === 0) return;\r\n\r\n    //this.game.rooms[this.levelID].updateLighting();\r\n    let roomsOnScreen = 0;\r\n    for (let room of this.game.level.rooms) {\r\n      room.roomOnScreen(this);\r\n      //console.log(\"On Screen? \" + room.onScreen + \" levelID: \" + room.id);\r\n      if (room.onScreen) roomsOnScreen++;\r\n    }\r\n    //console.log(\"Rooms On Screen Currently: \" + roomsOnScreen);\r\n  };\r\n\r\n  moveNoSmooth = (x: number, y: number) => {\r\n    // doesn't touch smoothing\r\n    this.x = x;\r\n    this.y = y;\r\n  };\r\n\r\n  moveSnap = (x: number, y: number) => {\r\n    // no smoothing\r\n    this.x = Math.round(x);\r\n    this.y = Math.round(y);\r\n    this.renderer.snapDrawStuff();\r\n  };\r\n\r\n  update = () => {};\r\n\r\n  finishTick = () => {\r\n    this.turnCount += 1;\r\n    this.inventory.tick();\r\n\r\n    this.renderer.disableFlash();\r\n\r\n    let totalHealthDiff = this.health - this.lastTickHealth;\r\n    this.lastTickHealth = this.health; // update last tick health\r\n    if (totalHealthDiff < 0) {\r\n      this.renderer.flash();\r\n    }\r\n\r\n    // Emit turn passed event for statistics tracking\r\n    globalEventBus.emit(EVENTS.TURN_PASSED, {});\r\n    this.moveDistance = 0;\r\n\r\n    //this.actionTab.actionState = ActionState.READY;\r\n    //Sets the action tab state to Wait (during enemy turn)\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    this.renderer.draw(delta);\r\n  };\r\n\r\n  heal = (amount: number) => {\r\n    this.health += amount;\r\n    if (this.health > this.maxHealth) this.health = this.maxHealth;\r\n  };\r\n\r\n  hitShake = (\r\n    playerX: number,\r\n    playerY: number,\r\n    otherX: number,\r\n    otherY: number,\r\n  ) => {\r\n    const range = GameConstants.TILESIZE;\r\n    const hitX = Math.min(Math.max(0.5 * (playerX - otherX), -range), range);\r\n    const hitY = Math.min(Math.max(0.5 * (playerY - otherY), -range), range);\r\n    this.renderer.setHitXY(hitX, hitY);\r\n  };\r\n\r\n  shakeScreen = (\r\n    playerX: number,\r\n    playerY: number,\r\n    otherX: number,\r\n    otherY: number,\r\n    shakeStrength: number = 10,\r\n  ) => {\r\n    const range = GameConstants.TILESIZE;\r\n    const shakeX = Math.min(Math.max(0.5 * (playerX - otherX), -range), range);\r\n    const shakeY = Math.min(Math.max(0.5 * (playerY - otherY), -range), range);\r\n    this.renderer.setHitXY(shakeX, shakeY);\r\n\r\n    this.game.shakeScreen(\r\n      -shakeX * 1 * shakeStrength,\r\n      -shakeY * 1 * shakeStrength,\r\n    );\r\n  };\r\n\r\n  updateSlowMotion = () => {\r\n    this.renderer.updateSlowMotion();\r\n  };\r\n\r\n  drawGUI = (delta: number) => {\r\n    this.renderer.drawGUI(delta);\r\n  };\r\n}\r\n","import { Random } from \"./utility/random\";\r\n\r\nconst tips = [\r\n  \"Too dark? Equip a light source to light up the area around you.\",\r\n\r\n  \"Red X's show dangerous tiles, stay off of them to avoid taking damage.\",\r\n\r\n  \"If you kill an enemy, it can't hit you on the next turn.\",\r\n\r\n  \"Use weapon fragments on your weapon to repair broken weapons.\",\r\n\r\n  \"A yellow box around an item means it can be used on another item.\",\r\n\r\n  \"Lanterns can be refueled with coal.\",\r\n\r\n  \"Some objects can be pushed and kill enemies by crushing them.\",\r\n\r\n  \"Reapers spawn other enemies. Target them first to avoid being overrun.\",\r\n\r\n  \"Occultists apply a purple occult shield to enemies, giving them an extra health.\",\r\n\r\n  \"Killing an Occultist also removes the shields of each shielded enemy.\",\r\n\r\n  \"Some enemies have helmets, giving them extra health.\",\r\n\r\n  \"The shield absorbs one damage, and regenerates within 15 turns.\",\r\n\r\n  \"Explore alternate pathways like caves to gather resources to prepare for tough battles.\",\r\n\r\n  \"Vending machine sell useful items in exchange for coins.\",\r\n\r\n  \"Different enemies have different movement and attack patterns.\",\r\n\r\n  \"Frogs can only deal half damage, but can attack two tiles away in any direction.\",\r\n\r\n  \"Sometimes you will need to switch weapons mid-fight to use the best one for the situation.\",\r\n\r\n  \"Once you reach the end of a level you can get back to the beginning easily through tunnel doors.\",\r\n\r\n  \"Dual daggers give you an extra turn. After attacking you can attack or move again.\",\r\n\r\n  \"The Warhammer does two damage for taking out enemies with more than one health.\",\r\n\r\n  \"The spear has an attack range of two, so you can hit enemies from a safe distance.\",\r\n\r\n  \"Bombs can be placed to blow up enemies, just be sure to avoid blowing yourself up.\",\r\n\r\n  \"Mushrooms heal one half health.\",\r\n\r\n  \"Weapon blood can be applied to your weapon, giving it a powerful bleed effect upon attacking.\",\r\n\r\n  \"Weapon poison can be applied to your weapon poisoning enemies upon attacking.\",\r\n\r\n  \"The spellbook can attack multiple enemies from long range, great for getting out of tough situations.\",\r\n\r\n  \"Bishops can move diagonally and might sneak up on you if you aren't careful.\",\r\n\r\n  \"Rooks can move every turn and attack from any direction.\",\r\n\r\n  \"Queens can move any direction and have two health, but retreat when hit.\",\r\n\r\n  \"Dark? Equip light source.\",\r\n\r\n  \"Red X = danger. Avoid.\",\r\n\r\n  \"Kill enemy = safe next turn.\",\r\n\r\n  \"Use fragments to repair weapons.\",\r\n\r\n  \"Yellow box = usable on items.\",\r\n\r\n  \"Coal refuels lanterns.\",\r\n\r\n  \"Push objects to crush enemies.\",\r\n\r\n  \"Kill reapers first - they spawn enemies.\",\r\n\r\n  \"Occultists give enemies purple shields.\",\r\n\r\n  \"Kill occultist = remove all shields.\",\r\n\r\n  \"Helmets = extra enemy health.\",\r\n\r\n  \"Shield: 1 damage, regens in 15 turns.\",\r\n\r\n  \"Explore caves for resources.\",\r\n\r\n  \"Vending machines: coins for items.\",\r\n\r\n  \"Enemies have unique patterns.\",\r\n\r\n  \"Frogs: half damage, 2-tile range.\",\r\n\r\n  \"Switch weapons mid-fight.\",\r\n\r\n  \"Tunnel doors = quick return to start.\",\r\n\r\n  \"Dual daggers = extra turn after attack.\",\r\n\r\n  \"Warhammer: 2 damage vs multi-health.\",\r\n\r\n  \"Spear: 2-tile range.\",\r\n\r\n  \"Bombs blow up enemies (not you).\",\r\n\r\n  \"Mushrooms: heal 0.5 health.\",\r\n\r\n  \"Weapon blood = bleed effect.\",\r\n\r\n  \"Weapon poison = poison effect.\",\r\n\r\n  \"Spellbook: multi-enemy, long range.\",\r\n\r\n  \"Bishops: diagonal movement.\",\r\n\r\n  \"Rooks: move every turn, any direction.\",\r\n\r\n  \"Queens: 2 health, retreat when hit.\",\r\n];\r\n\r\nexport class Tips {\r\n  static getRandomTip(): string {\r\n    return tips[Math.floor(Random.rand() * tips.length)];\r\n  }\r\n}\r\n","import { Projectile } from \"./projectile\";\r\nimport { Game } from \"../game\";\r\nimport { Player } from \"../player/player\";\r\nimport { HitWarning } from \"../drawable/hitWarning\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Enemy } from \"../entity/enemy/enemy\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\nimport { Lighting } from \"../lighting/lighting\";\r\nimport { OccultistEnemy } from \"../entity/enemy/occultistEnemy\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { BeamEffect } from \"./beamEffect\";\r\nimport { GenericParticle } from \"../particle/genericParticle\";\r\n\r\nexport class EnemyShield extends Projectile {\r\n  frame: number;\r\n  parent: Entity;\r\n  tileX: number;\r\n  tileY: number;\r\n  health: number;\r\n  private autoRegistered?: boolean;\r\n\r\n  constructor(\r\n    parent: Entity | null,\r\n    x: number,\r\n    y: number,\r\n    health: number = 1,\r\n    autoRegister: boolean = true,\r\n  ) {\r\n    super(parent as any, x, y);\r\n    this.parent = parent as any;\r\n    this.frame = 0;\r\n    this.health = health;\r\n    this.autoRegistered = false;\r\n\r\n    // Gracefully handle missing parent during load; mark as dead so caller can skip\r\n    if (!this.parent || !(this.parent as any).room) {\r\n      this.dead = true;\r\n      return;\r\n    }\r\n\r\n    this.parent.shielded = true;\r\n    this.lightSource = Lighting.newLightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      [20, 0, 40],\r\n      3.5,\r\n      20,\r\n    );\r\n    this.parent.addLightSource(this.lightSource);\r\n    if (autoRegister) {\r\n      this.parent.room.projectiles.push(this);\r\n      this.autoRegistered = true;\r\n    }\r\n    this.parent.room.updateLighting();\r\n  }\r\n\r\n  remove = () => {\r\n    this.parent.shielded = false;\r\n    this.parent.removeLightSource(this.lightSource);\r\n    this.parent.room.projectiles = this.parent.room.projectiles.filter(\r\n      (projectile) => projectile !== this,\r\n    );\r\n\r\n    let beam = this.parent.room.projectiles.find(\r\n      (projectile) =>\r\n        projectile instanceof BeamEffect && projectile.parent === this.parent,\r\n    );\r\n    if (beam) {\r\n      beam.dead = true;\r\n    }\r\n    this.parent.shadeColor = \"black\";\r\n    this.lightSource = null;\r\n    this.parent.shield = null;\r\n  };\r\n\r\n  updateLightSourcePos = () => {\r\n    if (this.lightSource === null) return;\r\n    let index = this.parent.room.lightSources.indexOf(this.lightSource);\r\n    this.parent.room.lightSources[index].x = this.parent.x + 0.5;\r\n    this.parent.room.lightSources[index].y = this.parent.y + 0.5;\r\n    //this.parent.room.updateLighting();\r\n  };\r\n\r\n  hurt = (damage: number) => {\r\n    const damageOverShield = Math.max(0, damage - this.health);\r\n    this.health -= damage;\r\n    this.parent.maxHealth -= damage;\r\n    /*\r\n    GenericParticle.spawnCluster(\r\n      this.parent.room,\r\n      this.parent.x + 0.5,\r\n      this.parent.y + 0.5,\r\n      \"#fbf236\",\r\n    );\r\n    */\r\n\r\n    if (this.health <= 0) {\r\n      this.remove();\r\n    }\r\n    return damageOverShield;\r\n  };\r\n\r\n  tick = () => {\r\n    if (!this.parent || !(this.parent as any).room) {\r\n      this.dead = true;\r\n      return;\r\n    }\r\n    if (this.parent?.dead) {\r\n      this.remove();\r\n    }\r\n    if (this.dead) {\r\n      if (this.parent && (this.parent as any).room) {\r\n        this.parent.room.projectiles = this.parent.room.projectiles.filter(\r\n          (projectile) => projectile !== this,\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = 1;\r\n    this.frame += 0.1 * delta;\r\n    if (this.frame >= 4) this.frame = 0;\r\n\r\n    this.drawableY = this.parent.drawableY - 0.05;\r\n    Game.ctx.globalCompositeOperation = \"difference\";\r\n    if (this.parent.shielded) {\r\n      Game.drawFX(\r\n        18 + Math.floor(this.frame),\r\n        9,\r\n        1,\r\n        1,\r\n        this.parent.x - this.parent.drawX,\r\n        this.parent.y - this.parent.drawY,\r\n        1,\r\n        1,\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Direction } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\n\r\nimport { Enemy } from \"./enemy\";\r\n\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { BeamEffect } from \"../../projectile/beamEffect\";\r\nimport { Player } from \"../../player/player\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Lighting } from \"../../lighting/lighting\";\r\nimport { Entity } from \"../entity\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { GameplaySettings } from \"../../game/gameplaySettings\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\n\r\nexport class OccultistEnemy extends Enemy {\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  shieldedEnemies: Enemy[];\r\n  range: number;\r\n  static tileX: number = 55;\r\n  static tileY: number = 8;\r\n  lastHealth: number;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.health = 6;\r\n    this.lastHealth = this.health;\r\n    this.maxHealth = 6;\r\n    this.tileX = 55;\r\n    this.tileY = 8;\r\n    this.seenPlayer = true;\r\n    this.name = \"occultist\";\r\n    this.range = 6;\r\n    this.aggro = false;\r\n    this.frame = 0;\r\n    this.hasShadow = true;\r\n    this.shieldedBefore = false;\r\n    this.shieldedEnemies = [];\r\n    this.shadeColor = \"#000000\";\r\n    this.lightSource = Lighting.newLightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      [20, 0, 40],\r\n      3.5,\r\n      20,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n    this.room.updateLighting();\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#2E0854\";\r\n    this.bloomAlpha = 1;\r\n    this.softBloomAlpha = 0;\r\n    this.dropChance = 1;\r\n    this.getDrop([\"occultist\"], false);\r\n    this.pushable = false;\r\n    this.chainPushable = false;\r\n    this.destroyableByOthers = false;\r\n  }\r\n\r\n  hit = (): number => {\r\n    return 1;\r\n  };\r\n\r\n  bleed = () => {};\r\n\r\n  uniqueKillBehavior = () => {\r\n    this.unshieldEnemies();\r\n    this.removeLightSource(this.lightSource);\r\n    this.lightSource = null;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    let enemiesToShield = this.enemyShieldCandidates();\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n\r\n      this.ticks++;\r\n\r\n      //if (this.ticks % 2 === 0) {\r\n      this.shieldEnemies(enemiesToShield);\r\n      this.updateShieldedEnemies();\r\n      if (this.shieldedEnemies.length > 0) {\r\n        // Choose the farthest shielded enemy\r\n        let targetEnemy = this.shieldedEnemies.reduce((farthest, current) => {\r\n          const dF = Utils.distance(this.x, this.y, farthest.x, farthest.y);\r\n          const dC = Utils.distance(this.x, this.y, current.x, current.y);\r\n          return dC > dF ? current : farthest;\r\n        });\r\n\r\n        // Build disable positions (other entities and nearby active spike traps)\r\n        let disablePositions = Array<astar.Position>();\r\n        for (const e of this.room.entities) {\r\n          if (e !== this) {\r\n            disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n          }\r\n        }\r\n        for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n          for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n            if (\r\n              this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n              (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n            ) {\r\n              disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Build grid\r\n        let grid = [] as any[];\r\n        for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n          grid[x] = [];\r\n          for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n            if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n              grid[x][y] = this.room.roomArray[x][y];\r\n            else grid[x][y] = false;\r\n          }\r\n        }\r\n\r\n        // A* toward the target enemy\r\n        const moves = astar.AStar.search(\r\n          grid,\r\n          this,\r\n          targetEnemy,\r\n          disablePositions,\r\n          false,\r\n          false,\r\n          true,\r\n          this.direction,\r\n        );\r\n\r\n        if (moves.length > 0) {\r\n          const oldX = this.x;\r\n          const oldY = this.y;\r\n          const moveX = moves[0].pos.x;\r\n          const moveY = moves[0].pos.y;\r\n\r\n          // Move one step toward target enemy\r\n          this.tryMove(moveX, moveY);\r\n          this.setDrawXY(oldX, oldY);\r\n\r\n          if (this.x > oldX) this.direction = Direction.RIGHT;\r\n          else if (this.x < oldX) this.direction = Direction.LEFT;\r\n          else if (this.y > oldY) this.direction = Direction.DOWN;\r\n          else if (this.y < oldY) this.direction = Direction.UP;\r\n        }\r\n      } else {\r\n        this.runAway();\r\n      }\r\n      //}\r\n    }\r\n\r\n    if (this.shieldedEnemies.length > 0) {\r\n      this.shadeColor = \"#2E0854\";\r\n    } else {\r\n      this.shadeColor = \"#000000\";\r\n    }\r\n    if (this.lightSource) {\r\n      this.lightSource.updatePosition(this.x + 0.5, this.y + 0.5);\r\n    }\r\n  };\r\n\r\n  onHurt = (damage: number = 1) => {\r\n    if (\r\n      this.health < this.lastHealth &&\r\n      this.health % 2 === 0 &&\r\n      this.health > 0\r\n    ) {\r\n      this.teleport();\r\n    }\r\n    this.lastHealth = this.health;\r\n  };\r\n\r\n  updateShieldedEnemies = () => {\r\n    this.shieldedEnemies.forEach((enemy) => {\r\n      if (enemy.dead) {\r\n        this.shieldedEnemies = this.shieldedEnemies.filter((e) => e !== enemy);\r\n      }\r\n    });\r\n  };\r\n\r\n  shieldEnemies = (enemiesToShield: Entity[]) => {\r\n    if (enemiesToShield.length > 0) {\r\n      enemiesToShield.forEach((enemy) => {\r\n        const distance = Utils.distance(this.x, this.y, enemy.x, enemy.y);\r\n        if (Random.rand() * 10 > distance) {\r\n          this.applyShieldTo(enemy as Enemy);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  enemyShieldCandidates = () => {\r\n    const uncappedCandidates = this.room.entities.filter(\r\n      (entity) =>\r\n        entity instanceof Enemy &&\r\n        Utils.distance(this.x, this.y, entity.x, entity.y) <= this.range &&\r\n        !entity.shielded &&\r\n        !entity.dead &&\r\n        entity !== this &&\r\n        !entity.shieldedBefore,\r\n    );\r\n    return uncappedCandidates.slice(0, GameplaySettings.MAX_OCCULTIST_SHIELDS);\r\n  };\r\n\r\n  unshieldEnemies = () => {\r\n    if (this.shieldedEnemies.length > 0) {\r\n      for (let enemy of this.shieldedEnemies) {\r\n        if (!enemy.cloned) {\r\n          enemy.removeShield();\r\n        }\r\n      }\r\n      this.shieldedEnemies = [];\r\n    }\r\n  };\r\n\r\n  applyShieldTo = (enemy: Enemy) => {\r\n    //this.shadeColor = \"#2E0854\";\r\n    this.shadeMultiplier = 1.5;\r\n    enemy.applyShield();\r\n    this.shieldedEnemies.push(enemy);\r\n    if (enemy.shielded && enemy.shield) {\r\n      let beam = new BeamEffect(enemy.x, enemy.y, this.x, this.y, enemy);\r\n      beam.compositeOperation = \"source-over\";\r\n      beam.color = \"#2E0854\";\r\n      beam.turbulence = 0.4;\r\n      beam.gravity = 0.1;\r\n      beam.iterations = 1;\r\n      beam.segments = 100;\r\n      beam.angleChange = 0.001;\r\n      beam.springDamping = 0.01;\r\n      beam.drawableY = enemy.drawableY;\r\n      beam.type = \"shield\";\r\n      this.room.projectiles.push(beam);\r\n    }\r\n  };\r\n\r\n  updateBeam = (delta: number) => {\r\n    for (let beam of this.room.projectiles) {\r\n      if (beam instanceof BeamEffect) {\r\n        if (\r\n          !this.shieldedEnemies.includes(beam.parent as Enemy) ||\r\n          beam.type !== \"shield\"\r\n        )\r\n          continue;\r\n        beam.setTarget(\r\n          this.x - this.drawX,\r\n          this.y - this.drawY,\r\n          beam.parent.x - beam.parent.drawX,\r\n          beam.parent.y - beam.parent.drawY,\r\n        );\r\n        beam.drawableY = beam.parent.drawableY;\r\n\r\n        switch (Math.floor(this.frame)) {\r\n          case 0:\r\n            beam.color = \"#2e0854\";\r\n            break;\r\n          case 1:\r\n            beam.color = \"#331988\";\r\n            break;\r\n          case 2:\r\n            beam.color = \"#4729db\";\r\n            break;\r\n          case 3:\r\n            beam.color = \"#331988\";\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    this.drawableY = this.y;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.updateBeam(delta);\r\n\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX + Math.floor(this.frame),\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\nimport { Room } from \"../room/room\";\r\nimport { Equippable } from \"./equippable\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Weapon } from \"./weapon/weapon\";\r\nimport { Armor } from \"./armor\";\r\n\r\nexport class WoodenShield extends Equippable {\r\n  health: number;\r\n  rechargeTurnCounter: number;\r\n  readonly RECHARGE_TURNS = 25;\r\n  static itemName = \"occult shield\";\r\n\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.health = 1;\r\n    this.rechargeTurnCounter = -1;\r\n    this.tileX = 3;\r\n    this.tileY = 2;\r\n    this.name = \"wooden shield\";\r\n  }\r\n\r\n  coEquippable = (other: Equippable): boolean => {\r\n    if (other instanceof Armor || other instanceof WoodenShield) return false;\r\n    /*\r\n    if (other instanceof Weapon && (other as Weapon).twoHanded) {\r\n      return false;\r\n    }\r\n    */\r\n    return true;\r\n  };\r\n\r\n  getDescription = (): string => {\r\n    return \"WOODEN SHIELD\\nA wooden shield. Absorbs one hit and breaks after 1 hit\";\r\n  };\r\n\r\n  tickInInventory = () => {\r\n    if (this.rechargeTurnCounter > 0) {\r\n      this.rechargeTurnCounter--;\r\n      this.cooldown = this.rechargeTurnCounter;\r\n\r\n      if (this.rechargeTurnCounter === 0) {\r\n        this.rechargeTurnCounter = -1;\r\n        this.cooldown = this.rechargeTurnCounter;\r\n        this.health = 1;\r\n      }\r\n    }\r\n  };\r\n\r\n  hurt = (damage: number) => {\r\n    if (this.health <= 0) return;\r\n    this.health -= Math.max(damage, 1);\r\n    this.wielder?.inventory.removeItem(this);\r\n    this.wielder?.game.pushMessage(\"Your wooden shield breaks.\");\r\n    //this.rechargeTurnCounter = this.RECHARGE_TURNS + 1;\r\n    //this.cooldown = this.rechargeTurnCounter;\r\n  };\r\n\r\n  drawGUI = (\r\n    delta: number,\r\n    playerMaxHealth: number,\r\n    quickbarStartX: number,\r\n  ) => {\r\n    // Get the quickbar's left edge position (same as in playerRenderer)\r\n    // Convert to tile coordinates\r\n    const heartStartX = (quickbarStartX - 7) / GameConstants.TILESIZE;\r\n    // Position after the hearts\r\n\r\n    const shieldX = Math.max(heartStartX, -0.2) + playerMaxHealth / 1.5 + 0.5;\r\n    let offsetY = GameConstants.WIDTH > 175 ? 0 : -1.25;\r\n\r\n    if (this.rechargeTurnCounter === -1)\r\n      Game.drawFX(\r\n        5,\r\n        2,\r\n        0.75,\r\n        0.75,\r\n        shieldX,\r\n        GameConstants.HEIGHT / GameConstants.TILESIZE - 1 + offsetY,\r\n        0.75,\r\n        0.75,\r\n      );\r\n    else {\r\n      let rechargeProportion =\r\n        1 - this.rechargeTurnCounter / this.RECHARGE_TURNS;\r\n\r\n      if (rechargeProportion < 0.5)\r\n        Game.drawFX(\r\n          7,\r\n          2,\r\n          0.75,\r\n          0.75,\r\n          shieldX,\r\n          GameConstants.HEIGHT / GameConstants.TILESIZE - 1 + offsetY,\r\n          0.75,\r\n          0.75,\r\n        );\r\n      else\r\n        Game.drawFX(\r\n          8,\r\n          2,\r\n          0.75,\r\n          0.75,\r\n          shieldX,\r\n          GameConstants.HEIGHT / GameConstants.TILESIZE - 1 + offsetY,\r\n          0.75,\r\n          0.75,\r\n        );\r\n    }\r\n  };\r\n}\r\n","import { Entity } from \"./entity\";\r\nimport { Room } from \"../room/room\";\r\nimport { Game } from \"../game\";\r\nimport { Heart } from \"../item/usable/heart\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\nimport { GenericParticle } from \"../particle/genericParticle\";\r\nimport { Shrooms } from \"../item/usable/shrooms\";\r\nimport { EntityType } from \"./entity\";\r\nimport { ImageParticle } from \"../particle/imageParticle\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { Tile } from \"../tile/tile\";\r\nimport { DownLadder } from \"../tile/downLadder\";\r\nimport { LockType } from \"../tile/lockable\";\r\nimport { EnvType } from \"../constants/environmentTypes\";\r\nimport { Random } from \"../utility/random\";\r\n\r\nexport class DownladderMaker extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.name = \"DownladderMaker\";\r\n    this.dead = true;\r\n  }\r\n\r\n  createDownladder = () => {\r\n    let environment = this.room.depth < 1 ? EnvType.FOREST : EnvType.CAVE;\r\n    if (this.room.depth > 1) {\r\n      environment = Random.rand() < 0.5 ? EnvType.FOREST : EnvType.CAVE;\r\n    }\r\n    let newTile = new DownLadder(\r\n      this.room,\r\n      this.game,\r\n      this.x,\r\n      this.y,\r\n      true,\r\n      environment,\r\n      LockType.NONE,\r\n    );\r\n\r\n    if (newTile.lockable.isLocked()) {\r\n      console.log(\"adding key to downladder\");\r\n\r\n      this.game.levels[this.room.depth].distributeKey(newTile);\r\n    }\r\n    this.room.roomArray[this.x][this.y] = newTile;\r\n  };\r\n\r\n  draw = (delta: number) => {};\r\n\r\n  drawTopLayer = (delta: number) => {};\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Tile } from \"./tile\";\r\nimport { Room } from \"../room/room\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\nimport { Wall } from \"./wall\";\r\nimport { Random } from \"../utility/random\";\r\n\r\nexport class Window extends Wall {\r\n  frame: number;\r\n  private tileYOffset: number;\r\n  private isBottomWall: boolean;\r\n  //private torchOffset: number;\r\n  lightSource: LightSource;\r\n\r\n  constructor(room: Room, x: number, y: number, isBottomWall?: boolean) {\r\n    super(room, x, y);\r\n\r\n    this.isBottomWall = isBottomWall;\r\n    //this.torchOffset = isBottomWall ? 1 : 0;\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      20,\r\n      [135, 206, 235], //sky blue rgb array,\r\n      3,\r\n    );\r\n    this.room.lightSources.push(this.lightSource);\r\n    //this.frame = Random.rand() * 12;\r\n    //this.tileYOffset = 6;\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#00FFFF\"; //cyan\r\n    this.bloomAlpha = 1;\r\n    this.softBloomAlpha = 0;\r\n  }\r\n\r\n  isSolid = (): boolean => {\r\n    return true;\r\n  };\r\n  canCrushEnemy = (): boolean => {\r\n    return true;\r\n  };\r\n  isOpaque = (): boolean => {\r\n    const wallInfo = this.room.wallInfo.get(`${this.x},${this.y}`);\r\n    if (!wallInfo) return true;\r\n    return (\r\n      (!wallInfo.isTopWall && !wallInfo.isInnerWall) ||\r\n      wallInfo.isLeftWall ||\r\n      wallInfo.isRightWall\r\n    );\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    this.drawWall(delta);\r\n    const wallInfo = this.room.wallInfo.get(`${this.x},${this.y}`);\r\n    if (!wallInfo) this.tileYOffset = 6;\r\n    this.frame += 0.3 * delta;\r\n    if (this.frame >= 12) this.frame = 0;\r\n\r\n    this.tileYOffset =\r\n      wallInfo?.innerWallType === \"bottomInner\" ||\r\n      wallInfo?.innerWallType === \"surroundedInner\"\r\n        ? 0\r\n        : 6;\r\n    if (!this.isBottomWall) {\r\n      Game.drawTile(\r\n        0,\r\n        this.skin,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n\r\n    if (this.isBottomWall) {\r\n      Game.drawTile(\r\n        0,\r\n        this.skin,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y - 0.6,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        1,\r\n      );\r\n    }\r\n  };\r\n}\r\n","import { Item } from \"./item\";\r\nimport { Player, PlayerDirection } from \"../player/player\";\r\nimport { Direction, Game } from \"../game\";\r\nimport { Room, RoomType } from \"../room/room\";\r\nimport { TextParticle } from \"../particle/textParticle\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Usable } from \"./usable/usable\";\r\nimport { DownLadder } from \"../tile/downLadder\";\r\nimport { Tile } from \"../tile/tile\";\r\nimport { SpawnFloor } from \"../tile/spawnfloor\";\r\nimport { SpikeTrap } from \"../tile/spiketrap\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { globalEventBus } from \"../event/eventBus\";\r\nimport { BishopEnemy } from \"../entity/enemy/bishopEnemy\";\r\nimport { Enemy } from \"../entity/enemy/enemy\";\r\n\r\nexport class EntitySpawner extends Usable {\r\n  room: Room;\r\n  count: number;\r\n  player: Player;\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.room = level;\r\n    this.count = 0;\r\n    this.tileX = 31;\r\n    this.tileY = 0;\r\n    this.setupEventListeners();\r\n    this.player = this.room.game.players[0];\r\n\r\n    this.stackable = false;\r\n  }\r\n  onUse = (player: Player): void => {};\r\n\r\n  spawnEntity = (entity: Entity): void => {\r\n    Entity.add(this.room, this.player.game, this.player.x, this.player.y);\r\n    //console.log(\"Entity spawned\");\r\n  };\r\n\r\n  commandHandler = (command: string): void => {\r\n    const player = this.room.game.players[0];\r\n    command = command.toLowerCase();\r\n    if (!command.startsWith(\"/new\")) {\r\n      return;\r\n    }\r\n    switch (command.split(\" \")[1]) {\r\n      case \"bishop\":\r\n        this.spawnEntity(\r\n          new BishopEnemy(\r\n            this.room,\r\n            this.player.game,\r\n            this.player.x,\r\n            this.player.y,\r\n          ),\r\n        );\r\n        break;\r\n      default:\r\n        //console.log(`Unknown command: ${command}`);\r\n        break;\r\n    }\r\n    //console.log(`Command executed: ${command}`);\r\n  };\r\n\r\n  private setupEventListeners(): void {\r\n    //console.log(\"Setting up event listeners\");\r\n    globalEventBus.on(\"ChatMessage\", this.commandHandler.bind(this));\r\n    //console.log(\"Event listeners set up\");\r\n  }\r\n\r\n  getDescription = (): string => {\r\n    return \"YOU SHOULD NOT HAVE THIS\";\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { WeaponFragments } from \"../../item/usable/weaponFragments\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class BishopStatue extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 7;\r\n    this.tileY = 4;\r\n    this.hasShadow = true;\r\n    this.pushable = true;\r\n    this.name = \"bishopStatue\";\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 25;\r\n    if (Random.rand() < 0.1) {\r\n      this.drops.push(new WeaponFragments(this.room, this.x, this.y));\r\n    } else {\r\n      this.drops.push(new Coin(this.room, this.x, this.y));\r\n    }\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Player } from \"../player/player\";\r\nimport { Direction, Game } from \"../game\";\r\nimport { Room, RoomType } from \"../room/room\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { SkinType, Tile } from \"./tile\";\r\nimport { IdGenerator } from \"../globalStateManager/IdGenerator\";\r\nimport { EntityType } from \"../entity/entity\";\r\nimport { Key } from \"../item/key\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\nimport { GameplaySettings } from \"../game/gameplaySettings\";\r\nimport { Passageway } from \"./passageway\";\r\n\r\nexport enum DoorDir {\r\n  North = \"North\",\r\n  East = \"East\",\r\n  South = \"South\",\r\n  West = \"West\",\r\n}\r\n\r\nexport enum DoorType {\r\n  DOOR,\r\n  LOCKEDDOOR,\r\n  GUARDEDDOOR,\r\n  TUNNELDOOR,\r\n}\r\n\r\nexport class Door extends Passageway {\r\n  globalId: string;\r\n  linkedDoor: Door;\r\n  opened: boolean;\r\n  doorDir: Direction;\r\n  guarded: boolean;\r\n  type: DoorType;\r\n  locked: boolean;\r\n  iconTileX: number;\r\n  iconXOffset: number;\r\n  iconYOffset: number;\r\n  unlocking: boolean;\r\n  iconAlpha: number;\r\n  tileXOffset: number;\r\n  tileX: number;\r\n  drawTopOf: boolean;\r\n  alpha: number;\r\n  startRoom: boolean;\r\n\r\n  enteredFrom:\r\n    | Direction.LEFT\r\n    | Direction.RIGHT\r\n    | Direction.DOWN\r\n    | Direction.UP\r\n    | null;\r\n\r\n  constructor(\r\n    room: Room,\r\n    game: Game,\r\n    x: number,\r\n    y: number,\r\n    doorDir: Direction,\r\n    doorType: DoorType,\r\n  ) {\r\n    super(room, game, x, y);\r\n    this.globalId = IdGenerator.generate(\"D\");\r\n    this.opened = false;\r\n    this.doorDir = doorDir;\r\n    this.locked = false;\r\n    this.isDoor = true;\r\n    this.type = doorType;\r\n    this.iconTileX = 2;\r\n    this.iconXOffset = 0;\r\n    this.iconYOffset = 0;\r\n    this.unlocking = false;\r\n    this.iconAlpha = 1;\r\n    this.tileXOffset = 0;\r\n    this.tileX = 2;\r\n    this.drawTopOf = true;\r\n    let lightOffsetX = 0;\r\n    let lightOffsetY = 0;\r\n    this.alpha = 1;\r\n    this.enteredFrom = null;\r\n    switch (this.doorDir) {\r\n      case Direction.UP:\r\n        lightOffsetY = -0.5;\r\n      case Direction.DOWN:\r\n        lightOffsetY = 0.5;\r\n      case Direction.LEFT:\r\n        lightOffsetX = -0.5;\r\n      case Direction.RIGHT:\r\n        lightOffsetX = 0.5;\r\n    }\r\n    this.lightSource = new LightSource(x + 0.5, y + 0.5, 0, [0, 0, 0], 9);\r\n    this.room.lightSources.push(this.lightSource);\r\n\r\n    switch (this.type) {\r\n      case DoorType.GUARDEDDOOR:\r\n        if (GameplaySettings.NO_ENEMIES) break;\r\n        this.guard();\r\n        break;\r\n      case DoorType.LOCKEDDOOR:\r\n        this.lock();\r\n        break;\r\n      case DoorType.DOOR:\r\n        this.removeLock();\r\n        break;\r\n      case DoorType.TUNNELDOOR:\r\n        // this.tileX = ? find the right tile for this\r\n        this.locked = true;\r\n        this.iconTileX = 10;\r\n        this.iconXOffset = 1 / 32;\r\n        this.tileXOffset = 12;\r\n        this.drawTopOf = false;\r\n        break;\r\n    }\r\n  }\r\n\r\n  shadeAmount = (\r\n    offsetX: number = 0,\r\n    offsetY: number = 0,\r\n    disable: boolean = true,\r\n  ) => {\r\n    if (GameConstants.SMOOTH_LIGHTING && disable) return 0;\r\n    const vis = this.room.softVis[this.x + offsetX][this.y + offsetY];\r\n    if (this.opened) return vis / 2;\r\n    else return vis;\r\n  };\r\n\r\n  openTunnelXOffset = () => {\r\n    if (this.type === DoorType.TUNNELDOOR) {\r\n      if (!this.opened) {\r\n        return 0;\r\n      } else {\r\n        return -3;\r\n      }\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  guard = () => {\r\n    this.type = DoorType.GUARDEDDOOR;\r\n    this.locked = true;\r\n    this.iconTileX = 9;\r\n    this.iconXOffset = 1 / 32;\r\n  };\r\n\r\n  lock = () => {\r\n    this.type = DoorType.LOCKEDDOOR;\r\n    this.locked = true;\r\n    this.iconTileX = 10;\r\n    this.iconXOffset = 1 / 32;\r\n  };\r\n\r\n  removeLock = () => {\r\n    if (this.type !== DoorType.TUNNELDOOR) this.type = DoorType.DOOR;\r\n    this.locked = false;\r\n  };\r\n\r\n  removeLockIcon = () => {\r\n    this.iconYOffset = 0;\r\n    this.unlocking = false;\r\n    this.iconTileX = 2;\r\n    this.iconXOffset = 0;\r\n    this.iconAlpha = 1;\r\n  };\r\n\r\n  canUnlock = (player: Player) => {\r\n    if (this.type === DoorType.LOCKEDDOOR) {\r\n      let k = player.inventory.hasItem(Key);\r\n      if (k !== null) {\r\n        if (k.doorID === this.lockable.keyID) {\r\n          this.game.pushMessage(\"You use the key to unlock the door.\");\r\n\r\n          return true;\r\n        } else {\r\n          this.game.pushMessage(\"The key doesn't fit the lock.\");\r\n          return false;\r\n        }\r\n      } else\r\n        this.game.pushMessage(\"The door is locked tightly and won't budge.\");\r\n      return false;\r\n    }\r\n\r\n    if (this.type === DoorType.GUARDEDDOOR) {\r\n      this.room.checkForNoEnemies();\r\n      this.game.pushMessage(\r\n        \"There are still remaining foes guarding this door...\",\r\n      );\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      this.type === DoorType.TUNNELDOOR &&\r\n      (!this.opened || !this.linkedDoor.opened)\r\n    ) {\r\n      if (\r\n        this.linkedDoor === this.room.level.exitRoom.tunnelDoor ||\r\n        this.startRoom\r\n      ) {\r\n        this.game.pushMessage(\"The door refuses to budge from this side.\");\r\n        return false;\r\n      } else {\r\n        this.game.pushMessage(\r\n          \"You clear the debris, revealing a narrow tunnel.\",\r\n        );\r\n        return true;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  unlock = (player: Player) => {\r\n    if (this.type === DoorType.LOCKEDDOOR) {\r\n      let k = player.inventory.hasItem(Key);\r\n      if (k !== null) {\r\n        // remove key\r\n        player.inventory.removeItem(k);\r\n        Sound.unlock();\r\n        this.removeLock();\r\n        this.unlocking = true;\r\n      }\r\n    } else if (this.type === DoorType.TUNNELDOOR) {\r\n      this.locked = false;\r\n      this.unlocking = true;\r\n    }\r\n  };\r\n\r\n  unGuard = () => {\r\n    if (this.type === DoorType.GUARDEDDOOR) {\r\n      this.removeLock();\r\n      Sound.unlock();\r\n\r\n      this.game.tutorialActive = false;\r\n    }\r\n    setTimeout(() => {\r\n      this.removeLockIcon();\r\n    }, 1000);\r\n  };\r\n\r\n  link = (other: Door) => {\r\n    this.linkedDoor = other;\r\n  };\r\n\r\n  // Returns true if this door's room would be drawn before its linked door's room\r\n  // based on Game.drawRooms sorting (ascending by roomY + height)\r\n  isDrawnFirst = (): boolean => {\r\n    if (!this.linkedDoor || !this.linkedDoor.room) return false;\r\n    try {\r\n      const currentPathId = (this.game as any).currentPathId;\r\n      const roomsInPath = this.game.rooms.filter(\r\n        (r) => (r as any).pathId === currentPathId,\r\n      );\r\n      const sorted = roomsInPath\r\n        .slice()\r\n        .sort((a: any, b: any) => a.roomY + a.height - (b.roomY + b.height));\r\n      const thisIdx = sorted.indexOf(this.room as any);\r\n      const otherIdx = sorted.indexOf(this.linkedDoor.room as any);\r\n      if (thisIdx === -1 || otherIdx === -1) return false;\r\n      return thisIdx < otherIdx;\r\n    } catch {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  isSolid = (): boolean => {\r\n    if (this.locked) {\r\n      return true;\r\n    } else false;\r\n  };\r\n\r\n  canCrushEnemy = (): boolean => {\r\n    return true;\r\n  };\r\n\r\n  onCollide = (player: Player) => {\r\n    if (!this.opened) {\r\n      Sound.doorOpen();\r\n      if (this.doorDir === Direction.LEFT) {\r\n        this.enteredFrom = Direction.LEFT;\r\n        this.linkedDoor.enteredFrom = Direction.LEFT;\r\n      }\r\n      if (this.doorDir === Direction.RIGHT) {\r\n        this.enteredFrom = Direction.RIGHT;\r\n        this.linkedDoor.enteredFrom = Direction.RIGHT;\r\n      }\r\n    }\r\n    this.opened = true;\r\n\r\n    this.linkedDoor.opened = true;\r\n\r\n    if (this.doorDir === Direction.UP || this.doorDir === Direction.DOWN) {\r\n      this.game.changeLevelThroughDoor(player, this.linkedDoor);\r\n    } else\r\n      this.game.changeLevelThroughDoor(\r\n        player,\r\n        this.linkedDoor,\r\n        this.linkedDoor.room.roomX - this.room.roomX > 0 ? 1 : -1,\r\n      );\r\n    if (this.type === DoorType.TUNNELDOOR && !this.startRoom) {\r\n      this.game.pushMessage(\"The tunnel leads you back to the start.\");\r\n    }\r\n    this.linkedDoor.removeLock();\r\n    this.linkedDoor.removeLockIcon();\r\n    this.removeLockIcon();\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    Game.ctx.save();\r\n\r\n    if (this.doorDir === Direction.DOWN) {\r\n      Game.drawTile(\r\n        1,\r\n        this.skin,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n\r\n    if (this.doorDir === Direction.UP) {\r\n      //if top door\r\n      if (this.opened)\r\n        Game.drawTile(\r\n          6 + this.tileXOffset + this.openTunnelXOffset(),\r\n          this.skin,\r\n          1,\r\n          1,\r\n          this.x,\r\n          this.y,\r\n          1,\r\n          1,\r\n          this.room.shadeColor,\r\n          this.shadeAmount(0, 1),\r\n        );\r\n      else\r\n        Game.drawTile(\r\n          3 + this.tileXOffset + this.openTunnelXOffset(),\r\n          this.skin,\r\n          1,\r\n          1,\r\n          this.x,\r\n          this.y,\r\n          1,\r\n          1,\r\n          this.room.shadeColor,\r\n          this.shadeAmount(),\r\n        );\r\n    }\r\n\r\n    if (\r\n      this.doorDir !== Direction.UP &&\r\n      (this.isDrawnFirst() || !this.opened)\r\n      //!(this.opened && this.doorDir === Direction.RIGHT)\r\n    )\r\n      //if not top door\r\n      Game.drawTile(\r\n        1,\r\n        this.skin,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    //the following used to be in the drawaboveplayer function\r\n    if (this.doorDir === Direction.UP) {\r\n      //if top door\r\n      if (!this.drawTopOf) return;\r\n      if (!this.opened)\r\n        Game.drawTile(\r\n          13,\r\n          0,\r\n          1,\r\n          1,\r\n          this.x,\r\n          this.y - 1,\r\n          1,\r\n          1,\r\n          this.room.shadeColor,\r\n          this.shadeAmount(0, 1, false),\r\n        );\r\n      else\r\n        Game.drawTile(\r\n          14,\r\n          0,\r\n          1,\r\n          1,\r\n          this.x,\r\n          this.y - 1,\r\n          1,\r\n          1,\r\n          this.room.shadeColor,\r\n          this.shadeAmount(0, 1, false),\r\n        );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawAbovePlayer = (delta: number) => {};\r\n\r\n  drawAboveShading = (delta: number) => {\r\n    //if (this.type === DoorType.TUNNELDOOR) return;\r\n    this.updateFrame(delta);\r\n    Game.ctx.globalAlpha = this.iconAlpha;\r\n    let multiplier = 0.125;\r\n    if (this.unlocking === true) {\r\n      this.iconAlpha *= 0.92 ** delta;\r\n      this.iconYOffset -= 0.035 * delta;\r\n      multiplier = 0;\r\n      if (this.iconAlpha <= 0.01) {\r\n        this.removeLockIcon();\r\n      }\r\n    }\r\n    if (this.doorDir === Direction.UP) {\r\n      //if top door\r\n      Game.drawFX(\r\n        this.iconTileX,\r\n        2,\r\n        1,\r\n        1,\r\n        this.x + this.iconXOffset,\r\n        this.y -\r\n          1.25 +\r\n          multiplier * Math.sin((this.frame * Math.PI) / 50) +\r\n          this.iconYOffset,\r\n        1,\r\n        1,\r\n      );\r\n    } else {\r\n      if (this.doorDir === Direction.LEFT || this.doorDir === Direction.RIGHT)\r\n        this.iconYOffset = -0.5;\r\n      Game.drawFX(\r\n        this.iconTileX,\r\n        2,\r\n        1,\r\n        1,\r\n        this.x + this.iconXOffset,\r\n        this.y -\r\n          1.25 +\r\n          multiplier * Math.sin((this.frame * Math.PI) / 50) +\r\n          this.iconYOffset,\r\n        1,\r\n        1,\r\n      ); //if not top door\r\n    }\r\n    Game.ctx.globalAlpha = 1;\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { WeaponFragments } from \"../../item/usable/weaponFragments\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class Crate extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.tileX = 0;\r\n    this.tileY = 0;\r\n    this.hasShadow = true;\r\n    this.pushable = true;\r\n    this.name = \"crate\";\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 26;\r\n\r\n    /*\r\n    if (Random.rand() < 0.1) {\r\n      this.drops.push(new WeaponFragments(this.room, this.x, this.y, 10));\r\n    } else {\r\n      this.drops.push(new Coin(this.room, this.x, this.y));\r\n    }\r\n    */\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Usable } from \"./usable\";\r\n\r\nexport class Heart extends Usable {\r\n  static itemName = \"health potion\";\r\n\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.tileX = 8;\r\n    this.tileY = 0;\r\n    this.offsetY = -0.3;\r\n    this.name = Heart.itemName;\r\n    this.stackable = true;\r\n    this.description = \"restores 1 health\";\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    if (player.health < player.maxHealth) {\r\n      player.health = Math.min(player.maxHealth, player.health + 1);\r\n      if (this.level.game.rooms[player.levelID] === this.level.game.room)\r\n        Sound.heal();\r\n      if (this.stackCount > 1) {\r\n        this.stackCount--;\r\n      } else player.inventory.removeItem(this);\r\n      player.game.pushMessage(\"You drink the health potion.\");\r\n    }\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\n\r\nimport { Room } from \"../../room/room\";\r\n\r\nimport { WeaponFragments } from \"../usable/weaponFragments\";\r\n\r\nimport { Random } from \"../../utility/random\";\r\nexport class FishingRod extends Item {\r\n  static itemName = \"fishing rod\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.tileX = 31;\r\n    this.tileY = 2;\r\n    this.offsetY = -0.1;\r\n    this.description = \"useful for catching fish\";\r\n    this.name = FishingRod.itemName;\r\n  }\r\n\r\n  disassemble = () => {\r\n    this.level.game.pushMessage(\r\n      `You dissassemble your ${this.name} into fragments.`,\r\n    );\r\n\r\n    let inventory =\r\n      this.level.game.players[this.level.game.localPlayerID].inventory;\r\n    let inventoryX = this.x;\r\n    let inventoryY = this.y;\r\n    let numFragments = Math.floor(10 + Random.rand() * 10);\r\n    this.level.game.pushMessage(\r\n      `You dissassemble your fishing rod into ${numFragments} fragments.`,\r\n    );\r\n    inventory.removeItem(this);\r\n    inventory.addItem(\r\n      new WeaponFragments(this.level, inventoryX, inventoryY),\r\n      numFragments,\r\n    );\r\n  };\r\n}\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { HitWarning, HitWarningDirection } from \"../../drawable/hitWarning\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { DownLadder } from \"../../tile/downLadder\";\r\nimport { Door } from \"../../tile/door\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\n\r\nexport class BigFrogEnemy extends Enemy {\r\n  ticks: number;\r\n  frame: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  frameLength: number;\r\n  startFrame: number;\r\n  animationSpeed: number;\r\n  tickCount: number;\r\n  rumbling: boolean;\r\n  jumping: boolean;\r\n  jumpDistance: number;\r\n  halfJumped: boolean;\r\n  static difficulty: number = 1;\r\n  static tileX: number = 37;\r\n  static tileY: number = 24;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 4;\r\n    this.maxHealth = 4;\r\n    this.defaultMaxHealth = 4;\r\n    this.tileX = 37;\r\n    this.tileY = 24;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.deathParticleColor = \"#ffffff\";\r\n    this.frameLength = 3;\r\n    this.startFrame = 0;\r\n    this.animationSpeed = 0.1;\r\n    this.tickCount = 0;\r\n    this.jumping = false;\r\n    this.jumpDistance = 1;\r\n    this.drop = drop ? drop : new Coin(this.room, this.x, this.y);\r\n    this.name = \"bigfrog\";\r\n    this.orthogonalAttack = true;\r\n    this.diagonalAttack = true;\r\n    this.jumpHeight = 2;\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 30;\r\n    this.canDestroyOthers = true;\r\n    this.halfJumped = false;\r\n    this.canCrushOthers = true;\r\n    this.dropChance = 1;\r\n    //if (drop) this.drop = drop;\r\n    this.h = 2;\r\n    this.w = 2;\r\n    this.getDrop([\"frog\"], true);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  poison = () => {};\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    if (this.cloned) return;\r\n\r\n    this.tileX = 37;\r\n    this.frameLength = 3;\r\n    this.animationSpeed = 0.1;\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      if (!this.seenPlayer) {\r\n        this.tileX = 37;\r\n        this.lookForPlayer();\r\n      } else if (this.seenPlayer) {\r\n        this.tileX = 37;\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          this.ticks++;\r\n          if (this.ticks % 2 === 1) {\r\n            this.rumbling = true;\r\n            let oldX = this.x;\r\n            let oldY = this.y;\r\n            let disablePositions = Array<astar.Position>();\r\n\r\n            for (const e of this.room.entities) {\r\n              if (e !== this && !e.destroyable) {\r\n                // Block all tiles occupied by entities (supports multi-tile entities)\r\n                for (let ex = 0; ex < (e.w || 1); ex++) {\r\n                  for (let ey = 0; ey < (e.h || 1); ey++) {\r\n                    disablePositions.push({\r\n                      x: e.x + ex,\r\n                      y: e.y + ey,\r\n                    } as astar.Position);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            // Account for this enemy's 2x2 footprint when avoiding active spike traps\r\n            for (let xx = this.x - 1; xx <= this.x + this.w; xx++) {\r\n              for (let yy = this.y - 1; yy <= this.y + this.h; yy++) {\r\n                if (\r\n                  this.room.roomArray[xx] &&\r\n                  this.room.roomArray[xx][yy] &&\r\n                  this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                  (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n                ) {\r\n                  // don't walk on active spiketraps\r\n                  disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n                }\r\n              }\r\n            }\r\n\r\n            let targetPosition = {\r\n              x: this.targetPlayer.x,\r\n              y: this.targetPlayer.y,\r\n            };\r\n\r\n            // 2x2-aware jump-over logic\r\n            const px = this.targetPlayer.x;\r\n            const py = this.targetPlayer.y;\r\n            const sharesRow = py >= this.y && py < this.y + this.h;\r\n            const sharesCol = px >= this.x && px < this.x + this.w;\r\n\r\n            const isRightAdjacent = sharesRow && px === this.x + this.w; // x + 2\r\n            const isLeftAdjacent = sharesRow && px === this.x - 1;\r\n            const isBelowAdjacent = sharesCol && py === this.y + this.h; // y + 2\r\n            const isAboveAdjacent = sharesCol && py === this.y - 1;\r\n\r\n            // Track whether we attempted a jump-over and whether it succeeded\r\n            let triedAdjacentJump = false;\r\n            let performedJump = false;\r\n\r\n            const isAreaClear = (\r\n              tx: number,\r\n              ty: number,\r\n              w: number,\r\n              h: number,\r\n            ): boolean => {\r\n              for (let xx = 0; xx < w; xx++) {\r\n                for (let yy = 0; yy < h; yy++) {\r\n                  const ax = tx + xx;\r\n                  const ay = ty + yy;\r\n                  if (!this.room.roomArray[ax] || !this.room.roomArray[ax][ay])\r\n                    return false;\r\n                  const tile = this.room.roomArray[ax][ay];\r\n                  if (\r\n                    tile.isSolid() ||\r\n                    tile.isDoor ||\r\n                    tile instanceof DownLadder\r\n                  )\r\n                    return false;\r\n                  // prevent entity overlap\r\n                  for (const e of this.room.entities) {\r\n                    if (e !== this && !e.destroyable) {\r\n                      if (\r\n                        !(\r\n                          e.x >= tx + w ||\r\n                          e.x + (e.w || 1) <= tx ||\r\n                          e.y >= ty + h ||\r\n                          e.y + (e.h || 1) <= ty\r\n                        )\r\n                      ) {\r\n                        return false;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              return true;\r\n            };\r\n\r\n            if (isRightAdjacent) {\r\n              triedAdjacentJump = true;\r\n              const tx = px + 1;\r\n              const ty = this.y;\r\n              if (isAreaClear(tx, ty, this.w, this.h)) {\r\n                this.tryMove(tx, ty);\r\n                this.setDrawXY(oldX, oldY);\r\n                if (this.jumping) {\r\n                  this.frame = 8;\r\n                  this.animationSpeed = 1;\r\n                }\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n                this.rumbling = false;\r\n                performedJump = true;\r\n                return;\r\n              }\r\n            } else if (isLeftAdjacent) {\r\n              triedAdjacentJump = true;\r\n              const tx = px - this.w;\r\n              const ty = this.y;\r\n              if (isAreaClear(tx, ty, this.w, this.h)) {\r\n                this.tryMove(tx, ty);\r\n                this.setDrawXY(oldX, oldY);\r\n                if (this.jumping) {\r\n                  this.frame = 8;\r\n                  this.animationSpeed = 1;\r\n                }\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n                this.rumbling = false;\r\n                performedJump = true;\r\n                return;\r\n              }\r\n            } else if (isBelowAdjacent) {\r\n              triedAdjacentJump = true;\r\n              const tx = this.x;\r\n              const ty = py + 1;\r\n              if (isAreaClear(tx, ty, this.w, this.h)) {\r\n                this.tryMove(tx, ty);\r\n                this.setDrawXY(oldX, oldY);\r\n                if (this.jumping) {\r\n                  this.frame = 8;\r\n                  this.animationSpeed = 1;\r\n                }\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n                this.rumbling = false;\r\n                performedJump = true;\r\n                return;\r\n              }\r\n            } else if (isAboveAdjacent) {\r\n              triedAdjacentJump = true;\r\n              const tx = this.x;\r\n              const ty = py - this.h;\r\n              if (isAreaClear(tx, ty, this.w, this.h)) {\r\n                this.tryMove(tx, ty);\r\n                this.setDrawXY(oldX, oldY);\r\n                if (this.jumping) {\r\n                  this.frame = 8;\r\n                  this.animationSpeed = 1;\r\n                }\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n                this.rumbling = false;\r\n                performedJump = true;\r\n                return;\r\n              }\r\n            }\r\n            // If adjacent and attempted to jump but destination was blocked, do nothing this turn\r\n            if (triedAdjacentJump && !performedJump) {\r\n              this.rumbling = false;\r\n              return;\r\n            }\r\n            // Build pathfinding grid only if we didn't jump over\r\n            let grid = [];\r\n            for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n              grid[x] = [];\r\n              for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n                if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                  grid[x][y] = this.room.roomArray[x][y];\r\n                else grid[x][y] = false;\r\n              }\r\n            }\r\n            let moves = astar.AStar.search(\r\n              grid,\r\n              this,\r\n              targetPosition,\r\n              disablePositions,\r\n              false,\r\n              false,\r\n              false,\r\n              undefined,\r\n              undefined,\r\n              false,\r\n              this.lastPlayerPos,\r\n            );\r\n            console.log(moves); //DON'T REMOVE THIS\r\n\r\n            if (moves[1]) {\r\n              const wouldHit = (\r\n                player: Player,\r\n                moveX: number,\r\n                moveY: number,\r\n              ) => {\r\n                return (\r\n                  player.x >= moveX &&\r\n                  player.x < moveX + this.w &&\r\n                  player.y >= moveY &&\r\n                  player.y < moveY + this.h\r\n                );\r\n              };\r\n\r\n              let hitPlayer = false;\r\n              for (const i in this.game.players) {\r\n                if (this.game.rooms[this.game.players[i].levelID] !== this.room)\r\n                  continue;\r\n                if (\r\n                  wouldHit(this.game.players[i], moves[1].pos.x, moves[1].pos.y)\r\n                ) {\r\n                  const closestTile = this.closestTile(this.game.players[i]);\r\n                  this.game.players[i].hurt(this.hit(), this.name);\r\n                  this.drawX += 1.5 * (closestTile.x - this.game.players[i].x);\r\n                  this.drawY += 1.5 * (closestTile.y - this.game.players[i].y);\r\n                  if (\r\n                    this.game.players[i] ===\r\n                    this.game.players[this.game.localPlayerID]\r\n                  )\r\n                    this.game.shakeScreen(5 * this.drawX, 5 * this.drawY);\r\n                  hitPlayer = true;\r\n                }\r\n              }\r\n              if (!hitPlayer) {\r\n                if (moves.length > 1) {\r\n                  let moveX = moves[1].pos.x;\r\n                  let moveY = moves[1].pos.y;\r\n                  this.tryMove(moveX, moveY);\r\n                  this.setDrawXY(oldX, oldY);\r\n\r\n                  if (this.jumping) {\r\n                    this.frame = 8;\r\n                    this.animationSpeed = 1;\r\n                  }\r\n                  if (this.x > moveX) this.direction = Direction.RIGHT;\r\n                  else if (this.x < moveX) this.direction = Direction.LEFT;\r\n                  else if (this.y > moveY) this.direction = Direction.DOWN;\r\n                  else if (this.y < moveY) this.direction = Direction.UP;\r\n                }\r\n              }\r\n            }\r\n            this.rumbling = false;\r\n          } else {\r\n            this.makeBigHitWarnings();\r\n            this.rumbling = true;\r\n            this.tileX = 43;\r\n            this.frame = 0;\r\n            this.frameLength = 2;\r\n            this.animationSpeed = 0.2;\r\n          }\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                if (this.ticks % 2 === 0) {\r\n                  this.makeBigHitWarnings();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  jump = (delta: number) => {\r\n    //console.log(`this.drawX, this.drawY: ${this.drawX}, ${this.drawY}`);\r\n    if (this.jumping && !this.cloned) {\r\n      let j = Math.max(Math.abs(this.drawX), Math.abs(this.drawY));\r\n      if (j >= 1) {\r\n        this.jumpDistance = 2;\r\n      }\r\n      this.jumpY =\r\n        Math.sin((j / (this.jumpDistance + 1)) * Math.PI) * this.jumpHeight;\r\n      if (this.jumpY < 0.01 && this.jumpY > -0.01) {\r\n        this.jumpY = 0;\r\n        this.jumpDistance = 1;\r\n      }\r\n      if (this.jumpY > this.jumpHeight) this.jumpY = this.jumpHeight;\r\n    }\r\n  };\r\n\r\n  bigEnemyShake = () => {\r\n    if (this.w > 1 || this.h > 1) {\r\n      setTimeout(() => {\r\n        this.game.shakeScreen(0 * this.drawX, 5);\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  makeHitWarnings = () => {\r\n    const cullFactor = 0.25;\r\n    const player: Player = this.getPlayer();\r\n    const orthogonal = this.orthogonalAttack;\r\n    const diagonal = this.diagonalAttack;\r\n    const forwardOnly = this.forwardOnlyAttack;\r\n    const direction = this.direction;\r\n    const orthoRange = this.attackRange;\r\n    const diagRange = this.diagonalAttackRange;\r\n\r\n    const generateOffsets = (\r\n      isOrthogonal: boolean,\r\n      range: number,\r\n    ): number[][] => {\r\n      const baseOffsets = isOrthogonal\r\n        ? [\r\n            [-2, 0],\r\n            [2, 0],\r\n            [0, -2],\r\n            [0, 2],\r\n          ]\r\n        : [\r\n            [-1, -1],\r\n            [1, 1],\r\n            [1, -1],\r\n            [-1, 1],\r\n          ];\r\n      return baseOffsets.flatMap(([dx, dy]) =>\r\n        Array.from({ length: range }, (_, i) => [(i + 1) * dx, (i + 1) * dy]),\r\n      );\r\n    };\r\n\r\n    const directionOffsets = {\r\n      [Direction.LEFT]: [-1, 0],\r\n      [Direction.RIGHT]: [1, 0],\r\n      [Direction.UP]: [0, -1],\r\n      [Direction.DOWN]: [0, 1],\r\n    };\r\n\r\n    let offsets: number[][] = [];\r\n    if (forwardOnly) {\r\n      const [dx, dy] = directionOffsets[direction];\r\n      offsets = Array.from({ length: orthoRange }, (_, i) => [\r\n        (i + 1) * dx,\r\n        (i + 1) * dy,\r\n      ]);\r\n    } else {\r\n      if (orthogonal) offsets.push(...generateOffsets(true, orthoRange));\r\n      if (diagonal) offsets.push(...generateOffsets(false, diagRange));\r\n    }\r\n\r\n    const warningCoordinates = offsets\r\n      .map(([dx, dy]) => ({\r\n        x: dx,\r\n        y: dy,\r\n        distance: Utils.distance(dx, dy, player.x - this.x, player.y - this.y),\r\n      }))\r\n      .sort((a, b) => a.distance - b.distance);\r\n\r\n    const keepCount = Math.ceil(warningCoordinates.length * (1 - cullFactor));\r\n    const culledWarnings = warningCoordinates.slice(0, keepCount);\r\n\r\n    culledWarnings.forEach(({ x, y }) => {\r\n      const positions = [\r\n        { x: this.x, y: this.y },\r\n        { x: this.x + 1, y: this.y },\r\n        { x: this.x, y: this.y + 1 },\r\n        { x: this.x + 1, y: this.y + 1 },\r\n      ];\r\n      for (const position of positions) {\r\n        const targetX = position.x + x;\r\n        const targetY = position.y + y;\r\n        if (this.isWithinRoomBounds(targetX, targetY)) {\r\n          const hitWarning = new HitWarning(\r\n            this.game,\r\n            targetX,\r\n            targetY,\r\n            position.x,\r\n            position.y,\r\n            true,\r\n            false,\r\n            this,\r\n          );\r\n\r\n          const dir = hitWarning.getPointerDir();\r\n          const ox = position.x - this.x; // 0 or 1\r\n          const oy = position.y - this.y; // 0 or 1\r\n\r\n          let allowed: HitWarningDirection[] = [];\r\n          if (ox === 1 && oy === 1) {\r\n            // bottom-right tile: allow only south/east/southeast\r\n            allowed = [\r\n              HitWarningDirection.South,\r\n              HitWarningDirection.East,\r\n              HitWarningDirection.SouthEast,\r\n            ];\r\n          } else if (ox === 1 && oy === 0) {\r\n            // top-right tile: allow north/east/northeast\r\n            allowed = [\r\n              HitWarningDirection.North,\r\n              HitWarningDirection.East,\r\n              HitWarningDirection.NorthEast,\r\n            ];\r\n          } else if (ox === 0 && oy === 1) {\r\n            // bottom-left tile: allow south/west/southwest\r\n            allowed = [\r\n              HitWarningDirection.South,\r\n              HitWarningDirection.West,\r\n              HitWarningDirection.SouthWest,\r\n            ];\r\n          } else {\r\n            // top-left tile: allow north/west/northwest\r\n            allowed = [\r\n              HitWarningDirection.North,\r\n              HitWarningDirection.West,\r\n              HitWarningDirection.NorthWest,\r\n            ];\r\n          }\r\n\r\n          if (allowed.includes(dir)) {\r\n            this.room.hitwarnings.push(hitWarning);\r\n          }\r\n\r\n          //this.hitWarnings.push(hitWarning);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n\r\n    this.healthBar.draw(\r\n      delta,\r\n      this.health,\r\n      this.maxHealth,\r\n      this.x + 0.5,\r\n      this.y,\r\n      true,\r\n    );\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.frame += this.animationSpeed * delta;\r\n      if (this.frame >= this.frameLength) {\r\n        this.frame = 0;\r\n      }\r\n      let rumbleX = this.rumble(this.rumbling, this.frame).x;\r\n      let rumbleY = this.rumble(this.rumbling, this.frame).y;\r\n      if (this.drawX !== 0 || this.drawY !== 0) {\r\n        this.jumping = true;\r\n      } else {\r\n        this.jumping = false;\r\n      }\r\n      if (this.jumping) {\r\n        if (this.frame < 4) this.frame = 4;\r\n        this.frameLength = 11;\r\n        this.animationSpeed = 0.2;\r\n      } else {\r\n        this.frameLength = 3;\r\n        this.animationSpeed = 0.1;\r\n      }\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX +\r\n          (this.tileX !== 59 && !this.rumbling && !this.cloned\r\n            ? Math.floor(this.frame)\r\n            : 0) *\r\n            2,\r\n        this.tileY /*+ this.direction * 2,*/,\r\n        2,\r\n        3,\r\n        this.x + rumbleX - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n        2,\r\n        3,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta, 0.5 * GameConstants.TILESIZE);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta, 0.5 * GameConstants.TILESIZE);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Usable } from \"./usable\";\r\nimport { Weapon } from \"../weapon/weapon\";\r\n\r\nexport class WeaponPoison extends Usable {\r\n  static itemName = \"weapon poison\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.tileX = 11;\r\n    this.tileY = 4;\r\n    this.offsetY = -0.3;\r\n    this.canUseOnOther = true;\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    player.health = Math.min(player.maxHealth, player.health + 1);\r\n    if (this.level.game.rooms[player.levelID] === this.level.game.room)\r\n      Sound.heal();\r\n\r\n    //this.level.items = this.level.items.filter((x) => x !== this); // removes itself from the level\r\n  };\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (other instanceof Weapon) {\r\n      other.applyStatus({ poison: true, blood: false });\r\n      player.inventory.removeItem(this);\r\n      this.level.game.pushMessage(\r\n        `You apply the poison to your ${other.name}.`,\r\n      );\r\n      console.log(`weapon poison used on ${other.name}`);\r\n    }\r\n  };\r\n\r\n  getDescription = () => {\r\n    return \"WEAPON POISON\\nCan be applied to weapons to deal poison damage\";\r\n  };\r\n}\r\n","import { Barrel } from \"../entity/object/barrel\";\r\nimport { BigSkullEnemy } from \"../entity/enemy/bigSkullEnemy\";\r\nimport { ChargeEnemy, ChargeEnemyState } from \"../entity/enemy/chargeEnemy\";\r\nimport { CoalResource } from \"../entity/resource/coalResource\";\r\nimport { Crate } from \"../entity/object/crate\";\r\nimport { EmeraldResource } from \"../entity/resource/emeraldResource\";\r\nimport { Entity, EntityDirection } from \"../entity/entity\";\r\nimport { GoldResource } from \"../entity/resource/goldResource\";\r\nimport { KnightEnemy } from \"../entity/enemy/knightEnemy\";\r\nimport { PottedPlant } from \"../entity/object/pottedPlant\";\r\nimport { Pot } from \"../entity/object/pot\";\r\nimport { SkullEnemy } from \"../entity/enemy/skullEnemy\";\r\nimport { CrabEnemy } from \"../entity/enemy/crabEnemy\";\r\nimport { Spawner } from \"../entity/enemy/spawner\";\r\nimport { VendingMachine } from \"../entity/object/vendingMachine\";\r\nimport { WizardEnemy, WizardState } from \"../entity/enemy/wizardEnemy\";\r\nimport { ZombieEnemy } from \"../entity/enemy/zombieEnemy\";\r\nimport { Direction, Game } from \"../game\";\r\nimport { HitWarning } from \"../drawable/hitWarning\";\r\nimport { Inventory } from \"../inventory/inventory\";\r\nimport { Armor } from \"../item/armor\";\r\nimport { BlueGem } from \"../item/resource/bluegem\";\r\nimport { Candle } from \"../item/light/candle\";\r\nimport { Coal } from \"../item/resource/coal\";\r\nimport { Coin } from \"../item/coin\";\r\nimport { Equippable } from \"../item/equippable\";\r\nimport { GoldOre } from \"../item/resource/goldOre\";\r\nimport { GoldenKey } from \"../item/goldenKey\";\r\nimport { GreenGem } from \"../item/resource/greengem\";\r\nimport { Heart } from \"../item/usable/heart\";\r\nimport { Item } from \"../item/item\";\r\nimport { Key } from \"../item/key\";\r\nimport { Lantern } from \"../item/light/lantern\";\r\nimport { RedGem } from \"../item/resource/redgem\";\r\nimport { Torch } from \"../item/light/torch\";\r\nimport { Room } from \"../room/room\";\r\nimport { LevelGenerator } from \"../level/levelGenerator\";\r\nimport { Player, PlayerDirection } from \"../player/player\";\r\nimport { EnemySpawnAnimation } from \"../projectile/enemySpawnAnimation\";\r\nimport { Projectile } from \"../projectile/projectile\";\r\nimport { WizardFireball } from \"../projectile/wizardFireball\";\r\nimport { Random } from \"../utility/random\";\r\nimport { Dagger } from \"../item/weapon/dagger\";\r\nimport { DualDagger } from \"../item/weapon/dualdagger\";\r\nimport { Shotgun } from \"../item/weapon/shotgun\";\r\nimport { Spear } from \"../item/weapon/spear\";\r\nimport { Weapon } from \"../item/weapon/weapon\";\r\nimport { Pickaxe } from \"../item/tool/pickaxe\";\r\nimport { Backpack } from \"../item/backpack\";\r\nimport { TutorialListener } from \"./tutorialListener\";\r\nimport { DoorType } from \"../tile/door\";\r\nimport { Mushrooms } from \"../entity/object/mushrooms\";\r\nimport { Pumpkin } from \"../entity/object/pumpkin\";\r\nimport { Block } from \"../entity/object/block\";\r\nimport { EnergyWizardEnemy } from \"../entity/enemy/energyWizard\";\r\nimport { Level } from \"../level/level\";\r\nimport { globalEventBus } from \"../event/eventBus\";\r\nimport { EVENTS } from \"../event/events\";\r\nimport { ArmoredSkullEnemy } from \"../entity/enemy/armoredSkullEnemy\";\r\nimport { ArmoredzombieEnemy } from \"../entity/enemy/armoredzombieEnemy\";\r\nimport { BigKnightEnemy } from \"../entity/enemy/bigKnightEnemy\";\r\nimport { BigZombieEnemy } from \"../entity/enemy/bigZombieEnemy\";\r\nimport { BishopEnemy } from \"../entity/enemy/bishopEnemy\";\r\nimport { FireWizardEnemy } from \"../entity/enemy/fireWizard\";\r\nimport { FrogEnemy } from \"../entity/enemy/frogEnemy\";\r\nimport { GlowBugEnemy } from \"../entity/enemy/glowBugEnemy\";\r\nimport { MummyEnemy } from \"../entity/enemy/mummyEnemy\";\r\nimport { OccultistEnemy } from \"../entity/enemy/occultistEnemy\";\r\nimport { QueenEnemy } from \"../entity/enemy/queenEnemy\";\r\nimport { RookEnemy } from \"../entity/enemy/rookEnemy\";\r\nimport { SpiderEnemy } from \"../entity/enemy/spiderEnemy\";\r\nimport { Apple } from \"../item/usable/apple\";\r\nimport { BestiaryBook } from \"../item/bestiaryBook\";\r\nimport { BombItem } from \"../item/bombItem\";\r\nimport { EntitySpawner } from \"../item/entitySpawner\";\r\nimport { Fish } from \"../item/usable/fish\";\r\nimport { FishingRod } from \"../item/tool/fishingRod\";\r\nimport { Geode } from \"../item/resource/geode\";\r\nimport { GlowBugs } from \"../item/light/glowBugs\";\r\nimport { GodStone } from \"../item/godStone\";\r\nimport { GoldBar } from \"../item/resource/goldBar\";\r\nimport { GoldRing } from \"../item/jewelry/goldRing\";\r\nimport { GarnetRing } from \"../item/jewelry/garnetRing\";\r\nimport { ZirconRing } from \"../item/jewelry/zirconRing\";\r\nimport { EmeraldRing } from \"../item/jewelry/emeraldRing\";\r\nimport { AmberRing } from \"../item/jewelry/amberRing\";\r\nimport { GreenPotion } from \"../item/usable/greenPotion\";\r\nimport { Greataxe } from \"../item/weapon/greataxe\";\r\nimport { Hourglass } from \"../item/usable/hourglass\";\r\nimport { OrangeGem } from \"../item/resource/orangegem\";\r\nimport { Scythe } from \"../item/weapon/scythe\";\r\nimport { ScytheHandle } from \"../item/weapon/scytheHandle\";\r\nimport { ScytheBlade } from \"../item/weapon/scytheBlade\";\r\nimport { Shrooms } from \"../item/usable/shrooms\";\r\nimport { Slingshot } from \"../item/weapon/slingshot\";\r\nimport { Spellbook } from \"../item/weapon/spellbook\";\r\nimport { SpellbookPage } from \"../item/usable/spellbookPage\";\r\nimport { Stone } from \"../item/resource/stone\";\r\nimport { Sword } from \"../item/weapon/sword\";\r\nimport { Warhammer } from \"../item/weapon/warhammer\";\r\nimport { WeaponBlood } from \"../item/usable/weaponBlood\";\r\nimport { WeaponPoison } from \"../item/usable/weaponPoison\";\r\nimport { WeaponFragments } from \"../item/usable/weaponFragments\";\r\nimport { BluePotion } from \"../item/usable/bluePotion\";\r\nimport { Bush } from \"../entity/object/bush\";\r\nimport { FishingSpot } from \"../entity/object/fishingSpot\";\r\nimport { Furnace } from \"../entity/object/furnace\";\r\nimport { Sprout } from \"../entity/object/sprout\";\r\nimport { TombStone } from \"../entity/object/tombStone\";\r\nimport { DecoBlock } from \"../entity/object/decoBlock\";\r\nimport { Tree } from \"../entity/object/tree\";\r\nimport { ChestLayer } from \"../entity/object/chestLayer\";\r\nimport { Bomb } from \"../entity/object/bomb\";\r\nimport { ObsidianBlock } from \"../entity/object/obsidianBlock\";\r\nimport { SmallBush } from \"../entity/object/smallBush\";\r\nimport { Succulent } from \"../entity/object/succulent\";\r\nimport { FallenPillar } from \"../entity/object/fallenPillar\";\r\nimport { Candelabra } from \"../entity/object/candelabra\";\r\nimport { PawnStatue } from \"../entity/object/pawnStatue\";\r\nimport { RookStatue } from \"../entity/object/rookStatue\";\r\nimport { BishopStatue } from \"../entity/object/bishopStatue\";\r\nimport { DownladderMaker } from \"../entity/downladderMaker\";\r\nimport { Rock } from \"../entity/resource/rockResource\";\r\nimport { Hammer } from \"../item/tool/hammer\";\r\nimport { EnvType } from \"../constants/environmentTypes\";\r\nimport { SkinType } from \"../tile/tile\";\r\nimport { Enemy } from \"../entity/enemy/enemy\";\r\nimport { Chest } from \"../entity/object/chest\";\r\nimport { IronResource } from \"../entity/resource/ironResource\";\r\nimport { GarnetResource } from \"../entity/resource/garnetResource\";\r\nimport { ZirconResource } from \"../entity/resource/zirconResource\";\r\nimport { AmberResource } from \"../entity/resource/amberResource\";\r\nimport { KingEnemy } from \"../entity/enemy/kingEnemy\";\r\n\r\n// Add tile imports\r\nimport { Tile } from \"../tile/tile\";\r\nimport { Floor } from \"../tile/floor\";\r\nimport { Wall } from \"../tile/wall\";\r\nimport { WallTorch } from \"../tile/wallTorch\";\r\nimport { Door } from \"../tile/door\";\r\nimport { DownLadder } from \"../tile/downLadder\";\r\nimport { UpLadder } from \"../tile/upLadder\";\r\nimport { Pool } from \"../tile/pool\";\r\nimport { MagmaPool } from \"../tile/magmaPool\";\r\nimport { Chasm } from \"../tile/chasm\";\r\nimport { SpawnFloor } from \"../tile/spawnfloor\";\r\nimport { SpikeTrap } from \"../tile/spiketrap\";\r\nimport { Spike } from \"../tile/spike\";\r\nimport { Trapdoor } from \"../tile/trapdoor\";\r\nimport { InsideLevelDoor } from \"../tile/insideLevelDoor\";\r\nimport { GoldenDoor } from \"../tile/goldenDoor\";\r\nimport { FountainTile } from \"../tile/fountainTile\";\r\nimport { Button } from \"../tile/button\";\r\nimport { CoffinTile } from \"../tile/coffinTile\";\r\nimport { Bones } from \"../tile/bones\";\r\nimport { Window } from \"../tile/window\";\r\nimport { Puddle } from \"../tile/decorations/puddle\";\r\nimport { Decoration } from \"../tile/decorations/decoration\";\r\nimport { IdGenerator } from \"../globalStateManager/IdGenerator\";\r\nimport { WardenEnemy } from \"../entity/enemy/wardenEnemy\";\r\nimport { EnemyShield } from \"../projectile/enemyShield\";\r\nimport { ObsidianResource } from \"../entity/resource/obsidianResource\";\r\nimport { CrusherEnemy } from \"../entity/enemy/crusherEnemy\";\r\nimport { ShieldLeftFragment } from \"../item/weapon/shieldLeftFragment\";\r\nimport { ShieldRightFragment } from \"../item/weapon/shieldRightFragment\";\r\nimport { Stats } from \"./stats\";\r\nimport { statsTracker } from \"./stats\";\r\nimport { PawnEnemy } from \"../entity/enemy/pawnEnemy\";\r\nimport { BigFrogEnemy } from \"../entity/enemy/bigFrogEnemy\";\r\nimport { BeetleEnemy } from \"../entity/enemy/beetleEnemy\";\r\nimport { ExalterEnemy } from \"../entity/enemy/exalterEnemy\";\r\nimport { IronOre } from \"../item/resource/ironOre\";\r\nimport { IronBar } from \"../item/resource/ironBar\";\r\n\r\nexport class HitWarningState {\r\n  x: number;\r\n  y: number;\r\n  dead: boolean;\r\n\r\n  constructor(hw: HitWarning) {\r\n    this.x = hw.x;\r\n    this.y = hw.y;\r\n    this.dead = hw.dead;\r\n  }\r\n}\r\n\r\nlet loadHitWarning = (hws: HitWarningState, game: Game): HitWarning => {\r\n  let hw = new HitWarning(game, hws.x, hws.y, hws.x, hws.y);\r\n  hw.dead = hws.dead;\r\n  return hw;\r\n};\r\n\r\nexport enum ProjectileType {\r\n  SPAWN,\r\n  WIZARD,\r\n}\r\n\r\nexport class ProjectileState {\r\n  type: ProjectileType;\r\n  x: number;\r\n  y: number;\r\n  dead: boolean;\r\n  roomID: number;\r\n  roomGID?: string;\r\n  enemySpawn: EnemyState;\r\n  wizardState: number;\r\n  wizardParentID: number;\r\n  wizardParentGID?: string;\r\n  state: number;\r\n  // enemy shields are not persisted anymore\r\n\r\n  constructor(projectile: Projectile, game: Game) {\r\n    this.x = projectile.x;\r\n    this.y = projectile.y;\r\n    this.dead = projectile.dead;\r\n    if (projectile instanceof EnemySpawnAnimation) {\r\n      this.type = ProjectileType.SPAWN;\r\n      this.roomID = game.rooms.indexOf(projectile.room);\r\n      this.roomGID = projectile.room?.globalId;\r\n      this.enemySpawn = new EnemyState(projectile.enemy, game);\r\n    }\r\n    if (projectile instanceof WizardFireball) {\r\n      this.type = ProjectileType.WIZARD;\r\n      this.wizardState = projectile.state;\r\n      this.roomID = game.rooms.indexOf(projectile.parent.room);\r\n      this.roomGID = projectile.parent.room?.globalId;\r\n      this.wizardParentID = projectile.parent.room.entities.indexOf(\r\n        projectile.parent,\r\n      );\r\n      this.wizardParentGID = (projectile.parent as any).globalId;\r\n      this.state = projectile.state;\r\n    }\r\n  }\r\n}\r\n\r\nlet loadProjectile = (ps: ProjectileState, game: Game): Projectile => {\r\n  if (ps.type === ProjectileType.SPAWN) {\r\n    let room =\r\n      (ps.roomGID && game.roomsById?.get(ps.roomGID)) || game.rooms[ps.roomID];\r\n    let enemy = loadEnemy(ps.enemySpawn, game);\r\n    let p = new EnemySpawnAnimation(room, enemy, ps.x, ps.y);\r\n    p.dead = ps.dead;\r\n    return p;\r\n  }\r\n  if (ps.type === ProjectileType.WIZARD) {\r\n    const wizardRoom =\r\n      (ps.roomGID && game.roomsById?.get(ps.roomGID)) || game.rooms[ps.roomID];\r\n\r\n    // Try to resolve parent by globalId first (best effort), then fall back to index\r\n    let wizardCandidate: WizardEnemy | undefined = undefined;\r\n    if (ps.wizardParentGID) {\r\n      const byGid = wizardRoom.entities.find(\r\n        (e) => (e as any).globalId === ps.wizardParentGID,\r\n      );\r\n      if (byGid && byGid instanceof WizardEnemy) wizardCandidate = byGid;\r\n    }\r\n\r\n    if (!wizardCandidate) {\r\n      const byIndex = wizardRoom.entities[ps.wizardParentID];\r\n      if (byIndex && byIndex instanceof WizardEnemy)\r\n        wizardCandidate = byIndex as WizardEnemy;\r\n    }\r\n\r\n    if (!wizardCandidate) {\r\n      // Parent could not be resolved; skip loading this projectile safely\r\n      return undefined as unknown as Projectile;\r\n    }\r\n\r\n    const p = new WizardFireball(wizardCandidate, ps.x, ps.y);\r\n    p.state = ps.wizardState;\r\n    return p;\r\n  }\r\n};\r\n\r\nexport enum EnemyType {\r\n  BARREL,\r\n  BIGSKULL,\r\n  CHARGE,\r\n  CHEST,\r\n  COAL,\r\n  CRATE,\r\n  EMERALD,\r\n  GOLD,\r\n  IRON,\r\n  KNIGHT,\r\n  PLANT,\r\n  POT,\r\n  SKULL,\r\n  CRAB,\r\n  SPAWNER,\r\n  VENDINGMACHINE,\r\n  WIZARD,\r\n  ZOMBIE,\r\n  ARMOREDSKULL,\r\n  ARMOREDZOMBIE,\r\n  BIGKNIGHT,\r\n  BIGZOMBIE,\r\n  BISHOP,\r\n  ENERGYWIZARD,\r\n  FIREWIZARD,\r\n  FROG,\r\n  GLOWBUG,\r\n  MUMMY,\r\n  OCCULTIST,\r\n  QUEEN,\r\n  ROOK,\r\n  SPIDER,\r\n  BUSH,\r\n  FISHING_SPOT,\r\n  FURNACE,\r\n  PUMPKIN,\r\n  SPROUT,\r\n  TOMBSTONE,\r\n  DECO_BLOCK,\r\n  TREE,\r\n  CHEST_LAYER,\r\n  BOMB,\r\n  BLOCK,\r\n  DOWNLADDER_MAKER,\r\n  ROCK,\r\n  MUSHROOMS,\r\n  WARDEN,\r\n  OBSIDIAN,\r\n  CRUSHER,\r\n  PAWN,\r\n  BIGFROG,\r\n  BEETLE,\r\n  EXALTER,\r\n  KING,\r\n  GARNET,\r\n  ZIRCON,\r\n  AMBER,\r\n  BIG_BLOCK,\r\n  SMALL_BUSH,\r\n  SUCCULENT,\r\n  FALLEN_PILLAR,\r\n  CANDELABRA,\r\n  PAWN_STATUE,\r\n  ROOK_STATUE,\r\n  BISHOP_STATUE,\r\n}\r\n\r\nexport class EnemyState {\r\n  type: EnemyType;\r\n  roomID: number;\r\n  roomGID?: string;\r\n  x: number;\r\n  y: number;\r\n  health: number;\r\n  maxHealth: number;\r\n  isShielded?: boolean;\r\n  shieldHealth?: number;\r\n  shieldedBefore?: boolean;\r\n  unconscious: boolean;\r\n  direction: Direction;\r\n  dead: boolean;\r\n  skipNextTurns: number;\r\n  destroyable: boolean;\r\n  hasDrop: boolean;\r\n  drop: ItemState;\r\n  alertTicks: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  targetPlayerID: string;\r\n  ticksSinceFirstHit: number;\r\n  drops: Array<ItemState>;\r\n  startX: number;\r\n  startY: number;\r\n  targetX: number;\r\n  targetY: number;\r\n  visualTargetX: number;\r\n  visualTargetY: number;\r\n  chargeEnemyState: ChargeEnemyState;\r\n  enemySpawnType: number;\r\n  isPlayerOpened: boolean;\r\n  playerOpenedID: string;\r\n  open: boolean;\r\n  costItems: Array<ItemState>;\r\n  item: ItemState;\r\n  isInf: boolean;\r\n  quantity: number;\r\n  wizardState: WizardState;\r\n  rumbling: boolean;\r\n  isEnemy: boolean;\r\n  buffed?: boolean;\r\n  buffedBefore?: boolean;\r\n  // Persist explicit opened state for chests for clarity/forward-compatibility\r\n  chestOpened?: boolean;\r\n\r\n  constructor(enemy: Entity, game: Game) {\r\n    this.roomID = game.rooms.indexOf(enemy.room);\r\n    this.roomGID = enemy.room?.globalId;\r\n    this.x = enemy.x;\r\n    this.y = enemy.y;\r\n    this.health = enemy.health;\r\n    this.maxHealth = enemy.maxHealth;\r\n    this.rumbling = enemy.rumbling;\r\n    this.isEnemy = enemy.isEnemy;\r\n\r\n    // Persist shield state on the enemy rather than saving EnemyShield projectile\r\n    try {\r\n      this.isShielded = (enemy as any).shielded === true;\r\n      this.shieldHealth = (enemy as any).shield?.health ?? undefined;\r\n    } catch {}\r\n\r\n    try {\r\n      this.buffed = (enemy as any).buffed === true;\r\n    } catch {}\r\n    try {\r\n      this.buffedBefore = (enemy as any).buffedBefore === true;\r\n    } catch {}\r\n\r\n    this.shieldedBefore = (enemy as any).shieldedBefore;\r\n    this.unconscious = (enemy as Enemy).unconscious;\r\n    this.direction = enemy.direction;\r\n    this.dead = enemy.dead;\r\n    this.skipNextTurns = enemy.skipNextTurns;\r\n    this.destroyable = enemy.destroyable;\r\n    this.hasDrop = false;\r\n    if (enemy.drop) {\r\n      this.hasDrop = true;\r\n      this.drop = new ItemState(enemy.drop, game);\r\n    }\r\n    this.alertTicks = enemy.alertTicks;\r\n    // Common Enemy fields\r\n    if (enemy instanceof Enemy) {\r\n      this.ticks = enemy.ticks;\r\n      this.seenPlayer = enemy.seenPlayer;\r\n      if (enemy.seenPlayer) {\r\n        this.targetPlayerID = Object.keys(game.players).find(\r\n          (key) => game.players[key] === enemy.targetPlayer,\r\n        );\r\n        if (!this.targetPlayerID)\r\n          this.targetPlayerID = Object.keys(game.offlinePlayers).find(\r\n            (key) => game.offlinePlayers[key] === enemy.targetPlayer,\r\n          );\r\n      }\r\n    }\r\n    if (enemy instanceof Barrel) this.type = EnemyType.BARREL;\r\n    if (enemy instanceof BigSkullEnemy) {\r\n      this.type = EnemyType.BIGSKULL;\r\n      this.ticksSinceFirstHit = enemy.ticksSinceFirstHit;\r\n      this.drops = [];\r\n      for (const d of enemy.drops) {\r\n        if (d) {\r\n          this.drops.push(new ItemState(d, game));\r\n        }\r\n      }\r\n    }\r\n    if (enemy instanceof ChargeEnemy) {\r\n      this.type = EnemyType.CHARGE;\r\n      this.chargeEnemyState = enemy.state;\r\n      this.startX = enemy.startX;\r\n      this.startY = enemy.startY;\r\n      this.targetX = enemy.targetX;\r\n      this.targetY = enemy.targetY;\r\n      this.visualTargetX = enemy.visualTargetX;\r\n      this.visualTargetY = enemy.visualTargetY;\r\n    }\r\n    if (enemy instanceof Chest) this.type = EnemyType.CHEST;\r\n    // Explicitly persist whether a chest has been opened (derived from health)\r\n    if (enemy instanceof Chest) {\r\n      this.chestOpened = enemy.health <= 2;\r\n    }\r\n    if (enemy instanceof CoalResource) this.type = EnemyType.COAL;\r\n    if (enemy instanceof Crate) this.type = EnemyType.CRATE;\r\n    if (enemy instanceof EmeraldResource) this.type = EnemyType.EMERALD;\r\n    if (enemy instanceof GoldResource) this.type = EnemyType.GOLD;\r\n    if (enemy instanceof IronResource) this.type = EnemyType.IRON;\r\n    if (enemy instanceof KnightEnemy) {\r\n      this.type = EnemyType.KNIGHT;\r\n    }\r\n    if (enemy instanceof PottedPlant) this.type = EnemyType.PLANT;\r\n    if (enemy instanceof Pot) this.type = EnemyType.POT;\r\n    if (enemy instanceof SkullEnemy) {\r\n      this.type = EnemyType.SKULL;\r\n      this.ticksSinceFirstHit = enemy.ticksSinceFirstHit;\r\n    }\r\n    if (enemy instanceof CrabEnemy) {\r\n      this.type = EnemyType.CRAB;\r\n    }\r\n    if (enemy instanceof Spawner) {\r\n      this.type = EnemyType.SPAWNER;\r\n      this.enemySpawnType = enemy.enemySpawnType;\r\n    }\r\n    if (enemy instanceof VendingMachine) {\r\n      this.type = EnemyType.VENDINGMACHINE;\r\n      this.isPlayerOpened = false;\r\n      if (enemy.playerOpened) {\r\n        this.isPlayerOpened = true;\r\n        this.playerOpenedID = Object.keys(game.players).find(\r\n          (key) => game.players[key] === enemy.playerOpened,\r\n        );\r\n        if (!this.playerOpenedID)\r\n          this.playerOpenedID = Object.keys(game.offlinePlayers).find(\r\n            (key) => game.offlinePlayers[key] === enemy.playerOpened,\r\n          );\r\n      }\r\n      this.open = enemy.open;\r\n      this.costItems = [];\r\n      for (const item of enemy.costItems) {\r\n        if (item) {\r\n          this.costItems.push(new ItemState(item, game));\r\n        }\r\n      }\r\n      if (enemy.item) {\r\n        this.item = new ItemState(enemy.item, game);\r\n      }\r\n      this.isInf = enemy.isInf;\r\n      this.quantity = enemy.quantity;\r\n    }\r\n    if (enemy instanceof WizardEnemy) {\r\n      this.type = EnemyType.WIZARD;\r\n      this.wizardState = enemy.state;\r\n    }\r\n    if (enemy instanceof ZombieEnemy) {\r\n      this.type = EnemyType.ZOMBIE;\r\n    }\r\n    if (enemy instanceof ArmoredSkullEnemy) this.type = EnemyType.ARMOREDSKULL;\r\n    if (enemy instanceof ArmoredzombieEnemy)\r\n      this.type = EnemyType.ARMOREDZOMBIE;\r\n    if (enemy instanceof BigKnightEnemy) this.type = EnemyType.BIGKNIGHT;\r\n    if (enemy instanceof BigZombieEnemy) this.type = EnemyType.BIGZOMBIE;\r\n    if (enemy instanceof BishopEnemy) this.type = EnemyType.BISHOP;\r\n    if (enemy instanceof EnergyWizardEnemy) this.type = EnemyType.ENERGYWIZARD;\r\n    if (enemy instanceof FireWizardEnemy) this.type = EnemyType.FIREWIZARD;\r\n    if (enemy instanceof FrogEnemy) this.type = EnemyType.FROG;\r\n    if (enemy instanceof GlowBugEnemy) this.type = EnemyType.GLOWBUG;\r\n    if (enemy instanceof MummyEnemy) this.type = EnemyType.MUMMY;\r\n    if (enemy instanceof OccultistEnemy) {\r\n      this.type = EnemyType.OCCULTIST;\r\n      // No extra data needed; beams/shields handled at projectile level\r\n    }\r\n    if (enemy instanceof QueenEnemy) this.type = EnemyType.QUEEN;\r\n    if (enemy instanceof RookEnemy) this.type = EnemyType.ROOK;\r\n    if (enemy instanceof SpiderEnemy) this.type = EnemyType.SPIDER;\r\n    if (enemy instanceof Bush) this.type = EnemyType.BUSH;\r\n    if (enemy instanceof FishingSpot) this.type = EnemyType.FISHING_SPOT;\r\n    if (enemy instanceof Furnace) this.type = EnemyType.FURNACE;\r\n    if (enemy instanceof Pumpkin) this.type = EnemyType.PUMPKIN;\r\n    if (enemy instanceof Sprout) this.type = EnemyType.SPROUT;\r\n    if (enemy instanceof TombStone) this.type = EnemyType.TOMBSTONE;\r\n    if (enemy instanceof DecoBlock) this.type = EnemyType.DECO_BLOCK;\r\n    if (enemy instanceof Tree) this.type = EnemyType.TREE;\r\n    if (enemy instanceof ChestLayer) this.type = EnemyType.CHEST_LAYER;\r\n    if (enemy instanceof Bomb) this.type = EnemyType.BOMB;\r\n    if (enemy instanceof Block) this.type = EnemyType.BLOCK;\r\n    if (enemy instanceof DownladderMaker)\r\n      this.type = EnemyType.DOWNLADDER_MAKER;\r\n    if (enemy instanceof Rock) this.type = EnemyType.ROCK;\r\n    if (enemy instanceof Mushrooms) this.type = EnemyType.MUSHROOMS;\r\n    if (enemy instanceof WardenEnemy) this.type = EnemyType.WARDEN;\r\n    if (enemy instanceof ObsidianResource) this.type = EnemyType.OBSIDIAN;\r\n    if (enemy instanceof CrusherEnemy) this.type = EnemyType.CRUSHER;\r\n    if (enemy instanceof PawnEnemy) this.type = EnemyType.PAWN;\r\n    if (enemy instanceof BeetleEnemy) this.type = EnemyType.BEETLE;\r\n    if (enemy instanceof BigFrogEnemy) this.type = EnemyType.BIGFROG;\r\n    if (enemy instanceof ExalterEnemy) this.type = EnemyType.EXALTER;\r\n    if (enemy instanceof KingEnemy) this.type = EnemyType.KING;\r\n    if (enemy instanceof GarnetResource) this.type = EnemyType.GARNET;\r\n    if (enemy instanceof ZirconResource) this.type = EnemyType.ZIRCON;\r\n    if (enemy instanceof AmberResource) this.type = EnemyType.AMBER;\r\n    if (enemy instanceof ObsidianBlock) this.type = EnemyType.BIG_BLOCK;\r\n    if (enemy instanceof SmallBush) this.type = EnemyType.SMALL_BUSH;\r\n    if (enemy instanceof Succulent) this.type = EnemyType.SUCCULENT;\r\n    if (enemy instanceof FallenPillar) this.type = EnemyType.FALLEN_PILLAR;\r\n    if (enemy instanceof Candelabra) this.type = EnemyType.CANDELABRA;\r\n    if (enemy instanceof PawnStatue) this.type = EnemyType.PAWN_STATUE;\r\n    if (enemy instanceof RookStatue) this.type = EnemyType.ROOK_STATUE;\r\n    if (enemy instanceof BishopStatue) this.type = EnemyType.BISHOP_STATUE;\r\n  }\r\n}\r\n\r\nlet loadEnemy = (es: EnemyState, game: Game): Entity => {\r\n  let enemy;\r\n  let room =\r\n    (es.roomGID && game.roomsById?.get(es.roomGID)) || game.rooms[es.roomID];\r\n\r\n  if (es.type === EnemyType.BARREL) enemy = new Barrel(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.BIGSKULL) {\r\n    enemy = new BigSkullEnemy(room, game, es.x, es.y);\r\n    enemy.ticksSinceFirstHit = es.ticksSinceFirstHit;\r\n    enemy.drops = [];\r\n    for (const d of es.drops) {\r\n      if (d) {\r\n        enemy.drops.push(loadItem(d, game));\r\n      }\r\n    }\r\n  }\r\n  if (es.type === EnemyType.CHARGE) {\r\n    enemy = new ChargeEnemy(room, game, es.x, es.y);\r\n    enemy.state = es.chargeEnemyState;\r\n    enemy.startX = es.startX;\r\n    enemy.startY = es.startY;\r\n    enemy.targetX = es.targetX;\r\n    enemy.targetY = es.targetY;\r\n    enemy.visualTargetX = es.visualTargetX;\r\n    enemy.visualTargetY = es.visualTargetY;\r\n  }\r\n  if (es.type === EnemyType.CHEST) enemy = new Chest(room, game, es.x, es.y);\r\n  // Restore chest open visuals based on saved health only; do not regenerate loot\r\n  if (enemy instanceof Chest) {\r\n    const shouldBeOpen = es.health <= 2;\r\n    if (shouldBeOpen) {\r\n      (enemy as any).tileX = 6; // final opened frame\r\n      (enemy as any).tileY = 2;\r\n      (enemy as any).opening = false;\r\n    }\r\n  }\r\n  if (es.type === EnemyType.COAL)\r\n    enemy = new CoalResource(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.CRATE) enemy = new Crate(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.EMERALD)\r\n    enemy = new EmeraldResource(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.GOLD)\r\n    enemy = new GoldResource(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.IRON)\r\n    enemy = new IronResource(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.KNIGHT) {\r\n    enemy = new KnightEnemy(room, game, es.x, es.y);\r\n  }\r\n  if (es.type === EnemyType.PLANT)\r\n    enemy = new PottedPlant(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.POT) enemy = new Pot(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.SKULL) {\r\n    enemy = new SkullEnemy(room, game, es.x, es.y);\r\n    enemy.ticksSinceFirstHit = es.ticksSinceFirstHit;\r\n  }\r\n  if (es.type === EnemyType.CRAB) {\r\n    enemy = new CrabEnemy(room, game, es.x, es.y);\r\n  }\r\n  if (es.type === EnemyType.SPAWNER) {\r\n    enemy = new Spawner(room, game, es.x, es.y, [es.enemySpawnType]);\r\n    enemy.enemySpawnType = es.enemySpawnType;\r\n  }\r\n  if (es.type === EnemyType.VENDINGMACHINE) {\r\n    let item = loadItem(es.item, game);\r\n    enemy = new VendingMachine(room, game, es.x, es.y, item);\r\n    if (es.isPlayerOpened) {\r\n      enemy.playerOpened = game.players[es.playerOpenedID];\r\n      if (!enemy.playerOpened)\r\n        enemy.playerOpened = game.offlinePlayers[es.playerOpenedID];\r\n    }\r\n    enemy.open = es.open;\r\n    enemy.costItems = [];\r\n    for (const item of es.costItems) {\r\n      if (item) {\r\n        enemy.costItems.push(loadItem(item, game));\r\n      }\r\n    }\r\n    enemy.isInf = es.isInf;\r\n    enemy.quantity = es.quantity;\r\n  }\r\n\r\n  if (es.type === EnemyType.ZOMBIE) {\r\n    enemy = new ZombieEnemy(room, game, es.x, es.y);\r\n  }\r\n  if (es.type === EnemyType.ARMOREDSKULL)\r\n    enemy = new ArmoredSkullEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.ARMOREDZOMBIE)\r\n    enemy = new ArmoredzombieEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.BIGKNIGHT)\r\n    enemy = new BigKnightEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.BIGZOMBIE)\r\n    enemy = new BigZombieEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.BISHOP)\r\n    enemy = new BishopEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.ENERGYWIZARD)\r\n    enemy = new EnergyWizardEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.FIREWIZARD)\r\n    enemy = new FireWizardEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.FROG) enemy = new FrogEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.GLOWBUG)\r\n    enemy = new GlowBugEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.MUMMY)\r\n    enemy = new MummyEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.OCCULTIST)\r\n    enemy = new OccultistEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.WARDEN)\r\n    enemy = new WardenEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.CRUSHER)\r\n    enemy = new CrusherEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.QUEEN)\r\n    enemy = new QueenEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.ROOK) enemy = new RookEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.SPIDER)\r\n    enemy = new SpiderEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.BUSH) enemy = new Bush(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.FISHING_SPOT)\r\n    enemy = new FishingSpot(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.FURNACE)\r\n    enemy = new Furnace(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.PUMPKIN)\r\n    enemy = new Pumpkin(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.SPROUT) enemy = new Sprout(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.TOMBSTONE)\r\n    enemy = new TombStone(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.DECO_BLOCK)\r\n    enemy = new DecoBlock(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.TREE) enemy = new Tree(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.CHEST_LAYER)\r\n    enemy = new ChestLayer(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.BOMB) enemy = new Bomb(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.BLOCK) enemy = new Block(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.DOWNLADDER_MAKER)\r\n    enemy = new DownladderMaker(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.ROCK) enemy = new Rock(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.MUSHROOMS)\r\n    enemy = new Mushrooms(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.OBSIDIAN)\r\n    enemy = new ObsidianResource(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.PAWN) enemy = new PawnEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.BIGFROG)\r\n    enemy = new BigFrogEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.BEETLE)\r\n    enemy = new BeetleEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.EXALTER)\r\n    enemy = new ExalterEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.KING) enemy = new KingEnemy(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.GARNET)\r\n    enemy = new GarnetResource(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.ZIRCON)\r\n    enemy = new ZirconResource(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.AMBER)\r\n    enemy = new AmberResource(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.BIG_BLOCK)\r\n    enemy = new ObsidianBlock(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.SMALL_BUSH)\r\n    enemy = new SmallBush(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.SUCCULENT)\r\n    enemy = new Succulent(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.FALLEN_PILLAR)\r\n    enemy = new FallenPillar(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.CANDELABRA)\r\n    enemy = new Candelabra(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.PAWN_STATUE)\r\n    enemy = new PawnStatue(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.ROOK_STATUE)\r\n    enemy = new RookStatue(room, game, es.x, es.y);\r\n  if (es.type === EnemyType.BISHOP_STATUE)\r\n    enemy = new BishopStatue(room, game, es.x, es.y);\r\n\r\n  if (es.isEnemy) {\r\n    enemy.ticks = es.ticks;\r\n    enemy.seenPlayer = es.seenPlayer;\r\n    if (es.seenPlayer) {\r\n      enemy.targetPlayer = game.players[es.targetPlayerID];\r\n      if (!enemy.targetPlayer)\r\n        enemy.targetPlayer = game.offlinePlayers[es.targetPlayerID];\r\n    }\r\n  }\r\n\r\n  if (!enemy) {\r\n    console.error(\r\n      \"Unknown enemy type:\",\r\n      es.type,\r\n      \"EnemyType enum value:\",\r\n      EnemyType[es.type],\r\n      \"Falling back to barrel\",\r\n    );\r\n    enemy = new Barrel(room, game, es.x, es.y);\r\n  }\r\n\r\n  enemy.x = es.x;\r\n  enemy.y = es.y;\r\n  enemy.health = es.health;\r\n  enemy.maxHealth = es.maxHealth;\r\n  (enemy as any).shieldedBefore = es.shieldedBefore;\r\n  (enemy as any).buffed = es.buffed;\r\n  (enemy as any).buffedBefore = es.buffedBefore;\r\n  try {\r\n    if ((es as any).isBuffed) {\r\n      (enemy as any).applyBuff();\r\n    }\r\n  } catch {}\r\n\r\n  // Rebuild shields if needed\r\n  try {\r\n    if ((es as any).isShielded) {\r\n      const sh = (es as any).shieldHealth ?? 1;\r\n      if (!(enemy as any).shielded) {\r\n        (enemy as any).applyShield(sh, true);\r\n      }\r\n    }\r\n  } catch {}\r\n  (enemy as Enemy).unconscious = es.unconscious;\r\n  enemy.direction = es.direction;\r\n  enemy.dead = es.dead;\r\n  enemy.skipNextTurns = es.skipNextTurns;\r\n  enemy.rumbling = es.rumbling;\r\n  // Restore destroyable so chests can be broken after opened\r\n  if (typeof (es as any).destroyable === \"boolean\") {\r\n    enemy.destroyable = (es as any).destroyable;\r\n  }\r\n  if (es.hasDrop) enemy.drop = loadItem(es.drop, game);\r\n  enemy.alertTicks = es.alertTicks;\r\n  // Restore wizard-specific state so they don't immediately attack on load\r\n  try {\r\n    if (enemy instanceof WizardEnemy) {\r\n      (enemy as WizardEnemy).ticks = (es as any).ticks ?? 0;\r\n      (enemy as WizardEnemy).state =\r\n        (es as any).wizardState ?? (enemy as WizardEnemy).state;\r\n      (enemy as WizardEnemy).seenPlayer = (es as any).seenPlayer ?? false;\r\n    }\r\n  } catch {}\r\n\r\n  return enemy;\r\n};\r\n\r\nexport class RoomState {\r\n  roomID: number;\r\n  roomGID?: string;\r\n  pathId?: string;\r\n  entered: boolean;\r\n  envType?: EnvType;\r\n  skin?: SkinType;\r\n  enemies: Array<EnemyState>;\r\n  items: Array<ItemState>;\r\n  projectiles: Array<ProjectileState>;\r\n  hitwarnings: Array<HitWarningState>;\r\n  active: boolean;\r\n  onScreen: boolean;\r\n  lightingUpdateInProgress?: boolean;\r\n  mapGroup: number;\r\n  tiles: Array<Array<TileState | null>>; // Only save specific tile types\r\n\r\n  constructor(room: Room, game: Game) {\r\n    this.roomID = game.rooms.indexOf(room);\r\n    this.roomGID = room.globalId;\r\n    this.pathId = (room as any).pathId || \"main\";\r\n    this.entered = room.entered;\r\n    this.envType = room.envType;\r\n    this.skin = room.skin;\r\n    this.active = room.active;\r\n    this.onScreen = room.onScreen;\r\n    this.mapGroup = room.mapGroup;\r\n    this.enemies = [];\r\n    this.items = [];\r\n    this.projectiles = [];\r\n    this.hitwarnings = [];\r\n\r\n    // Save only chasms, pools, and walls\r\n    this.tiles = [];\r\n    for (let x = room.roomX - 1; x < room.roomX + room.width + 1; x++) {\r\n      this.tiles[x] = [];\r\n      for (let y = room.roomY - 1; y < room.roomY + room.height + 1; y++) {\r\n        const tile = room.roomArray[x]?.[y];\r\n        if (tile && this.shouldSaveTile(tile)) {\r\n          this.tiles[x][y] = new TileState(tile, game);\r\n        } else {\r\n          this.tiles[x][y] = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const enemy of room.entities)\r\n      this.enemies.push(new EnemyState(enemy, game));\r\n    for (const item of room.items) {\r\n      if (item) {\r\n        this.items.push(new ItemState(item, game));\r\n      }\r\n    }\r\n    for (const projectile of room.projectiles) {\r\n      if (projectile instanceof EnemyShield) continue; // do not save shields\r\n      this.projectiles.push(new ProjectileState(projectile, game));\r\n    }\r\n    for (const hw of room.hitwarnings)\r\n      this.hitwarnings.push(new HitWarningState(hw));\r\n  }\r\n\r\n  // Helper method to determine which tiles should be saved\r\n  private shouldSaveTile(tile: Tile): boolean {\r\n    return (\r\n      tile instanceof Chasm ||\r\n      tile instanceof Pool ||\r\n      tile instanceof MagmaPool ||\r\n      tile instanceof Wall ||\r\n      tile instanceof Window ||\r\n      tile instanceof DownLadder ||\r\n      tile instanceof UpLadder ||\r\n      tile instanceof Floor ||\r\n      tile instanceof WallTorch ||\r\n      tile instanceof SpawnFloor ||\r\n      tile instanceof Door ||\r\n      tile instanceof InsideLevelDoor ||\r\n      tile instanceof Button ||\r\n      tile instanceof FountainTile ||\r\n      tile instanceof CoffinTile ||\r\n      tile instanceof SpikeTrap\r\n    );\r\n  }\r\n}\r\n\r\nlet loadRoom = (room: Room, roomState: RoomState, game: Game) => {\r\n  if (roomState.pathId) (room as any).pathId = roomState.pathId;\r\n  room.entered = roomState.entered;\r\n  if (roomState.envType !== undefined) {\r\n    room.envType = roomState.envType as EnvType;\r\n    room.skin = room.envType as unknown as SkinType;\r\n  }\r\n  room.active = roomState.active;\r\n  room.onScreen = roomState.onScreen;\r\n  room.skin = roomState.skin;\r\n\r\n  // Load only saved tiles (chasms, pools, walls), overwriting generated tiles\r\n  if (roomState.tiles) {\r\n    // Reset lights before reconstructing tiles that add their own light sources\r\n    try {\r\n      (room as any).lightSources = [];\r\n    } catch {}\r\n    for (let x = room.roomX - 1; x < room.roomX + room.width + 1; x++) {\r\n      for (let y = room.roomY - 1; y < room.roomY + room.height + 1; y++) {\r\n        const tileState = roomState.tiles[x]?.[y];\r\n        if (tileState) {\r\n          // Only overwrite if we have a saved tile; defer door linking until after grid load\r\n          const loadedTile = loadTile(tileState, room, game);\r\n          room.roomArray[x][y] = loadedTile;\r\n        }\r\n        // If no saved tile state, keep the generated tile as-is\r\n      }\r\n    }\r\n\r\n    // Second pass: link doors by saved linkedDoorGID and link Buttons to InsideLevelDoor\r\n    try {\r\n      const gidToDoor = new Map<string, Door>();\r\n      const gidToInsideDoor = new Map<string, InsideLevelDoor>();\r\n      for (let x = room.roomX - 1; x < room.roomX + room.width + 1; x++) {\r\n        for (let y = room.roomY - 1; y < room.roomY + room.height + 1; y++) {\r\n          const ts = roomState.tiles[x]?.[y];\r\n          const t = room.roomArray[x]?.[y];\r\n          if (ts && ts.type === TileType.DOOR && t instanceof Door) {\r\n            const gid = ts.properties.globalId as string | undefined;\r\n            if (gid) gidToDoor.set(gid, t);\r\n          }\r\n          if (\r\n            ts &&\r\n            ts.type === TileType.INSIDE_LEVEL_DOOR &&\r\n            t instanceof InsideLevelDoor\r\n          ) {\r\n            const gid = ts.properties.globalId as string | undefined;\r\n            if (gid) gidToInsideDoor.set(gid, t);\r\n          }\r\n          // Re-add light sources for tiles that carry lights\r\n          if (\r\n            t &&\r\n            (t as any).lightSource &&\r\n            !(room as any).lightSources?.includes((t as any).lightSource)\r\n          ) {\r\n            (room as any).lightSources.push((t as any).lightSource);\r\n          }\r\n        }\r\n      }\r\n      for (let x = room.roomX - 1; x < room.roomX + room.width + 1; x++) {\r\n        for (let y = room.roomY - 1; y < room.roomY + room.height + 1; y++) {\r\n          const ts = roomState.tiles[x]?.[y];\r\n          const t = room.roomArray[x]?.[y];\r\n          if (ts && ts.type === TileType.DOOR && t instanceof Door) {\r\n            const linkedGid = ts.properties.linkedDoorGID as string | null;\r\n            if (linkedGid && gidToDoor.has(linkedGid)) {\r\n              t.link(gidToDoor.get(linkedGid));\r\n            }\r\n          }\r\n          if (ts && ts.type === TileType.BUTTON && t instanceof Button) {\r\n            const linkedGid = ts.properties.linkedDoorGID as string | null;\r\n            if (linkedGid && gidToInsideDoor.has(linkedGid)) {\r\n              (t as any).linkedDoor = gidToInsideDoor.get(linkedGid);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch {}\r\n\r\n    // Rebuild room.doors array from reconstructed tiles to support door-light propagation\r\n    try {\r\n      const doorsInRoom: Door[] = [];\r\n      for (let x = room.roomX - 1; x < room.roomX + room.width + 1; x++) {\r\n        for (let y = room.roomY - 1; y < room.roomY + room.height + 1; y++) {\r\n          const t = room.roomArray[x]?.[y];\r\n          if (t instanceof Door) doorsInRoom.push(t);\r\n        }\r\n      }\r\n      (room as any).doors = doorsInRoom;\r\n    } catch {}\r\n  }\r\n\r\n  room.entities = [];\r\n  room.items = [];\r\n  room.projectiles = [];\r\n  room.hitwarnings = [];\r\n  // Defer Occultist loading until after other entities so shields can reattach reliably\r\n  const nonOccultists = roomState.enemies.filter(\r\n    (es) => es.type !== EnemyType.OCCULTIST,\r\n  );\r\n  const occultists = roomState.enemies.filter(\r\n    (es) => es.type === EnemyType.OCCULTIST,\r\n  );\r\n  for (const enemy of nonOccultists) room.entities.push(loadEnemy(enemy, game));\r\n  for (const enemy of occultists) room.entities.push(loadEnemy(enemy, game));\r\n  for (const item of roomState.items) {\r\n    if (item) {\r\n      room.items.push(loadItem(item, game, undefined, room));\r\n    }\r\n  }\r\n  // Link chest drop references to existing room items for opened chests\r\n  try {\r\n    // First pass: group items by potential chest source tag if present\r\n    const byChestKey = new Map<string, Item[]>();\r\n    for (const it of room.items) {\r\n      const sx = (it as any)?.sourceChestX as number | undefined;\r\n      const sy = (it as any)?.sourceChestY as number | undefined;\r\n      if (sx !== undefined && sy !== undefined) {\r\n        const key = `${sx},${sy}`;\r\n        const arr = byChestKey.get(key) || [];\r\n        arr.push(it);\r\n        byChestKey.set(key, arr);\r\n      }\r\n    }\r\n    for (const e of room.entities) {\r\n      if (e instanceof Chest && e.health <= 2) {\r\n        const key = `${e.x},${e.y}`;\r\n        const tagged = byChestKey.get(key);\r\n        if (tagged && tagged.length) {\r\n          (e as any).drops = tagged.slice();\r\n          continue;\r\n        }\r\n        // Fallback: associate items sitting on the chest tile\r\n        (e as any).drops = room.items.filter(\r\n          (it) => it && it.x === e.x && it.y === e.y,\r\n        );\r\n      }\r\n    }\r\n  } catch {}\r\n  for (const projectile of roomState.projectiles) {\r\n    const loaded = loadProjectile(projectile, game);\r\n    if (loaded && !(loaded as any).dead) {\r\n      room.projectiles.push(loaded);\r\n    }\r\n  }\r\n  for (const hw of roomState.hitwarnings)\r\n    room.hitwarnings.push(loadHitWarning(hw, game));\r\n\r\n  try {\r\n    const exalters = room.entities.filter(\r\n      (e) => e instanceof ExalterEnemy,\r\n    ) as ExalterEnemy[];\r\n    for (const exalter of exalters) {\r\n      for (const enemy of exalter.buffedEnemies) {\r\n        if (\r\n          enemy instanceof Enemy &&\r\n          !enemy.dead &&\r\n          !enemy.buffed &&\r\n          !enemy.buffedBefore\r\n        ) {\r\n          exalter.applyBuffTo(enemy as Enemy);\r\n        }\r\n      }\r\n    }\r\n  } catch {}\r\n\r\n  // After entities and projectiles are in place, recreate occultist beams without duplicates/self-beams\r\n  try {\r\n    const occultists = room.entities.filter(\r\n      (e) => e instanceof OccultistEnemy,\r\n    ) as OccultistEnemy[];\r\n    const shielded = room.entities.filter(\r\n      (e) => e instanceof Enemy && (e as Enemy).shielded && !e.dead,\r\n    ) as Enemy[];\r\n\r\n    // Clear prior lists\r\n    for (const oc of occultists) (oc as any).shieldedEnemies = [];\r\n\r\n    // Assign each shielded enemy to its nearest other occultist (if any)\r\n    const assignments = new Map<OccultistEnemy, Enemy[]>();\r\n    for (const s of shielded) {\r\n      let nearest: OccultistEnemy | null = null;\r\n      let best = Number.POSITIVE_INFINITY;\r\n      for (const oc of occultists) {\r\n        if (oc === (s as any)) continue; // no self-beam\r\n        const dist = Math.max(Math.abs(oc.x - s.x), Math.abs(oc.y - s.y));\r\n        if (dist < best) {\r\n          best = dist;\r\n          nearest = oc;\r\n        }\r\n      }\r\n      if (nearest) {\r\n        const arr = assignments.get(nearest) || [];\r\n        arr.push(s);\r\n        assignments.set(nearest, arr);\r\n      }\r\n    }\r\n\r\n    // Create beams per occultist for its assigned shielded allies, and set shieldedEnemies\r\n    for (const [oc, allies] of assignments.entries()) {\r\n      (oc as any).shieldedEnemies = allies.slice();\r\n      if ((oc as any).createBeam && allies.length) {\r\n        (oc as any).createBeam(allies);\r\n      }\r\n    }\r\n  } catch {}\r\n\r\n  // Recreate Exalter buffs and beams based on saved buff flags\r\n  try {\r\n    const exalters = room.entities.filter(\r\n      (e) => e instanceof ExalterEnemy,\r\n    ) as ExalterEnemy[];\r\n    if (exalters.length) {\r\n      const buffedTargets = room.entities.filter(\r\n        (e) => e instanceof Enemy && (e as any).buffed && !e.dead,\r\n      ) as Enemy[];\r\n\r\n      // Clear any previous tracking just in case\r\n      for (const ex of exalters) {\r\n        (ex as any).buffedEnemies = [];\r\n      }\r\n\r\n      // Assign each buffed enemy to the nearest exalter and recreate beams\r\n      for (const target of buffedTargets) {\r\n        let nearest: ExalterEnemy | null = null;\r\n        let best = Number.POSITIVE_INFINITY;\r\n        for (const ex of exalters) {\r\n          const dist = Math.max(\r\n            Math.abs(ex.x - target.x),\r\n            Math.abs(ex.y - target.y),\r\n          );\r\n          if (dist < best) {\r\n            best = dist;\r\n            nearest = ex;\r\n          }\r\n        }\r\n        if (nearest) {\r\n          // applyBuffTo will push into buffedEnemies and create the beam effect\r\n          nearest.applyBuffTo(target);\r\n        }\r\n      }\r\n    }\r\n  } catch {}\r\n\r\n  // Reset lighting state to prevent recursion issues\r\n  room.calculateWallInfo();\r\n  room.updateLighting();\r\n};\r\n\r\nexport enum ItemType {\r\n  ARMOR,\r\n  BLUEGEM,\r\n  CANDLE,\r\n  COAL,\r\n  COIN,\r\n  GOLD,\r\n  GOLDENKEY,\r\n  GREENGEM,\r\n  KEY,\r\n  LANTERN,\r\n  REDGEM,\r\n  TORCH,\r\n  DAGGER,\r\n  DUALDAGGER,\r\n  SHOTGUN,\r\n  SPEAR,\r\n  PICKAXE,\r\n  BACKPACK,\r\n  SPELLBOOK,\r\n  WEAPON_FRAGMENTS,\r\n  WARHAMMER,\r\n  HAMMER,\r\n  WEAPON_POISON,\r\n  WEAPON_BLOOD,\r\n  HEART,\r\n  MUSHROOMS,\r\n  STONE,\r\n  BLUE_POTION,\r\n  APPLE,\r\n  BESTIARY_BOOK,\r\n  BOMB_ITEM,\r\n  ENTITY_SPAWNER,\r\n  FISH,\r\n  FISHING_ROD,\r\n  GEODE,\r\n  GLOW_BUGS,\r\n  GOD_STONE,\r\n  GOLD_BAR,\r\n  GOLD_RING,\r\n  GARNET_RING,\r\n  ZIRCON_RING,\r\n  EMERALD_RING,\r\n  AMBER_RING,\r\n  GREEN_POTION,\r\n  GREATAXE,\r\n  HOURGLASS,\r\n  ORANGE_GEM,\r\n  SCYTHE,\r\n  SCYTHE_HANDLE,\r\n  SCYTHE_BLADE,\r\n  SLINGSHOT,\r\n  SPELLBOOK_PAGE,\r\n  SWORD,\r\n  SHIELD_LEFT_FRAGMENT,\r\n  SHIELD_RIGHT_FRAGMENT,\r\n  IRON_ORE,\r\n  IRON_BAR,\r\n}\r\n\r\nexport class ItemState {\r\n  type: ItemType;\r\n  x: number;\r\n  y: number;\r\n  roomID: number;\r\n  roomGID?: string;\r\n  stackCount: number;\r\n  pickedUp: boolean;\r\n  // Optional metadata to support chest-drop persistence\r\n  sourceChestX?: number;\r\n  sourceChestY?: number;\r\n  equipped: boolean;\r\n\r\n  constructor(item: Item, game: Game) {\r\n    // Add null check at the beginning\r\n    if (!item) {\r\n      throw new Error(\"Cannot create ItemState from null item\");\r\n    }\r\n\r\n    if (item instanceof Armor) this.type = ItemType.ARMOR;\r\n    if (item instanceof BlueGem) this.type = ItemType.BLUEGEM;\r\n    if (item instanceof Candle) this.type = ItemType.CANDLE;\r\n    if (item instanceof Coal) this.type = ItemType.COAL;\r\n    if (item instanceof Coin) this.type = ItemType.COIN;\r\n    if (item instanceof GoldOre) this.type = ItemType.GOLD;\r\n    if (item instanceof GoldenKey) this.type = ItemType.GOLDENKEY;\r\n    if (item instanceof GreenGem) this.type = ItemType.GREENGEM;\r\n    if (item instanceof Heart) this.type = ItemType.HEART;\r\n    if (item instanceof Key) this.type = ItemType.KEY;\r\n    if (item instanceof Lantern) this.type = ItemType.LANTERN;\r\n    if (item instanceof RedGem) this.type = ItemType.REDGEM;\r\n    if (item instanceof Torch) this.type = ItemType.TORCH;\r\n    if (item instanceof Dagger) this.type = ItemType.DAGGER;\r\n    if (item instanceof DualDagger) this.type = ItemType.DUALDAGGER;\r\n    if (item instanceof Shotgun) this.type = ItemType.SHOTGUN;\r\n    if (item instanceof Spear) this.type = ItemType.SPEAR;\r\n    if (item instanceof Pickaxe) this.type = ItemType.PICKAXE;\r\n    if (item instanceof Backpack) this.type = ItemType.BACKPACK;\r\n    // Add new item type checks:\r\n    if (item instanceof Apple) this.type = ItemType.APPLE;\r\n    if (item instanceof BestiaryBook) this.type = ItemType.BESTIARY_BOOK;\r\n    if (item instanceof BombItem) this.type = ItemType.BOMB_ITEM;\r\n    if (item instanceof EntitySpawner) this.type = ItemType.ENTITY_SPAWNER;\r\n    if (item instanceof Fish) this.type = ItemType.FISH;\r\n    if (item instanceof FishingRod) this.type = ItemType.FISHING_ROD;\r\n    if (item instanceof Geode) this.type = ItemType.GEODE;\r\n    if (item instanceof GlowBugs) this.type = ItemType.GLOW_BUGS;\r\n    if (item instanceof GodStone) this.type = ItemType.GOD_STONE;\r\n    if (item instanceof GoldBar) this.type = ItemType.GOLD_BAR;\r\n    if (item instanceof GoldRing) this.type = ItemType.GOLD_RING;\r\n    if (item instanceof GarnetRing) this.type = ItemType.GARNET_RING;\r\n    if (item instanceof ZirconRing) this.type = ItemType.ZIRCON_RING;\r\n    if (item instanceof EmeraldRing) this.type = ItemType.EMERALD_RING;\r\n    if (item instanceof AmberRing) this.type = ItemType.AMBER_RING;\r\n    if (item instanceof GreenPotion) this.type = ItemType.GREEN_POTION;\r\n    if (item instanceof Greataxe) this.type = ItemType.GREATAXE;\r\n    if (item instanceof Hourglass) this.type = ItemType.HOURGLASS;\r\n    if (item instanceof OrangeGem) this.type = ItemType.ORANGE_GEM;\r\n    if (item instanceof Scythe) this.type = ItemType.SCYTHE;\r\n    if (item instanceof ScytheHandle) this.type = ItemType.SCYTHE_HANDLE;\r\n    if (item instanceof ScytheBlade) this.type = ItemType.SCYTHE_BLADE;\r\n    if (item instanceof Shrooms) this.type = ItemType.MUSHROOMS; // Maps to existing MUSHROOMS\r\n    if (item instanceof Slingshot) this.type = ItemType.SLINGSHOT;\r\n    if (item instanceof Spellbook) this.type = ItemType.SPELLBOOK; // Maps to existing SPELLBOOK\r\n    if (item instanceof SpellbookPage) this.type = ItemType.SPELLBOOK_PAGE;\r\n    if (item instanceof Stone) this.type = ItemType.STONE; // Maps to existing STONE\r\n    if (item instanceof Sword) this.type = ItemType.SWORD;\r\n    if (item instanceof Warhammer) this.type = ItemType.WARHAMMER; // Maps to existing WARHAMMER\r\n    if (item instanceof WeaponBlood) this.type = ItemType.WEAPON_BLOOD; // Maps to existing WEAPON_BLOOD\r\n    if (item instanceof WeaponPoison) this.type = ItemType.WEAPON_POISON; // Maps to existing WEAPON_POISON\r\n    if (item instanceof WeaponFragments) this.type = ItemType.WEAPON_FRAGMENTS; // Maps to existing WEAPON_FRAGMENTS\r\n    if (item instanceof BluePotion) this.type = ItemType.BLUE_POTION; // Maps to existing BLUE_POTION\r\n    if (item instanceof Hammer) this.type = ItemType.HAMMER;\r\n    if (item instanceof ShieldLeftFragment)\r\n      this.type = ItemType.SHIELD_LEFT_FRAGMENT;\r\n    if (item instanceof ShieldRightFragment)\r\n      this.type = ItemType.SHIELD_RIGHT_FRAGMENT;\r\n    if (item instanceof IronOre) this.type = ItemType.IRON_ORE;\r\n    if (item instanceof IronBar) this.type = ItemType.IRON_BAR;\r\n    this.equipped = item instanceof Equippable && item.equipped;\r\n    this.x = item.x;\r\n    this.y = item.y;\r\n    this.roomID = game.rooms.indexOf(item.level);\r\n    this.roomGID = item.level?.globalId;\r\n    this.stackCount = item.stackCount;\r\n    this.pickedUp = item.pickedUp;\r\n    try {\r\n      // Tag items spawned by an opened chest to allow re-association on load\r\n      const levelRoom = item.level;\r\n      const candidateChest = levelRoom?.entities?.find(\r\n        (e) =>\r\n          e instanceof Chest &&\r\n          e.health <= 2 &&\r\n          e.x === item.x &&\r\n          e.y === item.y,\r\n      ) as any;\r\n      if (candidateChest) {\r\n        this.sourceChestX = candidateChest.x;\r\n        this.sourceChestY = candidateChest.y;\r\n      }\r\n    } catch {}\r\n  }\r\n}\r\n\r\nlet loadItem = (\r\n  i: ItemState,\r\n  game: Game,\r\n  player?: Player,\r\n  targetRoom?: Room,\r\n): Item => {\r\n  let room =\r\n    targetRoom ||\r\n    (i.roomGID && game.roomsById?.get(i.roomGID)) ||\r\n    (i.roomID !== -1 ? game.rooms[i.roomID] : null);\r\n  let item;\r\n  if (i.type === ItemType.ARMOR) item = new Armor(room, i.x, i.y);\r\n  if (i.type === ItemType.BLUEGEM) item = new BlueGem(room, i.x, i.y);\r\n  if (i.type === ItemType.CANDLE) item = new Candle(room, i.x, i.y);\r\n  if (i.type === ItemType.COAL) item = new Coal(room, i.x, i.y);\r\n  if (i.type === ItemType.COIN) item = new Coin(room, i.x, i.y);\r\n  if (i.type === ItemType.GOLD) item = new GoldOre(room, i.x, i.y);\r\n  if (i.type === ItemType.GOLDENKEY) item = new GoldenKey(room, i.x, i.y);\r\n  if (i.type === ItemType.GREENGEM) item = new GreenGem(room, i.x, i.y);\r\n  if (i.type === ItemType.HEART) item = new Heart(room, i.x, i.y);\r\n  if (i.type === ItemType.KEY) item = new Key(room, i.x, i.y);\r\n  if (i.type === ItemType.LANTERN) item = new Lantern(room, i.x, i.y);\r\n  if (i.type === ItemType.REDGEM) item = new RedGem(room, i.x, i.y);\r\n  if (i.type === ItemType.TORCH) item = new Torch(room, i.x, i.y);\r\n  if (i.type === ItemType.DAGGER) item = new Dagger(room, i.x, i.y);\r\n  if (i.type === ItemType.DUALDAGGER) item = new DualDagger(room, i.x, i.y);\r\n  if (i.type === ItemType.SHOTGUN) item = new Shotgun(room, i.x, i.y);\r\n  if (i.type === ItemType.SPEAR) item = new Spear(room, i.x, i.y);\r\n  if (i.type === ItemType.PICKAXE) item = new Pickaxe(room, i.x, i.y);\r\n  if (i.type === ItemType.BACKPACK) item = new Backpack(room, i.x, i.y);\r\n  // Add new item loading cases:\r\n  if (i.type === ItemType.APPLE) item = new Apple(room, i.x, i.y);\r\n  if (i.type === ItemType.BESTIARY_BOOK)\r\n    item = new BestiaryBook(room, i.x, i.y);\r\n  if (i.type === ItemType.BOMB_ITEM) item = new BombItem(room, i.x, i.y);\r\n  if (i.type === ItemType.ENTITY_SPAWNER)\r\n    item = new EntitySpawner(room, i.x, i.y);\r\n  if (i.type === ItemType.FISH) item = new Fish(room, i.x, i.y);\r\n  if (i.type === ItemType.FISHING_ROD) item = new FishingRod(room, i.x, i.y);\r\n  if (i.type === ItemType.GEODE) item = new Geode(room, i.x, i.y);\r\n  if (i.type === ItemType.GLOW_BUGS) item = new GlowBugs(room, i.x, i.y);\r\n  if (i.type === ItemType.GOD_STONE) item = new GodStone(room, i.x, i.y);\r\n  if (i.type === ItemType.GOLD_BAR) item = new GoldBar(room, i.x, i.y);\r\n  if (i.type === ItemType.GOLD_RING) item = new GoldRing(room, i.x, i.y);\r\n  if (i.type === ItemType.GARNET_RING) item = new GarnetRing(room, i.x, i.y);\r\n  if (i.type === ItemType.ZIRCON_RING) item = new ZirconRing(room, i.x, i.y);\r\n  if (i.type === ItemType.EMERALD_RING) item = new EmeraldRing(room, i.x, i.y);\r\n  if (i.type === ItemType.AMBER_RING) item = new AmberRing(room, i.x, i.y);\r\n  if (i.type === ItemType.GREEN_POTION) item = new GreenPotion(room, i.x, i.y);\r\n  if (i.type === ItemType.GREATAXE) item = new Greataxe(room, i.x, i.y);\r\n  if (i.type === ItemType.HOURGLASS) item = new Hourglass(room, i.x, i.y);\r\n  if (i.type === ItemType.ORANGE_GEM) item = new OrangeGem(room, i.x, i.y);\r\n  if (i.type === ItemType.SCYTHE) item = new Scythe(room, i.x, i.y);\r\n  if (i.type === ItemType.SCYTHE_HANDLE)\r\n    item = new ScytheHandle(room, i.x, i.y);\r\n  if (i.type === ItemType.SCYTHE_BLADE) item = new ScytheBlade(room, i.x, i.y);\r\n  if (i.type === ItemType.MUSHROOMS) item = new Shrooms(room, i.x, i.y);\r\n  if (i.type === ItemType.SLINGSHOT) item = new Slingshot(room, i.x, i.y);\r\n  if (i.type === ItemType.SPELLBOOK) item = new Spellbook(room, i.x, i.y);\r\n  if (i.type === ItemType.SPELLBOOK_PAGE)\r\n    item = new SpellbookPage(room, i.x, i.y);\r\n  if (i.type === ItemType.STONE) item = new Stone(room, i.x, i.y);\r\n  if (i.type === ItemType.SWORD) item = new Sword(room, i.x, i.y);\r\n  if (i.type === ItemType.BLUE_POTION) item = new BluePotion(room, i.x, i.y);\r\n  if (i.type === ItemType.WEAPON_FRAGMENTS)\r\n    item = new WeaponFragments(room, i.x, i.y);\r\n  if (i.type === ItemType.WARHAMMER) item = new Warhammer(room, i.x, i.y);\r\n  if (i.type === ItemType.HAMMER) item = new Hammer(room, i.x, i.y);\r\n  if (i.type === ItemType.WEAPON_POISON)\r\n    item = new WeaponPoison(room, i.x, i.y);\r\n  if (i.type === ItemType.WEAPON_BLOOD) item = new WeaponBlood(room, i.x, i.y);\r\n  if (i.type === ItemType.HAMMER) item = new Hammer(room, i.x, i.y);\r\n  if (i.type === ItemType.SHIELD_LEFT_FRAGMENT)\r\n    item = new ShieldLeftFragment(room, i.x, i.y);\r\n  if (i.type === ItemType.SHIELD_RIGHT_FRAGMENT)\r\n    item = new ShieldRightFragment(room, i.x, i.y);\r\n  if (i.type === ItemType.IRON_ORE) item = new IronOre(room, i.x, i.y);\r\n  if (i.type === ItemType.IRON_BAR) item = new IronBar(room, i.x, i.y);\r\n  if (!item) {\r\n    console.error(\r\n      \"Unknown item type:\",\r\n      i.type,\r\n      \"ItemType enum value:\",\r\n      ItemType[i.type],\r\n      \"Falling back to coal\",\r\n    );\r\n    item = new Coal(room, i.x, i.y);\r\n  }\r\n\r\n  // Ensure game reference always exists\r\n  if (item && !(item as any).game) {\r\n    (item as any).game = game;\r\n  }\r\n  // Ensure level reference exists for inventory-only items\r\n  if (!room && item && !item.level) {\r\n    const savedLocal = game.players?.[game.localPlayerID];\r\n    const fallbackRoom = (savedLocal as any)?.getRoom\r\n      ? (savedLocal as any).getRoom()\r\n      : game.rooms[game.players[game.localPlayerID].levelID];\r\n    item.level = fallbackRoom;\r\n  }\r\n\r\n  if (i.equipped) item.equipped = true;\r\n  if (item instanceof Equippable) item.setWielder(player);\r\n  // Ensure all items have a valid game reference\r\n  if (item && !(item as any).game) {\r\n    (item as any).game = game;\r\n  }\r\n  item.stackCount = i.stackCount;\r\n  item.pickedUp = i.pickedUp;\r\n  return item;\r\n};\r\n\r\nexport class InventoryState {\r\n  isOpen: boolean;\r\n  cols: number;\r\n  rows: number;\r\n  selX: number;\r\n  selY: number;\r\n  equipAnimAmount: Array<number>;\r\n  isWeaponEquipped: boolean;\r\n  weaponI: number;\r\n  coins: number;\r\n  items: Array<ItemState | null>;\r\n  expansion: number;\r\n\r\n  constructor(inventory: Inventory, game: Game) {\r\n    this.isOpen = inventory.isOpen;\r\n    this.cols = inventory.cols;\r\n    this.rows = inventory.rows;\r\n    this.equipAnimAmount = inventory.equipAnimAmount.map((x) => x);\r\n    this.isWeaponEquipped = false;\r\n    if (inventory.weapon) {\r\n      this.isWeaponEquipped = true;\r\n      this.weaponI = inventory.items.indexOf(inventory.weapon);\r\n    }\r\n    this.coins = inventory.coins;\r\n    this.selX = inventory.selX;\r\n    this.selY = inventory.selY;\r\n    this.items = Array<ItemState | null>(inventory.cols * inventory.rows);\r\n    this.expansion = inventory.expansion;\r\n    for (let idx = 0; idx < inventory.cols * inventory.rows; idx++) {\r\n      this.items[idx] = null;\r\n    }\r\n    for (const item of inventory.items) {\r\n      if (item) {\r\n        this.items[inventory.items.indexOf(item)] = new ItemState(item, game);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nlet loadInventory = (inventory: Inventory, i: InventoryState, game: Game) => {\r\n  inventory.clear(); // keeps correct length\r\n  for (let idx = 0; idx < i.items.length; idx++) {\r\n    const itemState = i.items[idx];\r\n    if (itemState) {\r\n      const loadedItem = loadItem(itemState, game, inventory.player);\r\n      // Ensure inventory items reference the player's current room and game\r\n      if (!loadedItem.level) {\r\n        const playerRoom = game.rooms[inventory.player.levelID];\r\n        loadedItem.level = playerRoom;\r\n      }\r\n      if (!(loadedItem as any).game) {\r\n        (loadedItem as any).game = game;\r\n      }\r\n      inventory.items[idx] = loadedItem;\r\n      if (loadedItem instanceof Weapon && inventory.weapon === null) {\r\n        loadedItem.toggleEquip();\r\n        inventory.weapon = loadedItem;\r\n      }\r\n    } else {\r\n      inventory.items[idx] = null;\r\n    }\r\n  }\r\n\r\n  inventory.isOpen = i.isOpen;\r\n  inventory.cols = i.cols;\r\n  inventory.rows = i.rows;\r\n  inventory.selX = i.selX;\r\n  inventory.selY = i.selY;\r\n  inventory.equipAnimAmount = i.equipAnimAmount.map((x) => x);\r\n  inventory.coins = i.coins;\r\n  inventory.expansion = i.expansion;\r\n  // Set weapon reference after all items are loaded\r\n  if (i.isWeaponEquipped && i.weaponI < inventory.items.length) {\r\n    inventory.weapon = inventory.items[i.weaponI] as Weapon;\r\n  }\r\n};\r\n\r\nexport class PlayerState {\r\n  x: number;\r\n  y: number;\r\n  dead: boolean;\r\n  roomID: number;\r\n  roomGID?: string;\r\n  mapGroup?: number;\r\n  roomIndexInGroup?: number;\r\n  direction: Direction;\r\n  health: number;\r\n  maxHealth: number;\r\n  lastTickHealth: number;\r\n  inventory: InventoryState;\r\n  hasOpenVendingMachine: boolean;\r\n  openVendingMachineRoomID: number;\r\n  openVendingMachineRoomGID?: string;\r\n  openVendingMachineID: number;\r\n  openVendingMachineGID?: string;\r\n  sightRadius: number;\r\n  lightEquipped?: boolean;\r\n  lightColor?: [number, number, number];\r\n  lightBrightness?: number;\r\n\r\n  constructor(player: Player, game: Game) {\r\n    this.x = player.x;\r\n    this.y = player.y;\r\n    this.dead = player.dead;\r\n    const resolvedRoom = (player as any)?.getRoom\r\n      ? (player as any).getRoom()\r\n      : game.rooms[player.levelID];\r\n    this.roomGID = resolvedRoom?.globalId;\r\n    this.roomID = resolvedRoom\r\n      ? game.rooms.indexOf(resolvedRoom)\r\n      : player.levelID;\r\n    this.mapGroup = resolvedRoom?.mapGroup;\r\n    const playerRoom = resolvedRoom;\r\n    if (playerRoom) {\r\n      const groupRooms = game.rooms\r\n        .filter((r) => r.mapGroup === playerRoom.mapGroup)\r\n        .sort((a, b) => a.id - b.id);\r\n      this.roomIndexInGroup = groupRooms.findIndex((r) => r === playerRoom);\r\n    }\r\n    this.direction = player.direction;\r\n    this.health = player.health;\r\n    this.maxHealth = player.maxHealth;\r\n    this.lastTickHealth = player.lastTickHealth;\r\n    this.inventory = new InventoryState(player.inventory, game);\r\n    this.hasOpenVendingMachine = false;\r\n    if (player.openVendingMachine) {\r\n      this.hasOpenVendingMachine = true;\r\n      this.openVendingMachineRoomID = game.rooms.indexOf(\r\n        player.openVendingMachine.room,\r\n      );\r\n      this.openVendingMachineRoomGID = player.openVendingMachine.room?.globalId;\r\n      this.openVendingMachineID =\r\n        player.openVendingMachine.room.entities.indexOf(\r\n          player.openVendingMachine,\r\n        );\r\n      this.openVendingMachineGID = (player.openVendingMachine as any).globalId;\r\n    }\r\n    this.sightRadius = player.sightRadius;\r\n    // Persist player light settings used by room.updateLighting()\r\n    this.lightEquipped = (player as any).lightEquipped;\r\n    this.lightColor = (player as any).lightColor;\r\n    this.lightBrightness = (player as any).lightBrightness;\r\n  }\r\n}\r\n\r\nlet loadPlayer = (id: string, p: PlayerState, game: Game): Player => {\r\n  let player = new Player(game, p.x, p.y, id === game.localPlayerID);\r\n  player.dead = p.dead;\r\n\r\n  // Prefer GID if available\r\n  if (p.roomGID && game.roomsById?.has(p.roomGID)) {\r\n    const room = game.roomsById.get(p.roomGID);\r\n    (player as any).roomGID = p.roomGID;\r\n    player.levelID = game.rooms.indexOf(room);\r\n  } else {\r\n    // Sidepath-aware resolution: prefer group match and relative order\r\n    let resolvedRoom: Room | undefined;\r\n    if (p.mapGroup !== undefined) {\r\n      const groupRooms = game.rooms\r\n        .filter((r) => r.mapGroup === p.mapGroup)\r\n        .sort((a, b) => a.id - b.id);\r\n      if (groupRooms.length) {\r\n        if (\r\n          p.roomIndexInGroup !== undefined &&\r\n          p.roomIndexInGroup < groupRooms.length\r\n        ) {\r\n          resolvedRoom = groupRooms[p.roomIndexInGroup];\r\n        } else {\r\n          resolvedRoom =\r\n            groupRooms.find((r) => r.id === p.roomID) || groupRooms[0];\r\n        }\r\n      }\r\n    }\r\n    if (!resolvedRoom) {\r\n      const coord = game.rooms.find((r) => r.tileInside(p.x, p.y));\r\n      if (coord) {\r\n        resolvedRoom = coord;\r\n      }\r\n    }\r\n    if (!resolvedRoom) {\r\n      resolvedRoom = game.rooms[p.roomID];\r\n    }\r\n    (player as any).roomGID = resolvedRoom?.globalId;\r\n    player.levelID = resolvedRoom ? game.rooms.indexOf(resolvedRoom) : 0;\r\n  }\r\n  // Ensure player depth matches the currently generated level depth\r\n  if (game.level) {\r\n    player.depth = game.level.depth;\r\n  }\r\n  player.direction = p.direction;\r\n  player.health = p.health;\r\n  player.maxHealth = p.maxHealth;\r\n  player.lastTickHealth = p.lastTickHealth;\r\n  loadInventory(player.inventory, p.inventory, game);\r\n  if (p.hasOpenVendingMachine) {\r\n    const vmRoom =\r\n      (p.openVendingMachineRoomGID &&\r\n        game.roomsById?.get(p.openVendingMachineRoomGID)) ||\r\n      game.rooms[p.openVendingMachineRoomID];\r\n    player.openVendingMachine = p.openVendingMachineGID\r\n      ? (vmRoom.entities.find(\r\n          (e) => (e as any).globalId === p.openVendingMachineGID,\r\n        ) as VendingMachine)\r\n      : (vmRoom.entities[p.openVendingMachineID] as VendingMachine);\r\n  }\r\n  player.sightRadius = p.sightRadius;\r\n  // Restore player light settings (used by room.updateLighting)\r\n  if (typeof p.lightEquipped === \"boolean\")\r\n    (player as any).lightEquipped = p.lightEquipped;\r\n  if (Array.isArray(p.lightColor))\r\n    (player as any).lightColor = p.lightColor as any;\r\n  if (typeof p.lightBrightness === \"number\")\r\n    (player as any).lightBrightness = p.lightBrightness as any;\r\n\r\n  // Set the player's room reference (this might be needed by some player methods)\r\n  // Note: This will be set properly when the game.room is assigned in loadGameState\r\n  // but we can set it here for consistency\r\n  // player.room = game.rooms[player.levelID]; // Only if Player class has a room property\r\n\r\n  return player;\r\n};\r\n\r\nexport class LevelState {\r\n  depth: number;\r\n  width: number;\r\n  height: number;\r\n  isMainPath: boolean;\r\n  mapGroup: number;\r\n  envType: EnvType;\r\n  levelGID?: string;\r\n\r\n  constructor(level: Level) {\r\n    this.depth = level.depth;\r\n    this.width = level.width;\r\n    this.height = level.height;\r\n    this.isMainPath = level.isMainPath;\r\n    this.mapGroup = level.mapGroup;\r\n    this.envType = level.environment.type;\r\n    this.levelGID = (level as any).globalId;\r\n  }\r\n}\r\n\r\nconst loadLevel = (level: Level, levelState: LevelState) => {\r\n  level.depth = levelState.depth;\r\n  level.width = levelState.width;\r\n  level.height = levelState.height;\r\n  level.isMainPath = levelState.isMainPath;\r\n  level.mapGroup = levelState.mapGroup;\r\n  level.environment.type = levelState.envType;\r\n  level.environment.skin = levelState.envType as unknown as SkinType;\r\n};\r\n\r\nexport class GameState {\r\n  seed: number;\r\n  randomState: number;\r\n  players: Record<string, PlayerState>;\r\n  offlinePlayers: Record<string, PlayerState>;\r\n  level: LevelState;\r\n  rooms: Array<RoomState>;\r\n  levelGID?: string;\r\n  roomGIDs?: string[];\r\n  currentPathId?: string;\r\n  sidepathMeta?: Array<{ pathId: string; rooms: number }>;\r\n  lastDroppedScythePiece: \"handle\" | \"blade\" | null = null;\r\n  lastDroppedShieldPiece: \"left\" | \"right\" | null = null;\r\n  stats: Stats;\r\n\r\n  constructor() {\r\n    this.seed = 0;\r\n    this.randomState = 0;\r\n    this.players = {};\r\n    this.offlinePlayers = {};\r\n    this.level = null;\r\n    this.rooms = [];\r\n    //this.statsTracker = statsTracker;\r\n  }\r\n}\r\n\r\nexport const createGameState = (game: Game): GameState => {\r\n  // Prevent saving while replaying to avoid corrupting baseState or user saves\r\n  try {\r\n    if ((game as any).replayManager?.isReplaying?.()) {\r\n      console.warn(\"🔄 SAVE: Skipped createGameState during replay\");\r\n      return null as any;\r\n    }\r\n  } catch {}\r\n\r\n  try {\r\n    let gs = new GameState();\r\n    gs.stats = statsTracker.getStats();\r\n\r\n    // Save basic game properties\r\n    gs.seed = game.levelgen.seed;\r\n    gs.randomState = Random.state;\r\n    gs.lastDroppedScythePiece = game.lastDroppedScythePiece;\r\n    gs.lastDroppedShieldPiece = game.lastDroppedShieldPiece;\r\n\r\n    // Save level state\r\n    if (game.level) {\r\n      gs.level = new LevelState(game.level);\r\n      gs.levelGID = (game.level as any).globalId;\r\n    } else {\r\n      console.warn(\"🔄 SAVE: No game.level found!\");\r\n    }\r\n\r\n    // Save players\r\n\r\n    for (const i in game.players) {\r\n      try {\r\n        const pr = game.players[i];\r\n        const playerRoom = game.rooms[pr.levelID];\r\n\r\n        gs.players[i] = new PlayerState(game.players[i], game);\r\n      } catch (error) {\r\n        console.error(`❌ SAVE: Error saving player ${i}:`, error);\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    // Save offline players\r\n    for (const i in game.offlinePlayers) {\r\n      try {\r\n        gs.offlinePlayers[i] = new PlayerState(game.offlinePlayers[i], game);\r\n      } catch (error) {\r\n        console.error(`❌ SAVE: Error saving offline player ${i}:`, error);\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    // Persist current path\r\n    try {\r\n      (gs as any).currentPathId = (game as any).currentPathId || \"main\";\r\n    } catch {}\r\n\r\n    // Save rooms\r\n    try {\r\n      const groupCounts: Record<number, number> = {};\r\n      for (const r of game.rooms) {\r\n        groupCounts[r.mapGroup] = (groupCounts[r.mapGroup] || 0) + 1;\r\n      }\r\n    } catch {}\r\n    for (let roomIndex = 0; roomIndex < game.rooms.length; roomIndex++) {\r\n      const room = game.rooms[roomIndex];\r\n      try {\r\n        room.catchUp();\r\n        const roomState = new RoomState(room, game);\r\n        gs.rooms.push(roomState);\r\n        (gs.roomGIDs ||= []).push(room.globalId);\r\n      } catch (error) {\r\n        console.error(`❌ SAVE: Error saving room ${roomIndex}:`, error);\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    // Save sidepath metadata: count rooms per non-main pathId\r\n    try {\r\n      const byPid = new Map<string, number>();\r\n      for (const rs of gs.rooms) {\r\n        const pid = ((rs as any).pathId as string) || \"main\";\r\n        if (pid === \"main\") continue;\r\n        byPid.set(pid, (byPid.get(pid) || 0) + 1);\r\n      }\r\n      (gs as any).sidepathMeta = Array.from(byPid.entries()).map(\r\n        ([pathId, rooms]) => ({ pathId, rooms }),\r\n      );\r\n    } catch {}\r\n\r\n    return gs;\r\n  } catch (error) {\r\n    console.error(\"❌ SAVE: Fatal error in createGameState:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const loadGameState = (\r\n  game: Game,\r\n  activeUsernames: Array<string>,\r\n  gameState: GameState,\r\n  newWorld: boolean,\r\n) => {\r\n  try {\r\n    // game.loadedFromSaveFile = true;\r\n\r\n    // Clear existing rooms\r\n    if (statsTracker && gameState.stats) statsTracker.setStats(gameState.stats);\r\n\r\n    game.rooms = []; // Use standard array syntax\r\n    game.roomsById = new Map();\r\n    game.levels = [];\r\n    game.levelsById = new Map();\r\n    // Also reset input listener arrays to avoid duplicate mouse handlers after load\r\n    try {\r\n      const InputMod = require(\"./input\");\r\n      (InputMod.Input.mouseDownListeners as any).length = 0;\r\n      (InputMod.Input.mouseRightClickListeners as any).length = 0;\r\n      (InputMod.Input.mouseLeftClickListeners as any).length = 0;\r\n      (InputMod.Input.mouseMoveListeners as any).length = 0;\r\n      (InputMod.Input.mouseUpListeners as any).length = 0;\r\n    } catch {}\r\n\r\n    // Initialize level generator\r\n\r\n    game.levelgen = new LevelGenerator();\r\n    game.levelgen.setSeed(gameState.seed);\r\n\r\n    // Handle missing level state\r\n    if (!gameState.level) {\r\n      console.warn(\"🔄 LOAD: No level state found, creating default\");\r\n      const tempLevel = new Level(game, 0, 1, 1, true, 0, EnvType.DUNGEON);\r\n      gameState.level = new LevelState(tempLevel);\r\n    } else {\r\n    }\r\n\r\n    if (newWorld) {\r\n      gameState.level.depth = 0;\r\n    } else {\r\n      // Restore random state BEFORE level generation for existing worlds\r\n\r\n      Random.setState(gameState.randomState);\r\n    }\r\n\r\n    globalEventBus.emit(EVENTS.LEVEL_GENERATION_STARTED, {});\r\n\r\n    return game.levelgen\r\n      .generateFirstNFloors(game, gameState.level.depth, !newWorld)\r\n      .then(async () => {\r\n        // Ensure seed and Random.state remain as in the save\r\n        try {\r\n          game.levelgen.setSeed(gameState.seed);\r\n          Random.setState(gameState.randomState);\r\n        } catch {}\r\n\r\n        globalEventBus.emit(EVENTS.LEVEL_GENERATION_COMPLETED, {});\r\n\r\n        // Pre-generate sidepaths deterministically by saved pathIds (avoids coordinate mismatch)\r\n        try {\r\n          const roomStates = gameState.rooms || [];\r\n          // Collect unique non-main pathIds and their smallest saved mapGroup to preserve ordering\r\n          const pathIdToMinGroup = new Map<string, number>();\r\n          for (const rs of roomStates) {\r\n            const pid = (rs as any).pathId as string | undefined;\r\n            if (!pid || pid === \"main\") continue;\r\n            const mg = (rs as any).mapGroup as number | undefined;\r\n            if (typeof mg !== \"number\") continue;\r\n            const prev = pathIdToMinGroup.get(pid);\r\n            if (prev === undefined || mg < prev) pathIdToMinGroup.set(pid, mg);\r\n          }\r\n          const sidepaths = Array.from(pathIdToMinGroup.entries())\r\n            .map(([pid, mg]) => ({ pid, mg }))\r\n            .sort((a, b) => a.mg - b.mg);\r\n\r\n          // Collect rooms for all generated sidepaths, since generate() replaces game.rooms each time\r\n          const collectedSideRooms: Room[] = [];\r\n\r\n          for (const sp of sidepaths) {\r\n            const alreadyExists = game.rooms.some(\r\n              (r) => (r as any).pathId === sp.pid,\r\n            );\r\n            if (alreadyExists) continue;\r\n            const beforeCount = game.rooms.length;\r\n\r\n            await game.levelgen.generate(\r\n              game,\r\n              gameState.level.depth,\r\n              true,\r\n              () => {},\r\n              gameState.level.envType,\r\n              !newWorld,\r\n              sp.pid,\r\n              // Use saved sidepath room count if available for determinism\r\n              (gameState as any).sidepathMeta\r\n                ? {\r\n                    caveRooms:\r\n                      (gameState as any).sidepathMeta.find(\r\n                        (m) => m.pathId === sp.pid,\r\n                      )?.rooms ?? undefined,\r\n                  }\r\n                : undefined,\r\n            );\r\n            const afterCount = game.rooms.length;\r\n            const added = game.rooms.filter(\r\n              (r) => (r as any).pathId === sp.pid,\r\n            );\r\n            // Stash now because subsequent generate() calls will overwrite game.rooms\r\n            for (const r of added) collectedSideRooms.push(r);\r\n          }\r\n\r\n          // Merge any newly generated rooms into the active level\r\n          const activeLevel = game.levels[gameState.level.depth];\r\n          if (activeLevel) {\r\n            const existingGids = new Set(\r\n              activeLevel.rooms.map((r) => r.globalId),\r\n            );\r\n            const newRooms = collectedSideRooms\r\n              .filter((r) => !existingGids.has(r.globalId))\r\n              // Preserve path grouping order from save: sort by (pathId, mapGroup, id)\r\n              .sort((a, b) => {\r\n                const pa = (a as any).pathId || \"main\";\r\n                const pb = (b as any).pathId || \"main\";\r\n                if (pa !== pb) return pa < pb ? -1 : 1;\r\n                if (a.mapGroup !== b.mapGroup) return a.mapGroup - b.mapGroup;\r\n                return a.id - b.id;\r\n              });\r\n            let merged = 0;\r\n            let startId = activeLevel.rooms.length;\r\n            for (const r of newRooms) {\r\n              r.id = startId + merged;\r\n              activeLevel.rooms.push(r);\r\n              merged++;\r\n            }\r\n            game.rooms = activeLevel.rooms;\r\n            game.roomsById = new Map(game.rooms.map((r) => [r.globalId, r]));\r\n\r\n            try {\r\n              const byPath: Record<string, number> = {} as any;\r\n              const byGroup: Record<number, number> = {} as any;\r\n              for (const r of game.rooms) {\r\n                const pid = (r as any).pathId || \"main\";\r\n                byPath[pid] = (byPath[pid] || 0) + 1;\r\n                byGroup[r.mapGroup] = (byGroup[r.mapGroup] || 0) + 1;\r\n              }\r\n            } catch {}\r\n          }\r\n        } catch (e) {\r\n          console.warn(\"⚠️ LOAD: Sidepath generation by pathId failed\", e);\r\n        }\r\n\r\n        if (!newWorld) {\r\n          // Pre-pass: align generated room GIDs with saved roomGIDs so GID-based linking works\r\n          try {\r\n            const newRoomsByGid = new Map<string, Room>();\r\n            for (const rs of gameState.rooms) {\r\n              if (!rs?.roomGID) continue;\r\n              // Try to find the intended generated room using the same resolution we use later\r\n              let candidate =\r\n                (rs.roomGID && game.getRoomById(rs.roomGID)) ||\r\n                game.rooms.find(\r\n                  (r) =>\r\n                    r.mapGroup === (rs as any).mapGroup &&\r\n                    (r as any).pathId === ((rs as any).pathId || \"main\") &&\r\n                    r.id === rs.roomID,\r\n                ) ||\r\n                game.rooms.find(\r\n                  (r) =>\r\n                    r.mapGroup === (rs as any).mapGroup && r.id === rs.roomID,\r\n                ) ||\r\n                game.rooms.find((r) => r.id === rs.roomID);\r\n              if (candidate && (candidate as any).globalId !== rs.roomGID) {\r\n                try {\r\n                  IdGenerator.reserve(rs.roomGID);\r\n                  (candidate as any).globalId = rs.roomGID;\r\n                } catch {}\r\n              }\r\n            }\r\n            // Rebuild roomsById map with possibly updated GIDs\r\n            game.roomsById = new Map(game.rooms.map((r) => [r.globalId, r]));\r\n          } catch {}\r\n\r\n          // Load players\r\n\r\n          for (const playerId in gameState.players) {\r\n            try {\r\n              const player = loadPlayer(\r\n                playerId,\r\n                gameState.players[playerId],\r\n                game,\r\n              );\r\n              game.players[playerId] = player;\r\n            } catch (error) {\r\n              console.error(\r\n                `❌ LOAD: Error loading player ${playerId}:`,\r\n                error,\r\n              );\r\n              throw error;\r\n            }\r\n          }\r\n\r\n          // Load offline players\r\n\r\n          for (const playerId in gameState.offlinePlayers) {\r\n            try {\r\n              const offlinePlayer = loadPlayer(\r\n                playerId,\r\n                gameState.offlinePlayers[playerId],\r\n                game,\r\n              );\r\n              game.offlinePlayers[playerId] = offlinePlayer;\r\n            } catch (error) {\r\n              console.error(\r\n                `❌ LOAD: Error loading offline player ${playerId}:`,\r\n                error,\r\n              );\r\n              throw error;\r\n            }\r\n          }\r\n\r\n          // Load room states\r\n\r\n          try {\r\n            for (const roomState of gameState.rooms) {\r\n              let resolvedBy = \"\";\r\n              let room: Room | undefined = undefined;\r\n              const wantedPid = (roomState as any).pathId || \"main\";\r\n              if (roomState.roomGID) {\r\n                const r0 = game.getRoomById(roomState.roomGID);\r\n                if (r0) {\r\n                  room = r0;\r\n                  resolvedBy = \"gid\";\r\n                }\r\n              }\r\n              if (!room) {\r\n                const r1 = game.rooms.find(\r\n                  (r) =>\r\n                    r.mapGroup === roomState.mapGroup &&\r\n                    (r as any).pathId === wantedPid &&\r\n                    r.id === roomState.roomID,\r\n                );\r\n                if (r1) {\r\n                  room = r1;\r\n                  resolvedBy = \"group+path+id\";\r\n                }\r\n              }\r\n              if (!room) {\r\n                const r2 = game.rooms.find(\r\n                  (r) =>\r\n                    r.mapGroup === roomState.mapGroup &&\r\n                    r.id === roomState.roomID,\r\n                );\r\n                if (r2) {\r\n                  room = r2;\r\n                  resolvedBy = \"group+id\";\r\n                }\r\n              }\r\n              if (!room) {\r\n                const r3 = game.rooms.find((r) => r.id === roomState.roomID);\r\n                if (r3) {\r\n                  room = r3;\r\n                  resolvedBy = \"id\";\r\n                }\r\n              }\r\n\r\n              const roomCandidate = room;\r\n              // use the resolved candidate\r\n              const roomFinal = roomCandidate;\r\n              const roomRef = roomFinal;\r\n              if (roomRef) {\r\n                // Ensure pathId is restored\r\n                if ((roomState as any).pathId)\r\n                  (roomRef as any).pathId = (roomState as any).pathId;\r\n                // Temporarily set context so any loaders that reference game.room are safe\r\n                const prevRoom = game.room;\r\n                try {\r\n                  game.room = roomRef;\r\n                  loadRoom(roomRef, roomState, game);\r\n                } finally {\r\n                  game.room = prevRoom;\r\n                }\r\n              } else {\r\n              }\r\n            }\r\n            // Global post-pass to link doors across rooms by GID\r\n            try {\r\n              const allDoorsByGid = new Map<string, Door>();\r\n              const pending: Array<Door> = [];\r\n              const byCoord = new Map<string, Door[]>();\r\n              for (const r of game.rooms) {\r\n                for (let x = r.roomX - 1; x < r.roomX + r.width + 1; x++) {\r\n                  for (let y = r.roomY - 1; y < r.roomY + r.height + 1; y++) {\r\n                    const t = r.roomArray[x]?.[y];\r\n                    if (t instanceof Door) {\r\n                      const gid = (t as any).globalId as string | undefined;\r\n                      if (gid) allDoorsByGid.set(gid, t);\r\n                      if ((t as any)._pendingLinkedDoorGID) pending.push(t);\r\n                      const key = `${x},${y}`;\r\n                      const arr = byCoord.get(key) || [];\r\n                      arr.push(t);\r\n                      byCoord.set(key, arr);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              // Link by explicit GID first\r\n              for (const d of pending) {\r\n                const targetGid = (d as any)._pendingLinkedDoorGID as\r\n                  | string\r\n                  | null;\r\n                if (targetGid && allDoorsByGid.has(targetGid)) {\r\n                  d.link(allDoorsByGid.get(targetGid));\r\n                }\r\n                (d as any)._pendingLinkedDoorGID = null;\r\n              }\r\n              // Fallback: link doors sharing the same world coordinate\r\n              for (const [key, doors] of byCoord.entries()) {\r\n                if (doors.length === 2) {\r\n                  const [a, b] = doors;\r\n                  if (!(a as any).linkedDoor) a.link(b as Door);\r\n                  if (!(b as any).linkedDoor) b.link(a as Door);\r\n                }\r\n              }\r\n            } catch (e) {\r\n              console.warn(\"⚠️ LOAD: Global door linking failed\", e);\r\n            }\r\n          } catch (error) {\r\n            console.error(\"❌ LOAD: Error loading room states:\", error);\r\n            throw error;\r\n          }\r\n\r\n          // Set local player and current room\r\n\r\n          if (activeUsernames.includes(game.localPlayerID)) {\r\n            const localPlayer = game.players[game.localPlayerID];\r\n            if (localPlayer) {\r\n              if (game.rooms.length > 0) {\r\n                // Resolve via roomGID (stable), else by saved mapGroup+roomID where available (sidepaths),\r\n                // else spatial by coordinates, else fallback by index or first room\r\n                const savedLocal = gameState.players[game.localPlayerID];\r\n                const gidRoom = savedLocal?.roomGID\r\n                  ? game.getRoomById(savedLocal.roomGID)\r\n                  : undefined;\r\n                // Prefer sidepath grouping + relative order if present\r\n                let groupAndIdRoom: Room | undefined = undefined;\r\n                if (savedLocal?.mapGroup !== undefined) {\r\n                  const groupRooms = game.rooms\r\n                    .filter((r) => r.mapGroup === savedLocal.mapGroup)\r\n                    .sort((a, b) => a.id - b.id);\r\n\r\n                  if (groupRooms.length) {\r\n                    if (\r\n                      savedLocal?.roomIndexInGroup !== undefined &&\r\n                      savedLocal.roomIndexInGroup < groupRooms.length\r\n                    ) {\r\n                      groupAndIdRoom = groupRooms[savedLocal.roomIndexInGroup];\r\n                    } else if (savedLocal?.roomID !== undefined) {\r\n                      groupAndIdRoom =\r\n                        groupRooms.find((r) => r.id === savedLocal.roomID) ||\r\n                        groupRooms[0];\r\n                    }\r\n                  }\r\n                }\r\n                const coordRoom = game.rooms.find((r) =>\r\n                  r.tileInside(localPlayer.x, localPlayer.y),\r\n                );\r\n                if (!gidRoom && !groupAndIdRoom && coordRoom) {\r\n                }\r\n                const indexRoom =\r\n                  localPlayer.levelID < game.rooms.length\r\n                    ? game.rooms[localPlayer.levelID]\r\n                    : undefined;\r\n                const resolvedRoom =\r\n                  gidRoom ||\r\n                  groupAndIdRoom ||\r\n                  coordRoom ||\r\n                  indexRoom ||\r\n                  game.rooms[0];\r\n\r\n                game.room = resolvedRoom;\r\n                localPlayer.levelID = game.rooms.indexOf(resolvedRoom);\r\n                // Restore active path\r\n                try {\r\n                  (game as any).currentPathId =\r\n                    (gameState as any).currentPathId ||\r\n                    resolvedRoom.pathId ||\r\n                    \"main\";\r\n                } catch {}\r\n\r\n                // Force-correct depth/level mapping on load\r\n                game.updateLevel(game.room);\r\n                game.currentDepth = game.level.depth;\r\n                localPlayer.depth = game.level.depth;\r\n                if (!resolvedRoom.tileInside(localPlayer.x, localPlayer.y)) {\r\n                  const center = resolvedRoom.getRoomCenter();\r\n                  localPlayer.moveSnap(center.x, center.y);\r\n                }\r\n                game.room.enterLevel(localPlayer, {\r\n                  x: localPlayer.x,\r\n                  y: localPlayer.y,\r\n                });\r\n                localPlayer.map.updateSeenTiles();\r\n                // Refresh lighting to include player's equipped light source immediately after placement\r\n                try {\r\n                  game.room.updateLighting();\r\n                } catch {}\r\n\r\n                // Validate player position\r\n                const tile =\r\n                  game.room.roomArray[localPlayer.x]?.[localPlayer.y];\r\n                if (!tile || tile.isSolid()) {\r\n                  console.warn(\r\n                    \"🔄 LOAD: Player in invalid position, moving to room center\",\r\n                  );\r\n                  const roomCenter = game.room.getRoomCenter();\r\n                  localPlayer.moveSnap(roomCenter.x, roomCenter.y);\r\n                } else {\r\n                }\r\n              } else {\r\n                console.error(\r\n                  \"❌ LOAD: Invalid levelID for local player:\",\r\n                  localPlayer.levelID,\r\n                );\r\n                throw new Error(\r\n                  `Invalid levelID ${localPlayer.levelID} for local player`,\r\n                );\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          game.players[game.localPlayerID] = new Player(game, 0, 0, true);\r\n          game.room = game.rooms[game.players[game.localPlayerID].levelID];\r\n          game.room.enterLevel(game.players[game.localPlayerID]);\r\n          game.players[game.localPlayerID].map.updateSeenTiles();\r\n          game.players[game.localPlayerID].map.saveMapData();\r\n        }\r\n\r\n        // Update lighting (guard nulls)\r\n        try {\r\n          game.room?.updateLighting?.();\r\n        } catch {}\r\n\r\n        // Clear chat\r\n        game.chat = [];\r\n\r\n        return game;\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"❌ LOAD: Level generation failed:\", error);\r\n        throw error;\r\n      });\r\n  } catch (error) {\r\n    console.error(\"❌ LOAD: Fatal error in loadGameState:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport enum TileType {\r\n  FLOOR,\r\n  WALL,\r\n  WALL_TORCH,\r\n  WINDOW,\r\n  DOOR,\r\n  DOWN_LADDER,\r\n  UP_LADDER,\r\n  POOL,\r\n  MAGMA_POOL,\r\n  CHASM,\r\n  SPAWN_FLOOR,\r\n  SPIKE_TRAP,\r\n  SPIKE,\r\n  TRAP_DOOR,\r\n  INSIDE_LEVEL_DOOR,\r\n  BUTTON,\r\n  FOUNTAIN,\r\n  COFFIN,\r\n  BONES,\r\n}\r\nexport class TileState {\r\n  type: TileType;\r\n  x: number;\r\n  y: number;\r\n  // Store tile-specific properties as a generic object\r\n  properties: Record<string, any>;\r\n\r\n  constructor(tile: Tile, game: Game) {\r\n    // Add null check at the beginning\r\n    if (!tile) {\r\n      throw new Error(\"Cannot create TileState from null tile\");\r\n    }\r\n\r\n    this.x = tile.x;\r\n    this.y = tile.y;\r\n    this.properties = {};\r\n\r\n    // Determine tile type and extract relevant properties\r\n    if (tile instanceof Floor) {\r\n      this.type = TileType.FLOOR;\r\n    } else if (tile instanceof WallTorch) {\r\n      this.type = TileType.WALL_TORCH;\r\n      this.properties.isBottomWall = (tile as any).isBottomWall;\r\n      this.properties.frame = (tile as any).frame;\r\n    } else if (tile instanceof Window) {\r\n      this.type = TileType.WINDOW;\r\n      this.properties.isBottomWall = (tile as any).isBottomWall;\r\n    } else if (tile instanceof Wall) {\r\n      this.type = TileType.WALL;\r\n    } else if (tile instanceof Door) {\r\n      this.type = TileType.DOOR;\r\n      // Persist the canonical door type. Door class uses `type`, not `doorType`.\r\n      this.properties.doorType = (tile as any).type;\r\n      this.properties.type = (tile as any).type; // compatibility alias\r\n      // Persist both legacy isOpen and canonical opened/locked flags\r\n      this.properties.isOpen = (tile as any).isOpen;\r\n      this.properties.opened = (tile as any).opened;\r\n      this.properties.locked = (tile as any).locked;\r\n      // Persist lockable module details if present\r\n      this.properties.lockType = (tile as any).lockable?.lockType;\r\n      this.properties.keyID = (tile as any).lockable?.keyID;\r\n      this.properties.doorDir = (tile as any).doorDir;\r\n      this.properties.tunnelDoor = (tile as any).tunnelDoor;\r\n      this.properties.globalId = (tile as any).globalId;\r\n      this.properties.linkedDoorGID =\r\n        (tile as any).linkedDoor?.globalId || null;\r\n    } else if (tile instanceof InsideLevelDoor) {\r\n      this.type = TileType.INSIDE_LEVEL_DOOR;\r\n      this.properties.opened = (tile as any).opened;\r\n      this.properties.globalId = (tile as any).globalId;\r\n    } else if (tile instanceof Button) {\r\n      this.type = TileType.BUTTON;\r\n      this.properties.globalId = (tile as any).globalId;\r\n      const linkedDoor = (tile as any).linkedDoor as InsideLevelDoor | null;\r\n      this.properties.linkedDoorGID = linkedDoor?.globalId || null;\r\n    } else if (tile instanceof DownLadder) {\r\n      this.type = TileType.DOWN_LADDER;\r\n      this.properties.isSidePath = (tile as any).isSidePath;\r\n      this.properties.environment = (tile as any).environment;\r\n      this.properties.lockType = (tile as any).lockable?.lockType;\r\n      this.properties.keyID = (tile as any).lockable?.keyID;\r\n      const linkedRoom: Room | null = (tile as any).linkedRoom || null;\r\n      this.properties.linkedRoomGID = linkedRoom ? linkedRoom.globalId : null;\r\n    } else if (tile instanceof UpLadder) {\r\n      this.type = TileType.UP_LADDER;\r\n      // Persist rope state and explicit link to target room by GID for reliability\r\n      this.properties.isRope = (tile as any).isRope || false;\r\n      const linkedRoom: Room | null = (tile as any).linkedRoom || null;\r\n      this.properties.linkedRoomGID = linkedRoom ? linkedRoom.globalId : null;\r\n    } else if (tile instanceof Pool) {\r\n      this.type = TileType.POOL;\r\n      // Reconstruct edge information from tileX, tileY values\r\n      const baseTileX = (tile as any).skin === 1 ? 24 : 20;\r\n      const baseTileY = 4;\r\n      this.properties.leftEdge = (tile as any).tileX < baseTileX;\r\n      this.properties.rightEdge = (tile as any).tileX > baseTileX;\r\n      this.properties.topEdge = (tile as any).topEdge; // This is stored\r\n      this.properties.bottomEdge = (tile as any).tileY > baseTileY;\r\n    } else if (tile instanceof MagmaPool) {\r\n      this.type = TileType.MAGMA_POOL;\r\n      const baseTileX = 24;\r\n      const baseTileY = 4;\r\n      this.properties.leftEdge = (tile as any).tileX < baseTileX;\r\n      this.properties.rightEdge = (tile as any).tileX > baseTileX;\r\n      this.properties.topEdge = (tile as any).topEdge; // stored on class\r\n      this.properties.bottomEdge = (tile as any).tileY > baseTileY;\r\n    } else if (tile instanceof Chasm) {\r\n      this.type = TileType.CHASM;\r\n      // Reconstruct edge information from tileX, tileY values\r\n      const baseTileX = (tile as any).skin === 1 ? 24 : 20;\r\n      const baseTileY = 1;\r\n      this.properties.leftEdge = (tile as any).tileX < baseTileX;\r\n      this.properties.rightEdge = (tile as any).tileX > baseTileX;\r\n      this.properties.topEdge = (tile as any).topEdge; // This is stored\r\n      this.properties.bottomEdge = (tile as any).tileY > baseTileY;\r\n    } else if (tile instanceof SpawnFloor) {\r\n      this.type = TileType.SPAWN_FLOOR;\r\n    } else if (tile instanceof FountainTile) {\r\n      this.type = TileType.FOUNTAIN;\r\n      this.properties.subTileX = (tile as any).subTileX;\r\n      this.properties.subTileY = (tile as any).subTileY;\r\n    } else if (tile instanceof CoffinTile) {\r\n      this.type = TileType.COFFIN;\r\n      this.properties.subTileY = (tile as any).subTileY;\r\n    } else if (tile instanceof SpikeTrap) {\r\n      this.type = TileType.SPIKE_TRAP;\r\n      this.properties.triggered = (tile as any).triggered;\r\n    } else if (tile instanceof Spike) {\r\n      this.type = TileType.SPIKE;\r\n    } else if (tile instanceof Trapdoor) {\r\n      this.type = TileType.TRAP_DOOR;\r\n    } else if (tile instanceof Bones) {\r\n      this.type = TileType.BONES;\r\n    } else {\r\n      // Default fallback\r\n      this.type = TileType.FLOOR;\r\n      console.warn(\r\n        \"Unknown tile type, defaulting to FLOOR:\",\r\n        tile.constructor.name,\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nlet loadTile = (ts: TileState, room: Room, game: Game): Tile => {\r\n  let tile: Tile;\r\n\r\n  switch (ts.type) {\r\n    case TileType.FLOOR:\r\n      tile = new Floor(room, ts.x, ts.y);\r\n      break;\r\n    case TileType.WALL:\r\n      tile = new Wall(room, ts.x, ts.y);\r\n      break;\r\n    case TileType.WALL_TORCH:\r\n      tile = new WallTorch(room, ts.x, ts.y, ts.properties.isBottomWall);\r\n      (tile as any).frame = ts.properties.frame || 0;\r\n      break;\r\n    case TileType.WINDOW:\r\n      tile = new Window(room, ts.x, ts.y, ts.properties.isBottomWall);\r\n      break;\r\n    case TileType.DOOR:\r\n      // Prefer `doorType`, fallback to `type` if older saves\r\n      const _doorType =\r\n        (ts.properties.doorType as DoorType | undefined) ??\r\n        (ts.properties.type as DoorType | undefined) ??\r\n        DoorType.DOOR;\r\n      tile = new Door(room, game, ts.x, ts.y, ts.properties.doorDir, _doorType);\r\n      (tile as any).isOpen = ts.properties.isOpen || false;\r\n      if (typeof ts.properties.opened === \"boolean\")\r\n        (tile as any).opened = ts.properties.opened;\r\n      if (typeof ts.properties.locked === \"boolean\")\r\n        (tile as any).locked = ts.properties.locked;\r\n      // Restore lockable details if present\r\n      try {\r\n        if ((tile as any).lockable && ts.properties.lockType !== undefined) {\r\n          (tile as any).lockable.lockType = ts.properties.lockType;\r\n          (tile as any).lockable.keyID = ts.properties.keyID;\r\n        }\r\n      } catch {}\r\n      // Stash pending link target for global post-load linking\r\n      (tile as any)._pendingLinkedDoorGID = ts.properties.linkedDoorGID || null;\r\n      // Restore globalId for determinism across save/load\r\n      if (ts.properties.globalId) {\r\n        try {\r\n          IdGenerator.reserve(ts.properties.globalId);\r\n          (tile as any).globalId = ts.properties.globalId;\r\n        } catch {}\r\n      }\r\n      break;\r\n    case TileType.INSIDE_LEVEL_DOOR:\r\n      tile = new InsideLevelDoor(room, game, ts.x, ts.y);\r\n      if (typeof ts.properties.opened === \"boolean\")\r\n        (tile as any).opened = ts.properties.opened;\r\n      if (ts.properties.globalId) {\r\n        try {\r\n          IdGenerator.reserve(ts.properties.globalId);\r\n          (tile as any).globalId = ts.properties.globalId;\r\n        } catch {}\r\n      }\r\n      break;\r\n    case TileType.BUTTON:\r\n      // Temporarily create a dummy InsideLevelDoor; will be replaced in linking pass\r\n      const tempDoor = new InsideLevelDoor(room, game, ts.x, ts.y);\r\n      tile = new Button(room, ts.x, ts.y, tempDoor);\r\n      if (ts.properties.globalId) {\r\n        try {\r\n          IdGenerator.reserve(ts.properties.globalId);\r\n          (tile as any).globalId = ts.properties.globalId;\r\n        } catch {}\r\n      }\r\n      // Save target gid to link later\r\n      (tile as any)._pendingLinkedDoorGID = ts.properties.linkedDoorGID || null;\r\n      break;\r\n    case TileType.DOWN_LADDER:\r\n      tile = new DownLadder(\r\n        room,\r\n        game,\r\n        ts.x,\r\n        ts.y,\r\n        ts.properties.isSidePath || false,\r\n        ts.properties.environment,\r\n        ts.properties.lockType,\r\n        undefined,\r\n        // lockStateOverride ensures saved lockType/keyID are restored exactly\r\n        { lockType: ts.properties.lockType, keyID: ts.properties.keyID },\r\n      );\r\n      if (ts.properties.linkedRoomGID) {\r\n        const linked = game.roomsById?.get(ts.properties.linkedRoomGID);\r\n        if (linked) (tile as any).linkedRoom = linked;\r\n      }\r\n      break;\r\n    case TileType.UP_LADDER:\r\n      tile = new UpLadder(room, game, ts.x, ts.y);\r\n      (tile as any).isRope = !!ts.properties.isRope;\r\n      if (ts.properties.linkedRoomGID) {\r\n        const linked = game.roomsById?.get(ts.properties.linkedRoomGID);\r\n        if (linked) (tile as any).linkedRoom = linked;\r\n      }\r\n      break;\r\n    case TileType.POOL:\r\n      tile = new Pool(\r\n        room,\r\n        ts.x,\r\n        ts.y,\r\n        ts.properties.leftEdge || false,\r\n        ts.properties.rightEdge || false,\r\n        ts.properties.topEdge || false,\r\n        ts.properties.bottomEdge || false,\r\n      );\r\n      break;\r\n    case TileType.MAGMA_POOL:\r\n      tile = new MagmaPool(\r\n        room,\r\n        ts.x,\r\n        ts.y,\r\n        ts.properties.leftEdge || false,\r\n        ts.properties.rightEdge || false,\r\n        ts.properties.topEdge || false,\r\n        ts.properties.bottomEdge || false,\r\n      );\r\n      break;\r\n    case TileType.CHASM:\r\n      tile = new Chasm(\r\n        room,\r\n        ts.x,\r\n        ts.y,\r\n        ts.properties.leftEdge || false,\r\n        ts.properties.rightEdge || false,\r\n        ts.properties.topEdge || false,\r\n        ts.properties.bottomEdge || false,\r\n      );\r\n      break;\r\n    case TileType.SPAWN_FLOOR:\r\n      tile = new SpawnFloor(room, ts.x, ts.y);\r\n      break;\r\n\r\n    case TileType.FOUNTAIN:\r\n      tile = new FountainTile(\r\n        room,\r\n        ts.x,\r\n        ts.y,\r\n        ts.properties.subTileX || 0,\r\n        ts.properties.subTileY || 0,\r\n      );\r\n      break;\r\n    case TileType.COFFIN:\r\n      tile = new CoffinTile(room, ts.x, ts.y, ts.properties.subTileY || 0);\r\n      break;\r\n\r\n    case TileType.SPIKE_TRAP:\r\n      tile = new SpikeTrap(room, ts.x, ts.y);\r\n      (tile as any).triggered = ts.properties.triggered || false;\r\n      break;\r\n    case TileType.SPIKE:\r\n      tile = new Spike(room, ts.x, ts.y);\r\n      break;\r\n\r\n    case TileType.BONES:\r\n      tile = new Bones(room, ts.x, ts.y);\r\n      break;\r\n\r\n    default:\r\n      console.error(\r\n        \"Unknown tile type:\",\r\n        ts.type,\r\n        \"TileType enum value:\",\r\n        TileType[ts.type],\r\n        \"Falling back to floor\",\r\n      );\r\n      tile = new Floor(room, ts.x, ts.y);\r\n      break;\r\n  }\r\n  tile.skin = room.skin;\r\n\r\n  return tile;\r\n};\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Enemy } from \"./enemy\";\r\n\r\nexport class KnightEnemy extends Enemy {\r\n  ticks: number;\r\n  frame: number;\r\n  seenPlayer: boolean;\r\n  targetPlayer: Player;\r\n  aggro: boolean;\r\n  drop: Item;\r\n  static difficulty: number = 2;\r\n  static tileX: number = 9;\r\n  static tileY: number = 8;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 2;\r\n    this.maxHealth = 2;\r\n    this.defaultMaxHealth = 2;\r\n    this.tileX = 9;\r\n    this.tileY = 8;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.deathParticleColor = \"#ffffff\";\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    this.name = \"burrow knight\";\r\n    this.orthogonalAttack = true;\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 29;\r\n    if (drop) this.drop = drop;\r\n    this.getDrop([\r\n      \"weapon\",\r\n      \"warhammer\",\r\n      \"equipment\",\r\n      \"consumable\",\r\n      \"tool\",\r\n      \"coin\",\r\n    ]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      if (!this.seenPlayer) {\r\n        const result = this.nearestPlayer();\r\n        if (result !== false) {\r\n          let [distance, p] = result;\r\n          if (distance < 4) {\r\n            this.rumbling = true;\r\n            this.seenPlayer = true;\r\n            this.targetPlayer = p;\r\n            this.facePlayer(p);\r\n            if (p === this.game.players[this.game.localPlayerID])\r\n              this.alertTicks = 1;\r\n            this.makeHitWarnings();\r\n          }\r\n        }\r\n      } else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          this.ticks++;\r\n          if (this.ticks % 2 === 1) {\r\n            this.rumbling = true;\r\n            let oldX = this.x;\r\n            let oldY = this.y;\r\n            let disablePositions = Array<astar.Position>();\r\n            for (const e of this.room.entities) {\r\n              if (e !== this) {\r\n                disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n              }\r\n            }\r\n            for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n              for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n                if (\r\n                  this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                  (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n                ) {\r\n                  // don't walk on active spiketraps\r\n                  disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n                }\r\n              }\r\n            }\r\n            let grid = [];\r\n            for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n              grid[x] = [];\r\n              for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n                if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                  grid[x][y] = this.room.roomArray[x][y];\r\n                else grid[x][y] = false;\r\n              }\r\n            }\r\n            let moves = astar.AStar.search(\r\n              grid,\r\n              this,\r\n              this.targetPlayer,\r\n              disablePositions,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              this.lastPlayerPos,\r\n            );\r\n            if (moves.length > 0) {\r\n              let hitPlayer = false;\r\n              for (const i in this.game.players) {\r\n                if (\r\n                  this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                  this.game.players[i].x === moves[0].pos.x &&\r\n                  this.game.players[i].y === moves[0].pos.y\r\n                ) {\r\n                  this.game.players[i].hurt(this.hit(), this.name);\r\n                  this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                  this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                  if (\r\n                    this.game.players[i] ===\r\n                    this.game.players[this.game.localPlayerID]\r\n                  )\r\n                    this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n                  hitPlayer = true;\r\n                }\r\n              }\r\n              if (!hitPlayer) {\r\n                this.tryMove(moves[0].pos.x, moves[0].pos.y);\r\n                this.setDrawXY(oldX, oldY);\r\n\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n              }\r\n            }\r\n            this.rumbling = false;\r\n          } else {\r\n            this.rumbling = true;\r\n            this.makeHitWarnings();\r\n          }\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                if (this.ticks % 2 === 0) {\r\n                  this.rumbling = true;\r\n                  this.makeHitWarnings();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    let rumbleX = this.rumble(this.rumbling, this.frame).x;\r\n    let rumbleY = this.rumble(this.rumbling, this.frame, this.direction).y;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      if (this.ticks % 2 === 0) {\r\n        this.tileX = 9;\r\n        this.tileY = 8;\r\n      } else {\r\n        this.tileX = 4;\r\n        this.tileY = 0;\r\n      }\r\n\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX + (this.tileX === 4 ? 0 : Math.floor(this.frame)),\r\n        this.tileY + this.direction * 2,\r\n        1,\r\n        2,\r\n        this.x - this.drawX + rumbleX,\r\n        this.y -\r\n          this.drawYOffset -\r\n          this.drawY +\r\n          (this.tileX === 4 ? 0.1875 : 0),\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Direction } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\n\r\nimport { Enemy } from \"./enemy\";\r\n\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { BeamEffect } from \"../../projectile/beamEffect\";\r\nimport { Player } from \"../../player/player\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Lighting } from \"../../lighting/lighting\";\r\nimport { Entity } from \"../entity\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { GameplaySettings } from \"../../game/gameplaySettings\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\n\r\nexport class ExalterEnemy extends Enemy {\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  buffedEnemies: Enemy[];\r\n  range: number;\r\n  static tileX: number = 59;\r\n  static tileY: number = 8;\r\n  lastHealth: number;\r\n  buffedBefore: boolean;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.health = 6;\r\n    this.lastHealth = this.health;\r\n    this.maxHealth = 6;\r\n    this.tileX = 59;\r\n    this.tileY = 8;\r\n    this.seenPlayer = true;\r\n    this.name = \"exalter\";\r\n    this.range = 6;\r\n    this.aggro = false;\r\n    this.frame = 0;\r\n    this.hasShadow = true;\r\n    this.buffedBefore = false;\r\n    this.buffedEnemies = [];\r\n    this.shadeColor = \"#000000\";\r\n    this.lightSource = Lighting.newLightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      [10, 15, 50],\r\n      3.5,\r\n      20,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n    this.room.updateLighting();\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#639bff\"; //cyan;\r\n    this.bloomAlpha = 0.5;\r\n    this.softBloomAlpha = 0;\r\n    this.dropChance = 1;\r\n    this.getDrop([\"exalter\"], false);\r\n    this.pushable = false;\r\n    this.chainPushable = false;\r\n    this.destroyableByOthers = false;\r\n  }\r\n\r\n  hit = (): number => {\r\n    return 1;\r\n  };\r\n  bleed = () => {};\r\n\r\n  uniqueKillBehavior = () => {\r\n    this.unbuffEnemies();\r\n    this.removeLightSource(this.lightSource);\r\n    this.lightSource = null;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    let enemiesToBuff = this.enemyBuffCandidates();\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n\r\n      this.ticks++;\r\n\r\n      //if (this.ticks % 2 === 0) {\r\n      this.buffEnemies(enemiesToBuff);\r\n      this.updateBuffedEnemies();\r\n      if (this.buffedEnemies.length > 0) {\r\n        // Choose the farthest buffed enemy\r\n        let targetEnemy = this.buffedEnemies.reduce((farthest, current) => {\r\n          const dF = Utils.distance(this.x, this.y, farthest.x, farthest.y);\r\n          const dC = Utils.distance(this.x, this.y, current.x, current.y);\r\n          return dC > dF ? current : farthest;\r\n        });\r\n\r\n        // Build disable positions (other entities and nearby active spike traps)\r\n        let disablePositions = Array<astar.Position>();\r\n        for (const e of this.room.entities) {\r\n          if (e !== this) {\r\n            disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n          }\r\n        }\r\n        for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n          for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n            if (\r\n              this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n              (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n            ) {\r\n              disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Build grid\r\n        let grid = [] as any[];\r\n        for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n          grid[x] = [];\r\n          for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n            if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n              grid[x][y] = this.room.roomArray[x][y];\r\n            else grid[x][y] = false;\r\n          }\r\n        }\r\n\r\n        // A* toward the target enemy\r\n        const moves = astar.AStar.search(\r\n          grid,\r\n          this,\r\n          targetEnemy,\r\n          disablePositions,\r\n          false,\r\n          false,\r\n          true,\r\n          this.direction,\r\n        );\r\n\r\n        if (moves.length > 0) {\r\n          const oldX = this.x;\r\n          const oldY = this.y;\r\n          const moveX = moves[0].pos.x;\r\n          const moveY = moves[0].pos.y;\r\n\r\n          // Move one step toward target enemy\r\n          this.tryMove(moveX, moveY);\r\n          this.setDrawXY(oldX, oldY);\r\n\r\n          if (this.x > oldX) this.direction = Direction.RIGHT;\r\n          else if (this.x < oldX) this.direction = Direction.LEFT;\r\n          else if (this.y > oldY) this.direction = Direction.DOWN;\r\n          else if (this.y < oldY) this.direction = Direction.UP;\r\n        }\r\n      } else {\r\n        this.runAway();\r\n      }\r\n      //}\r\n    }\r\n\r\n    if (this.buffedEnemies.length > 0) {\r\n      this.shadeColor = \"#306082\";\r\n    } else {\r\n      this.shadeColor = \"#000000\";\r\n    }\r\n    if (this.lightSource) {\r\n      this.lightSource.updatePosition(this.x + 0.5, this.y + 0.5);\r\n    }\r\n  };\r\n\r\n  onHurt = (damage: number = 1) => {\r\n    if (\r\n      this.health < this.lastHealth &&\r\n      this.health % 2 === 0 &&\r\n      this.health > 0\r\n    ) {\r\n      this.teleport();\r\n    }\r\n    this.lastHealth = this.health;\r\n  };\r\n\r\n  updateBuffedEnemies = () => {\r\n    this.buffedEnemies.forEach((enemy) => {\r\n      if (enemy.dead) {\r\n        this.buffedEnemies = this.buffedEnemies.filter((e) => e !== enemy);\r\n      }\r\n    });\r\n  };\r\n\r\n  buffEnemies = (enemiesToBuff: Entity[]) => {\r\n    if (enemiesToBuff.length > 0) {\r\n      enemiesToBuff.forEach((enemy) => {\r\n        const distance = Utils.distance(this.x, this.y, enemy.x, enemy.y);\r\n        if (Random.rand() * 10 > distance) {\r\n          this.applyBuffTo(enemy as Enemy);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  enemyBuffCandidates = () => {\r\n    const uncappedCandidates = this.room.entities.filter(\r\n      (entity) =>\r\n        entity instanceof Enemy &&\r\n        Utils.distance(this.x, this.y, entity.x, entity.y) <= this.range &&\r\n        !entity.buffed &&\r\n        !entity.dead &&\r\n        entity !== this &&\r\n        !entity.buffedBefore,\r\n    );\r\n    return uncappedCandidates.slice(0, GameplaySettings.MAX_EXALTER_BUFFS);\r\n  };\r\n\r\n  unbuffEnemies = () => {\r\n    if (this.buffedEnemies.length > 0) {\r\n      for (let enemy of this.buffedEnemies) {\r\n        if (!enemy.cloned) {\r\n          enemy.removeBuff();\r\n        }\r\n      }\r\n      this.buffedEnemies = [];\r\n    }\r\n  };\r\n\r\n  applyBuffTo = (enemy: Enemy) => {\r\n    //this.shadeColor = \"#2E0854\";\r\n    if (!enemy.destroyable) return;\r\n    this.shadeMultiplier = 1.5;\r\n    enemy.applyBuff();\r\n    this.buffedEnemies.push(enemy);\r\n    if (enemy.buffed) {\r\n      let beam = new BeamEffect(enemy.x, enemy.y, this.x, this.y, enemy);\r\n      beam.compositeOperation = \"source-over\";\r\n      beam.color = \"#00FFFF\";\r\n      beam.turbulence = 0.4;\r\n      beam.gravity = 0.1;\r\n      beam.iterations = 1;\r\n      beam.segments = 100;\r\n      beam.angleChange = 0.001;\r\n      beam.springDamping = 0.01;\r\n      beam.drawableY = enemy.drawableY;\r\n      beam.type = \"buff\";\r\n      this.room.projectiles.push(beam);\r\n    }\r\n  };\r\n\r\n  updateBeam = (delta: number) => {\r\n    for (let beam of this.room.projectiles) {\r\n      if (beam instanceof BeamEffect) {\r\n        if (\r\n          !this.buffedEnemies.includes(beam.parent as Enemy) ||\r\n          beam.type !== \"buff\"\r\n        )\r\n          continue;\r\n        beam.setTarget(\r\n          this.x - this.drawX,\r\n          this.y - this.drawY,\r\n          beam.parent.x - beam.parent.drawX,\r\n          beam.parent.y - beam.parent.drawY,\r\n        );\r\n        beam.drawableY = beam.parent.drawableY;\r\n\r\n        switch (Math.floor(this.frame)) {\r\n          case 0:\r\n            beam.color = \"#00FFFF\";\r\n            break;\r\n          case 1:\r\n            beam.color = \"#00a1dc\"; //darker cyan;\r\n            break;\r\n          case 2:\r\n            beam.color = \"#008ea7\"; //darker cyan;\r\n            break;\r\n          case 3:\r\n            beam.color = \"#00a1dc\"; //darker cyan;\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    this.drawableY = this.y;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.updateBeam(delta);\r\n\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX + Math.floor(this.frame),\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Item } from \"../../item/item\";\r\nimport { Game } from \"../../game\";\r\nimport { Key } from \"../../item/key\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { Armor } from \"../../item/armor\";\r\nimport { GreenGem } from \"../../item/resource/greengem\";\r\nimport { Resource } from \"./resource\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Geode } from \"../../item/resource/geode\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { LightSource } from \"../../lighting/lightSource\";\r\n\r\nexport class EmeraldResource extends Resource {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n\r\n    this.tileX = 14;\r\n    this.tileY = 0;\r\n    this.health = 3;\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#05FF05\";\r\n    this.bloomAlpha = 1;\r\n    this.softBloomAlpha = 0;\r\n    this.name = \"emerald\";\r\n    if (Random.rand() < 0.025) {\r\n      this.drops.push(new Geode(this.room, this.x, this.y));\r\n    }\r\n    this.drops.push(new GreenGem(this.room, this.x, this.y));\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      7,\r\n      [5, 150, 5],\r\n      1,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n  }\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Room } from \"../../room/room\";\r\n\r\nexport class Usable extends Item {\r\n  user: Player;\r\n  canUseOnOther: boolean;\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.canUseOnOther = false;\r\n  }\r\n  onUse = (player: Player) => {};\r\n  useOnOther = (player: Player, other: Item) => {};\r\n}\r\n","import { Room } from \"../../room/room\";\r\n\r\nimport { Light } from \"./light\";\r\n\r\nexport class Torch extends Light {\r\n  static itemName = \"torch\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 28;\r\n    this.tileY = 0;\r\n    this.name = \"torch\";\r\n    this.fuelCap = 500;\r\n    this.fuel = 500;\r\n    this.radius = 7;\r\n    this.maxBrightness = 5;\r\n    this.minBrightness = 2;\r\n    this.stackable = true;\r\n  }\r\n}\r\n","import { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Room } from \"../room/room\";\r\nimport { Random } from \"../utility/random\";\r\nimport { Particle } from \"./particle\";\r\n\r\nexport class DamageNumber extends Particle {\r\n  room: Room;\r\n  damage: number;\r\n  x: number;\r\n  y: number;\r\n  alpha: number = 1;\r\n  color: string;\r\n  outlineColor: string;\r\n  frame: number = 0;\r\n  xoffset: number = 0;\r\n  constructor(\r\n    room: Room,\r\n    x: number,\r\n    y: number,\r\n    damage: number,\r\n    color?: string,\r\n    outlineColor?: string,\r\n  ) {\r\n    super();\r\n    this.room = room;\r\n    this.damage = damage;\r\n    this.x = x;\r\n    this.y = y;\r\n    if (color) this.color = color;\r\n    else this.color = \"red\";\r\n    if (outlineColor) this.outlineColor = outlineColor;\r\n    else this.outlineColor = GameConstants.OUTLINE;\r\n    this.xoffset = Random.rand() * 0.2;\r\n  }\r\n  getXoffset = () => {\r\n    if (this.room.particles.length > 0) {\r\n      let damageNumbers = this.room.particles.filter(\r\n        (p) => p instanceof DamageNumber,\r\n      );\r\n      if (damageNumbers.length % 3 === 0) return 0.5;\r\n      if (damageNumbers.length % 3 === 1) return 0;\r\n      if (damageNumbers.length % 3 === 2) return 0.25;\r\n    }\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    Game.ctx.save();\r\n\r\n    if (this.dead) {\r\n      Game.ctx.restore();\r\n      return;\r\n    }\r\n    if (this.frame > 15) this.alpha -= 0.025 * delta;\r\n\r\n    this.y -= 0.03 * delta;\r\n    this.frame += delta;\r\n    let width = Game.measureText(this.damage.toString()).width;\r\n    if (this.alpha <= 0.002) {\r\n      this.alpha = 0;\r\n      this.dead = true;\r\n    }\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    const centerX = Game.measureText(this.damage.toString()).width / 2;\r\n    Game.fillTextOutline(\r\n      \"-\" + this.damage.toString(),\r\n      (this.x + 0.4 + this.xoffset) * GameConstants.TILESIZE - centerX,\r\n      (this.y - 0.6) * GameConstants.TILESIZE,\r\n      this.outlineColor,\r\n      this.color,\r\n    );\r\n\r\n    Game.ctx.globalAlpha = 1;\r\n\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Floor } from \"../../tile/floor\";\r\nimport { Bones } from \"../../tile/bones\";\r\nimport { DeathParticle } from \"../../particle/deathParticle\";\r\nimport { Item } from \"../../item/item\";\r\nimport { WizardEnemy } from \"./wizardEnemy\";\r\n\r\nexport enum WizardState {\r\n  idle,\r\n  attack,\r\n  justAttacked,\r\n  teleport,\r\n}\r\n\r\nexport class EnergyWizardEnemy extends WizardEnemy {\r\n  static difficulty: number = 3;\r\n  static tileX: number = 6;\r\n  static tileY: number = 0;\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 6;\r\n    this.tileY = 0;\r\n    this.frame = 0;\r\n    this.state = WizardState.attack;\r\n    this.seenPlayer = false;\r\n    this.alertTicks = 0;\r\n    this.name = \"wizard bomber\";\r\n    this.projectileColor = [0, 50, 150];\r\n\r\n    if (drop) this.drop = drop;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      if (this.state === WizardState.attack) this.tileX = 7;\r\n      else this.tileX = 6;\r\n\r\n      if (this.hasShadow && this.state !== WizardState.teleport)\r\n        this.drawShadow(delta);\r\n      if (this.frame >= 0) {\r\n        Game.drawMob(\r\n          Math.floor(this.frame) + 6,\r\n          2,\r\n          1,\r\n          2,\r\n          this.x,\r\n          this.y - 1.3,\r\n          1,\r\n          2,\r\n          this.softShadeColor,\r\n          this.shadeAmount(),\r\n        );\r\n        this.frame += 0.4 * delta;\r\n        if (this.frame > 12) this.frame = -1;\r\n      } else {\r\n        Game.drawMob(\r\n          this.tileX,\r\n          this.tileY,\r\n          1,\r\n          2,\r\n          this.x - this.drawX,\r\n          this.y - 1.3 - this.drawY,\r\n          1,\r\n          2,\r\n          this.softShadeColor,\r\n          this.shadeAmount(),\r\n        );\r\n      }\r\n      if (!this.cloned) {\r\n        if (!this.seenPlayer) {\r\n          this.drawSleepingZs(delta);\r\n        }\r\n        if (this.alertTicks > 0) {\r\n          this.drawExclamation(delta);\r\n        }\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Partition } from \"./partitionGenerator\";\r\nimport { RoomType } from \"../room/room\";\r\nimport { LevelParameters } from \"./levelParametersGenerator\";\r\nimport { Game } from \"../game\";\r\n\r\nexport interface ValidationResult {\r\n  isValid: boolean;\r\n  errorMessage?: string;\r\n  errorType?: ValidationErrorType;\r\n}\r\n\r\nexport enum ValidationErrorType {\r\n  INSUFFICIENT_ROOMS = \"INSUFFICIENT_ROOMS\",\r\n  BOSS_ROOM_MISSING = \"BOSS_ROOM_MISSING\",\r\n  BOSS_TOO_CLOSE = \"BOSS_TOO_CLOSE\",\r\n  OVERLAPPING_PARTITIONS = \"OVERLAPPING_PARTITIONS\",\r\n  EMPTY_PARTITIONS = \"EMPTY_PARTITIONS\",\r\n  STAIR_ROOM_MISSING = \"STAIR_ROOM_MISSING\",\r\n  INSUFFICIENT_CAVE_ROOMS = \"INSUFFICIENT_CAVE_ROOMS\",\r\n}\r\n\r\nexport class LevelValidator {\r\n  private game: Game;\r\n  private enableDebugMessages: boolean;\r\n\r\n  constructor(game: Game, enableDebugMessages: boolean = false) {\r\n    this.game = game;\r\n    this.enableDebugMessages =\r\n      enableDebugMessages || document.cookie.includes(\"showgeneration=true\");\r\n  }\r\n\r\n  /**\r\n   * Validates dungeon partitions against the provided parameters\r\n   */\r\n  validateDungeonPartitions(\r\n    partitions: Partition[],\r\n    params: LevelParameters,\r\n  ): ValidationResult {\r\n    // Check for empty partitions\r\n    const emptyCheck = this.validateNotEmpty(partitions);\r\n    if (!emptyCheck.isValid) return emptyCheck;\r\n\r\n    // Check minimum room count\r\n    const roomCountCheck = this.validateMinimumRoomCount(\r\n      partitions,\r\n      params.minRoomCount,\r\n    );\r\n    if (!roomCountCheck.isValid) return roomCountCheck;\r\n\r\n    // Check boss room existence\r\n    const bossExistenceCheck = this.validateBossRoomExists(partitions);\r\n    if (!bossExistenceCheck.isValid) return bossExistenceCheck;\r\n\r\n    // Check boss room distance\r\n    const bossDistanceCheck = this.validateBossRoomDistance(partitions, 3);\r\n    if (!bossDistanceCheck.isValid) return bossDistanceCheck;\r\n\r\n    // Check for overlapping partitions\r\n    const overlapCheck = this.validateNoOverlaps(partitions);\r\n    if (!overlapCheck.isValid) return overlapCheck;\r\n\r\n    // Check for stair room (required for dungeon completion)\r\n    const stairCheck = this.validateStairRoomExists(partitions);\r\n    if (!stairCheck.isValid) return stairCheck;\r\n\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Validates cave partitions\r\n   */\r\n  validateCavePartitions(\r\n    partitions: Partition[],\r\n    requiredRoomCount: number,\r\n  ): ValidationResult {\r\n    // Check for empty partitions\r\n    const emptyCheck = this.validateNotEmpty(partitions);\r\n    if (!emptyCheck.isValid) return emptyCheck;\r\n\r\n    // Check minimum room count for caves\r\n    const roomCountCheck = this.validateMinimumRoomCount(\r\n      partitions,\r\n      requiredRoomCount,\r\n    );\r\n    if (!roomCountCheck.isValid) {\r\n      return {\r\n        isValid: false,\r\n        errorMessage: `Cave needs at least ${requiredRoomCount} rooms, got ${partitions.length}`,\r\n        errorType: ValidationErrorType.INSUFFICIENT_CAVE_ROOMS,\r\n      };\r\n    }\r\n\r\n    // Check for overlapping partitions\r\n    const overlapCheck = this.validateNoOverlaps(partitions);\r\n    if (!overlapCheck.isValid) return overlapCheck;\r\n\r\n    // Validate that we have a rope cave starting room\r\n    const ropeCaveCheck = this.validateRopeCaveExists(partitions);\r\n    if (!ropeCaveCheck.isValid) return ropeCaveCheck;\r\n\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Validates tutorial partitions\r\n   */\r\n  validateTutorialPartitions(partitions: Partition[]): ValidationResult {\r\n    // Check for empty partitions\r\n    const emptyCheck = this.validateNotEmpty(partitions);\r\n    if (!emptyCheck.isValid) return emptyCheck;\r\n\r\n    // Tutorial should have exactly 1 room\r\n    if (partitions.length !== 1) {\r\n      return {\r\n        isValid: false,\r\n        errorMessage: `Tutorial should have exactly 1 room, got ${partitions.length}`,\r\n        errorType: ValidationErrorType.INSUFFICIENT_ROOMS,\r\n      };\r\n    }\r\n\r\n    // Check that the room is marked as tutorial\r\n    const tutorialRoom = partitions[0];\r\n    if (tutorialRoom.type !== RoomType.TUTORIAL) {\r\n      return {\r\n        isValid: false,\r\n        errorMessage: \"Tutorial room is not marked with TUTORIAL type\",\r\n        errorType: ValidationErrorType.INSUFFICIENT_ROOMS,\r\n      };\r\n    }\r\n\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Validates that partitions array is not empty\r\n   */\r\n  validateNotEmpty(partitions: Partition[]): ValidationResult {\r\n    if (!partitions || partitions.length === 0) {\r\n      const errorMessage = \"No partitions generated\";\r\n      this.logValidationError(errorMessage);\r\n      return {\r\n        isValid: false,\r\n        errorMessage,\r\n        errorType: ValidationErrorType.EMPTY_PARTITIONS,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Validates minimum room count requirement\r\n   */\r\n  validateMinimumRoomCount(\r\n    partitions: Partition[],\r\n    minRoomCount: number,\r\n  ): ValidationResult {\r\n    if (partitions.length < minRoomCount) {\r\n      const errorMessage = `Not enough rooms: need ${minRoomCount}, got ${partitions.length}`;\r\n      this.logValidationError(errorMessage);\r\n      return {\r\n        isValid: false,\r\n        errorMessage,\r\n        errorType: ValidationErrorType.INSUFFICIENT_ROOMS,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Validates that a boss room exists\r\n   */\r\n  validateBossRoomExists(partitions: Partition[]): ValidationResult {\r\n    const hasBossRoom = partitions.some((p) => p.type === RoomType.BOSS);\r\n    if (!hasBossRoom) {\r\n      const errorMessage = \"Boss room unreachable or missing\";\r\n      this.logValidationError(errorMessage);\r\n      return {\r\n        isValid: false,\r\n        errorMessage,\r\n        errorType: ValidationErrorType.BOSS_ROOM_MISSING,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Validates that boss room is at minimum distance from spawn\r\n   */\r\n  validateBossRoomDistance(\r\n    partitions: Partition[],\r\n    minDistance: number,\r\n  ): ValidationResult {\r\n    const bossRoom = partitions.find((p) => p.type === RoomType.BOSS);\r\n    if (!bossRoom) {\r\n      return this.validateBossRoomExists(partitions); // This will return the appropriate error\r\n    }\r\n\r\n    if (bossRoom.distance < minDistance) {\r\n      const errorMessage = `Boss room too close to spawn: distance ${bossRoom.distance}, minimum ${minDistance}`;\r\n      this.logValidationError(errorMessage);\r\n      return {\r\n        isValid: false,\r\n        errorMessage,\r\n        errorType: ValidationErrorType.BOSS_TOO_CLOSE,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Validates that partitions don't overlap\r\n   */\r\n  validateNoOverlaps(partitions: Partition[]): ValidationResult {\r\n    for (let i = 0; i < partitions.length; i++) {\r\n      for (let j = i + 1; j < partitions.length; j++) {\r\n        const a = partitions[i];\r\n        const b = partitions[j];\r\n        if (\r\n          a.x < b.x + b.w &&\r\n          a.x + a.w > b.x &&\r\n          a.y < b.y + b.h &&\r\n          a.y + a.h > b.y\r\n        ) {\r\n          const errorMessage = `Overlapping partitions detected: partition ${i} overlaps with partition ${j}`;\r\n          this.logValidationError(errorMessage);\r\n          return {\r\n            isValid: false,\r\n            errorMessage,\r\n            errorType: ValidationErrorType.OVERLAPPING_PARTITIONS,\r\n          };\r\n        }\r\n      }\r\n    }\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Validates that a stair room exists for dungeon completion\r\n   */\r\n  validateStairRoomExists(partitions: Partition[]): ValidationResult {\r\n    const hasStairRoom = partitions.some((p) => p.type === RoomType.DOWNLADDER);\r\n    if (!hasStairRoom) {\r\n      const errorMessage = \"Stair room missing - dungeon cannot be completed\";\r\n      this.logValidationError(errorMessage);\r\n      return {\r\n        isValid: false,\r\n        errorMessage,\r\n        errorType: ValidationErrorType.STAIR_ROOM_MISSING,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Validates that a rope cave starting room exists\r\n   */\r\n  validateRopeCaveExists(partitions: Partition[]): ValidationResult {\r\n    const hasRopeCave = partitions.some((p) => p.type === RoomType.ROPECAVE);\r\n    if (!hasRopeCave) {\r\n      const errorMessage = \"Rope cave starting room missing\";\r\n      this.logValidationError(errorMessage);\r\n      return {\r\n        isValid: false,\r\n        errorMessage,\r\n        errorType: ValidationErrorType.INSUFFICIENT_CAVE_ROOMS,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Validates room connectivity by checking that all rooms have connections\r\n   */\r\n  validateConnectivity(partitions: Partition[]): ValidationResult {\r\n    const unconnectedRooms = partitions.filter(\r\n      (partition) => partition.connections.length === 0,\r\n    );\r\n\r\n    if (unconnectedRooms.length > 0) {\r\n      const errorMessage = `Found ${unconnectedRooms.length} unconnected rooms`;\r\n      this.logValidationError(errorMessage);\r\n      return {\r\n        isValid: false,\r\n        errorMessage,\r\n        errorType: ValidationErrorType.INSUFFICIENT_ROOMS,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Validates that required room types are present\r\n   */\r\n  validateRequiredRoomTypes(\r\n    partitions: Partition[],\r\n    requiredTypes: RoomType[],\r\n  ): ValidationResult {\r\n    const presentTypes = new Set(partitions.map((p) => p.type));\r\n    const missingTypes = requiredTypes.filter(\r\n      (type) => !presentTypes.has(type),\r\n    );\r\n\r\n    if (missingTypes.length > 0) {\r\n      const errorMessage = `Missing required room types: ${missingTypes.join(\", \")}`;\r\n      this.logValidationError(errorMessage);\r\n      return {\r\n        isValid: false,\r\n        errorMessage,\r\n        errorType: ValidationErrorType.INSUFFICIENT_ROOMS,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Comprehensive validation for partition quality\r\n   */\r\n  validatePartitionQuality(partitions: Partition[]): ValidationResult {\r\n    // Check for degenerate partitions (too small)\r\n    const minSize = 4;\r\n    const tooSmallPartitions = partitions.filter(\r\n      (p) => p.w < minSize || p.h < minSize,\r\n    );\r\n\r\n    if (tooSmallPartitions.length > 0) {\r\n      const errorMessage = `Found ${tooSmallPartitions.length} partitions smaller than minimum size ${minSize}`;\r\n      this.logValidationError(errorMessage);\r\n      return {\r\n        isValid: false,\r\n        errorMessage,\r\n        errorType: ValidationErrorType.INSUFFICIENT_ROOMS,\r\n      };\r\n    }\r\n\r\n    // Check for partitions with negative dimensions\r\n    const invalidPartitions = partitions.filter(\r\n      (p) => p.w <= 0 || p.h <= 0 || p.x < 0 || p.y < 0,\r\n    );\r\n\r\n    if (invalidPartitions.length > 0) {\r\n      const errorMessage = `Found ${invalidPartitions.length} partitions with invalid dimensions`;\r\n      this.logValidationError(errorMessage);\r\n      return {\r\n        isValid: false,\r\n        errorMessage,\r\n        errorType: ValidationErrorType.INSUFFICIENT_ROOMS,\r\n      };\r\n    }\r\n\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Logs validation errors if debug messages are enabled\r\n   */\r\n  private logValidationError(message: string): void {\r\n    if (this.enableDebugMessages) {\r\n      console.warn(`[LevelValidator] ${message}`);\r\n      if (this.game && this.game.pushMessage) {\r\n        this.game.pushMessage(message);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates and provides detailed reporting for debugging\r\n   */\r\n  validateWithDetailedReport(\r\n    partitions: Partition[],\r\n    params: LevelParameters,\r\n    type: \"dungeon\" | \"cave\" | \"tutorial\" = \"dungeon\",\r\n  ): ValidationResult & { details: string[] } {\r\n    const details: string[] = [];\r\n\r\n    details.push(`Validating ${type} with ${partitions.length} partitions`);\r\n\r\n    if (type === \"dungeon\") {\r\n      details.push(`Required minimum rooms: ${params.minRoomCount}`);\r\n      details.push(`Required maximum rooms: ${params.maxRoomCount}`);\r\n    }\r\n\r\n    const result =\r\n      type === \"dungeon\"\r\n        ? this.validateDungeonPartitions(partitions, params)\r\n        : type === \"cave\"\r\n          ? this.validateCavePartitions(partitions, 8)\r\n          : this.validateTutorialPartitions(partitions);\r\n\r\n    if (!result.isValid) {\r\n      details.push(`Validation failed: ${result.errorMessage}`);\r\n    } else {\r\n      details.push(\"Validation passed\");\r\n    }\r\n\r\n    return {\r\n      ...result,\r\n      details,\r\n    };\r\n  }\r\n}\r\n","import { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Player } from \"../player/player\";\r\nimport { Room } from \"../room/room\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { Drawable } from \"../drawable/drawable\";\r\nimport { Utils } from \"../utility/utils\";\r\nimport { ItemGroup } from \"./itemGroup\";\r\nimport { Random } from \"../utility/random\";\r\nimport { IdGenerator } from \"../globalStateManager/IdGenerator\";\r\nimport { Shadow } from \"../drawable/shadow\";\r\nimport { statsTracker } from \"../game/stats\";\r\nimport { globalEventBus } from \"../event/eventBus\";\r\nimport { EVENTS } from \"../event/events\";\r\n\r\n// Item class extends Drawable class and represents an item in the game\r\nexport class Item extends Drawable {\r\n  // Item properties\r\n  globalId: string;\r\n  x: number; // x-coordinate of the item\r\n  y: number; // y-coordinate of the item\r\n  w: number; // width of the item\r\n  h: number; // height of the item\r\n  offsetY: number; // offset of the item on the y-axis\r\n  tileX: number; // x-coordinate of the tile where the item is located\r\n  tileY: number; // y-coordinate of the tile where the item is located\r\n  frame: number; // frame number for animation\r\n  level: Room; // level where the item is located\r\n  stackable: boolean; // whether the item is stackable or not\r\n  stackCount: number; // number of items in the stack\r\n  pickedUp: boolean; // whether the item has been picked up or not\r\n  alpha: number; // alpha value for transparency\r\n  scaleFactor: number; // scale factor for size adjustment\r\n  name: string;\r\n  startY: number;\r\n  randomOffset: number;\r\n  durability: number;\r\n  durabilityMax: number;\r\n  broken: boolean;\r\n  description: string;\r\n  drawOffset: number;\r\n  pickupOffsetY: number;\r\n  static itemName: string;\r\n  inChest: boolean;\r\n  chestOffsetY: number;\r\n  sineAnimateFactor: number;\r\n  iconOffset: number;\r\n  grouped: boolean;\r\n  group: ItemGroup = null;\r\n  degradeable: boolean = true;\r\n  cooldown: number = 0;\r\n  maximumStackCount: number = 8;\r\n  private animStartX: number = 0;\r\n  private animStartY: number = 0;\r\n  private animTargetX: number = 0;\r\n  private animTargetY: number = 0;\r\n  private animT: number = 0;\r\n  private animStartDistance: number = null;\r\n  player: Player;\r\n  // Constructor for the Item class\r\n  constructor(level: Room, x: number, y: number) {\r\n    super();\r\n    this.globalId = IdGenerator.generate(\"IT\");\r\n\r\n    // Initialize properties\r\n    this.level = level;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.drawableY = y;\r\n    this.w = 1;\r\n    this.h = 2;\r\n    this.tileX = 0;\r\n    this.tileY = 0;\r\n    this.frame = 0;\r\n    this.stackable = false;\r\n    this.stackCount = 1;\r\n    this.pickedUp = false;\r\n    this.alpha = 1;\r\n    this.scaleFactor = 5;\r\n    this.offsetY = -0.5;\r\n    this.name = \"item\";\r\n    this.startY = y;\r\n    this.randomOffset = Random.rand();\r\n    this.durability = 50;\r\n    this.durabilityMax = 50;\r\n    this.broken = false;\r\n    this.description = \"\";\r\n    this.drawOffset = 0;\r\n    this.pickupOffsetY = 1;\r\n    this.chestOffsetY = 0;\r\n    this.sineAnimateFactor = 1;\r\n    this.iconOffset = 0;\r\n    this.grouped = false;\r\n    this.group = null;\r\n    this.maximumStackCount = 12;\r\n    this.player = null;\r\n  }\r\n\r\n  static add<\r\n    T extends new (room: Room, x: number, y: number, ...rest: any[]) => Item,\r\n  >(this: T, room: Room, x: number, y: number, ...rest: any[]) {\r\n    return new this(room, x, y, ...rest);\r\n  }\r\n\r\n  hoverText = () => {\r\n    return this.name;\r\n  };\r\n\r\n  get animateToInventory() {\r\n    return GameConstants.AUTO_PICKUP_ITEMS.includes(\r\n      this.constructor as new (...args: any[]) => Item,\r\n    );\r\n  }\r\n\r\n  // Empty tick function to be overridden by subclasses\r\n  tick = () => {};\r\n  // Empty tick function for inventory behavior to be overridden by subclasses\r\n  tickInInventory = () => {};\r\n\r\n  // Function to get description of the item, to be overridden by subclasses\r\n  getDescription = (): string => {\r\n    const stackText = this.stackable ? `\\nAmount: ${this.stackCount}` : \"\";\r\n    return `${this.name} \\n${this.description} \\n${stackText}`;\r\n  };\r\n\r\n  animateFromChest = () => {\r\n    this.chestOffsetY = 0.5;\r\n    this.alpha = 0;\r\n    this.inChest = true;\r\n    this.sineAnimateFactor = 0;\r\n    this.setDrawOffset();\r\n  };\r\n\r\n  // Function to play sound when item is picked up\r\n  pickupSound = () => {\r\n    let delay = 0;\r\n    if (GameConstants.ITEM_AUTO_PICKUP && this.animateToInventory)\r\n      delay = Math.ceil(Random.rand() * 200 + 400);\r\n\r\n    if (this.level === this.level.game.room)\r\n      Sound.delayPlay(Sound.genericPickup, delay);\r\n  };\r\n\r\n  // Empty function to be called when item is dropped, to be overridden by subclasses\r\n  onDrop = () => {};\r\n  // Function to be called when item is picked up\r\n  onPickup = (player: Player) => {\r\n    if (!player.inventory.canPickup(this)) return;\r\n    this.player = player;\r\n    if (!this.pickedUp) {\r\n      this.startY = player.y;\r\n\r\n      this.drawableY = this.y;\r\n      this.alpha = 1;\r\n      this.pickedUp = player.inventory.addItem(this);\r\n      if (this.pickedUp) {\r\n        // Initialize lerp-to-inventory animation\r\n        if (this.animateToInventory === true) {\r\n          this.animStartX = this.x;\r\n          this.animStartY = this.y;\r\n          this.animTargetX = this.player.x;\r\n          this.animTargetY = this.player.y;\r\n          this.animT = 0;\r\n        }\r\n        if (this.isNewItem(player)) {\r\n          this.pickupMessage();\r\n\r\n          player.inventory.foundItems.push(this);\r\n        }\r\n        this.pickupSound();\r\n\r\n        // Emit item collected event for statistics tracking\r\n        globalEventBus.emit(EVENTS.ITEM_COLLECTED, { itemId: this.name });\r\n\r\n        if (this.grouped) {\r\n          statsTracker.recordWeaponChoice(this.name);\r\n\r\n          this.group.destroyOtherItems(this);\r\n          this.grouped = false;\r\n          this.group = null;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  autoPickup = () => {\r\n    if (GameConstants.ITEM_AUTO_PICKUP && this.animateToInventory) {\r\n      this.onPickup(this.level.game.players[this.level.game.localPlayerID]);\r\n    }\r\n  };\r\n\r\n  pickupMessage = () => {\r\n    const name = (this.constructor as typeof Item).itemName;\r\n    let message = this.stackable\r\n      ? `You find ${this.stackCount} ${name}.`\r\n      : `You find a ${name}.`;\r\n\r\n    if (this.stackCount > 1 && this.name === \"coin\") {\r\n      message = `You find ${this.stackCount} ${name}s.`;\r\n    }\r\n\r\n    this.level.game.pushMessage(message);\r\n  };\r\n\r\n  isNewItem = (player: Player) => {\r\n    for (let item of player.inventory.foundItems) {\r\n      if (item.constructor === this.constructor) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  dropFromInventory = () => {\r\n    this.setDrawOffset();\r\n  };\r\n\r\n  // Function to get the amount of shade at the item's location\r\n  shadeAmount = () => {\r\n    if (\r\n      GameConstants.SMOOTH_LIGHTING &&\r\n      !GameConstants.SHADE_INLINE_IN_ENTITY_LAYER\r\n    )\r\n      return 0;\r\n    if (!this.level.softVis[this.x]) {\r\n      console.warn(\r\n        \"tried to get shade for tile that does not exist\",\r\n        this.x,\r\n        this.y,\r\n      );\r\n      return 0;\r\n    }\r\n    return this.level.softVis[this.x]?.[this.y];\r\n  };\r\n\r\n  drawStatus = (x: number, y: number) => {};\r\n\r\n  drawBrokenSymbol = (x: number, y: number) => {\r\n    if (this.broken) {\r\n      Game.drawFX(\r\n        5,\r\n        0,\r\n        1,\r\n        1,\r\n        x - 0.5 / GameConstants.TILESIZE,\r\n        y - 0.5 / GameConstants.TILESIZE,\r\n        1,\r\n        1,\r\n      );\r\n    }\r\n  };\r\n\r\n  destroy() {\r\n    this.pickedUp = true;\r\n    //this.level.items = this.level.items.filter((x) => x !== this);\r\n  }\r\n\r\n  // Function to draw the item\r\n  draw = (delta: number) => {\r\n    Game.ctx.save();\r\n    if (!this.pickedUp) {\r\n      Game.ctx.globalAlpha = this.alpha;\r\n      if (this.alpha < 1) this.alpha += 0.01 * delta;\r\n      this.drawableY = this.y;\r\n      if (this.inChest) {\r\n        this.chestOffsetY -= Math.abs(this.chestOffsetY + 0.5) * 0.035 * delta;\r\n\r\n        if (this.chestOffsetY < -0.47) {\r\n          this.chestOffsetY = -0.5;\r\n        }\r\n      }\r\n      if (this.sineAnimateFactor < 1 && this.chestOffsetY < -0.45)\r\n        this.sineAnimateFactor += 0.2 * delta;\r\n      if (this.scaleFactor > 0) {\r\n        this.scaleFactor *= 0.5 ** delta;\r\n        if (this.scaleFactor < 0.01) this.scaleFactor = 0;\r\n      }\r\n      const scale = 1 / (this.scaleFactor + 1);\r\n      Game.ctx.imageSmoothingEnabled = false;\r\n      Shadow.draw(this.x, this.y, 1, 1);\r\n      //Game.drawItem(0, 0, 1, 1, this.x, this.y, 1, 1);\r\n      this.frame += (delta * (Math.PI * 2)) / 60;\r\n      Game.drawItem(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x + this.w * (scale * -0.5 + 0.5) + this.drawOffset,\r\n        this.y +\r\n          this.sineAnimateFactor * Math.sin(this.frame) * 0.07 -\r\n          1 +\r\n          this.offsetY +\r\n          this.h * (scale * -0.5 + 0.5) +\r\n          this.chestOffsetY,\r\n        this.w * scale,\r\n        this.h * scale,\r\n        this.level.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  setDrawOffset = () => {\r\n    const itemsOnTile = this.level.items.filter(\r\n      (item) => item.x === this.x && item.y === this.y,\r\n    );\r\n    if (itemsOnTile.length > 1) {\r\n      itemsOnTile.forEach((item) => {\r\n        item.drawOffset =\r\n          (-itemsOnTile.length / 2 + itemsOnTile.indexOf(item) + 1) /\r\n          itemsOnTile.length;\r\n      });\r\n    }\r\n  };\r\n\r\n  degrade = () => {\r\n    if (this.degradeable) this.durability -= 1;\r\n  };\r\n\r\n  drawAboveShading = (delta: number) => {\r\n    if (this.pickedUp) {\r\n      if (this.animateToInventory === true && this.player) {\r\n        // Lerp towards the inventory button with ease-out\r\n        const speed = 0.025 * delta; // slower overall speed\r\n        this.animT = Math.min(1, this.animT + speed);\r\n        const t = Math.pow(this.animT, 2); // ease-in cubic\r\n        const posX =\r\n          this.animStartX * (1 - t) +\r\n          this.animTargetX * t +\r\n          (this.player.x - this.animTargetX - this.player.drawX) * t +\r\n          this.drawOffset;\r\n        const posY =\r\n          this.animStartY * (1 - t) +\r\n          this.animTargetY * t +\r\n          (this.player.y - this.animTargetY - this.player.drawY) * t +\r\n          this.chestOffsetY;\r\n\r\n        if (this.animStartDistance === null) {\r\n          this.animStartDistance = Utils.distance(\r\n            this.player.x - this.player.drawX,\r\n            this.player.y - this.player.drawY,\r\n            posX,\r\n            posY,\r\n          );\r\n        }\r\n        const distance = Math.abs(\r\n          Utils.distance(\r\n            this.player.x - this.player.drawX,\r\n            this.player.y - this.player.drawY,\r\n            posX,\r\n            posY,\r\n          ),\r\n        );\r\n        // Fade near the end\r\n        const fadeStart = 0.5;\r\n        if (t > fadeStart) {\r\n          const k = (t - fadeStart) / (1 - fadeStart);\r\n          this.alpha = Math.max(\r\n            1 - k,\r\n            Math.abs(distance / this.animStartDistance),\r\n          );\r\n        }\r\n\r\n        if (GameConstants.ALPHA_ENABLED)\r\n          Game.ctx.globalAlpha = Math.max(0, this.alpha);\r\n        this.x = Math.floor(posX);\r\n        this.y = Math.floor(posY);\r\n\r\n        Game.drawItem(\r\n          this.tileX,\r\n          this.tileY,\r\n          1,\r\n          2,\r\n          posX,\r\n          posY - 1.5, // + diffY,\r\n          this.w,\r\n          this.h,\r\n          this.level.shadeColor,\r\n          this.shadeAmount(),\r\n        );\r\n        Game.ctx.globalAlpha = 1.0;\r\n\r\n        if (this.animT >= 1) {\r\n          //this.animateToInventory = false;\r\n          this.level.items = this.level.items.filter((x) => x !== this);\r\n        }\r\n        return;\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Function to draw the top layer of the item\r\n  drawTopLayer = (delta: number) => {\r\n    if (this.pickedUp) {\r\n      if (this.animateToInventory === false) {\r\n        this.pickupOffsetY += (4.5 - this.pickupOffsetY) * 0.1 * delta;\r\n      } else return;\r\n\r\n      //this.x += (Math.sin(Date.now() / 50) * delta) / 10;\r\n      this.alpha *= 0.9 ** delta;\r\n      if (Math.abs(this.alpha) < 0.01) {\r\n        this.drawOffset = 0;\r\n        this.pickupOffsetY = 1;\r\n\r\n        this.level.items = this.level.items.filter((x) => x !== this);\r\n      }\r\n\r\n      if (GameConstants.ALPHA_ENABLED)\r\n        Game.ctx.globalAlpha = Math.max(0, this.alpha);\r\n\r\n      Game.drawItem(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x,\r\n        this.y - this.pickupOffsetY,\r\n        this.w,\r\n        this.h,\r\n      );\r\n\r\n      Game.ctx.globalAlpha = 1.0;\r\n    }\r\n  };\r\n  // Function to draw the item's icon\r\n  drawIcon = (delta: number, x: number, y: number, opacity = 1, count?) => {\r\n    if (GameConstants.ALPHA_ENABLED) Game.ctx.globalAlpha = opacity;\r\n    this.drawDurability(x, y);\r\n    let shake = 0;\r\n    if (this.durability <= 1 && !this.broken)\r\n      shake =\r\n        Math.round(Math.sin(Date.now() / 25) + 1 / 2) /\r\n        2 /\r\n        GameConstants.TILESIZE;\r\n\r\n    if (this.cooldown > 0) {\r\n      Game.ctx.globalAlpha = 0.35;\r\n    }\r\n\r\n    Game.drawItem(\r\n      this.tileX,\r\n      this.tileY,\r\n      1,\r\n      2,\r\n      x + shake,\r\n      y - 1 + this.iconOffset,\r\n      this.w,\r\n      this.h,\r\n    );\r\n    Game.ctx.globalAlpha = 1;\r\n\r\n    let countToUse = count ? count : this.stackCount;\r\n    let countText = countToUse <= 1 ? \"\" : \"\" + countToUse;\r\n    let width = Game.measureText(countText).width;\r\n    let countX = 16 - width;\r\n    let countY = 10;\r\n\r\n    Game.fillTextOutline(\r\n      countText,\r\n      x * GameConstants.TILESIZE + countX,\r\n      y * GameConstants.TILESIZE + countY,\r\n      GameConstants.OUTLINE,\r\n      \"white\",\r\n    );\r\n    this.drawCooldown(x, y);\r\n\r\n    this.drawStatus(x, y);\r\n    this.drawBrokenSymbol(x, y);\r\n  };\r\n\r\n  drawCooldown = (x: number, y: number) => {\r\n    if (this.cooldown > 0) {\r\n      Game.fillTextOutline(\r\n        this.cooldown.toString(),\r\n        x * GameConstants.TILESIZE + 10,\r\n        y * GameConstants.TILESIZE + 10,\r\n        GameConstants.OUTLINE,\r\n        \"white\",\r\n      );\r\n    }\r\n  };\r\n\r\n  // Function to draw the item's durability bar with color transitioning from green to red\r\n  drawDurability = (x: number, y: number) => {\r\n    if (this.durability < this.durabilityMax) {\r\n      // Calculate durability ratio (1 = full, 0 = broken)\r\n      const durabilityRatio = this.durability / this.durabilityMax;\r\n\r\n      // Map durability ratio to hue (120 = green, 0 = red)\r\n      let color = Utils.hsvToHex(\r\n        120 * durabilityRatio, // Hue from 120 (green) to 0 (red)\r\n        1, // Full saturation\r\n        1, // Full value\r\n      );\r\n\r\n      const iconWidth = GameConstants.TILESIZE;\r\n      const barWidth = Math.ceil(durabilityRatio * iconWidth); // Round to nearest pixel\r\n      const barHeight = 2; // 2 pixels tall\r\n\r\n      // Calculate the position of the durability bar\r\n      const barX = Math.ceil(x * GameConstants.TILESIZE); // Round to nearest pixel\r\n      const barY = Math.ceil(\r\n        y * GameConstants.TILESIZE + GameConstants.TILESIZE - 2,\r\n      ); // Round to nearest pixel\r\n\r\n      // Set the fill style for the durability bar\r\n      Game.ctx.fillStyle = color;\r\n      Game.ctx.imageSmoothingEnabled = false;\r\n\r\n      // Draw the durability bar\r\n      Game.ctx.fillRect(barX, barY, barWidth, barHeight);\r\n\r\n      // Reset settings\r\n      Game.ctx.fillStyle = \"white\";\r\n    }\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { WeaponFragments } from \"../../item/usable/weaponFragments\";\r\nimport { Coin } from \"../../item/coin\";\r\n\r\nexport class DecoBlock extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 1;\r\n    this.tileY = 4;\r\n    this.hasShadow = true;\r\n    this.pushable = true;\r\n    this.name = \"deco block\";\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 25;\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Usable } from \"../usable/usable\";\r\nimport { GoldRing } from \"../jewelry/goldRing\";\r\n\r\nexport class GreenGem extends Usable {\r\n  static itemName = \"emerald\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 11;\r\n    this.tileY = 0;\r\n    this.name = GreenGem.itemName;\r\n    this.canUseOnOther = true;\r\n\r\n    this.stackable = true;\r\n  }\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (other.name === \"gold ring\") {\r\n      let goldRing = other as GoldRing;\r\n      goldRing.embed(player, this);\r\n    }\r\n  };\r\n\r\n  getDescription = (): string => {\r\n    return \"An emerald gem. Embed it into a gold ring to imbue it with magic.\";\r\n  };\r\n}\r\n","import { CrabEnemy } from \"../entity/enemy/crabEnemy\";\r\nimport { FrogEnemy } from \"../entity/enemy/frogEnemy\";\r\nimport { ZombieEnemy } from \"../entity/enemy/zombieEnemy\";\r\nimport { SkullEnemy } from \"../entity/enemy/skullEnemy\";\r\nimport { EnergyWizardEnemy } from \"../entity/enemy/energyWizard\";\r\nimport { ChargeEnemy } from \"../entity/enemy/chargeEnemy\";\r\nimport { Spawner } from \"../entity/enemy/spawner\";\r\nimport { BishopEnemy } from \"../entity/enemy/bishopEnemy\";\r\nimport { ArmoredzombieEnemy } from \"../entity/enemy/armoredzombieEnemy\";\r\nimport { BigSkullEnemy } from \"../entity/enemy/bigSkullEnemy\";\r\nimport { QueenEnemy } from \"../entity/enemy/queenEnemy\";\r\nimport { KnightEnemy } from \"../entity/enemy/knightEnemy\";\r\nimport { BigKnightEnemy } from \"../entity/enemy/bigKnightEnemy\";\r\nimport { FireWizardEnemy } from \"../entity/enemy/fireWizard\";\r\nimport { RookEnemy } from \"../entity/enemy/rookEnemy\";\r\nimport { ArmoredSkullEnemy } from \"../entity/enemy/armoredSkullEnemy\";\r\nimport { MummyEnemy } from \"../entity/enemy/mummyEnemy\";\r\nimport { SpiderEnemy } from \"../entity/enemy/spiderEnemy\";\r\n\r\nexport const enemyClasses = {\r\n  1: CrabEnemy,\r\n  2: FrogEnemy,\r\n  3: ZombieEnemy,\r\n  4: SkullEnemy,\r\n  5: EnergyWizardEnemy,\r\n  6: ChargeEnemy,\r\n  7: RookEnemy,\r\n  8: BishopEnemy,\r\n  9: ArmoredzombieEnemy,\r\n  10: BigSkullEnemy,\r\n  11: QueenEnemy,\r\n  12: KnightEnemy,\r\n  13: BigKnightEnemy,\r\n  14: FireWizardEnemy,\r\n  15: ArmoredSkullEnemy,\r\n  16: MummyEnemy,\r\n  17: SpiderEnemy,\r\n};\r\n\r\nexport interface LevelParameters {\r\n  minRoomCount: number;\r\n  maxRoomCount: number;\r\n  maxRoomArea: number;\r\n  mapWidth: number;\r\n  mapHeight: number;\r\n  splitProbabilities: number[];\r\n  wallRemoveProbability: number;\r\n  numLoopDoorsRange: [number, number];\r\n  numberOfRooms: number;\r\n  softMaxRoomArea: number;\r\n}\r\n\r\nexport class LevelParameterGenerator {\r\n  /**\r\n   * Generates level parameters based on the current depth.\r\n   * @param depth The current depth level.\r\n   * @returns An object conforming to the LevelParameters interface.\r\n   */\r\n  static getParameters(depth: number): LevelParameters {\r\n    return {\r\n      minRoomCount: depth > 0 ? 0 : 0,\r\n      maxRoomCount: depth > 0 ? 12 : 6,\r\n      maxRoomArea: depth > 0 ? 120 + 10 * depth : 40,\r\n      mapWidth: 25 + 5 * depth,\r\n      mapHeight: 25 + 5 * depth,\r\n      splitProbabilities: [0.75, 1.0, 0.25], // Example probabilities\r\n      wallRemoveProbability: depth > 0 ? 0.1 : 1,\r\n      numLoopDoorsRange: [4, 8], // Random between 4 and 8\r\n      numberOfRooms: depth > 0 ? 5 : 3,\r\n      softMaxRoomArea: depth > 0 ? 0.5 * (120 + 10 * depth) : 40,\r\n    };\r\n  }\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Shrooms } from \"../../item/usable/shrooms\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class Bush extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 19;\r\n    this.tileY = 2;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"bush\";\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 28;\r\n    this.opaque = true;\r\n    this.hitSound = Sound.playBush;\r\n    //this.drops.push(new Shrooms(this.room, this.x, this.y));\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        2,\r\n        2,\r\n        this.x - this.drawX - 0.5,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        2,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Usable } from \"../usable/usable\";\r\nimport { Lantern } from \"../light/lantern\";\r\nimport { Light } from \"../light/light\";\r\nimport { Scythe } from \"./scythe\";\r\nimport { ScytheBlade } from \"./scytheBlade\";\r\n\r\nexport class ScytheHandle extends Usable {\r\n  static itemName = \"scythe handle\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 29;\r\n    this.tileY = 2;\r\n    this.stackable = false;\r\n    this.name = ScytheHandle.itemName;\r\n    this.description = \"The handle of a scythe. Find the blade to use it.\";\r\n    this.canUseOnOther = true;\r\n  }\r\n\r\n  onDrop = () => {\r\n    if (this.level.game.lastDroppedScythePiece === \"handle\") {\r\n      this.level.game.lastDroppedScythePiece = null;\r\n      this.level.items.push(new ScytheBlade(this.level, this.x, this.y));\r\n      this.level.items = this.level.items.filter((item) => item !== this);\r\n    } else if (this.level.game.lastDroppedScythePiece === null) {\r\n      this.level.game.lastDroppedScythePiece = \"handle\";\r\n    }\r\n  };\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (other instanceof ScytheBlade) {\r\n      player.inventory.removeItem(this);\r\n      player.inventory.removeItem(other);\r\n      player.game.pushMessage(\"You combine the scythe blade and handle.\");\r\n      const room = (player as any)?.getRoom\r\n        ? (player as any).getRoom()\r\n        : player.game.rooms[player.levelID];\r\n      const scythe = new Scythe(room, player.x, player.y);\r\n      player.inventory.addItem(scythe);\r\n    }\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Shrooms } from \"../../item/usable/shrooms\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Apple } from \"../../item/usable/apple\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class Tree extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 2;\r\n    this.maxHealth = 2;\r\n\r\n    this.tileX = 14;\r\n    this.tileY = 6;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"tree\";\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 28;\r\n    this.opaque = true;\r\n    this.hitSound = Sound.playBush;\r\n    if (Random.rand() < 0.5)\r\n      this.drops.push(new Apple(this.room, this.x, this.y));\r\n    //this.drawableY = 0.1;\r\n    //this.drops.push(new Shrooms(this.room, this.x, this.y));\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n  uniqueKillBehavior = () => {\r\n    if (this.cloned) return;\r\n    Sound.playWood();\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    this.tileX = this.health === 2 ? 14 : 16;\r\n    if (this.cloned === true) this.tileX = 16;\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        2,\r\n        3,\r\n        this.x - this.drawX - 0.5,\r\n        this.y - this.drawYOffset - this.drawY - 1,\r\n        2,\r\n        3,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { GoldBar } from \"./goldBar\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { IronBar } from \"./ironBar\";\r\n\r\nexport class IronOre extends Item {\r\n  static itemName = \"iron ore\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 16;\r\n    this.tileY = 2;\r\n    this.name = IronOre.itemName;\r\n    this.stackable = true;\r\n    this.description = \"Some iron ore\";\r\n  }\r\n\r\n  smelt = (player: Player) => {\r\n    if (player.inventory.isFull()) {\r\n      this.level.game.pushMessage(\r\n        `You don't have enough space in your inventory to smelt the iron ore.`,\r\n      );\r\n      return;\r\n    }\r\n    if (this.stackCount >= 3) {\r\n      player.inventory.subtractItem(this, 3);\r\n      player.inventory.addItem(new IronBar(this.level, this.x, this.y));\r\n      Sound.playSmith();\r\n      this.level.game.pushMessage(`You smelt the iron ore into a iron bar.`);\r\n    }\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\n\r\nimport { Resource } from \"./resource\";\r\nimport { GoldOre } from \"../../item/resource/goldOre\";\r\nimport { Geode } from \"../../item/resource/geode\";\r\nimport { Random } from \"../../utility/random\";\r\nexport class GoldResource extends Resource {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n\r\n    this.tileX = 13;\r\n    this.tileY = 0;\r\n    this.health = 2;\r\n    this.name = \"gold\";\r\n    if (Random.rand() < 0.2) {\r\n      this.drops.push(new Geode(this.room, this.x, this.y));\r\n    }\r\n\r\n    this.drops.push(new GoldOre(this.room, this.x, this.y));\r\n  }\r\n}\r\n","import { Projectile } from \"./projectile\";\r\nimport { Game } from \"../game\";\r\nimport { WizardEnemy } from \"../entity/enemy/wizardEnemy\";\r\nimport { Player } from \"../player/player\";\r\nimport { HitWarning } from \"../drawable/hitWarning\";\r\nimport { Lighting } from \"../lighting/lighting\";\r\nimport { Utils } from \"../utility/utils\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Bomb } from \"../entity/object/bomb\";\r\nexport class Explosion extends Projectile {\r\n  state: number;\r\n  frame: number;\r\n  delay: number;\r\n  parent: Entity;\r\n  offsetFrame: number;\r\n\r\n  constructor(entity: Entity, x: number, y: number, playerHitBy: Player) {\r\n    super(entity, x, y);\r\n    this.state = 0;\r\n    this.frame = 6;\r\n    this.parent = entity;\r\n    this.offsetFrame =\r\n      -Utils.distance(this.parent.x, this.parent.y, this.x, this.y) * 100;\r\n    this.delay = 0;\r\n    Lighting.momentaryLight(\r\n      this.parent.room,\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      0.5,\r\n      [255, 100, 0],\r\n      350,\r\n      20,\r\n      Math.abs(this.offsetFrame),\r\n    );\r\n    const distance = Utils.distance(\r\n      this.parent.x,\r\n      this.parent.y,\r\n      this.x,\r\n      this.y,\r\n    );\r\n\r\n    const damage =\r\n      distance === 0 ? 1 : Math.max(0.5, Math.floor((1 / distance) * 4) / 2);\r\n    for (const entity of this.parent.room.entities) {\r\n      if (\r\n        entity.x === this.x &&\r\n        entity.y === this.y &&\r\n        entity !== this.parent\r\n      ) {\r\n        if (entity instanceof Bomb) {\r\n          entity.fuseLength = 1;\r\n        }\r\n        entity.hurt(playerHitBy, damage);\r\n      }\r\n      if (playerHitBy.x === this.x && playerHitBy.y === this.y) {\r\n        if (playerHitBy instanceof Player) {\r\n          playerHitBy.hurt(damage, \"bomb\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n  drawTopLayer = (delta: number) => {\r\n    if (this.dead) return;\r\n    if (this.offsetFrame < 0) this.offsetFrame += 10 * delta;\r\n    if (this.offsetFrame >= 0) {\r\n      this.frame += 0.25 * delta;\r\n    }\r\n\r\n    if (this.frame > 17) this.dead = true;\r\n    Game.drawFX(Math.floor(this.frame), 6, 1, 2, this.x, this.y - 1, 1, 2);\r\n  };\r\n}\r\n","import { Item } from \"./item\";\r\nimport { Equippable } from \"./equippable\";\r\nimport { Room } from \"../room/room\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { Player } from \"../player/player\";\r\nimport { DownLadder } from \"src/tile/downLadder\";\r\nimport { Door } from \"../tile/door\";\r\nimport { Usable } from \"./usable/usable\";\r\n\r\nexport class Key extends Usable {\r\n  static itemName = \"key\";\r\n  doorID: number;\r\n  depth: number;\r\n  room: Room;\r\n  showPath: boolean;\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 1;\r\n    this.tileY = 0;\r\n    this.name = \"key\";\r\n    this.doorID = 0;\r\n    this.depth = null;\r\n    this.room = level;\r\n    this.showPath = false;\r\n  }\r\n\r\n  getDescription = (): string => {\r\n    //const ID = this.doorID === 0 ? \"\" : \"ID: \" + this.doorID.toString();\r\n    const depth = this.depth !== null ? \"Depth: \" + this.depth.toString() : \"\";\r\n    return `KEY\\nA key. ${depth}`;\r\n  };\r\n\r\n  onPickup = (player: Player) => {\r\n    if (!this.pickedUp) {\r\n      this.pickedUp = player.inventory.addItem(this);\r\n      if (this.pickedUp) {\r\n        this.level.game.pushMessage(\"You found a key!\");\r\n        this.level.game.pushMessage(\"Click key to toggle path guide\");\r\n\r\n        Sound.keyPickup();\r\n        if (this.depth === null) this.depth = player.depth;\r\n        console.log(this.depth);\r\n      }\r\n    }\r\n  };\r\n\r\n  onUse = (player: Player) => {\r\n    this.showPath = !this.showPath;\r\n    const message = this.showPath ? \"Showing path\" : \"Path hidden\";\r\n    this.room.syncKeyPathParticles();\r\n\r\n    this.room.game.pushMessage(message);\r\n  };\r\n\r\n  tickInInventory = () => {\r\n    //this.updatePathToDoor();\r\n  };\r\n\r\n  onDrop = () => {\r\n    this.room.syncKeyPathParticles();\r\n  };\r\n\r\n  updatePathToDoor = () => {\r\n    try {\r\n      const player = this.level.game.players[this.level.game.localPlayerID];\r\n      const playerRoom = (player as any)?.getRoom?.() || this.level;\r\n      if (!playerRoom) return;\r\n\r\n      // Only show path for sidepath downladder with matching key\r\n      const match = this.level.level.findSidepathDownLadderByKeyID(\r\n        playerRoom,\r\n        this.doorID,\r\n      );\r\n      if (!match) {\r\n        // Clear any previous dots if stored on room\r\n        playerRoom.keyPathDots = undefined;\r\n        return;\r\n      }\r\n\r\n      const { ladder, room: ladderRoom } = match;\r\n\r\n      // If ladder is in the same room, path to its tile (allow drawing on ladder)\r\n      if (ladderRoom === playerRoom) {\r\n        const path = playerRoom.buildTilePathPositions(\r\n          player.x,\r\n          player.y,\r\n          ladder.x,\r\n          ladder.y,\r\n        );\r\n        // Store dots on the room for renderer to consume\r\n        playerRoom.keyPathDots = path;\r\n        return;\r\n      }\r\n\r\n      // Otherwise, compute the room-to-room door path and build dots to the first door in this room\r\n      const doorPath: Door[] | null = playerRoom.findShortestDoorPathTo(\r\n        ladderRoom,\r\n        true,\r\n      );\r\n      if (!doorPath || doorPath.length === 0) {\r\n        playerRoom.keyPathDots = undefined;\r\n        return;\r\n      }\r\n\r\n      const firstDoor = doorPath[0];\r\n      // Path directly to the door tile (allow drawing on door)\r\n      const path = playerRoom.buildTilePathPositions(\r\n        player.x,\r\n        player.y,\r\n        firstDoor.x,\r\n        firstDoor.y,\r\n      );\r\n      playerRoom.keyPathDots = path;\r\n    } catch (e) {\r\n      // Fail quiet\r\n    }\r\n  };\r\n}\r\n","/**\r\n * Global, monotonic ID generator.\r\n * ------------------------------------------------------------------\r\n * • Uses a 64-bit counter encoded in base-36 for compact, url-safe IDs.\r\n * • Optional prefix lets you create type hints: \"IT-abc\" for items,\r\n *   \"EN-def\" for entities, etc.  All prefixes still share one namespace.\r\n * • Keeps an in-memory registry so any accidental duplication throws\r\n *   immediately—very useful during integration and debugging.\r\n * ------------------------------------------------------------------\r\n */\r\nexport class IdGenerator {\r\n  /** Next numeric value to assign (BigInt for 64-bit range). */\r\n  private static _next = BigInt(1);\r\n\r\n  /** Registry of every ID produced or reserved this session. */\r\n  private static _registry = new Set<string>();\r\n\r\n  /**\r\n   * Generate a fresh globally-unique ID.\r\n   * @param prefix Optional type prefix, e.g. \"IT\" for Item.\r\n   */\r\n  public static generate(prefix: string = \"\"): string {\r\n    let id: string;\r\n\r\n    // Loop is almost always single-pass; guarantees collision-free result.\r\n    do {\r\n      const raw = (this._next++).toString(36); // base-36 for brevity\r\n      id = prefix ? `${prefix}-${raw}` : raw;\r\n    } while (this._registry.has(id));\r\n\r\n    this._registry.add(id);\r\n    return id;\r\n  }\r\n\r\n  /**\r\n   * Reserve an existing ID during deserialization.\r\n   * Throws if that ID is already in use for this session.\r\n   */\r\n  public static reserve(existingId: string): void {\r\n    if (this._registry.has(existingId)) {\r\n      throw new Error(`Duplicate ID detected while reserving: ${existingId}`);\r\n    }\r\n    this._registry.add(existingId);\r\n  }\r\n\r\n  /** Quick check: has the ID been claimed already? */\r\n  public static isReserved(id: string): boolean {\r\n    return this._registry.has(id);\r\n  }\r\n\r\n  /**\r\n   * Reset generator and registry—intended only for automated tests.\r\n   */\r\n  public static resetForTest(): void {\r\n    this._next = BigInt(1);\r\n    this._registry.clear();\r\n  }\r\n}\r\n","export default 'ffffffff-ffff-ffff-ffff-ffffffffffff';\n","export default '00000000-0000-0000-0000-000000000000';\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;\n","import REGEX from './regex.js';\nfunction validate(uuid) {\n    return typeof uuid === 'string' && REGEX.test(uuid);\n}\nexport default validate;\n","import validate from './validate.js';\nfunction parse(uuid) {\n    if (!validate(uuid)) {\n        throw TypeError('Invalid UUID');\n    }\n    let v;\n    return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 0xff, ((v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000) & 0xff, (v / 0x100000000) & 0xff, (v >>> 24) & 0xff, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff);\n}\nexport default parse;\n","import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n","import rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nconst _state = {};\nfunction v1(options, buf, offset) {\n    let bytes;\n    const isV6 = options?._v6 ?? false;\n    if (options) {\n        const optionsKeys = Object.keys(options);\n        if (optionsKeys.length === 1 && optionsKeys[0] === '_v6') {\n            options = undefined;\n        }\n    }\n    if (options) {\n        bytes = v1Bytes(options.random ?? options.rng?.() ?? rng(), options.msecs, options.nsecs, options.clockseq, options.node, buf, offset);\n    }\n    else {\n        const now = Date.now();\n        const rnds = rng();\n        updateV1State(_state, now, rnds);\n        bytes = v1Bytes(rnds, _state.msecs, _state.nsecs, isV6 ? undefined : _state.clockseq, isV6 ? undefined : _state.node, buf, offset);\n    }\n    return buf ?? unsafeStringify(bytes);\n}\nexport function updateV1State(state, now, rnds) {\n    state.msecs ??= -Infinity;\n    state.nsecs ??= 0;\n    if (now === state.msecs) {\n        state.nsecs++;\n        if (state.nsecs >= 10000) {\n            state.node = undefined;\n            state.nsecs = 0;\n        }\n    }\n    else if (now > state.msecs) {\n        state.nsecs = 0;\n    }\n    else if (now < state.msecs) {\n        state.node = undefined;\n    }\n    if (!state.node) {\n        state.node = rnds.slice(10, 16);\n        state.node[0] |= 0x01;\n        state.clockseq = ((rnds[8] << 8) | rnds[9]) & 0x3fff;\n    }\n    state.msecs = now;\n    return state;\n}\nfunction v1Bytes(rnds, msecs, nsecs, clockseq, node, buf, offset = 0) {\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    if (!buf) {\n        buf = new Uint8Array(16);\n        offset = 0;\n    }\n    else {\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n    }\n    msecs ??= Date.now();\n    nsecs ??= 0;\n    clockseq ??= ((rnds[8] << 8) | rnds[9]) & 0x3fff;\n    node ??= rnds.slice(10, 16);\n    msecs += 12219292800000;\n    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n    buf[offset++] = (tl >>> 24) & 0xff;\n    buf[offset++] = (tl >>> 16) & 0xff;\n    buf[offset++] = (tl >>> 8) & 0xff;\n    buf[offset++] = tl & 0xff;\n    const tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff;\n    buf[offset++] = (tmh >>> 8) & 0xff;\n    buf[offset++] = tmh & 0xff;\n    buf[offset++] = ((tmh >>> 24) & 0xf) | 0x10;\n    buf[offset++] = (tmh >>> 16) & 0xff;\n    buf[offset++] = (clockseq >>> 8) | 0x80;\n    buf[offset++] = clockseq & 0xff;\n    for (let n = 0; n < 6; ++n) {\n        buf[offset++] = node[n];\n    }\n    return buf;\n}\nexport default v1;\n","import parse from './parse.js';\nimport { unsafeStringify } from './stringify.js';\nexport default function v1ToV6(uuid) {\n    const v1Bytes = typeof uuid === 'string' ? parse(uuid) : uuid;\n    const v6Bytes = _v1ToV6(v1Bytes);\n    return typeof uuid === 'string' ? unsafeStringify(v6Bytes) : v6Bytes;\n}\nfunction _v1ToV6(v1Bytes) {\n    return Uint8Array.of(((v1Bytes[6] & 0x0f) << 4) | ((v1Bytes[7] >> 4) & 0x0f), ((v1Bytes[7] & 0x0f) << 4) | ((v1Bytes[4] & 0xf0) >> 4), ((v1Bytes[4] & 0x0f) << 4) | ((v1Bytes[5] & 0xf0) >> 4), ((v1Bytes[5] & 0x0f) << 4) | ((v1Bytes[0] & 0xf0) >> 4), ((v1Bytes[0] & 0x0f) << 4) | ((v1Bytes[1] & 0xf0) >> 4), ((v1Bytes[1] & 0x0f) << 4) | ((v1Bytes[2] & 0xf0) >> 4), 0x60 | (v1Bytes[2] & 0x0f), v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);\n}\n","function md5(bytes) {\n    const words = uint8ToUint32(bytes);\n    const md5Bytes = wordsToMd5(words, bytes.length * 8);\n    return uint32ToUint8(md5Bytes);\n}\nfunction uint32ToUint8(input) {\n    const bytes = new Uint8Array(input.length * 4);\n    for (let i = 0; i < input.length * 4; i++) {\n        bytes[i] = (input[i >> 2] >>> ((i % 4) * 8)) & 0xff;\n    }\n    return bytes;\n}\nfunction getOutputLength(inputLength8) {\n    return (((inputLength8 + 64) >>> 9) << 4) + 14 + 1;\n}\nfunction wordsToMd5(x, len) {\n    const xpad = new Uint32Array(getOutputLength(len)).fill(0);\n    xpad.set(x);\n    xpad[len >> 5] |= 0x80 << len % 32;\n    xpad[xpad.length - 1] = len;\n    x = xpad;\n    let a = 1732584193;\n    let b = -271733879;\n    let c = -1732584194;\n    let d = 271733878;\n    for (let i = 0; i < x.length; i += 16) {\n        const olda = a;\n        const oldb = b;\n        const oldc = c;\n        const oldd = d;\n        a = md5ff(a, b, c, d, x[i], 7, -680876936);\n        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n        b = md5gg(b, c, d, a, x[i], 20, -373897302);\n        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n        d = md5hh(d, a, b, c, x[i], 11, -358537222);\n        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n        a = md5ii(a, b, c, d, x[i], 6, -198630844);\n        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n        a = safeAdd(a, olda);\n        b = safeAdd(b, oldb);\n        c = safeAdd(c, oldc);\n        d = safeAdd(d, oldd);\n    }\n    return Uint32Array.of(a, b, c, d);\n}\nfunction uint8ToUint32(input) {\n    if (input.length === 0) {\n        return new Uint32Array();\n    }\n    const output = new Uint32Array(getOutputLength(input.length * 8)).fill(0);\n    for (let i = 0; i < input.length; i++) {\n        output[i >> 2] |= (input[i] & 0xff) << ((i % 4) * 8);\n    }\n    return output;\n}\nfunction safeAdd(x, y) {\n    const lsw = (x & 0xffff) + (y & 0xffff);\n    const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return (msw << 16) | (lsw & 0xffff);\n}\nfunction bitRotateLeft(num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt));\n}\nfunction md5cmn(q, a, b, x, s, t) {\n    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\nfunction md5ff(a, b, c, d, x, s, t) {\n    return md5cmn((b & c) | (~b & d), a, b, x, s, t);\n}\nfunction md5gg(a, b, c, d, x, s, t) {\n    return md5cmn((b & d) | (c & ~d), a, b, x, s, t);\n}\nfunction md5hh(a, b, c, d, x, s, t) {\n    return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction md5ii(a, b, c, d, x, s, t) {\n    return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\nexport default md5;\n","import parse from './parse.js';\nimport { unsafeStringify } from './stringify.js';\nexport function stringToBytes(str) {\n    str = unescape(encodeURIComponent(str));\n    const bytes = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; ++i) {\n        bytes[i] = str.charCodeAt(i);\n    }\n    return bytes;\n}\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(version, hash, value, namespace, buf, offset) {\n    const valueBytes = typeof value === 'string' ? stringToBytes(value) : value;\n    const namespaceBytes = typeof namespace === 'string' ? parse(namespace) : namespace;\n    if (typeof namespace === 'string') {\n        namespace = parse(namespace);\n    }\n    if (namespace?.length !== 16) {\n        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n    let bytes = new Uint8Array(16 + valueBytes.length);\n    bytes.set(namespaceBytes);\n    bytes.set(valueBytes, namespaceBytes.length);\n    bytes = hash(bytes);\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = bytes[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(bytes);\n}\n","import md5 from './md5.js';\nimport v35, { DNS, URL } from './v35.js';\nexport { DNS, URL } from './v35.js';\nfunction v3(value, namespace, buf, offset) {\n    return v35(0x30, md5, value, namespace, buf, offset);\n}\nv3.DNS = DNS;\nv3.URL = URL;\nexport default v3;\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction _v4(options, buf, offset) {\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    return _v4(options, buf, offset);\n}\nexport default v4;\n","function f(s, x, y, z) {\n    switch (s) {\n        case 0:\n            return (x & y) ^ (~x & z);\n        case 1:\n            return x ^ y ^ z;\n        case 2:\n            return (x & y) ^ (x & z) ^ (y & z);\n        case 3:\n            return x ^ y ^ z;\n    }\n}\nfunction ROTL(x, n) {\n    return (x << n) | (x >>> (32 - n));\n}\nfunction sha1(bytes) {\n    const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n    const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n    const newBytes = new Uint8Array(bytes.length + 1);\n    newBytes.set(bytes);\n    newBytes[bytes.length] = 0x80;\n    bytes = newBytes;\n    const l = bytes.length / 4 + 2;\n    const N = Math.ceil(l / 16);\n    const M = new Array(N);\n    for (let i = 0; i < N; ++i) {\n        const arr = new Uint32Array(16);\n        for (let j = 0; j < 16; ++j) {\n            arr[j] =\n                (bytes[i * 64 + j * 4] << 24) |\n                    (bytes[i * 64 + j * 4 + 1] << 16) |\n                    (bytes[i * 64 + j * 4 + 2] << 8) |\n                    bytes[i * 64 + j * 4 + 3];\n        }\n        M[i] = arr;\n    }\n    M[N - 1][14] = ((bytes.length - 1) * 8) / Math.pow(2, 32);\n    M[N - 1][14] = Math.floor(M[N - 1][14]);\n    M[N - 1][15] = ((bytes.length - 1) * 8) & 0xffffffff;\n    for (let i = 0; i < N; ++i) {\n        const W = new Uint32Array(80);\n        for (let t = 0; t < 16; ++t) {\n            W[t] = M[i][t];\n        }\n        for (let t = 16; t < 80; ++t) {\n            W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n        }\n        let a = H[0];\n        let b = H[1];\n        let c = H[2];\n        let d = H[3];\n        let e = H[4];\n        for (let t = 0; t < 80; ++t) {\n            const s = Math.floor(t / 20);\n            const T = (ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t]) >>> 0;\n            e = d;\n            d = c;\n            c = ROTL(b, 30) >>> 0;\n            b = a;\n            a = T;\n        }\n        H[0] = (H[0] + a) >>> 0;\n        H[1] = (H[1] + b) >>> 0;\n        H[2] = (H[2] + c) >>> 0;\n        H[3] = (H[3] + d) >>> 0;\n        H[4] = (H[4] + e) >>> 0;\n    }\n    return Uint8Array.of(H[0] >> 24, H[0] >> 16, H[0] >> 8, H[0], H[1] >> 24, H[1] >> 16, H[1] >> 8, H[1], H[2] >> 24, H[2] >> 16, H[2] >> 8, H[2], H[3] >> 24, H[3] >> 16, H[3] >> 8, H[3], H[4] >> 24, H[4] >> 16, H[4] >> 8, H[4]);\n}\nexport default sha1;\n","import sha1 from './sha1.js';\nimport v35, { DNS, URL } from './v35.js';\nexport { DNS, URL } from './v35.js';\nfunction v5(value, namespace, buf, offset) {\n    return v35(0x50, sha1, value, namespace, buf, offset);\n}\nv5.DNS = DNS;\nv5.URL = URL;\nexport default v5;\n","import { unsafeStringify } from './stringify.js';\nimport v1 from './v1.js';\nimport v1ToV6 from './v1ToV6.js';\nfunction v6(options, buf, offset) {\n    options ??= {};\n    offset ??= 0;\n    let bytes = v1({ ...options, _v6: true }, new Uint8Array(16));\n    bytes = v1ToV6(bytes);\n    if (buf) {\n        for (let i = 0; i < 16; i++) {\n            buf[offset + i] = bytes[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(bytes);\n}\nexport default v6;\n","import parse from './parse.js';\nimport { unsafeStringify } from './stringify.js';\nexport default function v6ToV1(uuid) {\n    const v6Bytes = typeof uuid === 'string' ? parse(uuid) : uuid;\n    const v1Bytes = _v6ToV1(v6Bytes);\n    return typeof uuid === 'string' ? unsafeStringify(v1Bytes) : v1Bytes;\n}\nfunction _v6ToV1(v6Bytes) {\n    return Uint8Array.of(((v6Bytes[3] & 0x0f) << 4) | ((v6Bytes[4] >> 4) & 0x0f), ((v6Bytes[4] & 0x0f) << 4) | ((v6Bytes[5] & 0xf0) >> 4), ((v6Bytes[5] & 0x0f) << 4) | (v6Bytes[6] & 0x0f), v6Bytes[7], ((v6Bytes[1] & 0x0f) << 4) | ((v6Bytes[2] & 0xf0) >> 4), ((v6Bytes[2] & 0x0f) << 4) | ((v6Bytes[3] & 0xf0) >> 4), 0x10 | ((v6Bytes[0] & 0xf0) >> 4), ((v6Bytes[0] & 0x0f) << 4) | ((v6Bytes[1] & 0xf0) >> 4), v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);\n}\n","import rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nconst _state = {};\nfunction v7(options, buf, offset) {\n    let bytes;\n    if (options) {\n        bytes = v7Bytes(options.random ?? options.rng?.() ?? rng(), options.msecs, options.seq, buf, offset);\n    }\n    else {\n        const now = Date.now();\n        const rnds = rng();\n        updateV7State(_state, now, rnds);\n        bytes = v7Bytes(rnds, _state.msecs, _state.seq, buf, offset);\n    }\n    return buf ?? unsafeStringify(bytes);\n}\nexport function updateV7State(state, now, rnds) {\n    state.msecs ??= -Infinity;\n    state.seq ??= 0;\n    if (now > state.msecs) {\n        state.seq = (rnds[6] << 23) | (rnds[7] << 16) | (rnds[8] << 8) | rnds[9];\n        state.msecs = now;\n    }\n    else {\n        state.seq = (state.seq + 1) | 0;\n        if (state.seq === 0) {\n            state.msecs++;\n        }\n    }\n    return state;\n}\nfunction v7Bytes(rnds, msecs, seq, buf, offset = 0) {\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    if (!buf) {\n        buf = new Uint8Array(16);\n        offset = 0;\n    }\n    else {\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n    }\n    msecs ??= Date.now();\n    seq ??= ((rnds[6] * 0x7f) << 24) | (rnds[7] << 16) | (rnds[8] << 8) | rnds[9];\n    buf[offset++] = (msecs / 0x10000000000) & 0xff;\n    buf[offset++] = (msecs / 0x100000000) & 0xff;\n    buf[offset++] = (msecs / 0x1000000) & 0xff;\n    buf[offset++] = (msecs / 0x10000) & 0xff;\n    buf[offset++] = (msecs / 0x100) & 0xff;\n    buf[offset++] = msecs & 0xff;\n    buf[offset++] = 0x70 | ((seq >>> 28) & 0x0f);\n    buf[offset++] = (seq >>> 20) & 0xff;\n    buf[offset++] = 0x80 | ((seq >>> 14) & 0x3f);\n    buf[offset++] = (seq >>> 6) & 0xff;\n    buf[offset++] = ((seq << 2) & 0xff) | (rnds[10] & 0x03);\n    buf[offset++] = rnds[11];\n    buf[offset++] = rnds[12];\n    buf[offset++] = rnds[13];\n    buf[offset++] = rnds[14];\n    buf[offset++] = rnds[15];\n    return buf;\n}\nexport default v7;\n","import validate from './validate.js';\nfunction version(uuid) {\n    if (!validate(uuid)) {\n        throw TypeError('Invalid UUID');\n    }\n    return parseInt(uuid.slice(14, 15), 16);\n}\nexport default version;\n","import { Game } from \"../game\";\r\nimport { Tile, SkinType } from \"./tile\";\r\nimport { Room } from \"../room/room\";\r\nimport { Random } from \"../utility/random\";\r\n\r\nexport class SpawnFloor extends Tile {\r\n  // all are in grid units\r\n  variation: number;\r\n\r\n  constructor(room: Room, x: number, y: number) {\r\n    super(room, x, y);\r\n    this.variation = 1;\r\n    if (this.skin == SkinType.DUNGEON)\r\n      this.variation = Game.randTable(\r\n        [1, 1, 1, 1, 1, 1, 8, 8, 8, 9, 10, 10, 10, 10, 10, 12],\r\n        Random.rand,\r\n      );\r\n    if (this.skin == SkinType.CAVE)\r\n      //this.variation = Game.randTable([1, 1, 1, 1, 8, 9, 10, 12], Random.rand);\r\n      this.variation = Game.randTable(\r\n        [1, 1, 1, 1, 1, 1, 8, 8, 8, 9, 10, 10, 10, 10, 10, 12],\r\n        Random.rand,\r\n      );\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    Game.drawTile(\r\n      this.variation,\r\n      this.skin,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Tile } from \"./tile\";\r\nimport { Room } from \"../room/room\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\nimport { Wall } from \"./wall\";\r\nimport { Random } from \"../utility/random\";\r\n\r\nexport class WallTorch extends Wall {\r\n  frame: number;\r\n  private tileYOffset: number;\r\n  private isBottomWall: boolean;\r\n  private torchOffset: number;\r\n  lightSource: LightSource;\r\n\r\n  constructor(room: Room, x: number, y: number, isBottomWall?: boolean) {\r\n    super(room, x, y);\r\n\r\n    this.isBottomWall = isBottomWall;\r\n    this.torchOffset = isBottomWall ? 1 : 0;\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5 - this.torchOffset,\r\n      5,\r\n      LevelConstants.TORCH_LIGHT_COLOR,\r\n      1.5,\r\n    );\r\n    this.room.lightSources.push(this.lightSource);\r\n    this.frame = Random.rand() * 12;\r\n    this.tileYOffset = 6;\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#FFA500\";\r\n    this.bloomAlpha = 1;\r\n    this.softBloomAlpha = 0;\r\n  }\r\n\r\n  isSolid = (): boolean => {\r\n    return true;\r\n  };\r\n  canCrushEnemy = (): boolean => {\r\n    return true;\r\n  };\r\n  isOpaque = (): boolean => {\r\n    const wallInfo = this.room.wallInfo.get(`${this.x},${this.y}`);\r\n    if (!wallInfo) return true;\r\n    return (\r\n      (!wallInfo.isTopWall && !wallInfo.isInnerWall) ||\r\n      wallInfo.isLeftWall ||\r\n      wallInfo.isRightWall\r\n    );\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    this.drawWall(delta);\r\n    const wallInfo = this.room.wallInfo.get(`${this.x},${this.y}`);\r\n    if (!wallInfo) this.tileYOffset = 6;\r\n    this.frame += 0.3 * delta;\r\n    if (this.frame >= 12) this.frame = 0;\r\n\r\n    this.tileYOffset =\r\n      wallInfo?.innerWallType === \"bottomInner\" ||\r\n      wallInfo?.innerWallType === \"surroundedInner\"\r\n        ? 0\r\n        : 6;\r\n    if (!this.isBottomWall) {\r\n      Game.drawTile(\r\n        0,\r\n        this.skin,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n\r\n    Game.drawFX(\r\n      Math.floor(this.frame),\r\n      32,\r\n      1,\r\n      2,\r\n      this.x,\r\n      this.y - 1 - this.torchOffset,\r\n      1,\r\n      2,\r\n    );\r\n\r\n    if (this.isBottomWall) {\r\n      Game.drawTile(\r\n        0,\r\n        this.skin,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y - 0.6,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        1,\r\n      );\r\n    }\r\n  };\r\n}\r\n","import { Weapon } from \"./weapon\";\r\nimport { Room } from \"../../room/room\";\r\n\r\nexport class Dagger extends Weapon {\r\n  static itemName = \"dagger\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 22;\r\n    this.tileY = 0;\r\n    this.name = \"dagger\";\r\n    this.description = \"A basic but dependable weapon.\";\r\n  }\r\n\r\n  weaponMove = (newX: number, newY: number): boolean => {\r\n    if (this.checkForPushables(newX, newY)) return true;\r\n\r\n    const hitSomething = this.executeAttack(\r\n      newX,\r\n      newY,\r\n      true,\r\n      this.damage + this.wielder.damageBonus,\r\n    );\r\n\r\n    return !hitSomething;\r\n  };\r\n\r\n  degrade = () => {};\r\n}\r\n","import { GameConstants } from \"../game/gameConstants\";\r\nimport { Game } from \"../game\";\r\nimport { Utils } from \"../utility/utils\";\r\nimport { Random } from \"../utility/random\";\r\n\r\ninterface Room {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  vx: number; // velocity x\r\n  vy: number; // velocity y\r\n  mass: number;\r\n  id: number;\r\n}\r\n\r\nexport class LevelImageGenerator {\r\n  private rooms: Room[] = [];\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private width: number;\r\n  private height: number;\r\n  private settled: boolean = false;\r\n\r\n  constructor(width: number = 100, height: number = 100) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.canvas = document.createElement(\"canvas\");\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n    this.ctx = this.canvas.getContext(\"2d\")!;\r\n\r\n    // Disable image smoothing for pixel-perfect rendering\r\n    this.ctx.imageSmoothingEnabled = false;\r\n    (this.ctx as any).webkitImageSmoothingEnabled = false;\r\n    (this.ctx as any).mozImageSmoothingEnabled = false;\r\n    (this.ctx as any).msImageSmoothingEnabled = false;\r\n  }\r\n\r\n  // Generate room size using normal distribution for rectangles\r\n  private generateRoomSize(): { width: number; height: number } {\r\n    const minSize = 2;\r\n    const maxSize = 25;\r\n\r\n    // Use normal distribution for both width and height independently\r\n    // This creates rectangles with varied proportions\r\n    const width = Math.max(\r\n      minSize,\r\n      Math.min(maxSize, Utils.randomNormalInt(minSize, maxSize, { median: 6 })),\r\n    );\r\n    const height = Math.max(\r\n      minSize,\r\n      Math.min(maxSize, Utils.randomNormalInt(minSize, maxSize, { median: 6 })),\r\n    );\r\n\r\n    return { width, height };\r\n  }\r\n\r\n  // Calculate mass based on room size (larger rooms = more mass)\r\n  private calculateMass(width: number, height: number): number {\r\n    return width * height * 0.1;\r\n  }\r\n\r\n  // Generate rooms with physics properties\r\n  generateRooms(\r\n    numRooms: number,\r\n    rand: () => number = Random.rand,\r\n    startingPattern: \"center\" | \"split\" | \"corners\" = \"center\",\r\n  ): void {\r\n    this.rooms = [];\r\n    this.settled = false;\r\n\r\n    for (let i = 0; i < numRooms; i++) {\r\n      const { width, height } = this.generateRoomSize();\r\n      const mass = this.calculateMass(width, height);\r\n\r\n      let x: number, y: number;\r\n\r\n      // Different starting patterns\r\n      switch (startingPattern) {\r\n        case \"split\":\r\n          if (i < numRooms / 2) {\r\n            // Top right\r\n            x = this.width * 0.6 + rand() * this.width * 0.3;\r\n            y = this.height * 0.1 + rand() * this.height * 0.3;\r\n          } else {\r\n            // Bottom left\r\n            x = this.width * 0.1 + rand() * this.width * 0.3;\r\n            y = this.height * 0.6 + rand() * this.height * 0.3;\r\n          }\r\n          break;\r\n        case \"corners\":\r\n          const corner = Math.floor(rand() * 4);\r\n          switch (corner) {\r\n            case 0: // Top left\r\n              x = this.width * 0.1 + rand() * this.width * 0.2;\r\n              y = this.height * 0.1 + rand() * this.height * 0.2;\r\n              break;\r\n            case 1: // Top right\r\n              x = this.width * 0.7 + rand() * this.width * 0.2;\r\n              y = this.height * 0.1 + rand() * this.height * 0.2;\r\n              break;\r\n            case 2: // Bottom left\r\n              x = this.width * 0.1 + rand() * this.width * 0.2;\r\n              y = this.height * 0.7 + rand() * this.height * 0.2;\r\n              break;\r\n            case 3: // Bottom right\r\n              x = this.width * 0.7 + rand() * this.width * 0.2;\r\n              y = this.height * 0.7 + rand() * this.height * 0.2;\r\n              break;\r\n          }\r\n          break;\r\n        default: // center\r\n          x = this.width * 0.3 + rand() * this.width * 0.4;\r\n          y = this.height * 0.3 + rand() * this.height * 0.4;\r\n      }\r\n\r\n      this.rooms.push({\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n        vx: 0,\r\n        vy: 0,\r\n        mass,\r\n        id: i,\r\n      });\r\n    }\r\n  }\r\n\r\n  // Check if two rooms collide (including 1-pixel border requirement)\r\n  private roomsCollide(room1: Room, room2: Room): boolean {\r\n    return !(\r\n      room1.x + room1.width + 1 <= room2.x ||\r\n      room2.x + room2.width + 1 <= room1.x ||\r\n      room1.y + room1.height + 1 <= room2.y ||\r\n      room2.y + room2.height + 1 <= room1.y\r\n    );\r\n  }\r\n\r\n  // Check if two rooms should be snapped together (very close)\r\n  private shouldSnap(room1: Room, room2: Room): boolean {\r\n    const SNAP_DISTANCE = 3; // If closer than this, snap together\r\n\r\n    // Check horizontal snapping\r\n    const horizontalGap = Math.min(\r\n      Math.abs(room1.x + room1.width + 1 - room2.x),\r\n      Math.abs(room2.x + room2.width + 1 - room1.x),\r\n    );\r\n\r\n    // Check vertical snapping\r\n    const verticalGap = Math.min(\r\n      Math.abs(room1.y + room1.height + 1 - room2.y),\r\n      Math.abs(room2.y + room2.height + 1 - room1.y),\r\n    );\r\n\r\n    const overlapsHorizontally = !(\r\n      room1.x + room1.width < room2.x || room2.x + room2.width < room1.x\r\n    );\r\n\r\n    const overlapsVertically = !(\r\n      room1.y + room1.height < room2.y || room2.y + room2.height < room1.y\r\n    );\r\n\r\n    return (\r\n      (horizontalGap < SNAP_DISTANCE && overlapsVertically) ||\r\n      (verticalGap < SNAP_DISTANCE && overlapsHorizontally)\r\n    );\r\n  }\r\n\r\n  // Snap two rooms together with proper 1-pixel border\r\n  private snapRooms(room1: Room, room2: Room): void {\r\n    const overlapsHorizontally = !(\r\n      room1.x + room1.width < room2.x || room2.x + room2.width < room1.x\r\n    );\r\n\r\n    const overlapsVertically = !(\r\n      room1.y + room1.height < room2.y || room2.y + room2.height < room1.y\r\n    );\r\n\r\n    if (overlapsHorizontally) {\r\n      // Snap vertically\r\n      if (room1.y < room2.y) {\r\n        // room1 above room2\r\n        const targetY = room1.y + room1.height + 1;\r\n        room2.y = targetY;\r\n        room2.vy = 0;\r\n        room1.vy = 0;\r\n      } else {\r\n        // room2 above room1\r\n        const targetY = room2.y + room2.height + 1;\r\n        room1.y = targetY;\r\n        room1.vy = 0;\r\n        room2.vy = 0;\r\n      }\r\n    } else if (overlapsVertically) {\r\n      // Snap horizontally\r\n      if (room1.x < room2.x) {\r\n        // room1 left of room2\r\n        const targetX = room1.x + room1.width + 1;\r\n        room2.x = targetX;\r\n        room2.vx = 0;\r\n        room1.vx = 0;\r\n      } else {\r\n        // room2 left of room1\r\n        const targetX = room2.x + room2.width + 1;\r\n        room1.x = targetX;\r\n        room1.vx = 0;\r\n        room2.vx = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Apply collision response between two rooms\r\n  private resolveCollision(room1: Room, room2: Room): void {\r\n    // Calculate overlap\r\n    const overlapX = Math.min(\r\n      room1.x + room1.width + 1 - room2.x,\r\n      room2.x + room2.width + 1 - room1.x,\r\n    );\r\n    const overlapY = Math.min(\r\n      room1.y + room1.height + 1 - room2.y,\r\n      room2.y + room2.height + 1 - room1.y,\r\n    );\r\n\r\n    // Resolve collision by moving along the axis with minimum overlap\r\n    if (overlapX < overlapY) {\r\n      // Horizontal separation\r\n      const direction = room1.x < room2.x ? -1 : 1;\r\n      const totalMass = room1.mass + room2.mass;\r\n      const separation = overlapX / 2;\r\n\r\n      room1.x += direction * separation * (room2.mass / totalMass);\r\n      room2.x -= direction * separation * (room1.mass / totalMass);\r\n\r\n      // Add some velocity for natural movement\r\n      room1.vx += direction * 0.1 * (room2.mass / totalMass);\r\n      room2.vx -= direction * 0.1 * (room1.mass / totalMass);\r\n    } else {\r\n      // Vertical separation\r\n      const direction = room1.y < room2.y ? -1 : 1;\r\n      const totalMass = room1.mass + room2.mass;\r\n      const separation = overlapY / 2;\r\n\r\n      room1.y += direction * separation * (room2.mass / totalMass);\r\n      room2.y -= direction * separation * (room1.mass / totalMass);\r\n\r\n      // Add some velocity for natural movement\r\n      room1.vy += direction * 0.1 * (room2.mass / totalMass);\r\n      room2.vy -= direction * 0.1 * (room1.mass / totalMass);\r\n    }\r\n  }\r\n\r\n  // Run physics simulation\r\n  simulatePhysics(iterations: number = 1000): void {\r\n    const damping = 0.95;\r\n    const minVelocity = 0.01;\r\n\r\n    for (let iter = 0; iter < iterations; iter++) {\r\n      let hasMovement = false;\r\n\r\n      // Apply forces and resolve collisions\r\n      for (let i = 0; i < this.rooms.length; i++) {\r\n        for (let j = i + 1; j < this.rooms.length; j++) {\r\n          if (this.roomsCollide(this.rooms[i], this.rooms[j])) {\r\n            this.resolveCollision(this.rooms[i], this.rooms[j]);\r\n            hasMovement = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Apply snapping every iteration - rooms that are close enough stick together\r\n      for (let i = 0; i < this.rooms.length; i++) {\r\n        for (let j = i + 1; j < this.rooms.length; j++) {\r\n          if (this.shouldSnap(this.rooms[i], this.rooms[j])) {\r\n            this.snapRooms(this.rooms[i], this.rooms[j]);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Update positions and apply damping\r\n      for (const room of this.rooms) {\r\n        room.x += room.vx;\r\n        room.y += room.vy;\r\n        room.vx *= damping;\r\n        room.vy *= damping;\r\n\r\n        // Keep rooms within bounds\r\n        room.x = Math.max(1, Math.min(this.width - room.width - 1, room.x));\r\n        room.y = Math.max(1, Math.min(this.height - room.height - 1, room.y));\r\n\r\n        if (\r\n          Math.abs(room.vx) > minVelocity ||\r\n          Math.abs(room.vy) > minVelocity\r\n        ) {\r\n          hasMovement = true;\r\n        }\r\n      }\r\n\r\n      // Check if system has settled\r\n      if (!hasMovement) {\r\n        console.log(`Physics settled after ${iter} iterations`);\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Final pass: ensure all positions are integers for pixel-perfect rendering\r\n    for (const room of this.rooms) {\r\n      room.x = Math.round(room.x);\r\n      room.y = Math.round(room.y);\r\n    }\r\n\r\n    this.settled = true;\r\n  }\r\n\r\n  // Generate PNG image data\r\n  generatePNG(): HTMLCanvasElement {\r\n    // Clear canvas with transparent background\r\n    this.ctx.clearRect(0, 0, this.width, this.height);\r\n\r\n    // Ensure pixel-perfect rendering\r\n    this.ctx.imageSmoothingEnabled = false;\r\n\r\n    // Draw white rectangles for rooms\r\n    this.ctx.fillStyle = \"white\";\r\n    for (const room of this.rooms) {\r\n      this.ctx.fillRect(\r\n        Math.floor(room.x),\r\n        Math.floor(room.y),\r\n        room.width,\r\n        room.height,\r\n      );\r\n    }\r\n\r\n    return this.canvas;\r\n  }\r\n\r\n  // Save PNG to organized directory structure\r\n  savePNG(filename?: string): void {\r\n    const canvas = this.generatePNG();\r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\r\n    const finalFilename = filename || `level_${timestamp}.png`;\r\n\r\n    // Create organized download\r\n    const link = document.createElement(\"a\");\r\n    link.download = `generated_levels/${finalFilename}`;\r\n    link.href = canvas.toDataURL(\"image/png\");\r\n\r\n    // Add to page temporarily and click\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n\r\n    // Also log the data URL for manual saving if needed\r\n    console.log(\r\n      `Generated level PNG (${this.width}x${this.height}):`,\r\n      link.href,\r\n    );\r\n    console.log(`Suggested save path: generated_levels/${finalFilename}`);\r\n  }\r\n\r\n  // Draw the level using Game.ctx for debugging/visualization\r\n  draw(offsetX: number = 0, offsetY: number = 0, scale: number = 2): void {\r\n    if (!Game.ctx) return;\r\n\r\n    Game.ctx.save();\r\n\r\n    // Disable smoothing for pixel-perfect rendering\r\n    Game.ctx.imageSmoothingEnabled = false;\r\n    (Game.ctx as any).webkitImageSmoothingEnabled = false;\r\n    (Game.ctx as any).mozImageSmoothingEnabled = false;\r\n    (Game.ctx as any).msImageSmoothingEnabled = false;\r\n\r\n    // Clear area\r\n    Game.ctx.fillStyle = \"rgba(0, 0, 0, 0.8)\";\r\n    Game.ctx.fillRect(\r\n      offsetX,\r\n      offsetY,\r\n      this.width * scale,\r\n      this.height * scale,\r\n    );\r\n\r\n    // Draw grid for reference\r\n    Game.ctx.strokeStyle = \"rgba(100, 100, 100, 0.3)\";\r\n    Game.ctx.lineWidth = 1;\r\n    for (let x = 0; x <= this.width; x += 10) {\r\n      Game.ctx.beginPath();\r\n      Game.ctx.moveTo(offsetX + x * scale, offsetY);\r\n      Game.ctx.lineTo(offsetX + x * scale, offsetY + this.height * scale);\r\n      Game.ctx.stroke();\r\n    }\r\n    for (let y = 0; y <= this.height; y += 10) {\r\n      Game.ctx.beginPath();\r\n      Game.ctx.moveTo(offsetX, offsetY + y * scale);\r\n      Game.ctx.lineTo(offsetX + this.width * scale, offsetY + y * scale);\r\n      Game.ctx.stroke();\r\n    }\r\n\r\n    // Draw rooms with different colors to show rectangles better\r\n    for (const room of this.rooms) {\r\n      // Room fill - use different colors for different aspect ratios\r\n      const aspectRatio = room.width / room.height;\r\n      let hue: number;\r\n\r\n      if (aspectRatio > 1.5) {\r\n        // Wide rectangle - blue tones\r\n        hue = 200 + ((room.id * 30) % 60);\r\n      } else if (aspectRatio < 0.67) {\r\n        // Tall rectangle - red tones\r\n        hue = 0 + ((room.id * 30) % 60);\r\n      } else {\r\n        // Square-ish - green tones\r\n        hue = 100 + ((room.id * 30) % 60);\r\n      }\r\n\r\n      Game.ctx.fillStyle = `hsl(${hue}, 70%, 60%)`;\r\n      Game.ctx.fillRect(\r\n        offsetX + Math.floor(room.x) * scale,\r\n        offsetY + Math.floor(room.y) * scale,\r\n        room.width * scale,\r\n        room.height * scale,\r\n      );\r\n\r\n      // Room border\r\n      Game.ctx.strokeStyle = \"white\";\r\n      Game.ctx.lineWidth = 1;\r\n      Game.ctx.strokeRect(\r\n        offsetX + Math.floor(room.x) * scale,\r\n        offsetY + Math.floor(room.y) * scale,\r\n        room.width * scale,\r\n        room.height * scale,\r\n      );\r\n\r\n      // Room ID and dimensions text\r\n      if (scale >= 2) {\r\n        Game.ctx.fillStyle = \"white\";\r\n        Game.ctx.font = \"10px monospace\";\r\n        Game.ctx.textAlign = \"center\";\r\n        Game.ctx.fillText(\r\n          `${room.id}`,\r\n          offsetX + (room.x + room.width / 2) * scale,\r\n          offsetY + (room.y + room.height / 2) * scale - 2,\r\n        );\r\n\r\n        // Show dimensions for rectangles\r\n        if (scale >= 3) {\r\n          Game.ctx.font = \"8px monospace\";\r\n          Game.ctx.fillText(\r\n            `${room.width}×${room.height}`,\r\n            offsetX + (room.x + room.width / 2) * scale,\r\n            offsetY + (room.y + room.height / 2) * scale + 8,\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    Game.ctx.restore();\r\n  }\r\n\r\n  // Generate a complete random level\r\n  static generateRandomLevel(\r\n    width: number = 80,\r\n    height: number = 60,\r\n    numRooms: number = 15,\r\n    rand: () => number = Random.rand,\r\n    pattern: \"center\" | \"split\" | \"corners\" = \"center\",\r\n  ): LevelImageGenerator {\r\n    const generator = new LevelImageGenerator(width, height);\r\n    generator.generateRooms(numRooms, rand, pattern);\r\n    generator.simulatePhysics();\r\n    return generator;\r\n  }\r\n\r\n  // Get room data for external use\r\n  getRooms(): Room[] {\r\n    return [...this.rooms];\r\n  }\r\n\r\n  // Check if rooms are accessible (basic connectivity check)\r\n  areRoomsAccessible(): boolean {\r\n    if (this.rooms.length === 0) return true;\r\n    if (this.rooms.length === 1) return true;\r\n\r\n    // Simple flood fill to check connectivity\r\n    const visited = new Set<number>();\r\n    const queue = [0]; // Start with first room\r\n    visited.add(0);\r\n\r\n    while (queue.length > 0) {\r\n      const currentId = queue.shift()!;\r\n      const currentRoom = this.rooms[currentId];\r\n\r\n      // Check adjacent rooms (exactly 1 pixel apart = touching with 1px border)\r\n      for (let i = 0; i < this.rooms.length; i++) {\r\n        if (visited.has(i)) continue;\r\n\r\n        const otherRoom = this.rooms[i];\r\n\r\n        // Check if rooms are exactly adjacent (1 pixel gap)\r\n        const horizontallyAdjacent =\r\n          Math.abs(currentRoom.x + currentRoom.width + 1 - otherRoom.x) < 1 ||\r\n          Math.abs(otherRoom.x + otherRoom.width + 1 - currentRoom.x) < 1;\r\n\r\n        const verticallyAdjacent =\r\n          Math.abs(currentRoom.y + currentRoom.height + 1 - otherRoom.y) < 1 ||\r\n          Math.abs(otherRoom.y + otherRoom.height + 1 - currentRoom.y) < 1;\r\n\r\n        const overlapsHorizontally = !(\r\n          currentRoom.x + currentRoom.width < otherRoom.x ||\r\n          otherRoom.x + otherRoom.width < currentRoom.x\r\n        );\r\n\r\n        const overlapsVertically = !(\r\n          currentRoom.y + currentRoom.height < otherRoom.y ||\r\n          otherRoom.y + otherRoom.height < currentRoom.y\r\n        );\r\n\r\n        if (\r\n          (horizontallyAdjacent && overlapsVertically) ||\r\n          (verticallyAdjacent && overlapsHorizontally)\r\n        ) {\r\n          visited.add(i);\r\n          queue.push(i);\r\n        }\r\n      }\r\n    }\r\n\r\n    return visited.size === this.rooms.length;\r\n  }\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Random } from \"./random\";\r\n\r\nexport class Utils {\r\n  static distance = (\r\n    startX: number,\r\n    startY: number,\r\n    endX: number,\r\n    endY: number,\r\n  ) => {\r\n    return Math.sqrt((endX - startX) ** 2 + (endY - startY) ** 2);\r\n  };\r\n\r\n  static calculateExponentialFalloff = (\r\n    distance: number,\r\n    falloffRate: number,\r\n  ): number => {\r\n    return Math.exp(-falloffRate * distance);\r\n  };\r\n\r\n  // Corrected HSV to HEX conversion\r\n  static hsvToHex = (h: number, s: number, v: number): string => {\r\n    let c = v * s;\r\n    let x = c * (1 - Math.abs(((h / 60) % 2) - 1));\r\n    let m = v - c;\r\n    let r = 0,\r\n      g = 0,\r\n      b = 0;\r\n\r\n    if (h >= 0 && h < 60) {\r\n      r = c;\r\n      g = x;\r\n      b = 0;\r\n    } else if (h >= 60 && h < 120) {\r\n      r = x;\r\n      g = c;\r\n      b = 0;\r\n    } else if (h >= 120 && h < 180) {\r\n      r = 0;\r\n      g = c;\r\n      b = x;\r\n    } else if (h >= 180 && h < 240) {\r\n      r = 0;\r\n      g = x;\r\n      b = c;\r\n    } else if (h >= 240 && h < 300) {\r\n      r = x;\r\n      g = 0;\r\n      b = c;\r\n    } else {\r\n      r = c;\r\n      g = 0;\r\n      b = x;\r\n    }\r\n\r\n    // Convert to RGB values\r\n    const rFinal = Math.round((r + m) * 255);\r\n    const gFinal = Math.round((g + m) * 255);\r\n    const bFinal = Math.round((b + m) * 255);\r\n\r\n    return Utils.rgbToHex(rFinal, gFinal, bFinal);\r\n  };\r\n\r\n  // RGB to HEX conversion\r\n  static rgbToHex = (r: number, g: number, b: number): string => {\r\n    const toHex = (val: number) => {\r\n      const hex = val.toString(16);\r\n      return hex.length === 1 ? \"0\" + hex : hex;\r\n    };\r\n\r\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\r\n  };\r\n\r\n  /**\r\n   * Generates a random integer using a modified cosine distribution that approximates a normal distribution.\r\n   *\r\n   * @param min - The minimum value (inclusive) of the range\r\n   * @param max - The maximum value (inclusive) of the range\r\n   * @param options - Optional parameters to modify the distribution\r\n   * @param options.median - The value to skew the distribution towards (must be between min and max).\r\n   *                        Default is the middle of the range. This acts as the peak of the distribution curve.\r\n   * @returns A random integer between min and max (inclusive) following the specified distribution\r\n   *\r\n   * @example\r\n   * // Normal bell curve distribution between 0 and 10 (centered at 5)\r\n   * randomSineInt(0, 10)\r\n   *\r\n   * @example\r\n   * // Distribution skewed towards 7\r\n   * randomSineInt(0, 10, { median: 7 })\r\n   */\r\n  static randomSineInt = (\r\n    min: number,\r\n    max: number,\r\n    options: {\r\n      median?: number;\r\n    } = {},\r\n  ): number => {\r\n    const roundedMax = Math.ceil(max);\r\n    const roundedMin = Math.floor(min);\r\n    const range = roundedMax - roundedMin + 1;\r\n\r\n    const { median = roundedMin + (range - 1) / 2 } = options;\r\n\r\n    // Validate median is within range\r\n    const clampedMedian = Math.min(Math.max(median, roundedMin), roundedMax);\r\n\r\n    // Generate two random numbers for a more normal-like distribution\r\n    const x1 = Random.rand() * 2 * Math.PI;\r\n    const x2 = Random.rand() * 2 * Math.PI;\r\n\r\n    // Average two cosines to create smoother bell curve, normalized to [0,1]\r\n    const value = (Math.cos(x1) + Math.cos(x2) + 2) / 4;\r\n\r\n    // Calculate the relative median position in [0,1] range\r\n    const medianPosition = (clampedMedian - roundedMin) / (range - 1);\r\n\r\n    // Apply skewing by using a weighted average\r\n    const weight = 0.7; // How strong the skewing effect should be\r\n    const skewedValue =\r\n      value * (1 - weight) +\r\n      (value < 0.5\r\n        ? value * (medianPosition / 0.5)\r\n        : medianPosition + (value - 0.5) * 2 * (1 - medianPosition)) *\r\n        weight;\r\n\r\n    // Ensure we stay within bounds while avoiding edge cases\r\n    const epsilon = 0.001;\r\n    const boundedValue = Math.min(Math.max(skewedValue, epsilon), 1 - epsilon);\r\n\r\n    // Map to integer range\r\n    const result = Math.floor(boundedValue * range) + roundedMin;\r\n\r\n    return Math.min(Math.max(result, roundedMin), roundedMax);\r\n  };\r\n\r\n  static randTableWeighted = (table: any[]): any => {\r\n    // If table is empty, return null\r\n    if (!table || table.length === 0) return null;\r\n\r\n    // Check if items have weight property\r\n    const hasWeights = table.some(\r\n      (item) => item && typeof item.weight === \"number\",\r\n    );\r\n\r\n    if (!hasWeights) {\r\n      // Fallback to equal probability selection\r\n      return table[Game.rand(0, table.length - 1, Random.rand)];\r\n    }\r\n\r\n    // Calculate total weight\r\n    const totalWeight = table.reduce((sum, item) => {\r\n      return sum + (item && typeof item.weight === \"number\" ? item.weight : 0);\r\n    }, 0);\r\n\r\n    if (totalWeight <= 0) {\r\n      // If no valid weights, fallback to equal probability\r\n      return table[Game.rand(0, table.length - 1, Random.rand)];\r\n    }\r\n\r\n    // Generate random number between 0 and totalWeight\r\n    let randomValue = Random.rand() * totalWeight;\r\n\r\n    // Find the item that corresponds to this random value\r\n    for (const item of table) {\r\n      if (item && typeof item.weight === \"number\") {\r\n        randomValue -= item.weight;\r\n        if (randomValue <= 0) {\r\n          return item;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fallback (should rarely happen due to floating point precision)\r\n    return table[table.length - 1];\r\n  };\r\n\r\n  /**\r\n   * Generates a random integer using a real normal distribution.\r\n   *\r\n   * @param min - The value that represents -2 standard deviations from the mean\r\n   * @param max - The value that represents +2 standard deviations from the mean\r\n   * @param options - Optional parameters to modify the distribution\r\n   * @param options.median - The mean of the distribution (center point).\r\n   *                        Default is the middle of the range.\r\n   * @returns A random integer following a normal distribution, with negative values clamped to 0\r\n   *\r\n   * @example\r\n   * // Normal distribution centered at 5, with min/max representing ±2 std devs\r\n   * randomNormalInt(0, 10)\r\n   *\r\n   * @example\r\n   * // Normal distribution centered at 7\r\n   * randomNormalInt(0, 10, { median: 7 })\r\n   */\r\n  static randomNormalInt = (\r\n    min: number,\r\n    max: number,\r\n    options: {\r\n      median?: number;\r\n    } = {},\r\n  ): number => {\r\n    const { median = min + (max - min) / 2 } = options;\r\n\r\n    // Calculate standard deviation: (max - min) / 4 since min/max are ±2 std devs\r\n    const standardDeviation = (max - min) / 5;\r\n\r\n    // Box-Muller transform to generate normal distribution\r\n    // Generate two uniform random numbers\r\n    let u1 = Random.rand();\r\n    let u2 = Random.rand();\r\n\r\n    // Ensure u1 is not 0 to avoid log(0)\r\n    while (u1 === 0) {\r\n      u1 = Random.rand();\r\n    }\r\n\r\n    // Box-Muller transformation\r\n    const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\r\n\r\n    // Scale and shift to desired mean and standard deviation\r\n    const normalValue = z0 * standardDeviation + median;\r\n\r\n    // Clamp negative values to 0\r\n    const clampedValue = Math.max(0, normalValue);\r\n\r\n    // Round to integer\r\n    return Math.round(clampedValue);\r\n  };\r\n}\r\n","export const EVENTS = {\r\n  KEY_DOWN: \"KEY_DOWN\",\r\n  KEY_UP: \"KEY_UP\",\r\n  MOUSE_LEFT_CLICK: \"MOUSE_LEFT_CLICK\",\r\n  MOUSE_RIGHT_CLICK: \"MOUSE_RIGHT_CLICK\",\r\n  MOUSE_MOVE: \"MOUSE_MOVE\",\r\n  TOUCH_START: \"TOUCH_START\",\r\n  TOUCH_MOVE: \"TOUCH_MOVE\",\r\n  TOUCH_END: \"TOUCH_END\",\r\n  TAP: \"TAP\",\r\n  TAP_HOLD: \"TAP_HOLD\",\r\n  MOUSE_DOWN: \"MOUSE_DOWN\",\r\n  MOUSE_UP: \"MOUSE_UP\",\r\n\r\n  // **Additional Custom Events:**\r\n  CHAT_MESSAGE: \"ChatMessage\",\r\n  ENEMY_SEEN_PLAYER: \"EnemySeenPlayer\",\r\n  ENEMY_KILLED: \"ENEMY_KILLED\",\r\n  DAMAGE_DONE: \"DAMAGE_DONE\",\r\n  DAMAGE_TAKEN: \"DAMAGE_TAKEN\",\r\n  TURN_PASSED: \"TURN_PASSED\",\r\n  COIN_COLLECTED: \"COIN_COLLECTED\",\r\n  ITEM_COLLECTED: \"ITEM_COLLECTED\",\r\n  LEVEL_GENERATION_STARTED: \"LEVEL_GENERATION_STARTED\",\r\n  LEVEL_GENERATION_COMPLETED: \"LEVEL_GENERATION_COMPLETED\",\r\n  // Add other custom events as needed\r\n} as const;\r\n\r\n// **TypeScript Interfaces for Event Payloads:**\r\n\r\nexport interface MouseClickEvent {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface MouseMoveEvent {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface KeyEvent {\r\n  key: string;\r\n}\r\n\r\nexport interface TouchEventData {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface ChatMessageEvent {\r\n  message: string;\r\n}\r\n\r\nexport interface EnemySeenPlayerEvent {\r\n  enemyId: string;\r\n  playerId: string;\r\n  // Add other relevant properties\r\n}\r\n\r\nexport interface EnemyKilledEvent {\r\n  enemyId: string;\r\n  xp: number;\r\n}\r\n\r\nexport interface DamageDoneEvent {\r\n  amount: number;\r\n}\r\n\r\nexport interface DamageTakenEvent {\r\n  amount: number;\r\n}\r\n\r\nexport interface CoinCollectedEvent {\r\n  amount: number;\r\n}\r\n\r\nexport interface ItemCollectedEvent {\r\n  itemId: string;\r\n}\r\n\r\n// **Union Type for Events:**\r\nexport type AppEvents =\r\n  | typeof EVENTS.KEY_DOWN\r\n  | typeof EVENTS.KEY_UP\r\n  | typeof EVENTS.MOUSE_LEFT_CLICK\r\n  | typeof EVENTS.MOUSE_RIGHT_CLICK\r\n  | typeof EVENTS.MOUSE_MOVE\r\n  | typeof EVENTS.TOUCH_START\r\n  | typeof EVENTS.TOUCH_MOVE\r\n  | typeof EVENTS.TOUCH_END\r\n  | typeof EVENTS.TAP\r\n  | typeof EVENTS.TAP_HOLD\r\n  | typeof EVENTS.MOUSE_DOWN\r\n  | typeof EVENTS.MOUSE_UP\r\n  | typeof EVENTS.CHAT_MESSAGE\r\n  | typeof EVENTS.ENEMY_SEEN_PLAYER\r\n  | typeof EVENTS.ENEMY_KILLED\r\n  | typeof EVENTS.DAMAGE_DONE\r\n  | typeof EVENTS.DAMAGE_TAKEN\r\n  | typeof EVENTS.TURN_PASSED\r\n  | typeof EVENTS.COIN_COLLECTED\r\n  | typeof EVENTS.ITEM_COLLECTED\r\n  | typeof EVENTS.LEVEL_GENERATION_STARTED\r\n  | typeof EVENTS.LEVEL_GENERATION_COMPLETED;\r\n// | Add other events as needed\r\n\r\n// **Type Mapping for Event Payloads:**\r\nexport type EventPayloads = {\r\n  [EVENTS.KEY_DOWN]: string; // key identifier\r\n  [EVENTS.KEY_UP]: string;\r\n  [EVENTS.MOUSE_LEFT_CLICK]: MouseClickEvent;\r\n  [EVENTS.MOUSE_RIGHT_CLICK]: MouseClickEvent;\r\n  [EVENTS.MOUSE_MOVE]: MouseMoveEvent;\r\n  [EVENTS.TOUCH_START]: TouchEventData;\r\n  [EVENTS.TOUCH_MOVE]: TouchEventData;\r\n  [EVENTS.TOUCH_END]: TouchEventData;\r\n  [EVENTS.TAP]: MouseClickEvent;\r\n  [EVENTS.TAP_HOLD]: MouseClickEvent;\r\n  [EVENTS.MOUSE_DOWN]: MouseClickEvent;\r\n  [EVENTS.MOUSE_UP]: MouseClickEvent;\r\n\r\n  [EVENTS.CHAT_MESSAGE]: ChatMessageEvent;\r\n  [EVENTS.ENEMY_SEEN_PLAYER]: EnemySeenPlayerEvent;\r\n  [EVENTS.ENEMY_KILLED]: EnemyKilledEvent;\r\n  [EVENTS.DAMAGE_DONE]: DamageDoneEvent;\r\n  [EVENTS.DAMAGE_TAKEN]: DamageTakenEvent;\r\n  [EVENTS.TURN_PASSED]: void;\r\n  [EVENTS.COIN_COLLECTED]: CoinCollectedEvent;\r\n  [EVENTS.ITEM_COLLECTED]: ItemCollectedEvent;\r\n  [EVENTS.LEVEL_GENERATION_STARTED]: void;\r\n  [EVENTS.LEVEL_GENERATION_COMPLETED]: void;\r\n  // | Add other event payloads as needed\r\n};\r\n","import { Armor } from \"../item/armor\";\r\nimport { Backpack } from \"../item/backpack\";\r\nimport { Candle } from \"../item/light/candle\";\r\nimport { Coal } from \"../item/resource/coal\";\r\nimport { EntitySpawner } from \"../item/entitySpawner\";\r\nimport { GodStone } from \"../item/godStone\";\r\nimport { Heart } from \"../item/usable/heart\";\r\nimport { Key } from \"../item/key\";\r\nimport { Lantern } from \"../item/light/lantern\";\r\nimport { Torch } from \"../item/light/torch\";\r\nimport { WeaponBlood } from \"../item/usable/weaponBlood\";\r\nimport { WeaponFragments } from \"../item/usable/weaponFragments\";\r\nimport { WeaponPoison } from \"../item/usable/weaponPoison\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\nimport { Dagger } from \"../item/weapon/dagger\";\r\nimport { DualDagger } from \"../item/weapon/dualdagger\";\r\nimport { Spear } from \"../item/weapon/spear\";\r\nimport { Spellbook } from \"../item/weapon/spellbook\";\r\nimport { Warhammer } from \"../item/weapon/warhammer\";\r\nimport { Hammer } from \"../item/tool/hammer\";\r\nimport { SpellbookPage } from \"../item/usable/spellbookPage\";\r\nimport { BombItem } from \"../item/bombItem\";\r\nimport { BestiaryBook } from \"../item/bestiaryBook\";\r\nimport { Greataxe } from \"../item/weapon/greataxe\";\r\nimport { BlueGem } from \"../item/resource/bluegem\";\r\nimport { RedGem } from \"../item/resource/redgem\";\r\nimport { GreenGem } from \"../item/resource/greengem\";\r\nimport { Pickaxe } from \"../item/tool/pickaxe\";\r\nimport { Geode } from \"../item/resource/geode\";\r\nimport { GlowBugs } from \"../item/light/glowBugs\";\r\nimport { Shotgun } from \"../item/weapon/shotgun\";\r\nimport { Scythe } from \"../item/weapon/scythe\";\r\nimport { Hourglass } from \"../item/usable/hourglass\";\r\nimport { GoldOre } from \"../item/resource/goldOre\";\r\nimport { Sword } from \"../item/weapon/sword\";\r\nimport { Apple } from \"../item/usable/apple\";\r\nimport { WebGLBlurRenderer } from \"../gui/webglBlurRenderer\";\r\nimport { ScytheBlade } from \"../item/weapon/scytheBlade\";\r\nimport { ScytheHandle } from \"../item/weapon/scytheHandle\";\r\nimport { OrangeGem } from \"../item/resource/orangegem\";\r\nimport { GoldRing } from \"../item/jewelry/goldRing\";\r\nimport { FishingRod } from \"../item/tool/fishingRod\";\r\nimport { Coin } from \"../item/coin\";\r\nimport { Fish } from \"../item/usable/fish\";\r\nimport { IronOre } from \"../item/resource/ironOre\";\r\nimport { GarnetRing } from \"../item/jewelry/garnetRing\";\r\nimport { WoodenShield } from \"../item/woodenShield\";\r\n\r\nexport class GameConstants {\r\n  static readonly VERSION = \"Alpha v0.3.0\"; //\"v0.6.3\";\r\n  static DEVELOPER_MODE = false;\r\n  static isMobile = false;\r\n  static isIOS = false;\r\n  static MOBILE_KEYBOARD_SUPPORT = false;\r\n  static CAMERA_SPEED = 1; // 1 is instant 0.1 is slow\r\n  static SAVING_ENABLED = false;\r\n\r\n  static readonly FPS = 120;\r\n  static readonly ALPHA_ENABLED = true;\r\n  static SHADE_LEVELS = 50; //25\r\n  static ENTITY_SHADE_LEVELS = 40; //10\r\n\r\n  static readonly TILESIZE = 16;\r\n  static SCALE = null;\r\n  static SOFT_SCALE = 6;\r\n  static readonly MAX_SCALE = 16;\r\n  static readonly MIN_SCALE = 1;\r\n  static smoothScaling = false;\r\n\r\n  static readonly SWIPE_THRESH = 25 ** 2; // (size of swipe threshold circle)^2\r\n  static readonly HOLD_THRESH = 250; // milliseconds\r\n\r\n  static KEY_REPEAT_TIME = 250; // millseconds\r\n  static SWIPE_HOLD_REPEAT_TIME = 200;\r\n  static SWIPE_HOLD_INITIAL_DELAY = 10;\r\n  static MOVEMENT_COOLDOWN = 50; // milliseconds\r\n  static MOVEMENT_QUEUE_COOLDOWN = 25; // milliseconds\r\n  static readonly MOVE_WITH_MOUSE = true;\r\n  static SLOW_INPUTS_NEAR_ENEMIES = false;\r\n  static SCREEN_SHAKE_ENABLED = true;\r\n\r\n  static readonly CHAT_APPEAR_TIME = 1000;\r\n  static readonly CHAT_FADE_TIME = 2000;\r\n  static ANIMATION_SPEED = 1;\r\n  static readonly REPLAY_STEP_MS = 10; // base time between replayed inputs\r\n  static readonly REPLAY_COMPUTER_TURN_DELAY = 10; // extra wait after computer turn completes during replay\r\n  static REPLAY_DEBUG = false; // enable verbose replay logging\r\n\r\n  static readonly DEFAULTWIDTH = GameConstants.TILESIZE;\r\n  static readonly DEFAULTHEIGHT = GameConstants.TILESIZE;\r\n  static WIDTH = LevelConstants.SCREEN_W * GameConstants.TILESIZE;\r\n  static HEIGHT = LevelConstants.SCREEN_H * GameConstants.TILESIZE;\r\n\r\n  static drawOtherRooms = true;\r\n\r\n  static readonly SCRIPT_FONT_SIZE = 16;\r\n  static readonly FONT_SIZE = 7;\r\n  static readonly BIG_FONT_SIZE = 15;\r\n\r\n  static readonly RED = \"#ac3232\";\r\n  static readonly WARNING_RED = \"#ff0000\";\r\n  static readonly GREEN = \"#6abe30\";\r\n  static readonly ARMOR_GREY = \"#9badb7\";\r\n  static readonly OUTLINE = \"#222034\";\r\n  static readonly HIT_ENEMY_TEXT_COLOR = \"#76428a\";\r\n  static readonly HEALTH_BUFF_COLOR = \"#d77bba\";\r\n  static readonly MISS_COLOR = \"#639bff\";\r\n  static readonly XP_POPUP_ENABLED = true;\r\n\r\n  static readonly COIN_ANIMATION = true;\r\n  static readonly COIN_AUTO_PICKUP = true;\r\n  static readonly ITEM_AUTO_PICKUP = true;\r\n\r\n  static readonly AUTO_PICKUP_ITEMS = [\r\n    Coal,\r\n    GoldOre,\r\n    IronOre,\r\n    RedGem,\r\n    BlueGem,\r\n    GreenGem,\r\n    OrangeGem,\r\n    Coin,\r\n    Fish,\r\n  ];\r\n\r\n  static readonly PERSISTENT_HEALTH_BAR = false; //not implemented\r\n\r\n  static HOVER_TEXT_ENABLED = true;\r\n  static readonly INVENTORY_HOVER_TEXT_ENABLED = true;\r\n  static readonly IN_GAME_HOVER_TEXT_ENABLED = false;\r\n  static readonly VENDING_MACHINE_HOVER_TEXT_ENABLED = true;\r\n  static readonly HOVER_TEXT_FOLLOWS_MOUSE = true;\r\n  static readonly INVENTORY_HOVER_TEXT_FOLLOWS_MOUSE = true;\r\n  static readonly IN_GAME_HOVER_TEXT_FOLLOWS_MOUSE = true;\r\n  static readonly VENDING_MACHINE_HOVER_TEXT_FOLLOWS_MOUSE = true;\r\n\r\n  static CUSTOM_SHADER_COLOR_ENABLED = false;\r\n  static get SHADE_ENABLED() {\r\n    return GameConstants.SMOOTH_LIGHTING;\r\n  }\r\n  static COLOR_LAYER_COMPOSITE_OPERATION = \"soft-light\"; //\"soft-light\";\r\n  static SHADE_LAYER_COMPOSITE_OPERATION = \"source-over\"; //\"soft-light\";\r\n  // When true, draw shade as sliced tiles inline within drawEntities instead of a single layer\r\n  static SHADE_INLINE_IN_ENTITY_LAYER = true;\r\n  static USE_OPTIMIZED_SHADING = false;\r\n  static SMOOTH_LIGHTING = false;\r\n  static ctxBlurEnabled = true;\r\n  static BLUR_ENABLED = true;\r\n  static USE_WEBGL_BLUR = false;\r\n  static HIGH_QUALITY_BLUR = false; // true = 49 samples, false = 13 samples for performance\r\n  static BLUR_DOWNSAMPLE_FACTOR = 8; // Blur at 1/4 size for performance (1 = full size, 4 = quarter size)\r\n  static ENEMIES_BLOCK_LIGHT = true;\r\n\r\n  static USE_PNG_LEVELS = true;\r\n\r\n  static readonly SHADE_LAYER_COMPOSITE_OPERATIONS = [\r\n    \"source-over\",\r\n    \"screen\",\r\n    \"multiply\",\r\n    \"overlay\",\r\n    \"darken\",\r\n    \"lighten\",\r\n  ];\r\n\r\n  static readonly COLOR_LAYER_COMPOSITE_OPERATIONS = [\r\n    \"soft-light\",\r\n    //\"addition\",\r\n    //\"darken\",\r\n    \"overlay\",\r\n    //\"hue\",\r\n    //\"source-over\",\r\n    //\"screen\",\r\n    \"multiply\",\r\n    //\"difference\",\r\n    //\"exclusion\",\r\n    //\"luminosity\",\r\n    //\"color-dodge\",\r\n    //\"color-burn\",\r\n    //\"hard-light\",\r\n    //\"soft-light\",\r\n    //\"lighten\",\r\n  ];\r\n\r\n  static readonly SET_COLOR_LAYER_COMPOSITE_OPERATION = (\r\n    back: boolean = false,\r\n  ) => {\r\n    const currentIndex = GameConstants.COLOR_LAYER_COMPOSITE_OPERATIONS.indexOf(\r\n      GameConstants.COLOR_LAYER_COMPOSITE_OPERATION,\r\n    );\r\n    let nextIndex;\r\n\r\n    if (back) {\r\n      // Decrement the index to move backward in the operations array\r\n      nextIndex =\r\n        (currentIndex -\r\n          1 +\r\n          GameConstants.COLOR_LAYER_COMPOSITE_OPERATIONS.length) %\r\n        GameConstants.COLOR_LAYER_COMPOSITE_OPERATIONS.length;\r\n    } else {\r\n      // Increment the index to move forward in the operations array\r\n      nextIndex =\r\n        (currentIndex + 1) %\r\n        GameConstants.COLOR_LAYER_COMPOSITE_OPERATIONS.length;\r\n    }\r\n\r\n    GameConstants.COLOR_LAYER_COMPOSITE_OPERATION =\r\n      GameConstants.COLOR_LAYER_COMPOSITE_OPERATIONS[nextIndex];\r\n\r\n    console.log(\r\n      `Color layer composite operation set to ${GameConstants.COLOR_LAYER_COMPOSITE_OPERATION}`,\r\n    );\r\n  };\r\n\r\n  static readonly SET_SHADE_LAYER_COMPOSITE_OPERATION = (\r\n    back: boolean = false,\r\n  ) => {\r\n    const currentIndex = GameConstants.SHADE_LAYER_COMPOSITE_OPERATIONS.indexOf(\r\n      GameConstants.SHADE_LAYER_COMPOSITE_OPERATION,\r\n    );\r\n    let nextIndex;\r\n\r\n    if (back) {\r\n      // Decrement the index to move backward in the operations array\r\n      nextIndex =\r\n        (currentIndex -\r\n          1 +\r\n          GameConstants.SHADE_LAYER_COMPOSITE_OPERATIONS.length) %\r\n        GameConstants.SHADE_LAYER_COMPOSITE_OPERATIONS.length;\r\n    } else {\r\n      // Increment the index to move forward in the operations array\r\n      nextIndex =\r\n        (currentIndex + 1) %\r\n        GameConstants.SHADE_LAYER_COMPOSITE_OPERATIONS.length;\r\n    }\r\n\r\n    GameConstants.SHADE_LAYER_COMPOSITE_OPERATION =\r\n      GameConstants.SHADE_LAYER_COMPOSITE_OPERATIONS[nextIndex];\r\n\r\n    console.log(\r\n      `Shade layer composite operation set to ${GameConstants.SHADE_LAYER_COMPOSITE_OPERATION}`,\r\n    );\r\n  };\r\n\r\n  static readonly TOGGLE_USE_OPTIMIZED_SHADING = () => {\r\n    GameConstants.USE_OPTIMIZED_SHADING = !GameConstants.USE_OPTIMIZED_SHADING;\r\n  };\r\n\r\n  static readonly TOGGLE_ENEMIES_BLOCK_LIGHT = () => {\r\n    GameConstants.ENEMIES_BLOCK_LIGHT = !GameConstants.ENEMIES_BLOCK_LIGHT;\r\n  };\r\n\r\n  static readonly TOGGLE_USE_WEBGL_BLUR = () => {\r\n    GameConstants.USE_WEBGL_BLUR = !GameConstants.USE_WEBGL_BLUR;\r\n    console.log(\r\n      `WebGL blur is now ${GameConstants.USE_WEBGL_BLUR ? \"enabled\" : \"disabled\"}`,\r\n    );\r\n  };\r\n\r\n  static readonly TOGGLE_HIGH_QUALITY_BLUR = () => {\r\n    GameConstants.HIGH_QUALITY_BLUR = !GameConstants.HIGH_QUALITY_BLUR;\r\n    console.log(\r\n      `High quality blur: ${GameConstants.HIGH_QUALITY_BLUR ? \"ON (49 samples)\" : \"OFF (13 samples)\"}`,\r\n    );\r\n  };\r\n\r\n  static readonly SET_SCALE = () => {\r\n    GameConstants.SCALE++;\r\n    if (GameConstants.SCALE > GameConstants.MAX_SCALE) {\r\n      GameConstants.SCALE = GameConstants.MAX_SCALE;\r\n    }\r\n  };\r\n\r\n  static readonly INCREASE_SCALE = () => {\r\n    if (GameConstants.SCALE < GameConstants.MAX_SCALE) {\r\n      GameConstants.SCALE++;\r\n      if (GameConstants.SCALE > GameConstants.MAX_SCALE) {\r\n        GameConstants.SCALE = GameConstants.MAX_SCALE;\r\n      }\r\n    }\r\n  };\r\n\r\n  static readonly DECREASE_SCALE = () => {\r\n    if (GameConstants.SCALE > GameConstants.MIN_SCALE) {\r\n      GameConstants.SCALE--;\r\n      if (GameConstants.SCALE < GameConstants.MIN_SCALE) {\r\n        GameConstants.SCALE = GameConstants.MIN_SCALE;\r\n      }\r\n    }\r\n  };\r\n\r\n  static readonly FIND_SCALE = (isMobile: boolean) => {\r\n    let bestScale = GameConstants.MIN_SCALE;\r\n    let bestDifference = Infinity;\r\n    const measure =\r\n      !isMobile || screen.orientation.type === \"landscape-primary\"\r\n        ? window.innerHeight\r\n        : window.innerWidth;\r\n    const dimension = measure * window.devicePixelRatio;\r\n    const tileMeasure = isMobile ? 8 : 12;\r\n\r\n    for (let i = GameConstants.MIN_SCALE; i <= GameConstants.MAX_SCALE; i++) {\r\n      const tiles = dimension / (i * GameConstants.TILESIZE);\r\n      const difference = Math.abs(tiles - tileMeasure);\r\n\r\n      if (difference < bestDifference) {\r\n        bestDifference = difference;\r\n        bestScale = i;\r\n      }\r\n    }\r\n\r\n    return bestScale;\r\n  };\r\n\r\n  static readonly STARTING_INVENTORY = [Dagger, Candle];\r\n  static readonly STARTING_DEV_INVENTORY = [\r\n    Dagger,\r\n    Torch,\r\n    Sword,\r\n    Spear,\r\n    GodStone,\r\n    Spellbook,\r\n    FishingRod,\r\n    Armor,\r\n    Backpack,\r\n    Hammer,\r\n    Spellbook,\r\n    WoodenShield,\r\n    BlueGem,\r\n    OrangeGem,\r\n    RedGem,\r\n    GarnetRing,\r\n    BombItem,\r\n    BombItem,\r\n    BombItem,\r\n    IronOre,\r\n    GoldOre,\r\n    GoldOre,\r\n    GoldOre,\r\n    GoldOre,\r\n    GoldOre,\r\n    GoldOre,\r\n    GoldOre,\r\n  ];\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Candle } from \"../../item/light/candle\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class DarkVase extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 9;\r\n    this.tileY = 6;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"dark vase\";\r\n\r\n    this.hitSound = Sound.potSmash;\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 29;\r\n\r\n    let dropProb = Random.rand();\r\n    //if (dropProb < 0.025) this.drops.push(new Heart(this.room, this.x, this.y));\r\n    //else this.drops.push(new Coin(this.room, this.x, this.y));\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","/*! Axios v1.12.2 Copyright (c) 2025 Matt Zabriskie and contributors */\n'use strict';\n\nfunction bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\nconst {iterator, toStringTag} = Symbol;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n};\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction$1(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction$1 = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(toStringTag in val) && !(iterator in val);\n};\n\n/**\n * Determine if a value is an empty object (safely handles Buffers)\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an empty object, otherwise false\n */\nconst isEmptyObject = (val) => {\n  // Early return for non-objects or Buffers to prevent RangeError\n  if (!isObject(val) || isBuffer(val)) {\n    return false;\n  }\n\n  try {\n    return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;\n  } catch (e) {\n    // Fallback for any other objects that might cause RangeError with Object.keys()\n    return false;\n  }\n};\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction$1(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction$1(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction$1(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n};\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\nconst [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Buffer check\n    if (isBuffer(obj)) {\n      return;\n    }\n\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  if (isBuffer(obj)){\n    return null;\n  }\n\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless, skipUndefined} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else if (!skipUndefined || !isUndefined(val)) {\n      result[targetKey] = val;\n    }\n  };\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction$1(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n};\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n};\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n};\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n};\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n};\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n};\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[iterator];\n\n  const _iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = _iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n};\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n};\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n};\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction$1(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction$1(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n};\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  };\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n};\n\nconst noop = () => {};\n\nconst toFiniteNumber = (value, defaultValue) => {\n  return value != null && Number.isFinite(value = +value) ? value : defaultValue;\n};\n\n\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction$1(thing.append) && thing[toStringTag] === 'FormData' && thing[iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      //Buffer check\n      if (isBuffer(source)) {\n        return source;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  };\n\n  return visit(obj, 0);\n};\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction$1(thing)) && isFunction$1(thing.then) && isFunction$1(thing.catch);\n\n// original code\n// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34\n\nconst _setImmediate = ((setImmediateSupported, postMessageSupported) => {\n  if (setImmediateSupported) {\n    return setImmediate;\n  }\n\n  return postMessageSupported ? ((token, callbacks) => {\n    _global.addEventListener(\"message\", ({source, data}) => {\n      if (source === _global && data === token) {\n        callbacks.length && callbacks.shift()();\n      }\n    }, false);\n\n    return (cb) => {\n      callbacks.push(cb);\n      _global.postMessage(token, \"*\");\n    }\n  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);\n})(\n  typeof setImmediate === 'function',\n  isFunction$1(_global.postMessage)\n);\n\nconst asap = typeof queueMicrotask !== 'undefined' ?\n  queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);\n\n// *********************\n\n\nconst isIterable = (thing) => thing != null && isFunction$1(thing[iterator]);\n\n\nvar utils$1 = {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isEmptyObject,\n  isReadableStream,\n  isRequest,\n  isResponse,\n  isHeaders,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction: isFunction$1,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable,\n  setImmediate: _setImmediate,\n  asap,\n  isIterable\n};\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  if (response) {\n    this.response = response;\n    this.status = response.status ? response.status : null;\n  }\n}\n\nutils$1.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils$1.toJSONObject(this.config),\n      code: this.code,\n      status: this.status\n    };\n  }\n});\n\nconst prototype$1 = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype$1, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype$1);\n\n  utils$1.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  const msg = error && error.message ? error.message : 'Error';\n\n  // Prefer explicit code; otherwise copy the low-level error's code (e.g. ECONNREFUSED)\n  const errCode = code == null && error ? error.code : code;\n  AxiosError.call(axiosError, msg, errCode, config, request, response);\n\n  // Chain the original error on the standard field; non-enumerable to avoid JSON noise\n  if (error && axiosError.cause == null) {\n    Object.defineProperty(axiosError, 'cause', { value: error, configurable: true });\n  }\n\n  axiosError.name = (error && error.name) || 'Error';\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\n// eslint-disable-next-line strict\nvar httpAdapter = null;\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils$1.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils$1.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils$1.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils$1.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils$1.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);\n\n  if (!utils$1.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils$1.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (utils$1.isBoolean(value)) {\n      return value.toString();\n    }\n\n    if (!useBlob && utils$1.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils$1.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils$1.isArray(value) && isFlatArray(value)) ||\n        ((utils$1.isFileList(value) || utils$1.endsWith(key, '[]')) && (arr = utils$1.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils$1.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils$1.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils$1.forEach(value, function each(el, key) {\n      const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils$1.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode$1(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode$1);\n  } : encode$1;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?(object|Function)} options\n *\n * @returns {string} The formatted url\n */\nfunction buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  if (utils$1.isFunction(options)) {\n    options = {\n      serialize: options\n    };\n  } \n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils$1.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils$1.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nvar InterceptorManager$1 = InterceptorManager;\n\nvar transitionalDefaults = {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n\nvar URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n\nvar FormData$1 = typeof FormData !== 'undefined' ? FormData : null;\n\nvar Blob$1 = typeof Blob !== 'undefined' ? Blob : null;\n\nvar platform$1 = {\n  isBrowser: true,\n  classes: {\n    URLSearchParams: URLSearchParams$1,\n    FormData: FormData$1,\n    Blob: Blob$1\n  },\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n\nconst hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nconst _navigator = typeof navigator === 'object' && navigator || undefined;\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst hasStandardBrowserEnv = hasBrowserEnv &&\n  (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\nconst origin = hasBrowserEnv && window.location.href || 'http://localhost';\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  hasBrowserEnv: hasBrowserEnv,\n  hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,\n  hasStandardBrowserEnv: hasStandardBrowserEnv,\n  navigator: _navigator,\n  origin: origin\n});\n\nvar platform = {\n  ...utils,\n  ...platform$1\n};\n\nfunction toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), {\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils$1.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    },\n    ...options\n  });\n}\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils$1.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n\n    if (name === '__proto__') return true;\n\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils$1.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils$1.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils$1.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils$1.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils$1.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils$1.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils$1.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http', 'fetch'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils$1.isObject(data);\n\n    if (isObjectPayload && utils$1.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils$1.isFormData(data);\n\n    if (isFormData) {\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils$1.isArrayBuffer(data) ||\n      utils$1.isBuffer(data) ||\n      utils$1.isStream(data) ||\n      utils$1.isFile(data) ||\n      utils$1.isBlob(data) ||\n      utils$1.isReadableStream(data)\n    ) {\n      return data;\n    }\n    if (utils$1.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils$1.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {\n      return data;\n    }\n\n    if (data && utils$1.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data, this.parseReviver);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': undefined\n    }\n  }\n};\n\nutils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {\n  defaults.headers[method] = {};\n});\n\nvar defaults$1 = defaults;\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils$1.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nvar parseHeaders = rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils$1.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils$1.isString(value)) return;\n\n  if (utils$1.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils$1.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils$1.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils$1.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite);\n    } else if(utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else if (utils$1.isObject(header) && utils$1.isIterable(header)) {\n      let obj = {}, dest, key;\n      for (const entry of header) {\n        if (!utils$1.isArray(entry)) {\n          throw TypeError('Object iterator must return a key-value pair');\n        }\n\n        obj[key = entry[0]] = (dest = obj[key]) ?\n          (utils$1.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]]) : entry[1];\n      }\n\n      setHeaders(obj, valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils$1.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils$1.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils$1.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils$1.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils$1.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils$1.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils$1.forEach(this, (value, header) => {\n      const key = utils$1.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils$1.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  getSetCookie() {\n    return this.get(\"set-cookie\") || [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\n// reserved names hotfix\nutils$1.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  }\n});\n\nutils$1.freezeMethods(AxiosHeaders);\n\nvar AxiosHeaders$1 = AxiosHeaders;\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nfunction transformData(fns, response) {\n  const config = this || defaults$1;\n  const context = response || config;\n  const headers = AxiosHeaders$1.from(context.headers);\n  let data = context.data;\n\n  utils$1.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n\nfunction isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils$1.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nfunction settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n\nfunction parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\n/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  let threshold = 1000 / freq;\n  let lastArgs;\n  let timer;\n\n  const invoke = (args, now = Date.now()) => {\n    timestamp = now;\n    lastArgs = null;\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    fn(...args);\n  };\n\n  const throttled = (...args) => {\n    const now = Date.now();\n    const passed = now - timestamp;\n    if ( passed >= threshold) {\n      invoke(args, now);\n    } else {\n      lastArgs = args;\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          invoke(lastArgs);\n        }, threshold - passed);\n      }\n    }\n  };\n\n  const flush = () => lastArgs && invoke(lastArgs);\n\n  return [throttled, flush];\n}\n\nconst progressEventReducer = (listener, isDownloadStream, freq = 3) => {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return throttle(e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e,\n      lengthComputable: total != null,\n      [isDownloadStream ? 'download' : 'upload']: true\n    };\n\n    listener(data);\n  }, freq);\n};\n\nconst progressEventDecorator = (total, throttled) => {\n  const lengthComputable = total != null;\n\n  return [(loaded) => throttled[0]({\n    lengthComputable,\n    total,\n    loaded\n  }), throttled[1]];\n};\n\nconst asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));\n\nvar isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin, isMSIE) => (url) => {\n  url = new URL(url, platform.origin);\n\n  return (\n    origin.protocol === url.protocol &&\n    origin.host === url.host &&\n    (isMSIE || origin.port === url.port)\n  );\n})(\n  new URL(platform.origin),\n  platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)\n) : () => true;\n\nvar cookies = platform.hasStandardBrowserEnv ?\n\n  // Standard browser envs support document.cookie\n  {\n    write(name, value, expires, path, domain, secure) {\n      const cookie = [name + '=' + encodeURIComponent(value)];\n\n      utils$1.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());\n\n      utils$1.isString(path) && cookie.push('path=' + path);\n\n      utils$1.isString(domain) && cookie.push('domain=' + domain);\n\n      secure === true && cookie.push('secure');\n\n      document.cookie = cookie.join('; ');\n    },\n\n    read(name) {\n      const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n      return (match ? decodeURIComponent(match[3]) : null);\n    },\n\n    remove(name) {\n      this.write(name, '', Date.now() - 86400000);\n    }\n  }\n\n  :\n\n  // Non-standard browser env (web workers, react-native) lack needed support.\n  {\n    write() {},\n    read() {\n      return null;\n    },\n    remove() {}\n  };\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nfunction isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nfunction combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/?\\/$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nfunction buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {\n  let isRelativeUrl = !isAbsoluteURL(requestedURL);\n  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nfunction mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, prop, caseless) {\n    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {\n      return utils$1.merge.call({caseless}, target, source);\n    } else if (utils$1.isPlainObject(source)) {\n      return utils$1.merge({}, source);\n    } else if (utils$1.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, prop , caseless) {\n    if (!utils$1.isUndefined(b)) {\n      return getMergedValue(a, b, prop , caseless);\n    } else if (!utils$1.isUndefined(a)) {\n      return getMergedValue(undefined, a, prop , caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils$1.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils$1.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils$1.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b , prop) => mergeDeepProperties(headersToObject(a), headersToObject(b),prop, true)\n  };\n\n  utils$1.forEach(Object.keys({...config1, ...config2}), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils$1.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n\nvar resolveConfig = (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders$1.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  if (utils$1.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // browser handles it\n    } else if (utils$1.isFunction(data.getHeaders)) {\n      // Node.js FormData (like form-data package)\n      const formHeaders = data.getHeaders();\n      // Only set safe headers to avoid overwriting security headers\n      const allowedHeaders = ['content-type', 'content-length'];\n      Object.entries(formHeaders).forEach(([key, val]) => {\n        if (allowedHeaders.includes(key.toLowerCase())) {\n          headers.set(key, val);\n        }\n      });\n    }\n  }  \n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n};\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nvar xhrAdapter = isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = resolveConfig(config);\n    let requestData = _config.data;\n    const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();\n    let {responseType, onUploadProgress, onDownloadProgress} = _config;\n    let onCanceled;\n    let uploadThrottled, downloadThrottled;\n    let flushUpload, flushDownload;\n\n    function done() {\n      flushUpload && flushUpload(); // flush events\n      flushDownload && flushDownload(); // flush events\n\n      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);\n\n      _config.signal && _config.signal.removeEventListener('abort', onCanceled);\n    }\n\n    let request = new XMLHttpRequest();\n\n    request.open(_config.method.toUpperCase(), _config.url, true);\n\n    // Set the request timeout in MS\n    request.timeout = _config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders$1.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n  request.onerror = function handleError(event) {\n       // Browsers deliver a ProgressEvent in XHR onerror\n       // (message may be empty; when present, surface it)\n       // See https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/error_event\n       const msg = event && event.message ? event.message : 'Network Error';\n       const err = new AxiosError(msg, AxiosError.ERR_NETWORK, config, request);\n       // attach the underlying event for consumers who want details\n       err.event = event || null;\n       reject(err);\n       request = null;\n    };\n    \n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || transitionalDefaults;\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils$1.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    }\n\n    // Handle progress if needed\n    if (onDownloadProgress) {\n      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));\n      request.addEventListener('progress', downloadThrottled);\n    }\n\n    // Not all browsers support upload events\n    if (onUploadProgress && request.upload) {\n      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));\n\n      request.upload.addEventListener('progress', uploadThrottled);\n\n      request.upload.addEventListener('loadend', flushUpload);\n    }\n\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(_config.url);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n};\n\nconst composeSignals = (signals, timeout) => {\n  const {length} = (signals = signals ? signals.filter(Boolean) : []);\n\n  if (timeout || length) {\n    let controller = new AbortController();\n\n    let aborted;\n\n    const onabort = function (reason) {\n      if (!aborted) {\n        aborted = true;\n        unsubscribe();\n        const err = reason instanceof Error ? reason : this.reason;\n        controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n      }\n    };\n\n    let timer = timeout && setTimeout(() => {\n      timer = null;\n      onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));\n    }, timeout);\n\n    const unsubscribe = () => {\n      if (signals) {\n        timer && clearTimeout(timer);\n        timer = null;\n        signals.forEach(signal => {\n          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);\n        });\n        signals = null;\n      }\n    };\n\n    signals.forEach((signal) => signal.addEventListener('abort', onabort));\n\n    const {signal} = controller;\n\n    signal.unsubscribe = () => utils$1.asap(unsubscribe);\n\n    return signal;\n  }\n};\n\nvar composeSignals$1 = composeSignals;\n\nconst streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n};\n\nconst readBytes = async function* (iterable, chunkSize) {\n  for await (const chunk of readStream(iterable)) {\n    yield* streamChunk(chunk, chunkSize);\n  }\n};\n\nconst readStream = async function* (stream) {\n  if (stream[Symbol.asyncIterator]) {\n    yield* stream;\n    return;\n  }\n\n  const reader = stream.getReader();\n  try {\n    for (;;) {\n      const {done, value} = await reader.read();\n      if (done) {\n        break;\n      }\n      yield value;\n    }\n  } finally {\n    await reader.cancel();\n  }\n};\n\nconst trackStream = (stream, chunkSize, onProgress, onFinish) => {\n  const iterator = readBytes(stream, chunkSize);\n\n  let bytes = 0;\n  let done;\n  let _onFinish = (e) => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  };\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {done, value} = await iterator.next();\n\n        if (done) {\n         _onFinish();\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n        throw err;\n      }\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n};\n\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\n\nconst {isFunction} = utils$1;\n\nconst globalFetchAPI = (({Request, Response}) => ({\n  Request, Response\n}))(utils$1.global);\n\nconst {\n  ReadableStream: ReadableStream$1, TextEncoder\n} = utils$1.global;\n\n\nconst test = (fn, ...args) => {\n  try {\n    return !!fn(...args);\n  } catch (e) {\n    return false\n  }\n};\n\nconst factory = (env) => {\n  env = utils$1.merge.call({\n    skipUndefined: true\n  }, globalFetchAPI, env);\n\n  const {fetch: envFetch, Request, Response} = env;\n  const isFetchSupported = envFetch ? isFunction(envFetch) : typeof fetch === 'function';\n  const isRequestSupported = isFunction(Request);\n  const isResponseSupported = isFunction(Response);\n\n  if (!isFetchSupported) {\n    return false;\n  }\n\n  const isReadableStreamSupported = isFetchSupported && isFunction(ReadableStream$1);\n\n  const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?\n      ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :\n      async (str) => new Uint8Array(await new Request(str).arrayBuffer())\n  );\n\n  const supportsRequestStream = isRequestSupported && isReadableStreamSupported && test(() => {\n    let duplexAccessed = false;\n\n    const hasContentType = new Request(platform.origin, {\n      body: new ReadableStream$1(),\n      method: 'POST',\n      get duplex() {\n        duplexAccessed = true;\n        return 'half';\n      },\n    }).headers.has('Content-Type');\n\n    return duplexAccessed && !hasContentType;\n  });\n\n  const supportsResponseStream = isResponseSupported && isReadableStreamSupported &&\n    test(() => utils$1.isReadableStream(new Response('').body));\n\n  const resolvers = {\n    stream: supportsResponseStream && ((res) => res.body)\n  };\n\n  isFetchSupported && ((() => {\n    ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n      !resolvers[type] && (resolvers[type] = (res, config) => {\n        let method = res && res[type];\n\n        if (method) {\n          return method.call(res);\n        }\n\n        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n      });\n    });\n  })());\n\n  const getBodyLength = async (body) => {\n    if (body == null) {\n      return 0;\n    }\n\n    if (utils$1.isBlob(body)) {\n      return body.size;\n    }\n\n    if (utils$1.isSpecCompliantForm(body)) {\n      const _request = new Request(platform.origin, {\n        method: 'POST',\n        body,\n      });\n      return (await _request.arrayBuffer()).byteLength;\n    }\n\n    if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {\n      return body.byteLength;\n    }\n\n    if (utils$1.isURLSearchParams(body)) {\n      body = body + '';\n    }\n\n    if (utils$1.isString(body)) {\n      return (await encodeText(body)).byteLength;\n    }\n  };\n\n  const resolveBodyLength = async (headers, body) => {\n    const length = utils$1.toFiniteNumber(headers.getContentLength());\n\n    return length == null ? getBodyLength(body) : length;\n  };\n\n  return async (config) => {\n    let {\n      url,\n      method,\n      data,\n      signal,\n      cancelToken,\n      timeout,\n      onDownloadProgress,\n      onUploadProgress,\n      responseType,\n      headers,\n      withCredentials = 'same-origin',\n      fetchOptions\n    } = resolveConfig(config);\n\n    let _fetch = envFetch || fetch;\n\n    responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n\n    let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);\n\n    let request = null;\n\n    const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {\n      composedSignal.unsubscribe();\n    });\n\n    let requestContentLength;\n\n    try {\n      if (\n        onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&\n        (requestContentLength = await resolveBodyLength(headers, data)) !== 0\n      ) {\n        let _request = new Request(url, {\n          method: 'POST',\n          body: data,\n          duplex: \"half\"\n        });\n\n        let contentTypeHeader;\n\n        if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n          headers.setContentType(contentTypeHeader);\n        }\n\n        if (_request.body) {\n          const [onProgress, flush] = progressEventDecorator(\n            requestContentLength,\n            progressEventReducer(asyncDecorator(onUploadProgress))\n          );\n\n          data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n        }\n      }\n\n      if (!utils$1.isString(withCredentials)) {\n        withCredentials = withCredentials ? 'include' : 'omit';\n      }\n\n      // Cloudflare Workers throws when credentials are defined\n      // see https://github.com/cloudflare/workerd/issues/902\n      const isCredentialsSupported = isRequestSupported && \"credentials\" in Request.prototype;\n\n      const resolvedOptions = {\n        ...fetchOptions,\n        signal: composedSignal,\n        method: method.toUpperCase(),\n        headers: headers.normalize().toJSON(),\n        body: data,\n        duplex: \"half\",\n        credentials: isCredentialsSupported ? withCredentials : undefined\n      };\n\n      request = isRequestSupported && new Request(url, resolvedOptions);\n\n      let response = await (isRequestSupported ? _fetch(request, fetchOptions) : _fetch(url, resolvedOptions));\n\n      const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n\n      if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {\n        const options = {};\n\n        ['status', 'statusText', 'headers'].forEach(prop => {\n          options[prop] = response[prop];\n        });\n\n        const responseContentLength = utils$1.toFiniteNumber(response.headers.get('content-length'));\n\n        const [onProgress, flush] = onDownloadProgress && progressEventDecorator(\n          responseContentLength,\n          progressEventReducer(asyncDecorator(onDownloadProgress), true)\n        ) || [];\n\n        response = new Response(\n          trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {\n            flush && flush();\n            unsubscribe && unsubscribe();\n          }),\n          options\n        );\n      }\n\n      responseType = responseType || 'text';\n\n      let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || 'text'](response, config);\n\n      !isStreamResponse && unsubscribe && unsubscribe();\n\n      return await new Promise((resolve, reject) => {\n        settle(resolve, reject, {\n          data: responseData,\n          headers: AxiosHeaders$1.from(response.headers),\n          status: response.status,\n          statusText: response.statusText,\n          config,\n          request\n        });\n      })\n    } catch (err) {\n      unsubscribe && unsubscribe();\n\n      if (err && err.name === 'TypeError' && /Load failed|fetch/i.test(err.message)) {\n        throw Object.assign(\n          new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),\n          {\n            cause: err.cause || err\n          }\n        )\n      }\n\n      throw AxiosError.from(err, err && err.code, config, request);\n    }\n  }\n};\n\nconst seedCache = new Map();\n\nconst getFetch = (config) => {\n  let env = config ? config.env : {};\n  const {fetch, Request, Response} = env;\n  const seeds = [\n    Request, Response, fetch\n  ];\n\n  let len = seeds.length, i = len,\n    seed, target, map = seedCache;\n\n  while (i--) {\n    seed = seeds[i];\n    target = map.get(seed);\n\n    target === undefined && map.set(seed, target = (i ? new Map() : factory(env)));\n\n    map = target;\n  }\n\n  return target;\n};\n\ngetFetch();\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter,\n  fetch: {\n    get: getFetch,\n  }\n};\n\nutils$1.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nconst renderReason = (reason) => `- ${reason}`;\n\nconst isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;\n\nvar adapters = {\n  getAdapter: (adapters, config) => {\n    adapters = utils$1.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    const rejectedReasons = {};\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n\n      adapter = nameOrAdapter;\n\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n\n        if (adapter === undefined) {\n          throw new AxiosError(`Unknown adapter '${id}'`);\n        }\n      }\n\n      if (adapter && (utils$1.isFunction(adapter) || (adapter = adapter.get(config)))) {\n        break;\n      }\n\n      rejectedReasons[id || '#' + i] = adapter;\n    }\n\n    if (!adapter) {\n\n      const reasons = Object.entries(rejectedReasons)\n        .map(([id, state]) => `adapter ${id} ` +\n          (state === false ? 'is not supported by the environment' : 'is not available in the build')\n        );\n\n      let s = length ?\n        (reasons.length > 1 ? 'since :\\n' + reasons.map(renderReason).join('\\n') : ' ' + renderReason(reasons[0])) :\n        'as no adapter specified';\n\n      throw new AxiosError(\n        `There is no suitable adapter to dispatch the request ` + s,\n        'ERR_NOT_SUPPORT'\n      );\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n};\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nfunction dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders$1.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter, config);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders$1.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n\nconst VERSION = \"1.12.2\";\n\nconst validators$1 = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators$1[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators$1.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\nvalidators$1.spelling = function spelling(correctSpelling) {\n  return (value, opt) => {\n    // eslint-disable-next-line no-console\n    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);\n    return true;\n  }\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nvar validator = {\n  assertOptions,\n  validators: validators$1\n};\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig || {};\n    this.interceptors = {\n      request: new InterceptorManager$1(),\n      response: new InterceptorManager$1()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy = {};\n\n        Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n        try {\n          if (!err.stack) {\n            err.stack = stack;\n            // match without the 2 top stack lines\n          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n            err.stack += '\\n' + stack;\n          }\n        } catch (e) {\n          // ignore the case where \"stack\" is an un-writable property\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils$1.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        };\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.allowAbsoluteUrls\n    if (config.allowAbsoluteUrls !== undefined) ; else if (this.defaults.allowAbsoluteUrls !== undefined) {\n      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;\n    } else {\n      config.allowAbsoluteUrls = true;\n    }\n\n    validator.assertOptions(config, {\n      baseUrl: validators.spelling('baseURL'),\n      withXsrfToken: validators.spelling('withXSRFToken')\n    }, true);\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils$1.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils$1.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders$1.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift(...requestInterceptorChain);\n      chain.push(...responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nvar Axios$1 = Axios;\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  toAbortSignal() {\n    const controller = new AbortController();\n\n    const abort = (err) => {\n      controller.abort(err);\n    };\n\n    this.subscribe(abort);\n\n    controller.signal.unsubscribe = () => this.unsubscribe(abort);\n\n    return controller.signal;\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nvar CancelToken$1 = CancelToken;\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nfunction spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nfunction isAxiosError(payload) {\n  return utils$1.isObject(payload) && (payload.isAxiosError === true);\n}\n\nconst HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nvar HttpStatusCode$1 = HttpStatusCode;\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios$1(defaultConfig);\n  const instance = bind(Axios$1.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils$1.extend(instance, Axios$1.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils$1.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults$1);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios$1;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken$1;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders$1;\n\naxios.formToJSON = thing => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.getAdapter = adapters.getAdapter;\n\naxios.HttpStatusCode = HttpStatusCode$1;\n\naxios.default = axios;\n\nmodule.exports = axios;\n//# sourceMappingURL=axios.cjs.map\n","import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { StunAnimation } from \"../../projectile/stunAnimation\";\r\n\r\nexport class RookEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  static difficulty: number = 4;\r\n  static tileX: number = 23 + 28;\r\n  static tileY: number = 8;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 23 + 28;\r\n    this.tileY = 8;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.name = \"rook\";\r\n    this.orthogonalAttack = true;\r\n    this.diagonalAttack = false;\r\n    this.jumpHeight = 0.5;\r\n    if (drop) this.drop = drop;\r\n    this.armored = true;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      this.ticks++;\r\n      if (!this.seenPlayer) {\r\n        let p = this.nearestPlayer();\r\n        if (p !== false) {\r\n          let [distance, player] = p;\r\n          if (distance <= 4) {\r\n            this.targetPlayer = player;\r\n            this.facePlayer(player);\r\n            this.seenPlayer = true;\r\n            if (player === this.game.players[this.game.localPlayerID])\r\n              this.alertTicks = 1;\r\n            this.makeHitWarnings();\r\n          }\r\n        }\r\n      } else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n            }\r\n          }\r\n          for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n              if (\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                // don't walk on active spiketraps\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n          let grid = [];\r\n          for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n            grid[x] = [];\r\n            for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n              if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                grid[x][y] = this.room.roomArray[x][y];\r\n              else grid[x][y] = false;\r\n            }\r\n          }\r\n\r\n          let moves = astar.AStar.search(\r\n            grid,\r\n            this,\r\n            this.targetPlayer,\r\n            disablePositions,\r\n            false, //diagonals\r\n            false, //diagonalsOnly\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            false, //diagonalsOmni\r\n            this.lastPlayerPos,\r\n          );\r\n          if (this.justHurt) {\r\n            //this.retreat(oldX, oldY);\r\n            //this.stun();\r\n            this.justHurt = false;\r\n          } else if (moves.length > 0 && !this.unconscious) {\r\n            let moveX = moves[0].pos.x;\r\n\r\n            let moveY = moves[0].pos.y;\r\n\r\n            let hitPlayer = false;\r\n            for (const i in this.game.players) {\r\n              if (\r\n                this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                this.game.players[i].x === moveX &&\r\n                this.game.players[i].y === moveY\r\n              ) {\r\n                this.game.players[i].hurt(this.hit(), this.name);\r\n                this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                if (\r\n                  this.game.players[i] ===\r\n                  this.game.players[this.game.localPlayerID]\r\n                )\r\n                  this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n              }\r\n            }\r\n\r\n            if (!hitPlayer) {\r\n              this.tryMove(moveX, moveY);\r\n              this.setDrawXY(oldX, oldY);\r\n            }\r\n          }\r\n          this.makeHitWarnings();\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.makeHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    let offsetTileY = this.health <= 1 || this.cloned === true ? 2 : 0;\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX + Math.floor(this.frame),\r\n        this.tileY, // + offsetTileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Stone } from \"../../item/resource/stone\";\r\nimport { Resource } from \"./resource\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Geode } from \"../../item/resource/geode\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class ObsidianResource extends Resource {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 2;\r\n    this.tileX = 8;\r\n    this.tileY = 4;\r\n    this.hasShadow = false;\r\n    this.chainPushable = false;\r\n    this.name = \"obsidian\";\r\n    if (Random.rand() < 0.025) {\r\n      this.drops.push(new Geode(this.room, this.x, this.y));\r\n    }\r\n    //this.drops.push(new Stone(this.room, this.x, this.y));\r\n  }\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Usable } from \"./usable\";\r\n\r\nexport class BluePotion extends Usable {\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.tileX = 9;\r\n    this.tileY = 0;\r\n    this.offsetY = -0.3;\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    player.health = Math.min(player.maxHealth, player.health + 1);\r\n    if (this.level.game.rooms[player.levelID] === this.level.game.room)\r\n      Sound.heal();\r\n    player.inventory.removeItem(this);\r\n\r\n    //this.level.items = this.level.items.filter((x) => x !== this); // removes itself from the level\r\n  };\r\n\r\n  getDescription = () => {\r\n    return \"HEALTH POTION\\nRestores 1 heart\";\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Enemy } from \"./enemy\";\r\n\r\nexport class QueenEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  static difficulty: number = 4;\r\n  static tileX: number = 23;\r\n  static tileY: number = 8;\r\n  justHurt: boolean = false;\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 2;\r\n    this.maxHealth = 2;\r\n    this.defaultMaxHealth = 2;\r\n    this.tileX = 23;\r\n    this.tileY = 10;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.destroyableByOthers = false;\r\n    this.name = \"queen\";\r\n    this.orthogonalAttack = true;\r\n    this.diagonalAttack = true;\r\n    this.jumpHeight = 1;\r\n    this.imageParticleX = 6;\r\n    this.imageParticleY = 28; //includes crown particle\r\n    if (drop) this.drop = drop;\r\n    this.armored = true;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    if (this.health <= 1) this.imageParticleY = 29; //no crown particle\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      this.ticks++;\r\n      if (!this.seenPlayer) {\r\n        this.justHurt = false;\r\n\r\n        let p = this.nearestPlayer();\r\n        if (p !== false) {\r\n          let [distance, player] = p;\r\n          if (distance <= 4) {\r\n            this.targetPlayer = player;\r\n            this.facePlayer(player);\r\n            this.seenPlayer = true;\r\n            if (player === this.game.players[this.game.localPlayerID])\r\n              this.alertTicks = 1;\r\n            this.makeHitWarnings();\r\n          }\r\n        }\r\n      } else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n            }\r\n          }\r\n          for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n              if (\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                // don't walk on active spiketraps\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n          let grid = [];\r\n          for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n            grid[x] = [];\r\n            for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n              if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                grid[x][y] = this.room.roomArray[x][y];\r\n              else grid[x][y] = false;\r\n            }\r\n          }\r\n          let moves = astar.AStar.search(\r\n            grid,\r\n            this,\r\n            this.targetPlayer,\r\n            disablePositions,\r\n            true, //diagonals\r\n            false, //diagonalsOnly\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            false, //diagonalsOmni\r\n          );\r\n          if (this.justHurt) {\r\n            this.retreat(oldX, oldY);\r\n          } else if (moves.length > 0) {\r\n            disablePositions.push({ x: oldX + 1, y: oldY } as astar.Position);\r\n            disablePositions.push({ x: oldX - 1, y: oldY } as astar.Position);\r\n            disablePositions.push({ x: oldX, y: oldY + 1 } as astar.Position);\r\n            disablePositions.push({ x: oldX, y: oldY - 1 } as astar.Position);\r\n            let moveX = moves[0].pos.x;\r\n            let moveY = moves[0].pos.y;\r\n\r\n            let hitPlayer = false;\r\n            for (const i in this.game.players) {\r\n              if (\r\n                this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                this.game.players[i].x === moveX &&\r\n                this.game.players[i].y === moveY\r\n              ) {\r\n                this.game.players[i].hurt(this.hit(), this.name);\r\n                this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                if (\r\n                  this.game.players[i] ===\r\n                  this.game.players[this.game.localPlayerID]\r\n                )\r\n                  this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n              }\r\n            }\r\n            if (!hitPlayer) {\r\n              //if ()\r\n              this.tryMove(moveX, moveY);\r\n              this.setDrawXY(oldX, oldY);\r\n            }\r\n          }\r\n          this.makeHitWarnings();\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.makeHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  jump = (delta: number) => {\r\n    let j = Math.max(Math.abs(this.drawX), Math.abs(this.drawY));\r\n\r\n    let jumpY = Math.abs(Math.sin(j * Math.PI)) * this.jumpHeight;\r\n    if (jumpY < 0.01) jumpY = 0;\r\n    if (jumpY > this.jumpHeight) jumpY = this.jumpHeight;\r\n    this.jumpY = jumpY;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    let offsetTileY = this.health <= 1 ? 0 : -2;\r\n    if (this.cloned) offsetTileY = 0;\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX + Math.floor(this.frame),\r\n        this.tileY + offsetTileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount() * (1 + this.jumpY / 3),\r\n      );\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Weapon } from \"./weapon\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Direction } from \"../../game\";\r\n\r\nexport class Sword extends Weapon {\r\n  static itemName = \"sword\";\r\n  hitDelay: number;\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 28;\r\n    this.tileY = 2;\r\n    this.damage = 1;\r\n    this.name = \"sword\";\r\n    //this.hitDelay = 150;\r\n    this.degradeable = false;\r\n    this.useCost = 2;\r\n    this.offsetY = -0.5;\r\n    //this.iconOffset = 0.2;\r\n  }\r\n\r\n  hitSound = () => {\r\n    Sound.hit();\r\n    Sound.playShortSlice();\r\n  };\r\n\r\n  weaponMove = (newX: number, newY: number): boolean => {\r\n    let leftCorner = { x: newX, y: newY };\r\n    let rightCorner = { x: newX, y: newY };\r\n\r\n    let positions = [leftCorner, rightCorner];\r\n\r\n    switch (this.wielder.direction) {\r\n      case Direction.DOWN:\r\n        leftCorner.x = newX - 1;\r\n        rightCorner.x = newX + 1;\r\n\r\n        break;\r\n      case Direction.UP:\r\n        leftCorner.x = newX + 1;\r\n        rightCorner.x = newX - 1;\r\n\r\n        break;\r\n      case Direction.LEFT:\r\n        leftCorner.y = newY + 1;\r\n        rightCorner.y = newY - 1;\r\n\r\n        break;\r\n      case Direction.RIGHT:\r\n        leftCorner.y = newY - 1;\r\n        rightCorner.y = newY + 1;\r\n\r\n        break;\r\n    }\r\n\r\n    if (this.checkForPushables(newX, newY)) return true;\r\n\r\n    const hitSomething = this.executeAttack(\r\n      newX,\r\n      newY,\r\n      true,\r\n      this.damage + this.wielder.damageBonus,\r\n      true,\r\n      true,\r\n      true,\r\n      false,\r\n    );\r\n    if (hitSomething) {\r\n      for (const pos of positions) {\r\n        if (\r\n          !this.game.rooms[this.wielder.levelID].roomArray[pos.x][\r\n            pos.y\r\n          ].isSolid()\r\n        ) {\r\n          const damage = this.damage + this.wielder.damageBonus;\r\n          this.hitEntitiesAt(pos.x, pos.y, damage);\r\n        }\r\n      }\r\n      this.game.rooms[this.wielder.levelID].tick(this.wielder);\r\n    }\r\n\r\n    return !hitSomething;\r\n  };\r\n\r\n  shakeScreen = () => {\r\n    //this.wielder.beginSlowMotion();\r\n\r\n    setTimeout(() => {\r\n      //this.wielder.endSlowMotion();\r\n      switch (this.wielder.direction) {\r\n        case Direction.DOWN:\r\n          this.game.shakeScreen(0, -5, false);\r\n          break;\r\n        case Direction.UP:\r\n          this.game.shakeScreen(0, -5, false);\r\n          break;\r\n        case Direction.LEFT:\r\n          this.game.shakeScreen(-5, -5, false);\r\n          break;\r\n        case Direction.RIGHT:\r\n          this.game.shakeScreen(5, -5, false);\r\n          break;\r\n      }\r\n    }, this.hitDelay);\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Usable } from \"../usable/usable\";\r\nimport { Lantern } from \"../light/lantern\";\r\nimport { Light } from \"../light/light\";\r\nimport { Scythe } from \"./scythe\";\r\nimport { ScytheHandle } from \"./scytheHandle\";\r\nimport { ShieldRightFragment } from \"./shieldRightFragment\";\r\nimport { Armor } from \"../armor\";\r\n\r\nexport class ShieldLeftFragment extends Usable {\r\n  static itemName = \"left shield fragment\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 1;\r\n    this.tileY = 2;\r\n    this.stackable = false;\r\n    this.name = ShieldLeftFragment.itemName;\r\n    this.description =\r\n      \"The left fragment of a shield. Find the right fragment to use it.\";\r\n    this.canUseOnOther = true;\r\n  }\r\n\r\n  onDrop = () => {\r\n    if (this.level.game.lastDroppedShieldPiece === \"left\") {\r\n      this.level.game.lastDroppedShieldPiece = null;\r\n      this.level.items.push(\r\n        new ShieldRightFragment(this.level, this.x, this.y),\r\n      );\r\n      this.level.items = this.level.items.filter((item) => item !== this);\r\n    } else if (this.level.game.lastDroppedShieldPiece === null) {\r\n      this.level.game.lastDroppedScythePiece = \"blade\";\r\n    }\r\n  };\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (other instanceof ShieldRightFragment) {\r\n      player.inventory.removeItem(this);\r\n      player.inventory.removeItem(other);\r\n      player.game.pushMessage(\r\n        \"You combine the shield fragments into a shield.\",\r\n      );\r\n      const room = (player as any)?.getRoom\r\n        ? (player as any).getRoom()\r\n        : player.game.rooms[player.levelID];\r\n      const shield = new Armor(room, player.x, player.y);\r\n      player.inventory.addItem(shield);\r\n    }\r\n  };\r\n}\r\n","import { Item } from \"../../item/item\";\r\nimport { Game } from \"../../game\";\r\nimport { Key } from \"../../item/key\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { Armor } from \"../../item/armor\";\r\nimport { GreenGem } from \"../../item/resource/greengem\";\r\nimport { Resource } from \"./resource\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Geode } from \"../../item/resource/geode\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { RedGem } from \"../../item/resource/redgem\";\r\nimport { BlueGem } from \"../../item/resource/bluegem\";\r\nimport { LightSource } from \"../../lighting/lightSource\";\r\n\r\nexport class ZirconResource extends Resource {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n\r\n    this.tileX = 16;\r\n    this.tileY = 0;\r\n    this.health = 3;\r\n    this.name = \"zircon\";\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#0005FF\"; //cyan hex color;\r\n    this.bloomAlpha = 1;\r\n    this.softBloomAlpha = 0;\r\n    if (Random.rand() < 0.025) {\r\n      this.drops.push(new Geode(this.room, this.x, this.y));\r\n    }\r\n    this.drops.push(new BlueGem(this.room, this.x, this.y));\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      7,\r\n      [5, 5, 100], //dark dim blue,\r\n      2,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n  }\r\n}\r\n","import { Game } from \"../game\";\r\nimport { createGameState, loadGameState } from \"./gameState\";\r\nimport {\r\n  getCookieChunks,\r\n  setCookieChunks,\r\n  deleteCookie,\r\n  getCookie,\r\n} from \"../utility/cookies\";\r\n\r\nconst SAVE_PREFIX = \"wr_save\";\r\n\r\nexport const saveToCookies = (game: Game) => {\r\n  const state = createGameState(game);\r\n  const json = JSON.stringify(state);\r\n  // For now, skip compression to avoid adding deps; chunk directly\r\n  setCookieChunks(SAVE_PREFIX, json, 30);\r\n  game.pushMessage?.(\"Saved to cookies.\");\r\n};\r\n\r\nexport const loadFromCookies = async (game: Game): Promise<boolean> => {\r\n  const json = getCookieChunks(SAVE_PREFIX);\r\n  if (!json) {\r\n    game.pushMessage?.(\"No cookie save found.\");\r\n    return false;\r\n  }\r\n  try {\r\n    const state = JSON.parse(json);\r\n    // Ensure local player is considered active so loadGameState selects and sets current room\r\n    const activeUsernames = [game.localPlayerID];\r\n    await loadGameState(game, activeUsernames, state, false);\r\n    game.pushMessage?.(\"Loaded from cookies.\");\r\n    return true;\r\n  } catch (e) {\r\n    console.error(\"Cookie load failed\", e);\r\n    game.pushMessage?.(\"Cookie load failed.\");\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const clearCookieSave = () => {\r\n  try {\r\n    const meta = getCookie(`${SAVE_PREFIX}_meta`);\r\n    const total = meta ? parseInt(meta, 10) : NaN;\r\n    if (Number.isFinite(total) && total > 0) {\r\n      for (let i = 0; i < total; i++) deleteCookie(`${SAVE_PREFIX}_${i}`);\r\n    } else {\r\n      // Try a conservative cleanup of first few chunks if meta is corrupt\r\n      for (let i = 0; i < 32; i++) deleteCookie(`${SAVE_PREFIX}_${i}`);\r\n    }\r\n  } catch {}\r\n  deleteCookie(`${SAVE_PREFIX}_meta`);\r\n};\r\n","import { Room } from \"../room/room\";\r\nimport { Game } from \"../game\";\r\nimport { Tile } from \"./tile\";\r\nimport { FishingSpot } from \"../entity/object/fishingSpot\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\n\r\nexport class MagmaPool extends Tile {\r\n  tileX: number;\r\n  tileY: number;\r\n  topEdge: boolean;\r\n\r\n  constructor(\r\n    room: Room,\r\n    x: number,\r\n    y: number,\r\n    leftEdge: boolean,\r\n    rightEdge: boolean,\r\n    topEdge: boolean,\r\n    bottomEdge: boolean,\r\n  ) {\r\n    super(room, x, y);\r\n\r\n    this.tileX = 24;\r\n    this.tileY = 4;\r\n\r\n    if (leftEdge) this.tileX--;\r\n    else if (rightEdge) this.tileX++;\r\n    if (topEdge) this.tileY--;\r\n    else if (bottomEdge) this.tileY++;\r\n\r\n    this.topEdge = topEdge;\r\n    const lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      0.5,\r\n      [200, 50, 0],\r\n      3,\r\n    );\r\n    this.room.lightSources.push(lightSource);\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#641900\";\r\n    this.bloomAlpha = 1;\r\n  }\r\n\r\n  interact = (): void => {\r\n    this.room.game.pushMessage(\"You jump into the pool.\");\r\n  };\r\n\r\n  isSolid = (): boolean => {\r\n    return true;\r\n  };\r\n  canCrushEnemy = (): boolean => {\r\n    return true;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    Game.drawTile(\r\n      1,\r\n      this.skin,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n    if (this.topEdge)\r\n      Game.drawTile(\r\n        22,\r\n        3,\r\n        1,\r\n        2,\r\n        this.x,\r\n        this.y,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    Game.drawTile(\r\n      this.tileX,\r\n      this.tileY,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n}\r\n","import { Player } from \"./player\";\r\nimport { PlayerAction } from \"./playerAction\";\r\nimport { Game } from \"../game\";\r\n\r\nexport class PlayerActionProcessor {\r\n  private player: Player;\r\n\r\n  constructor(player: Player) {\r\n    this.player = player;\r\n  }\r\n\r\n  process(action: PlayerAction) {\r\n    // Record the action for replay\r\n    try {\r\n      (this.player.game as any).replayManager?.recordAction(action);\r\n    } catch {}\r\n    switch (action.type) {\r\n      case \"Move\":\r\n        this.player.movement.move(\r\n          action.direction,\r\n          action.targetX,\r\n          action.targetY,\r\n        );\r\n        break;\r\n\r\n      case \"MouseMove\":\r\n        this.player.movement.moveMouse(\r\n          action.direction,\r\n          action.targetX,\r\n          action.targetY,\r\n        );\r\n        break;\r\n      case \"OpenInventory\":\r\n        this.player.inventory.open();\r\n        break;\r\n\r\n      case \"CloseInventory\":\r\n        this.player.inventory.close();\r\n        break;\r\n\r\n      case \"InventoryLeft\":\r\n        this.player.inventory.leftQuickbar();\r\n        break;\r\n\r\n      case \"InventoryRight\":\r\n        this.player.inventory.rightQuickbar();\r\n        break;\r\n\r\n      case \"InventoryUse\":\r\n        this.player.inventory.spaceQuickbar();\r\n        break;\r\n\r\n      case \"InventoryDrop\":\r\n        this.player.inventory.drop();\r\n        break;\r\n\r\n      case \"InventorySelect\":\r\n        // Map quickbar selection 0..4 to selX and trigger use\r\n        this.player.inventory.selX = Math.max(\r\n          0,\r\n          Math.min(action.index, this.player.inventory.cols - 1),\r\n        );\r\n        this.player.inventory.selY = 0;\r\n        this.player.inventory.spaceQuickbar();\r\n        break;\r\n      case \"InventoryMove\": {\r\n        const from = Math.max(\r\n          0,\r\n          Math.min(\r\n            action.fromIndex,\r\n            this.player.inventory.cols *\r\n              (this.player.inventory.rows +\r\n                (this.player.inventory as any).expansion) -\r\n              1,\r\n          ),\r\n        );\r\n        const to = Math.max(\r\n          0,\r\n          Math.min(\r\n            action.toIndex,\r\n            this.player.inventory.cols *\r\n              (this.player.inventory.rows +\r\n                (this.player.inventory as any).expansion) -\r\n              1,\r\n          ),\r\n        );\r\n        const item = this.player.inventory.items[from];\r\n        if (item) {\r\n          const existing = this.player.inventory.items[to];\r\n          this.player.inventory.items[from] = existing;\r\n          this.player.inventory.items[to] = item;\r\n        }\r\n        break;\r\n      }\r\n\r\n      case \"Restart\":\r\n        this.player.restart();\r\n        break;\r\n\r\n      case \"Attack\":\r\n        // TODO: Route to PlayerCombat module once it's ready\r\n        console.warn(\"Attack action received but not yet implemented.\");\r\n        break;\r\n\r\n      case \"Interact\":\r\n        this.player.tryMove(action.target.x, action.target.y); // will replace with cleaner interaction API later\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import { Entity, EntityDirection } from \"../entity\";\r\nimport { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { globalEventBus } from \"../../event/eventBus\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { Door } from \"../../tile/door\";\r\nimport { StunAnimation } from \"../../projectile/stunAnimation\";\r\nimport { DownLadder } from \"../../tile/downLadder\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { GameplaySettings } from \"../../game/gameplaySettings\";\r\n\r\nenum EnemyState {\r\n  SLEEP,\r\n  AGGRO,\r\n  ATTACK,\r\n  DEAD,\r\n  IDLE,\r\n}\r\n\r\ninterface EnemyStatus {\r\n  poison: {\r\n    active: boolean;\r\n    hitCount: number;\r\n    startTick: number;\r\n    effectTick: number;\r\n  };\r\n  bleed: {\r\n    active: boolean;\r\n    hitCount: number;\r\n    startTick: number;\r\n    effectTick: number;\r\n  };\r\n}\r\n\r\nexport abstract class Enemy extends Entity {\r\n  seenPlayer: boolean;\r\n  heardPlayer: boolean;\r\n  frame: number;\r\n  ticks: number;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  status: EnemyStatus;\r\n  protected jumpY: number;\r\n  protected jumpHeight: number;\r\n  static difficulty: number = 1;\r\n  private effectStartTick: number;\r\n  private startTick: number;\r\n  private poisonHitCount: number;\r\n  private bleedHitCount: number;\r\n  protected alertRange: number;\r\n  justHurt: boolean = false;\r\n  orthogonalAttack: boolean;\r\n  diagonalAttack: boolean;\r\n  buffed: boolean;\r\n  buffedBefore: boolean;\r\n  baseDamage: number;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.drawYOffset = 1.5;\r\n    this.name = \"\";\r\n    this.seenPlayer = false;\r\n    this.heardPlayer = false;\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.tileX = 17;\r\n    this.tileY = 8;\r\n    this.aggro = false;\r\n    this.jumpY = 0;\r\n    this.jumpHeight = 0.3;\r\n    //this.dir = Direction.South;\r\n    this.name = \"generic enemy\";\r\n    this.dropChance = 10;\r\n    this.status = {\r\n      poison: { active: false, hitCount: 0, startTick: 0, effectTick: 0 },\r\n      bleed: { active: false, hitCount: 0, startTick: 0, effectTick: 0 },\r\n    };\r\n    this.alertRange = GameplaySettings.BASE_ENEMY_ALERT_RANGE;\r\n    this.effectStartTick = 1;\r\n    this.startTick = 1;\r\n    this.isEnemy = true;\r\n    this.poisonHitCount = 0;\r\n    this.bleedHitCount = 0;\r\n    this.drawMoveSpeed = 0.85; //lower is faster\r\n    this.justHurt = false;\r\n    this.orthogonalAttack = false;\r\n    this.diagonalAttack = false;\r\n    this.baseDamage = 1;\r\n    //this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"gem\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  alertNearbyEnemies = () => {\r\n    if (!this.seenPlayer) return;\r\n    const p = this.nearestPlayer();\r\n    if (p === false) return;\r\n    const enemies = this.room.entities.filter((e) => e instanceof Enemy);\r\n    for (const e of enemies) {\r\n      if (e === this) continue;\r\n      const distance = Utils.distance(this.x, this.y, e.x, e.y);\r\n      if (\r\n        distance <= GameplaySettings.BASE_ENEMY_ALERT_NEARBY_RANGE &&\r\n        e instanceof Enemy &&\r\n        !e.seenPlayer &&\r\n        // Do not alert freshly spawned enemies that are skipping their next turn\r\n        e.ticks >= 1\r\n      ) {\r\n        e.handleSeenPlayer(p[1], false);\r\n        e.alertTicks = 2;\r\n      }\r\n    }\r\n  };\r\n\r\n  get damage() {\r\n    return this.buffed ? 2 * this.baseDamage : this.baseDamage;\r\n  }\r\n\r\n  handleEnemyCase = (playerHitBy?: Player) => {\r\n    if (!playerHitBy) return;\r\n    if (playerHitBy) {\r\n      this.aggro = true;\r\n      this.targetPlayer = playerHitBy;\r\n      //this.facePlayer(playerHitBy);\r\n      if (playerHitBy === this.game.players[this.game.localPlayerID])\r\n        this.alertTicks = 2; // this is really 1 tick, it will be decremented immediately in tick()\r\n    }\r\n  };\r\n\r\n  poison = () => {\r\n    if (!this.status.poison.active) {\r\n      this.status.poison = {\r\n        active: true,\r\n        hitCount: 0,\r\n        startTick: this.ticks,\r\n        effectTick: this.ticks % 3,\r\n      };\r\n      this.shadeColor = \"#00FF00\";\r\n    }\r\n  };\r\n\r\n  bleed = () => {\r\n    if (!this.status.bleed.active) {\r\n      this.status.bleed = {\r\n        active: true,\r\n        hitCount: 0,\r\n        startTick: this.ticks,\r\n        effectTick: this.ticks % 1,\r\n      };\r\n    }\r\n  };\r\n\r\n  tickPoison = () => {\r\n    if (this.status.poison.active && this.targetPlayer) {\r\n      if (\r\n        this.ticks % 3 === this.status.poison.effectTick &&\r\n        this.ticks !== this.status.poison.startTick &&\r\n        this.health >= 1\r\n      ) {\r\n        this.hurt(this.targetPlayer, 1, \"poison\");\r\n        this.shadeColor = \"#00FF00\";\r\n        //this.status.poison.hitCount++;\r\n\r\n        /*\r\n        if (this.status.poison.hitCount >= 2) {\r\n          this.status.poison = {\r\n            active: false,\r\n            hitCount: 0,\r\n            startTick: 0,\r\n            effectTick: 0,\r\n          };\r\n        }\r\n        */\r\n      }\r\n    }\r\n  };\r\n\r\n  tickBleed = () => {\r\n    if (this.status.bleed.active && this.targetPlayer) {\r\n      if (\r\n        this.ticks % 1 === this.status.bleed.effectTick &&\r\n        this.ticks !== this.status.bleed.startTick\r\n      ) {\r\n        this.hurt(this.targetPlayer, 0.5, \"blood\");\r\n        //this.targetPlayer.heal(0.5);\r\n        this.shadeColor = \"#FF0000\";\r\n        this.status.bleed.hitCount++;\r\n\r\n        if (this.status.bleed.hitCount >= 4) {\r\n          this.status.bleed = {\r\n            active: false,\r\n            hitCount: 0,\r\n            startTick: 0,\r\n            effectTick: 0,\r\n          };\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  tick = () => {\r\n    this.tickPoison();\r\n    this.tickBleed();\r\n    this.behavior();\r\n    if (this.x !== this.lastX || this.y !== this.lastY) {\r\n      this.emitEntityData();\r\n    }\r\n    if (this.shielded) this.shield.updateLightSourcePos();\r\n    this.alertNearbyEnemies();\r\n  };\r\n\r\n  lookForPlayer = (face: boolean = true) => {\r\n    if (this.seenPlayer) return;\r\n\r\n    const p = this.nearestPlayer();\r\n    if (p === false) return;\r\n\r\n    const [distance, player] = p;\r\n    if (distance > this.alertRange) return;\r\n\r\n    this.handleSeenPlayer(player, face);\r\n\r\n    this.makeHitWarnings();\r\n  };\r\n\r\n  handleSeenPlayer = (player: Player, face: boolean = true) => {\r\n    this.targetPlayer = player;\r\n    if (face) this.facePlayer(player);\r\n    this.seenPlayer = true;\r\n\r\n    globalEventBus.emit(\"EnemySeenPlayer\", {\r\n      enemyType: this.constructor.name,\r\n      enemyName: this.name,\r\n    });\r\n\r\n    if (player === this.game.players[this.game.localPlayerID]) {\r\n      this.alertTicks = 1;\r\n    }\r\n  };\r\n\r\n  getDisablePositions = (): Array<astar.Position> => {\r\n    let disablePositions = Array<astar.Position>();\r\n    for (const e of this.room.entities) {\r\n      if (e !== this) {\r\n        disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n      }\r\n    }\r\n    for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n      for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n        if (\r\n          this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n          (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n        ) {\r\n          // Don't walk on active spike traps\r\n          disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n        }\r\n      }\r\n    }\r\n    return disablePositions;\r\n  };\r\n\r\n  findPath = () => {\r\n    let disablePositions = Array<astar.Position>();\r\n    for (const e of this.room.entities) {\r\n      if (e !== this) {\r\n        disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n      }\r\n    }\r\n    for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n      for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n        if (\r\n          this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n          (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n        ) {\r\n          // Don't walk on active spike traps\r\n          disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n        }\r\n      }\r\n    }\r\n    // Create a grid of the room\r\n    let grid = [];\r\n    for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n      grid[x] = [];\r\n      for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n        if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n          grid[x][y] = this.room.roomArray[x][y];\r\n        else grid[x][y] = false;\r\n      }\r\n    }\r\n\r\n    // Find a path to the target player\r\n    let moves = astar.AStar.search(\r\n      grid,\r\n      this,\r\n      this.targetPlayer,\r\n      disablePositions,\r\n      false,\r\n      false,\r\n      true,\r\n      this.direction,\r\n    );\r\n  };\r\n\r\n  behavior = () => {\r\n    // Store the current position\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    // If the enemy is not dead\r\n    if (!this.dead) {\r\n      // Skip turns if necessary\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n\r\n      // Increment the tick counter\r\n      this.ticks++;\r\n\r\n      // If the enemy has not seen the player yet\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        // If the target player has taken their turn\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          // Decrement alert ticks\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n\r\n          // Store the old position\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          // Create a list of positions to avoid\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n            }\r\n          }\r\n          for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n              if (\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                // Don't walk on active spike traps\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n          // Create a grid of the room\r\n          let grid = [];\r\n          for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n            grid[x] = [];\r\n            for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n              if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                grid[x][y] = this.room.roomArray[x][y];\r\n              else grid[x][y] = false;\r\n            }\r\n          }\r\n\r\n          // Find a path to the target player\r\n          let moves = astar.AStar.search(\r\n            grid,\r\n            this,\r\n            this.targetPlayer,\r\n            disablePositions,\r\n            false,\r\n            false,\r\n            true,\r\n            this.direction,\r\n          );\r\n\r\n          // If there are moves available\r\n          if (moves.length > 0) {\r\n            let moveX = moves[0].pos.x;\r\n            let moveY = moves[0].pos.y;\r\n            let oldDir = this.direction;\r\n            let player = this.targetPlayer;\r\n\r\n            // Face the target player\r\n            this.facePlayer(player);\r\n\r\n            // Determine the new direction based on the move\r\n            if (moveX > oldX) this.direction = Direction.RIGHT;\r\n            else if (moveX < oldX) this.direction = Direction.LEFT;\r\n            else if (moveY > oldY) this.direction = Direction.DOWN;\r\n            else if (moveY < oldY) this.direction = Direction.UP;\r\n\r\n            // If the direction hasn't changed, attempt to move or attack\r\n            if (oldDir == this.direction) {\r\n              let hitPlayer = false;\r\n              for (const i in this.game.players) {\r\n                if (\r\n                  this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                  this.game.players[i].x === moveX &&\r\n                  this.game.players[i].y === moveY\r\n                ) {\r\n                  // Attack the player if they are in the way\r\n                  this.game.players[i].hurt(this.hit(), this.name);\r\n                  this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                  this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                  if (\r\n                    this.game.players[i] ===\r\n                    this.game.players[this.game.localPlayerID]\r\n                  )\r\n                    this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n                }\r\n              }\r\n              if (!hitPlayer) {\r\n                // Move to the new position\r\n                this.tryMove(moveX, moveY);\r\n                this.setDrawXY(moveX, moveY);\r\n                if (this.x > moveX) this.direction = Direction.RIGHT;\r\n                else if (this.x < moveX) this.direction = Direction.LEFT;\r\n                else if (this.y > moveY) this.direction = Direction.DOWN;\r\n                else if (this.y < moveY) this.direction = Direction.UP;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Add positions to avoid based on the current direction\r\n          if (this.direction == Direction.LEFT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.RIGHT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.DOWN) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.UP) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          // Make hit warnings\r\n          this.makeHitWarnings();\r\n        }\r\n\r\n        // Check if the target player is offline\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        // If the enemy is not aggro or the target player is offline, find a new target player\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.makeHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  onHurt = (\r\n    damage: number = 1,\r\n    type: \"none\" | \"poison\" | \"blood\" | \"heal\" = \"none\",\r\n  ) => {\r\n    if (this.health > 0) {\r\n      if (type === \"none\") {\r\n        this.justHurt = true;\r\n      }\r\n    }\r\n  };\r\n\r\n  stun = () => {\r\n    if (this.stunned) return;\r\n    this.stunned = true;\r\n    this.unconscious = true;\r\n    new StunAnimation(this, this.x, this.y);\r\n  };\r\n\r\n  retreat = (oldX: number, oldY: number) => {\r\n    // Calculate direction vector from player to enemy\r\n    let dx = this.x - this.targetPlayer.x;\r\n    let dy = this.y - this.targetPlayer.y;\r\n\r\n    // Normalize the direction vector\r\n    let length = Math.sqrt(dx * dx + dy * dy);\r\n    if (length > 0) {\r\n      dx = Math.round(dx / length);\r\n      dy = Math.round(dy / length);\r\n    }\r\n\r\n    let retreatX = this.x;\r\n    let retreatY = this.y;\r\n    let foundValidRetreat = false;\r\n\r\n    // Determine retreat behavior based on attack properties\r\n    if (this.orthogonalAttack && this.diagonalAttack) {\r\n      // Both enabled: use current behavior (try orthogonal first, then diagonal)\r\n      retreatX = this.x + dx;\r\n      retreatY = this.y + dy;\r\n\r\n      if (this.room.isTileEmpty(retreatX, retreatY)) {\r\n        foundValidRetreat = true;\r\n      } else {\r\n        // Try diagonal positions\r\n        if (dy === 0) dy = Random.rand() < 0.5 ? 1 : -1;\r\n        if (dx === 0) dx = Random.rand() < 0.5 ? 1 : -1;\r\n        let diagonal1X = this.x - dy;\r\n        let diagonal1Y = this.y + dx;\r\n        let diagonal2X = this.x + dy;\r\n        let diagonal2Y = this.y - dx;\r\n\r\n        // Randomly choose which diagonal to check first\r\n        let checkFirst = Random.rand() < 0.5;\r\n        let firstX = checkFirst ? diagonal1X : diagonal2X;\r\n        let firstY = checkFirst ? diagonal1Y : diagonal2Y;\r\n        let secondX = checkFirst ? diagonal2X : diagonal1X;\r\n        let secondY = checkFirst ? diagonal2Y : diagonal1Y;\r\n\r\n        // Check first diagonal\r\n        if (this.room.isTileEmpty(firstX, firstY)) {\r\n          retreatX = firstX;\r\n          retreatY = firstY;\r\n          foundValidRetreat = true;\r\n        }\r\n        // Check second diagonal if first is blocked\r\n        else if (this.room.isTileEmpty(secondX, secondY)) {\r\n          retreatX = secondX;\r\n          retreatY = secondY;\r\n          foundValidRetreat = true;\r\n        }\r\n      }\r\n    } else if (this.orthogonalAttack) {\r\n      // Only orthogonal retreat allowed\r\n      retreatX = this.x + dx;\r\n      retreatY = this.y + dy;\r\n\r\n      if (this.room.isTileEmpty(retreatX, retreatY)) {\r\n        foundValidRetreat = true;\r\n      }\r\n    } else if (this.diagonalAttack) {\r\n      if (dy === 0) dy = Random.rand() < 0.5 ? 1 : -1;\r\n      if (dx === 0) dx = Random.rand() < 0.5 ? 1 : -1;\r\n      // Only diagonal retreat allowed\r\n      let diagonal1X = this.x - dy;\r\n      let diagonal1Y = this.y + dx;\r\n      let diagonal2X = this.x + dy;\r\n      let diagonal2Y = this.y - dx;\r\n\r\n      // Randomly choose which diagonal to check first\r\n      let checkFirst = Random.rand() < 0.5;\r\n      let firstX = checkFirst ? diagonal1X : diagonal2X;\r\n      let firstY = checkFirst ? diagonal1Y : diagonal2Y;\r\n      let secondX = checkFirst ? diagonal2X : diagonal1X;\r\n      let secondY = checkFirst ? diagonal2Y : diagonal1Y;\r\n\r\n      // Check first diagonal\r\n      if (this.room.isTileEmpty(firstX, firstY)) {\r\n        retreatX = firstX;\r\n        retreatY = firstY;\r\n        foundValidRetreat = true;\r\n      }\r\n      // Check second diagonal if first is blocked\r\n      else if (this.room.isTileEmpty(secondX, secondY)) {\r\n        retreatX = secondX;\r\n        retreatY = secondY;\r\n        foundValidRetreat = true;\r\n      }\r\n    }\r\n    // If neither orthogonalAttack nor diagonalAttack is true, don't retreat\r\n\r\n    // Only move if we found a valid retreat position\r\n    if (foundValidRetreat) {\r\n      this.tryMove(retreatX, retreatY);\r\n      this.setDrawXY(oldX, oldY);\r\n    }\r\n\r\n    this.justHurt = false;\r\n  };\r\n\r\n  jump = (delta: number) => {\r\n    let j = Math.max(Math.abs(this.drawX), Math.abs(this.drawY));\r\n    this.jumpY = Math.abs(Math.sin(j * Math.PI)) * this.jumpHeight;\r\n    if (this.jumpY < 0.01) this.jumpY = 0;\r\n    if (this.jumpY > this.jumpHeight) this.jumpY = this.jumpHeight;\r\n  };\r\n\r\n  updateDrawXY = (delta: number) => {\r\n    //putting this here bc i'm lazy\r\n    this.updateHurtFrame(delta);\r\n    this.animateDying(delta);\r\n\r\n    if (!this.doneMoving()) {\r\n      this.drawX *= this.drawMoveSpeed ** delta;\r\n      this.drawY *= this.drawMoveSpeed ** delta;\r\n\r\n      this.drawX = Math.abs(this.drawX) < 0.01 ? 0 : this.drawX;\r\n      this.drawY = Math.abs(this.drawY) < 0.01 ? 0 : this.drawY;\r\n      this.jump(delta);\r\n    }\r\n\r\n    this.updateShadeColor(delta);\r\n  };\r\n\r\n  setDrawXY = (x: number, y: number) => {\r\n    this.drawX += this.x - x;\r\n    this.drawY += this.y - y;\r\n  };\r\n\r\n  get lastPlayerPos() {\r\n    return {\r\n      x: this.targetPlayer.lastX,\r\n      y: this.targetPlayer.lastY,\r\n    };\r\n  }\r\n\r\n  teleport = () => {\r\n    let newTile = this.findFarTile();\r\n    if (newTile) {\r\n      this.drawX = newTile.x - this.x;\r\n      this.drawY = newTile.y - this.y;\r\n\r\n      this.x = newTile.x;\r\n      this.y = newTile.y;\r\n      this.lightSource?.updatePosition(this.x + 0.5, this.y + 0.5);\r\n      this.room.updateLighting();\r\n    }\r\n  };\r\n\r\n  findFarTile = () => {\r\n    // Get all empty tiles\r\n    const emptyTiles = this.room.getEmptyTiles();\r\n    const player = this.getPlayer();\r\n    // Early return if no player or no empty tiles\r\n    if (!player || emptyTiles.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Calculate distances from player\r\n    const tilesWithDistances = emptyTiles.map((tile) => {\r\n      const distance = Utils.distance(tile.x, tile.y, player.x, player.y);\r\n      return { tile, distance };\r\n    });\r\n\r\n    // Sort by distance (farthest first)\r\n    tilesWithDistances.sort((a, b) => b.distance - a.distance);\r\n\r\n    // Take only the 50% farthest tiles\r\n    const farTiles = tilesWithDistances.slice(\r\n      0,\r\n      Math.floor(tilesWithDistances.length / 2),\r\n    );\r\n\r\n    // If no far tiles available, return null\r\n    if (farTiles.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Choose a random tile from the far tiles\r\n    const randomIndex = Math.floor(Random.rand() * farTiles.length);\r\n    return farTiles[randomIndex].tile;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX + Math.floor(this.frame),\r\n        this.tileY + this.direction * 2,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    if (!this.dying) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n  };\r\n\r\n  get type() {\r\n    return EntityType.ENEMY;\r\n  }\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Room, RoomType } from \"../room/room\";\r\nimport { Random } from \"../utility/random\";\r\nimport { LevelParameters } from \"./levelParametersGenerator\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { LevelValidator, ValidationResult } from \"./levelValidator\";\r\nimport { GenerationVisualizer } from \"./generationVisualizer\";\r\nimport { SidePathOptions } from \"./sidePathManager\";\r\n\r\nexport enum PathType {\r\n  MAIN_PATH, // Has exit room (current dungeon)\r\n  SIDE_PATH, // No exit room (current cave/ropehole)\r\n  TUTORIAL, // Special case\r\n}\r\n\r\nexport interface PathParameters {\r\n  pathType: PathType;\r\n  mapWidth: number;\r\n  mapHeight: number;\r\n  roomCount: { min: number; max: number };\r\n  splitProbabilities: number[];\r\n  wallRemoveProbability: number;\r\n  maxRoomArea: number;\r\n  softMaxRoomArea: number;\r\n  connectionStyle: \"linear\" | \"branched\";\r\n  loopDoorCount: { min: number; max: number };\r\n}\r\n\r\nexport class PartitionConnection {\r\n  x: number;\r\n  y: number;\r\n  other: Partition;\r\n\r\n  constructor(x: number, y: number, other: Partition) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.other = other;\r\n  }\r\n}\r\n\r\nexport class Partition {\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n  type: RoomType;\r\n  fillStyle: string;\r\n  connections: Array<PartitionConnection>;\r\n  distance: number;\r\n  isTopOpen: boolean;\r\n  isRightOpen: boolean;\r\n  isBottomOpen: boolean;\r\n  isLeftOpen: boolean;\r\n  pathIndex: number;\r\n\r\n  constructor(x: number, y: number, w: number, h: number, fillStyle: string) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.w = w;\r\n    this.h = h;\r\n    this.fillStyle = fillStyle;\r\n    this.type = RoomType.DUNGEON;\r\n    this.connections = [];\r\n    this.distance = 1000;\r\n    this.isTopOpen = true;\r\n    this.isRightOpen = true;\r\n    this.isBottomOpen = true;\r\n    this.isLeftOpen = true;\r\n    this.pathIndex = 0;\r\n  }\r\n\r\n  split = async (): Promise<Array<Partition>> => {\r\n    // Remove the setTimeout - animation is now handled by visualizer\r\n    // The visualizer will handle the delay through createAnimationDelay('partition')\r\n\r\n    // Reset open walls when a partition is split\r\n    this.isTopOpen = true;\r\n    this.isRightOpen = true;\r\n    this.isBottomOpen = true;\r\n    this.isLeftOpen = true;\r\n\r\n    // This function generates a random number around the center (0.5) within a certain width (0.6).\r\n    let rand_mid = () => {\r\n      let center = 0.5;\r\n      let width = 0.6;\r\n      return (Random.rand() - 0.5) * width + center;\r\n    };\r\n\r\n    let MIN_SIZE = 4;\r\n\r\n    if (this.w > this.h) {\r\n      let w1 = Math.floor(rand_mid() * this.w);\r\n      let w2 = this.w - w1 - 1;\r\n      if (w1 < MIN_SIZE || w2 < MIN_SIZE) return [this];\r\n      return [\r\n        new Partition(this.x, this.y, w1, this.h, this.fillStyle),\r\n        new Partition(this.x + w1 + 1, this.y, w2, this.h, this.fillStyle),\r\n      ];\r\n    } else {\r\n      let h1 = Math.floor(rand_mid() * this.h);\r\n      let h2 = this.h - h1 - 1;\r\n      if (h1 < MIN_SIZE || h2 < MIN_SIZE) return [this];\r\n      return [\r\n        new Partition(this.x, this.y, this.w, h1, this.fillStyle),\r\n        new Partition(this.x, this.y + h1 + 1, this.w, h2, this.fillStyle),\r\n      ];\r\n    }\r\n  };\r\n\r\n  point_in = (x: number, y: number): boolean => {\r\n    return (\r\n      x >= this.x && x < this.x + this.w && y >= this.y && y < this.y + this.h\r\n    );\r\n  };\r\n\r\n  point_next_to = (x: number, y: number): boolean => {\r\n    return (\r\n      (x >= this.x - 1 &&\r\n        x < this.x + this.w + 1 &&\r\n        y >= this.y &&\r\n        y < this.y + this.h) ||\r\n      (x >= this.x &&\r\n        x < this.x + this.w &&\r\n        y >= this.y - 1 &&\r\n        y < this.y + this.h + 1)\r\n    );\r\n  };\r\n\r\n  area = (): number => {\r\n    return this.w * this.h;\r\n  };\r\n\r\n  overlaps = (other: Partition): boolean => {\r\n    return (\r\n      other.x < this.x + this.w + 1 &&\r\n      other.x + other.w > this.x - 1 &&\r\n      other.y < this.y + this.h + 1 &&\r\n      other.y + other.h > this.y - 1\r\n    );\r\n  };\r\n\r\n  setOpenWall = (connection: PartitionConnection) => {\r\n    if (\r\n      connection.y === this.y - 1 &&\r\n      connection.x >= this.x &&\r\n      connection.x < this.x + this.w\r\n    ) {\r\n      this.isTopOpen = false;\r\n    }\r\n    if (\r\n      connection.y === this.y + this.h &&\r\n      connection.x >= this.x &&\r\n      connection.x < this.x + this.w\r\n    ) {\r\n      this.isBottomOpen = false;\r\n    }\r\n    if (\r\n      connection.x === this.x + this.w &&\r\n      connection.y >= this.y &&\r\n      connection.y < this.y + this.h\r\n    ) {\r\n      this.isRightOpen = false;\r\n    }\r\n    if (\r\n      connection.x === this.x - 1 &&\r\n      connection.y >= this.y &&\r\n      connection.y < this.y + this.h\r\n    ) {\r\n      this.isLeftOpen = false;\r\n    }\r\n  };\r\n\r\n  get_branch_point = (): { x: number; y: number } => {\r\n    let points = [];\r\n    for (let x = this.x; x < this.x + this.w; x++) {\r\n      points.push({ x: x, y: this.y - 1 });\r\n      points.push({ x: x, y: this.y + this.h });\r\n    }\r\n    for (let y = this.y; y < this.y + this.h; y++) {\r\n      points.push({ x: this.x - 1, y: y });\r\n      points.push({ x: this.x + this.w, y: y });\r\n    }\r\n    points = points.filter(\r\n      (p) =>\r\n        !this.connections.some(\r\n          (c) => Math.abs(c.x - p.x) + Math.abs(c.y - p.y) <= 1,\r\n        ),\r\n    );\r\n    points.sort(() => 0.5 - Random.rand());\r\n    return points[0];\r\n  };\r\n}\r\n\r\nexport class PartialLevel {\r\n  partitions: Array<Partition>;\r\n\r\n  constructor() {\r\n    this.partitions = [];\r\n  }\r\n}\r\n\r\nexport class PartitionGenerator {\r\n  private validator: LevelValidator;\r\n  private visualizer: GenerationVisualizer;\r\n\r\n  constructor(game: Game) {\r\n    this.validator = new LevelValidator(game);\r\n    this.visualizer = new GenerationVisualizer(game);\r\n  }\r\n\r\n  async generateDungeonPartitions(\r\n    game: Game,\r\n    mapWidth: number,\r\n    mapHeight: number,\r\n    depth: number,\r\n    params: LevelParameters,\r\n    controls?: { branching?: number; loopiness?: number },\r\n  ): Promise<Partition[]> {\r\n    const partialLevel = new PartialLevel();\r\n    let validationResult: ValidationResult;\r\n    let attempts = 0;\r\n\r\n    this.visualizer.updateProgress(\"Starting dungeon generation\", 0);\r\n\r\n    do {\r\n      attempts++;\r\n      this.visualizer.updateProgress(\r\n        `Generating candidate ${attempts}`,\r\n        attempts * 0.1,\r\n      );\r\n\r\n      await this.generateDungeonCandidate(\r\n        game,\r\n        partialLevel,\r\n        mapWidth,\r\n        mapHeight,\r\n        depth,\r\n        params,\r\n        controls,\r\n      );\r\n\r\n      validationResult = this.validator.validateDungeonPartitions(\r\n        partialLevel.partitions,\r\n        params,\r\n      );\r\n\r\n      // Update visualization state\r\n      this.visualizer.setVisualizationState(\r\n        partialLevel.partitions,\r\n        mapWidth / 2,\r\n        mapHeight / 2,\r\n        \"validating\",\r\n        0.8,\r\n      );\r\n\r\n      // If validation fails, the loop will continue and regenerate\r\n    } while (!validationResult.isValid);\r\n\r\n    this.visualizer.updateProgress(\"Finalizing generation\", 0.9);\r\n    await this.visualizer.createAnimationDelay(\"large\");\r\n\r\n    this.visualizer.createVisualEffect(\"generation_complete\");\r\n    this.visualizer.updateProgress(\"Generation complete\", 1.0);\r\n\r\n    console.log(\"finished generation\");\r\n    return partialLevel.partitions;\r\n  }\r\n\r\n  async generateCavePartitions(opts: SidePathOptions): Promise<Partition[]> {\r\n    const partialLevel = new PartialLevel();\r\n    let validationResult: ValidationResult;\r\n    let attempts = 0;\r\n    const mapWidth = opts.mapWidth ?? 50;\r\n    const mapHeight = opts.mapHeight ?? 50;\r\n    const numRooms = opts.caveRooms ?? 8;\r\n    const hasLinearity = typeof opts.linearity === \"number\";\r\n    const branching =\r\n      typeof opts.branching === \"number\"\r\n        ? opts.branching\r\n        : hasLinearity\r\n          ? Math.max(0, Math.min(1, 1 - (opts.linearity as number)))\r\n          : 0.5; // default: 50% chance of second door\r\n    const loopiness =\r\n      typeof opts.loopiness === \"number\"\r\n        ? opts.loopiness\r\n        : hasLinearity\r\n          ? Math.max(0, Math.min(1, 1 - (opts.linearity as number)))\r\n          : 0.5; // default: moderate loops\r\n\r\n    this.visualizer.updateProgress(\"Starting cave generation\", 0);\r\n\r\n    do {\r\n      attempts++;\r\n      this.visualizer.updateProgress(\r\n        `Generating cave candidate ${attempts}`,\r\n        attempts * 0.1,\r\n      );\r\n\r\n      await this.generateCaveCandidate(\r\n        partialLevel,\r\n        mapWidth,\r\n        mapHeight,\r\n        numRooms,\r\n        branching,\r\n        loopiness,\r\n      );\r\n\r\n      validationResult = this.validator.validateCavePartitions(\r\n        partialLevel.partitions,\r\n        numRooms,\r\n      );\r\n\r\n      // Update visualization state\r\n      this.visualizer.setVisualizationState(\r\n        partialLevel.partitions,\r\n        mapWidth / 2,\r\n        mapHeight / 2,\r\n        \"validating cave\",\r\n        0.8,\r\n      );\r\n\r\n      // If validation fails, the loop will continue and regenerate\r\n    } while (!validationResult.isValid);\r\n\r\n    this.visualizer.updateProgress(\"Cave generation complete\", 1.0);\r\n    return partialLevel.partitions;\r\n  }\r\n\r\n  generateTutorialPartitions(\r\n    height: number = 7,\r\n    width: number = 7,\r\n  ): Partition[] {\r\n    const partitions = [new Partition(0, 0, height, width, \"white\")];\r\n    partitions[0].type = RoomType.TUTORIAL;\r\n\r\n    // Validate tutorial partitions\r\n    const validationResult =\r\n      this.validator.validateTutorialPartitions(partitions);\r\n    if (!validationResult.isValid) {\r\n      throw new Error(\r\n        `Tutorial validation failed: ${validationResult.errorMessage}`,\r\n      );\r\n    }\r\n\r\n    return partitions;\r\n  }\r\n\r\n  private async generateDungeonCandidate(\r\n    game: Game,\r\n    partialLevel: PartialLevel,\r\n    map_w: number,\r\n    map_h: number,\r\n    depth: number,\r\n    params: LevelParameters,\r\n    controls?: { branching?: number; loopiness?: number },\r\n  ) {\r\n    const {\r\n      minRoomCount,\r\n      maxRoomCount,\r\n      maxRoomArea,\r\n      splitProbabilities,\r\n      wallRemoveProbability,\r\n      softMaxRoomArea,\r\n    } = params;\r\n\r\n    partialLevel.partitions = [new Partition(0, 0, map_w, map_h, \"white\")];\r\n\r\n    this.visualizer.updateProgress(\"Splitting partitions\", 0.1);\r\n    this.visualizer.setVisualizationState(\r\n      partialLevel.partitions,\r\n      map_w / 2,\r\n      map_h / 2,\r\n      \"splitting\",\r\n    );\r\n\r\n    // Use splitProbabilities for splitting\r\n    while (partialLevel.partitions.length < params.maxRoomCount) {\r\n      for (let i = 0; i < splitProbabilities.length; i++) {\r\n        partialLevel.partitions = await this.splitPartitions(\r\n          partialLevel.partitions,\r\n          splitProbabilities[i],\r\n        );\r\n\r\n        // Update visualization after each split\r\n        this.visualizer.setVisualizationState(\r\n          partialLevel.partitions,\r\n          map_w / 2,\r\n          map_h / 2,\r\n          \"splitting\",\r\n          0.1 + (i / splitProbabilities.length) * 0.2,\r\n        );\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n      partialLevel.partitions.forEach(async (partition) => {\r\n        let roomArea = Random.rand() > 0.95 ? softMaxRoomArea : maxRoomArea;\r\n        if (partition.area() > roomArea) {\r\n          partialLevel.partitions = partialLevel.partitions.filter(\r\n            (p) => p !== partition,\r\n          );\r\n          partialLevel.partitions = partialLevel.partitions.concat(\r\n            await this.splitPartition(partition, 0.5),\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    this.visualizer.updateProgress(\"Removing wall rooms\", 0.4);\r\n    partialLevel.partitions = this.removeWallRooms(\r\n      partialLevel.partitions,\r\n      map_w,\r\n      map_h,\r\n      wallRemoveProbability,\r\n    );\r\n\r\n    await this.visualizer.createAnimationDelay(\"large\");\r\n\r\n    if (partialLevel.partitions.length === 0) {\r\n      partialLevel.partitions = [];\r\n      return;\r\n    }\r\n\r\n    this.visualizer.updateProgress(\"Assigning room types\", 0.5);\r\n    // Sort and assign room types\r\n    partialLevel.partitions.sort((a, b) => a.area() - b.area());\r\n    this.visualizer.updatePartitionStyles(partialLevel.partitions);\r\n\r\n    if (partialLevel.partitions.length === 0) {\r\n      partialLevel.partitions = [];\r\n      return;\r\n    }\r\n\r\n    let spawn = partialLevel.partitions[0];\r\n    if (!spawn) {\r\n      partialLevel.partitions = [];\r\n      return;\r\n    }\r\n\r\n    spawn.type = RoomType.START;\r\n    spawn.fillStyle = \"rgb(0, 255, 0)\";\r\n    if (partialLevel.partitions.length > 1) {\r\n      partialLevel.partitions[partialLevel.partitions.length - 1].type =\r\n        RoomType.BOSS;\r\n      partialLevel.partitions[partialLevel.partitions.length - 1].fillStyle =\r\n        \"red\";\r\n    }\r\n\r\n    this.visualizer.updateProgress(\"Connecting partitions\", 0.6);\r\n    await this.connectPartitions(partialLevel, spawn, controls?.branching);\r\n\r\n    this.visualizer.updateProgress(\"Adding loop connections\", 0.7);\r\n    if (partialLevel.partitions.length > 0) {\r\n      await this.addLoopConnections(partialLevel, controls?.loopiness);\r\n    }\r\n\r\n    this.visualizer.updateProgress(\"Adding stair room\", 0.8);\r\n    if (partialLevel.partitions.length > 0) {\r\n      await this.addStairRoom(partialLevel, game);\r\n    }\r\n\r\n    this.visualizer.updateProgress(\"Calculating distances\", 0.9);\r\n    if (partialLevel.partitions.length > 0) {\r\n      await this.calculateDistances(partialLevel, spawn);\r\n      await this.addSpecialRooms(partialLevel);\r\n    }\r\n  }\r\n\r\n  private async generateCaveCandidate(\r\n    partialLevel: PartialLevel,\r\n    map_w: number,\r\n    map_h: number,\r\n    num_rooms: number,\r\n    branching: number = 0.5,\r\n    loopiness: number = 0.5,\r\n  ) {\r\n    const CAVE_OFFSET = 100;\r\n    partialLevel.partitions = [\r\n      new Partition(CAVE_OFFSET, CAVE_OFFSET, map_w, map_h, \"white\"),\r\n    ];\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n      partialLevel.partitions = await this.splitPartitions(\r\n        partialLevel.partitions,\r\n        0.75,\r\n      );\r\n    }\r\n\r\n    partialLevel.partitions.sort((a, b) => a.area() - b.area());\r\n\r\n    if (partialLevel.partitions.length === 0) {\r\n      throw new Error(\"No partitions generated.\");\r\n    }\r\n\r\n    let spawn = partialLevel.partitions[0];\r\n    spawn.type = RoomType.ROPECAVE;\r\n    for (let i = 1; i < partialLevel.partitions.length; i++) {\r\n      partialLevel.partitions[i].type = RoomType.CAVE;\r\n    }\r\n\r\n    await this.connectCavePartitions(partialLevel, spawn, num_rooms, branching);\r\n    await this.addCaveLoops(partialLevel, loopiness);\r\n    await this.calculateDistances(partialLevel, spawn);\r\n  }\r\n\r\n  private async splitPartitions(\r\n    partitions: Array<Partition>,\r\n    prob: number,\r\n  ): Promise<Array<Partition>> {\r\n    for (let partition of partitions) {\r\n      if (Random.rand() < prob) {\r\n        this.visualizer.createVisualEffect(\"partition_split\", partition);\r\n        partitions = partitions.filter((p) => p !== partition);\r\n        partitions = partitions.concat(await partition.split());\r\n      }\r\n    }\r\n    return partitions;\r\n  }\r\n\r\n  private async splitPartition(\r\n    partition: Partition,\r\n    prob: number,\r\n  ): Promise<Array<Partition>> {\r\n    if (Random.rand() < prob) {\r\n      return await partition.split();\r\n    } else {\r\n      return [partition];\r\n    }\r\n  }\r\n\r\n  private getWallRooms(\r\n    partitions: Array<Partition>,\r\n    mapWidth: number,\r\n    mapHeight: number,\r\n  ): Array<Partition> {\r\n    return partitions.filter((partition) => {\r\n      const isPathClear = (\r\n        direction: \"left\" | \"right\" | \"top\" | \"bottom\",\r\n      ): boolean => {\r\n        switch (direction) {\r\n          case \"left\":\r\n            for (let y = partition.y; y < partition.y + partition.h; y++) {\r\n              let blocked = partitions.some((other) => {\r\n                if (other === partition) return false;\r\n                return (\r\n                  other.y <= y &&\r\n                  y < other.y + other.h &&\r\n                  other.x + other.w > 0 &&\r\n                  other.x + other.w <= partition.x\r\n                );\r\n              });\r\n              if (!blocked) return true;\r\n            }\r\n            return false;\r\n          case \"right\":\r\n            for (let y = partition.y; y < partition.y + partition.h; y++) {\r\n              let blocked = partitions.some((other) => {\r\n                if (other === partition) return false;\r\n                return (\r\n                  other.y <= y &&\r\n                  y < other.y + other.h &&\r\n                  other.x < mapWidth &&\r\n                  other.x >= partition.x + partition.w\r\n                );\r\n              });\r\n              if (!blocked) return true;\r\n            }\r\n            return false;\r\n          case \"top\":\r\n            for (let x = partition.x; x < partition.x + partition.w; x++) {\r\n              let blocked = partitions.some((other) => {\r\n                if (other === partition) return false;\r\n                return (\r\n                  other.x <= x &&\r\n                  x < other.x + other.w &&\r\n                  other.y + other.h > 0 &&\r\n                  other.y + other.h <= partition.y\r\n                );\r\n              });\r\n              if (!blocked) return true;\r\n            }\r\n            return false;\r\n          case \"bottom\":\r\n            for (let x = partition.x; x < partition.x + partition.w; x++) {\r\n              let blocked = partitions.some((other) => {\r\n                if (other === partition) return false;\r\n                return (\r\n                  other.x <= x &&\r\n                  x < other.x + other.w &&\r\n                  other.y < mapHeight &&\r\n                  other.y >= partition.y + partition.h\r\n                );\r\n              });\r\n              if (!blocked) return true;\r\n            }\r\n            return false;\r\n          default:\r\n            return false;\r\n        }\r\n      };\r\n\r\n      const openPaths = [\r\n        isPathClear(\"left\"),\r\n        isPathClear(\"right\"),\r\n        isPathClear(\"top\"),\r\n        isPathClear(\"bottom\"),\r\n      ].filter(Boolean).length;\r\n\r\n      return openPaths === 1;\r\n    });\r\n  }\r\n\r\n  private removeWallRooms(\r\n    partitions: Array<Partition>,\r\n    w: number,\r\n    h: number,\r\n    prob: number = 1.0,\r\n  ): Array<Partition> {\r\n    const wallRooms = this.getWallRooms(partitions, w, h);\r\n\r\n    for (const wallRoom of wallRooms) {\r\n      if (Random.rand() < prob) {\r\n        partitions = partitions.filter((p) => p !== wallRoom);\r\n      }\r\n    }\r\n\r\n    return partitions;\r\n  }\r\n\r\n  private async connectPartitions(\r\n    partialLevel: PartialLevel,\r\n    spawn: Partition,\r\n    branching?: number,\r\n  ) {\r\n    let connected = [spawn];\r\n    let frontier = [spawn];\r\n    let found_boss = false;\r\n\r\n    while (frontier.length > 0 && !found_boss) {\r\n      let room = frontier[0];\r\n      if (room !== spawn) {\r\n        this.visualizer.createVisualEffect(\"room_connected\", room);\r\n      }\r\n      frontier.splice(0, 1);\r\n\r\n      let doors_found = 0;\r\n      // Default behavior kept if branching is undefined\r\n      const num_doors =\r\n        branching === undefined\r\n          ? Math.floor(Random.rand() * 2 + 1)\r\n          : 1 + (Random.rand() < Math.max(0, Math.min(1, branching)) ? 1 : 0);\r\n      let tries = 0;\r\n      const max_tries = 1000;\r\n\r\n      while (doors_found < num_doors && tries < max_tries) {\r\n        let point = room.get_branch_point();\r\n        for (const p of partialLevel.partitions) {\r\n          if (\r\n            p !== room &&\r\n            connected.indexOf(p) === -1 &&\r\n            p.point_next_to(point.x, point.y)\r\n          ) {\r\n            room.connections.push(new PartitionConnection(point.x, point.y, p));\r\n            p.connections.push(new PartitionConnection(point.x, point.y, room));\r\n\r\n            room.setOpenWall(new PartitionConnection(point.x, point.y, p));\r\n            p.setOpenWall(new PartitionConnection(point.x, point.y, room));\r\n\r\n            frontier.push(p);\r\n            connected.push(p);\r\n            doors_found++;\r\n            if (p.type === RoomType.BOSS) {\r\n              found_boss = true;\r\n              this.visualizer.createVisualEffect(\"boss_found\", p);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        tries++;\r\n      }\r\n\r\n      await this.visualizer.createAnimationDelay(\"pathfinding\");\r\n    }\r\n\r\n    // Remove unconnected rooms\r\n    for (const partition of partialLevel.partitions) {\r\n      if (partition.connections.length === 0) {\r\n        partialLevel.partitions = partialLevel.partitions.filter(\r\n          (p) => p !== partition,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private async connectCavePartitions(\r\n    partialLevel: PartialLevel,\r\n    spawn: Partition,\r\n    num_rooms: number,\r\n    branching: number = 0.5,\r\n  ) {\r\n    let connected = [spawn];\r\n    let frontier = [spawn];\r\n\r\n    while (frontier.length > 0 && connected.length < num_rooms) {\r\n      let room = frontier[0];\r\n      frontier.splice(0, 1);\r\n\r\n      let doors_found = 0;\r\n      // branching controls probability of a second door\r\n      const pSecondDoor = Math.max(0, Math.min(1, branching));\r\n      const num_doors = 1 + (Random.rand() < pSecondDoor ? 1 : 0);\r\n      let tries = 0;\r\n      const max_tries = 1000;\r\n\r\n      while (\r\n        doors_found < num_doors &&\r\n        tries < max_tries &&\r\n        connected.length < num_rooms\r\n      ) {\r\n        let point = room.get_branch_point();\r\n        if (!point) break;\r\n\r\n        for (const p of partialLevel.partitions) {\r\n          if (\r\n            p !== room &&\r\n            connected.indexOf(p) === -1 &&\r\n            p.point_next_to(point.x, point.y)\r\n          ) {\r\n            room.connections.push(new PartitionConnection(point.x, point.y, p));\r\n            p.connections.push(new PartitionConnection(point.x, point.y, room));\r\n            frontier.push(p);\r\n            connected.push(p);\r\n            doors_found++;\r\n            break;\r\n          }\r\n        }\r\n        tries++;\r\n      }\r\n    }\r\n\r\n    // Remove unconnected rooms\r\n    partialLevel.partitions = partialLevel.partitions.filter(\r\n      (partition) => partition.connections.length > 0,\r\n    );\r\n\r\n    if (partialLevel.partitions.length === 0) {\r\n      throw new Error(\"No valid rooms after filtering.\");\r\n    }\r\n  }\r\n\r\n  private async addLoopConnections(\r\n    partialLevel: PartialLevel,\r\n    loopiness?: number,\r\n  ) {\r\n    // Check if we have any partitions to work with\r\n    if (partialLevel.partitions.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let num_loop_doors =\r\n      loopiness === undefined\r\n        ? Math.floor(Random.rand() * 4 + 4)\r\n        : Math.floor(\r\n            (Random.rand() * 4 + 4) * Math.max(0, Math.min(1, loopiness)),\r\n          );\r\n    for (let i = 0; i < num_loop_doors; i++) {\r\n      // Double-check array length in case partitions were removed during iteration\r\n      if (partialLevel.partitions.length === 0) {\r\n        break;\r\n      }\r\n\r\n      let roomIndex = Math.floor(\r\n        Random.rand() * partialLevel.partitions.length,\r\n      );\r\n      let room = partialLevel.partitions[roomIndex];\r\n\r\n      // Safety check to ensure room exists\r\n      if (!room) {\r\n        continue;\r\n      }\r\n\r\n      let found_door = false;\r\n      let tries = 0;\r\n      const max_tries = 10;\r\n\r\n      let not_already_connected = partialLevel.partitions.filter(\r\n        (p) => p && !room.connections.some((c) => c.other === p),\r\n      );\r\n\r\n      while (!found_door && tries < max_tries) {\r\n        let point = room.get_branch_point();\r\n        if (!point) {\r\n          break; // Skip if no valid branch point found\r\n        }\r\n\r\n        for (const p of not_already_connected) {\r\n          if (p && p !== room && p.point_next_to(point.x, point.y)) {\r\n            room.connections.push(new PartitionConnection(point.x, point.y, p));\r\n            p.connections.push(new PartitionConnection(point.x, point.y, room));\r\n\r\n            room.setOpenWall(new PartitionConnection(point.x, point.y, p));\r\n            p.setOpenWall(new PartitionConnection(point.x, point.y, room));\r\n\r\n            found_door = true;\r\n            break;\r\n          }\r\n        }\r\n        tries++;\r\n      }\r\n    }\r\n  }\r\n\r\n  private async addCaveLoops(\r\n    partialLevel: PartialLevel,\r\n    loopiness: number = 0.5,\r\n  ) {\r\n    // Check if we have any partitions to work with\r\n    if (partialLevel.partitions.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let num_loop_doors = Math.floor(\r\n      (Random.rand() * 4 + 4) * Math.max(0, Math.min(1, loopiness)),\r\n    );\r\n    for (let i = 0; i < num_loop_doors; i++) {\r\n      // Double-check array length in case partitions were removed during iteration\r\n      if (partialLevel.partitions.length === 0) {\r\n        break;\r\n      }\r\n\r\n      let roomIndex = Math.floor(\r\n        Random.rand() * partialLevel.partitions.length,\r\n      );\r\n      let room = partialLevel.partitions[roomIndex];\r\n\r\n      // Safety check to ensure room exists\r\n      if (!room) {\r\n        continue;\r\n      }\r\n\r\n      let found_door = false;\r\n      let tries = 0;\r\n      const max_tries = 100;\r\n\r\n      let not_already_connected = partialLevel.partitions.filter(\r\n        (p) => p && !room.connections.some((c) => c.other === p),\r\n      );\r\n\r\n      while (!found_door && tries < max_tries) {\r\n        let point = room.get_branch_point();\r\n        if (!point) {\r\n          break; // Skip if no valid branch point found\r\n        }\r\n\r\n        for (const p of not_already_connected) {\r\n          if (p && p !== room && p.point_next_to(point.x, point.y)) {\r\n            room.connections.push(new PartitionConnection(point.x, point.y, p));\r\n            p.connections.push(new PartitionConnection(point.x, point.y, room));\r\n            found_door = true;\r\n            break;\r\n          }\r\n        }\r\n        tries++;\r\n      }\r\n    }\r\n  }\r\n\r\n  private async addStairRoom(partialLevel: PartialLevel, game: Game) {\r\n    if (!partialLevel.partitions.some((p) => p.type === RoomType.BOSS)) {\r\n      partialLevel.partitions = [];\r\n      return;\r\n    }\r\n\r\n    let boss = partialLevel.partitions.find((p) => p.type === RoomType.BOSS);\r\n    let found_stair = false;\r\n    const max_stair_tries = 5;\r\n    const stairRoomWidth = 7;\r\n    const stairRoomHeight = 5;\r\n\r\n    for (let stair_tries = 0; stair_tries < max_stair_tries; stair_tries++) {\r\n      let stair = new Partition(\r\n        Game.rand(boss.x - 1, boss.x + boss.w - 2, Random.rand),\r\n        boss.y - stairRoomHeight - 1,\r\n        stairRoomWidth,\r\n        stairRoomHeight,\r\n        \"white\",\r\n      );\r\n      stair.type = RoomType.DOWNLADDER;\r\n      stair.fillStyle = \"blue\";\r\n\r\n      if (!partialLevel.partitions.some((p) => p.overlaps(stair))) {\r\n        found_stair = true;\r\n        partialLevel.partitions.push(stair);\r\n        stair.connections.push(\r\n          new PartitionConnection(stair.x + 1, stair.y + stairRoomHeight, boss),\r\n        );\r\n        boss.connections.push(\r\n          new PartitionConnection(\r\n            stair.x + 1,\r\n            stair.y + stairRoomHeight,\r\n            stair,\r\n          ),\r\n        );\r\n\r\n        stair.setOpenWall(\r\n          new PartitionConnection(stair.x + 1, stair.y + stairRoomHeight, boss),\r\n        );\r\n        boss.setOpenWall(\r\n          new PartitionConnection(\r\n            stair.x + 1,\r\n            stair.y + stairRoomHeight,\r\n            stair,\r\n          ),\r\n        );\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!found_stair) {\r\n      console.log(\"No stair found\");\r\n      partialLevel.partitions = [];\r\n    }\r\n  }\r\n\r\n  private async calculateDistances(\r\n    partialLevel: PartialLevel,\r\n    spawn: Partition,\r\n  ) {\r\n    let frontier = [spawn];\r\n    let seen = [];\r\n    spawn.distance = 0;\r\n\r\n    while (frontier.length > 0) {\r\n      let room = frontier[0];\r\n      frontier.splice(0, 1);\r\n      seen.push(room);\r\n\r\n      for (let c of room.connections) {\r\n        let other = c.other;\r\n        other.distance = Math.min(other.distance, room.distance + 1);\r\n        if (seen.indexOf(other) === -1) frontier.push(other);\r\n      }\r\n    }\r\n  }\r\n\r\n  private async addSpecialRooms(partialLevel: PartialLevel) {\r\n    let added_rope_hole = false;\r\n    for (const p of partialLevel.partitions) {\r\n      if (p.type === RoomType.DUNGEON) {\r\n        if (p.distance > 4 && p.area() <= 30 && Random.rand() < 0) {\r\n          p.type = RoomType.TREASURE;\r\n        } /*else if (!added_rope_hole) {\r\n          p.type = RoomType.ROPEHOLE;\r\n          added_rope_hole = true;\r\n        }*/\r\n      }\r\n    }\r\n\r\n    await this.visualizer.createAnimationDelay(\"large\");\r\n  }\r\n\r\n  // Add method to get visualizer (for external access)\r\n  getVisualizer(): GenerationVisualizer {\r\n    return this.visualizer;\r\n  }\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Shrooms } from \"../../item/usable/shrooms\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\n\r\nexport class SmallBush extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 16;\r\n    this.tileY = 2;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"small bush\";\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 28;\r\n    //this.drops.push(new Shrooms(this.room, this.x, this.y));\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Floor } from \"../tile/floor\";\r\nimport { Wall } from \"../tile/wall\";\r\nimport { Random } from \"../utility/random\";\r\nimport { Room, WallDirection } from \"./room\";\r\n\r\nexport class RoomBuilder {\r\n  room: Room;\r\n  constructor(room: Room) {\r\n    this.room = room;\r\n    this.buildEmptyRoom();\r\n  }\r\n\r\n  private buildEmptyRoom() {\r\n    // fill in wall and floor\r\n    for (let x = this.room.roomX; x < this.room.roomX + this.room.width; x++) {\r\n      for (\r\n        let y = this.room.roomY;\r\n        y < this.room.roomY + this.room.height;\r\n        y++\r\n      ) {\r\n        if (\r\n          this.room.pointInside(\r\n            x,\r\n            y,\r\n            this.room.roomX + 1,\r\n            this.room.roomY + 1,\r\n            this.room.width - 2,\r\n            this.room.height - 2,\r\n          )\r\n        ) {\r\n          this.room.roomArray[x][y] = new Floor(this.room, x, y);\r\n        } else {\r\n          this.room.roomArray[x][y] = new Wall(\r\n            this.room,\r\n            x,\r\n            y,\r\n            this.getWallType(\r\n              x,\r\n              y,\r\n              this.room.roomX,\r\n              this.room.roomY,\r\n              this.room.width,\r\n              this.room.height,\r\n            ),\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getWallType = (\r\n    pointX: number,\r\n    pointY: number,\r\n    rectX: number,\r\n    rectY: number,\r\n    width: number,\r\n    height: number,\r\n  ): Array<WallDirection> => {\r\n    let directions: Array<WallDirection> = [];\r\n    if (pointY === rectY && pointX >= rectX && pointX <= rectX + width)\r\n      directions.push(WallDirection.NORTH);\r\n    if (pointY === rectY + height && pointX >= rectX && pointX <= rectX + width)\r\n      directions.push(WallDirection.SOUTH);\r\n    if (pointX === rectX && pointY >= rectY && pointY <= rectY + height)\r\n      directions.push(WallDirection.WEST);\r\n    if (pointX === rectX + width && pointY >= rectY && pointY <= rectY + height)\r\n      directions.push(WallDirection.EAST);\r\n    return directions;\r\n  };\r\n\r\n  addWallBlocks(rand: () => number) {\r\n    this.addWallBlocksStandard(rand);\r\n  }\r\n\r\n  private countWallNeighbors = (wall: Wall): number => {\r\n    let count = 0;\r\n    for (let xx = wall.x - 1; xx <= wall.x + 1; xx++) {\r\n      for (let yy = wall.y - 1; yy <= wall.y + 1; yy++) {\r\n        if (\r\n          this.room.roomArray[xx]?.[yy] instanceof Wall &&\r\n          !(xx === wall.x && yy === wall.y)\r\n        )\r\n          count++;\r\n      }\r\n    }\r\n    return count;\r\n  };\r\n\r\n  // Original behavior moved here; used by addWallBlocks\r\n  addWallBlocksStandard(rand: () => number) {\r\n    let numBlocks = Game.randTable([0, 0, 1, 1, 2, 2, 2, 2, 3], rand);\r\n    if (this.room.width > 8 && rand() > 0.5) numBlocks *= 4;\r\n    for (let i = 0; i < numBlocks; i++) {\r\n      let blockW = Math.min(\r\n        Game.randTable([2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 5], rand),\r\n        this.room.width - 4,\r\n      );\r\n      let blockH = Math.min(\r\n        blockW + Game.rand(-2, 2, rand),\r\n        this.room.height - 4,\r\n      );\r\n\r\n      let x = Game.rand(\r\n        this.room.roomX + 2,\r\n        this.room.roomX + this.room.width - blockW - 2,\r\n        rand,\r\n      );\r\n      let y = Game.rand(\r\n        this.room.roomY + 2,\r\n        this.room.roomY + this.room.height - blockH - 2,\r\n        rand,\r\n      );\r\n\r\n      for (let xx = x; xx < x + blockW; xx++) {\r\n        for (let yy = y; yy < y + blockH; yy++) {\r\n          let w = new Wall(this.room, xx, yy);\r\n          this.room.roomArray[xx][yy] = w;\r\n          this.room.innerWalls.push(w);\r\n        }\r\n      }\r\n      this.room.innerWalls.forEach((wall) => {\r\n        if (this.countWallNeighbors(wall) <= 1) {\r\n          this.room.removeWall(wall.x, wall.y);\r\n          this.room.roomArray[wall.x][wall.y] = new Floor(\r\n            this.room,\r\n            wall.x,\r\n            wall.y,\r\n          );\r\n          this.room.innerWalls = this.room.innerWalls.filter((w) => w !== wall);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Variation: creates smaller, jagged clusters with carved gaps; same placement constraints\r\n  addWallBlocksVariant(rand: () => number) {\r\n    let numBlocks = Game.randTable([2, 2, 3, 3, 4, 5], rand);\r\n    if (this.room.width > 10 && rand() > 0.5) numBlocks += 2;\r\n    for (let i = 0; i < numBlocks; i++) {\r\n      // Favor smaller widths/heights to form jagged shapes\r\n      let baseW = Game.randTable([1, 2, 2, 2, 3, 3], rand);\r\n      let blockW = Math.min(Math.max(1, baseW), this.room.width - 4);\r\n      let blockH = Math.min(\r\n        Math.max(1, baseW + Game.rand(-1, 1, rand)),\r\n        this.room.height - 4,\r\n      );\r\n\r\n      let x = Game.rand(\r\n        this.room.roomX + 2,\r\n        this.room.roomX + this.room.width - blockW - 2,\r\n        rand,\r\n      );\r\n      let y = Game.rand(\r\n        this.room.roomY + 2,\r\n        this.room.roomY + this.room.height - blockH - 2,\r\n        rand,\r\n      );\r\n\r\n      // Place a ragged block by skipping some interior cells randomly\r\n      for (let xx = x; xx < x + blockW; xx++) {\r\n        for (let yy = y; yy < y + blockH; yy++) {\r\n          // Keep edges of the block more solid, randomize interior\r\n          const isEdge =\r\n            xx === x ||\r\n            yy === y ||\r\n            xx === x + blockW - 1 ||\r\n            yy === y + blockH - 1;\r\n          if (isEdge || rand() > 0.35) {\r\n            let w = new Wall(this.room, xx, yy);\r\n            this.room.roomArray[xx][yy] = w;\r\n            this.room.innerWalls.push(w);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Carve 1-2 holes to ensure flow through clusters\r\n      const holes = Game.randTable([0, 1, 1, 2], rand);\r\n      for (let h = 0; h < holes; h++) {\r\n        const hx = Game.rand(x + 1, Math.max(x + 1, x + blockW - 2), rand);\r\n        const hy = Game.rand(y + 1, Math.max(y + 1, y + blockH - 2), rand);\r\n        if (this.room.roomArray[hx]?.[hy] instanceof Wall) {\r\n          this.room.removeWall(hx, hy);\r\n          this.room.roomArray[hx][hy] = new Floor(this.room, hx, hy);\r\n          this.room.innerWalls = this.room.innerWalls.filter(\r\n            (w) => !(w.x === hx && w.y === hy),\r\n          );\r\n        }\r\n      }\r\n\r\n      // Prune more aggressively to avoid single spurs and self-locking\r\n      this.room.innerWalls.forEach((wall) => {\r\n        if (this.countWallNeighbors(wall) <= 2) {\r\n          this.room.removeWall(wall.x, wall.y);\r\n          this.room.roomArray[wall.x][wall.y] = new Floor(\r\n            this.room,\r\n            wall.x,\r\n            wall.y,\r\n          );\r\n          this.room.innerWalls = this.room.innerWalls.filter((w) => w !== wall);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Candle } from \"../../item/light/candle\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class Pot extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 11;\r\n    this.tileY = 0;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"pot\";\r\n\r\n    this.hitSound = Sound.potSmash;\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 29;\r\n\r\n    let dropProb = Random.rand();\r\n    //if (dropProb < 0.025) this.drops.push(new Heart(this.room, this.x, this.y));\r\n    //else this.drops.push(new Coin(this.room, this.x, this.y));\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Item } from \"../../item/item\";\r\nimport { Game } from \"../../game\";\r\nimport { Key } from \"../../item/key\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { Armor } from \"../../item/armor\";\r\nimport { Entity } from \"../entity\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GreenGem } from \"../../item/resource/greengem\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Pickaxe } from \"../../item/tool/pickaxe\";\r\nimport { Spellbook } from \"../../item/weapon/spellbook\";\r\nimport { EntityType } from \"../entity\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class Resource extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n\r\n    this.tileX = 12;\r\n    this.tileY = 0;\r\n    this.health = 1;\r\n    this.chainPushable = false;\r\n    this.name = \"resource\";\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 25;\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.RESOURCE;\r\n  }\r\n\r\n  hurt = (playerHitBy: Player, damage: number) => {\r\n    if (!playerHitBy.inventory?.getWeapon().canMine) return;\r\n    this.healthBar.hurt();\r\n    this.health -= damage;\r\n    Sound.mine();\r\n    this.hurtCallback();\r\n    this.createHitParticles();\r\n\r\n    if (this.health <= 0) {\r\n      this.kill(playerHitBy);\r\n    }\r\n  };\r\n\r\n  uniqueKillBehavior = () => {\r\n    if (this.cloned) return;\r\n    Sound.delayPlay(Sound.breakRock, 50);\r\n  };\r\n\r\n  kill = (player?: Player) => {\r\n    this.dead = true;\r\n    if (this.cloned) return;\r\n\r\n    this.emitEnemyKilled();\r\n    const deadEntity = this.clone();\r\n    this.room.deadEntities.push(deadEntity);\r\n    this.removeLightSource(this.lightSource);\r\n\r\n    if ((player !== null && player.inventory?.canMine()) || player === null) {\r\n      this.dropLoot();\r\n      //this.game.pushMessage(\"You use your pickaxe to collect the resource.\");\r\n    }\r\n    this.uniqueKillBehavior();\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - 1.25 - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Barrel } from \"../entity/object/barrel\";\r\nimport { Block } from \"../entity/object/block\";\r\nimport { Crate } from \"../entity/object/crate\";\r\nimport { Pumpkin } from \"../entity/object/pumpkin\";\r\nimport { TombStone } from \"../entity/object/tombStone\";\r\nimport { Game } from \"../game\";\r\nimport { GameplaySettings } from \"../game/gameplaySettings\";\r\nimport {\r\n  environmentData,\r\n  enemyClassToId,\r\n  //enemyMinimumDepth,\r\n  EnemyInfo,\r\n} from \"../level/environment\";\r\nimport { DownLadder } from \"../tile/downLadder\";\r\nimport { EnvType } from \"../constants/environmentTypes\";\r\nimport { LockType } from \"../tile/lockable\";\r\nimport { Level } from \"../level/level\";\r\nimport { Random } from \"../utility/random\";\r\nimport { Utils } from \"../utility/utils\";\r\nimport { ClusteringOptions, PropClusterer } from \"./propClusterer\";\r\nimport { Room, RoomType } from \"./room\";\r\nimport { DownladderMaker } from \"../entity/downladderMaker\";\r\nimport { Enemy } from \"../entity/enemy/enemy\";\r\nimport { Direction } from \"../game\";\r\nimport { WallTorch } from \"../tile/wallTorch\";\r\nimport { Wall } from \"../tile/wall\";\r\nimport { SpikeTrap } from \"../tile/spiketrap\";\r\nimport { Chasm } from \"../tile/chasm\";\r\nimport { Floor } from \"../tile/floor\";\r\nimport { SpawnFloor } from \"../tile/spawnfloor\";\r\nimport { VendingMachine } from \"../entity/object/vendingMachine\";\r\nimport { Chest } from \"../entity/object/chest\";\r\nimport { Bomb } from \"../entity/object/bomb\";\r\nimport { Resource } from \"../entity/resource/resource\";\r\nimport { Heart } from \"../item/usable/heart\";\r\nimport { Candle } from \"../item/light/candle\";\r\nimport { Armor } from \"../item/armor\";\r\nimport { Spear } from \"../item/weapon/spear\";\r\nimport { Torch } from \"../item/light/torch\";\r\nimport { Item } from \"../item/item\";\r\nimport { GoldenKey } from \"../item/goldenKey\";\r\nimport { FountainTile } from \"../tile/fountainTile\";\r\nimport { InsideLevelDoor } from \"../tile/insideLevelDoor\";\r\nimport { Button } from \"../tile/button\";\r\nimport { UpLadder } from \"../tile/upLadder\";\r\n// (keep single import)\r\nimport { ItemGroup } from \"../item/itemGroup\";\r\nimport { Warhammer } from \"../item/weapon/warhammer\";\r\nimport { Sword } from \"../item/weapon/sword\";\r\nimport { Pickaxe } from \"../item/tool/pickaxe\";\r\nimport { Shotgun } from \"../item/weapon/shotgun\";\r\nimport { Tile } from \"../tile/tile\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { CrabEnemy } from \"../entity/enemy/crabEnemy\";\r\nimport { FrogEnemy } from \"../entity/enemy/frogEnemy\";\r\nimport { ZombieEnemy } from \"../entity/enemy/zombieEnemy\";\r\nimport { SkullEnemy } from \"../entity/enemy/skullEnemy\";\r\nimport { EnergyWizardEnemy } from \"../entity/enemy/energyWizard\";\r\nimport { ChargeEnemy } from \"../entity/enemy/chargeEnemy\";\r\nimport { RookEnemy } from \"../entity/enemy/rookEnemy\";\r\nimport { BishopEnemy } from \"../entity/enemy/bishopEnemy\";\r\nimport { ArmoredzombieEnemy } from \"../entity/enemy/armoredzombieEnemy\";\r\nimport { BigSkullEnemy } from \"../entity/enemy/bigSkullEnemy\";\r\nimport { QueenEnemy } from \"../entity/enemy/queenEnemy\";\r\nimport { KnightEnemy } from \"../entity/enemy/knightEnemy\";\r\nimport { BigKnightEnemy } from \"../entity/enemy/bigKnightEnemy\";\r\nimport { ArmoredSkullEnemy } from \"../entity/enemy/armoredSkullEnemy\";\r\nimport { FireWizardEnemy } from \"../entity/enemy/fireWizard\";\r\nimport { OccultistEnemy } from \"../entity/enemy/occultistEnemy\";\r\nimport { Spawner } from \"../entity/enemy/spawner\";\r\nimport { BigZombieEnemy } from \"../entity/enemy/bigZombieEnemy\";\r\nimport { CoalResource } from \"../entity/resource/coalResource\";\r\nimport { GoldResource } from \"../entity/resource/goldResource\";\r\nimport { EmeraldResource } from \"../entity/resource/emeraldResource\";\r\nimport { Pool } from \"../tile/pool\";\r\nimport { MagmaPool } from \"../tile/magmaPool\";\r\nimport { WardenEnemy } from \"../entity/enemy/wardenEnemy\";\r\nimport { FishingRod } from \"../item/tool/fishingRod\";\r\nimport { Hammer } from \"../item/tool/hammer\";\r\nimport { Window } from \"../tile/window\";\r\nimport { SidePathOptions } from \"../level/sidePathManager\";\r\nimport { BigFrogEnemy } from \"../entity/enemy/bigFrogEnemy\";\r\nimport { ExalterEnemy } from \"../entity/enemy/exalterEnemy\";\r\n\r\n// Add after the imports, create a reverse mapping from ID to enemy name\r\nconst enemyIdToName: Record<number, string> = {};\r\nfor (const [enemyClass, id] of enemyClassToId.entries()) {\r\n  enemyIdToName[id] = enemyClass.name;\r\n}\r\n\r\nexport class Populator {\r\n  level: Level;\r\n  medianDensity: number;\r\n  private props: { x: number; y: number }[] = [];\r\n  addedDownladder: boolean = false;\r\n  private levelEnemyPoolIds: number[]; // Add this property to store the calculated enemy pool\r\n  private skipPopulation: boolean = false;\r\n\r\n  constructor(level: Level, skipPopulation: boolean = false) {\r\n    this.level = level;\r\n    this.props = [];\r\n    this.medianDensity = GameplaySettings.MEDIAN_ROOM_DENSITY;\r\n\r\n    // Calculate enemy pool once for this level\r\n    this.levelEnemyPoolIds = this.generateEnemyPoolIds(this.level.depth);\r\n  }\r\n\r\n  populateRooms = () => {\r\n    if (this.skipPopulation) return;\r\n    // add environmental features to all rooms\r\n    this.level.rooms.forEach((room) => {\r\n      this.addEnvironmentalFeatures(room, Random.rand);\r\n    });\r\n\r\n    // populate each room by type (no enemies added here)\r\n    for (let room of this.level.rooms) {\r\n      this.populate(room, Random.rand);\r\n    }\r\n\r\n    // populate each room by environment (enemies added here)\r\n    this.level.rooms.forEach((room) => {\r\n      if (\r\n        room.type === RoomType.START ||\r\n        room.type === RoomType.DOWNLADDER ||\r\n        room.type === RoomType.UPLADDER ||\r\n        room.type === RoomType.ROPEHOLE ||\r\n        room.type === RoomType.ROPECAVE\r\n      )\r\n        return;\r\n\r\n      this.populateByEnvironment(room);\r\n    });\r\n\r\n    // add boss to furthest room from upladder if not main path\r\n    const furthestFromUpLadder = this.level.getFurthestFromLadder(\"up\");\r\n    if (furthestFromUpLadder && !this.level.isMainPath) {\r\n      this.populateBoss(furthestFromUpLadder, Random.rand);\r\n    }\r\n\r\n    if (this.level.depth === 0) return;\r\n\r\n    console.log(`Adding downladder with ${this.numRooms()} rooms`);\r\n    if (this.level.environment.type === EnvType.DUNGEON) {\r\n      this.addDownladder({\r\n        caveRooms: this.numRooms(),\r\n        locked: true,\r\n        linearity: 1,\r\n      });\r\n    }\r\n\r\n    if (this.level.environment.type === EnvType.CAVE) {\r\n      return;\r\n      this.addDownladder({\r\n        caveRooms: this.numRooms(),\r\n        locked: true,\r\n        envType: EnvType.MAGMA_CAVE,\r\n        linearity: 0.5,\r\n      });\r\n    }\r\n\r\n    if (this.level.environment.type === EnvType.DARK_DUNGEON) {\r\n      this.addDownladder({\r\n        caveRooms: this.numRooms() * 2,\r\n        locked: true,\r\n        envType: EnvType.DARK_CASTLE,\r\n        linearity: 0.8,\r\n      });\r\n    }\r\n\r\n    if (this.level.environment.type === EnvType.DARK_CASTLE) {\r\n      this.addDownladder({\r\n        caveRooms: this.numRooms() * 2,\r\n        locked: true,\r\n        envType: EnvType.MAGMA_CAVE,\r\n        linearity: 0.5,\r\n      });\r\n    }\r\n\r\n    if (this.level.environment.type === EnvType.FOREST) {\r\n      this.addDownladder({\r\n        caveRooms: this.numRooms(),\r\n        locked: true,\r\n        envType: EnvType.CASTLE,\r\n        linearity: 0.8,\r\n      });\r\n    }\r\n\r\n    if (this.level.environment.type === EnvType.CASTLE) {\r\n      return;\r\n      this.addDownladder({\r\n        caveRooms: this.numRooms(),\r\n        locked: true,\r\n        envType: EnvType.DARK_CASTLE,\r\n        linearity: 0.8,\r\n      });\r\n    }\r\n\r\n    this.linkExitToStart();\r\n\r\n    //this.level.distributeKeys();\r\n  };\r\n\r\n  populateByEnvironment = (room: Room) => {\r\n    switch (room.envType) {\r\n      case EnvType.CAVE:\r\n        this.populateCaveEnvironment(room);\r\n        break;\r\n      case EnvType.FOREST:\r\n        this.populateForestEnvironment(room);\r\n        break;\r\n      case EnvType.MAGMA_CAVE:\r\n        this.populateMagmaCaveEnvironment(room);\r\n        break;\r\n      case EnvType.CASTLE:\r\n        this.populateCastleEnvironment(room);\r\n        break;\r\n      default:\r\n        this.populateDefaultEnvironment(room);\r\n        break;\r\n    }\r\n  };\r\n\r\n  linkExitToStart = () => {\r\n    console.log(\"linkExitToStart\", this.level.isMainPath);\r\n    if (this.level.isMainPath) return;\r\n    this.level.setExitRoom(false);\r\n    this.level.setStartRoom(false);\r\n    const exitRoom = this.level.exitRoom;\r\n    const startRoom = this.level.startRoom;\r\n    if (!startRoom || !exitRoom) return;\r\n    exitRoom.linkExitToStart(startRoom);\r\n  };\r\n\r\n  addTrainingDownladder = (opts: SidePathOptions) => {\r\n    if (this.level.depth !== 0) return;\r\n    const room = this.level.rooms.find((room) => room.type === RoomType.START);\r\n    if (!room) return;\r\n    const validTiles = room.getEmptyTilesNotBlockingDoors();\r\n    if (validTiles.length === 0) {\r\n      console.warn(\r\n        \"No valid positions for training downladder that don't block doors\",\r\n      );\r\n      return;\r\n    }\r\n    const position = room.getRandomEmptyPosition(validTiles);\r\n    if (\r\n      position === null ||\r\n      position.x === undefined ||\r\n      position.y === undefined\r\n    )\r\n      return;\r\n\r\n    const dl = new DownLadder(\r\n      room,\r\n      this.level.game,\r\n      position.x,\r\n      position.y,\r\n      true,\r\n      EnvType.DUNGEON,\r\n      LockType.NONE,\r\n      opts,\r\n      { lockType: LockType.NONE },\r\n    );\r\n\r\n    room.roomArray[position.x][position.y] = dl;\r\n  };\r\n\r\n  addDownladder = (opts: SidePathOptions) => {\r\n    const rooms = this.level.rooms.filter(\r\n      (room) =>\r\n        room.type !== RoomType.START &&\r\n        room.type !== RoomType.DOWNLADDER &&\r\n        room.type !== RoomType.UPLADDER &&\r\n        room.type !== RoomType.ROPEHOLE &&\r\n        room.type !== RoomType.BOSS,\r\n    );\r\n\r\n    const downLadderRoom = this.level.isMainPath\r\n      ? rooms[Math.floor(Random.rand() * rooms.length)]\r\n      : this.level.getFurthestFromLadder(\"up\");\r\n\r\n    console.log(\r\n      `Selected room for downladder: Type=${downLadderRoom.type}, Doors=${downLadderRoom.doors.length}`,\r\n    );\r\n\r\n    // Use the new method to get empty tiles that don't block doors\r\n    const validTiles = downLadderRoom.getEmptyTilesNotBlockingDoors();\r\n\r\n    if (validTiles.length === 0) {\r\n      console.warn(\"No valid positions for downladder that don't block doors\");\r\n      return;\r\n    }\r\n\r\n    const position = downLadderRoom.getRandomEmptyPosition(validTiles);\r\n    if (\r\n      position === null ||\r\n      position.x === undefined ||\r\n      position.y === undefined\r\n    )\r\n      return;\r\n\r\n    console.log(\r\n      `Placing downladder at position (${position.x}, ${position.y})`,\r\n    );\r\n\r\n    // Place a DownLadder tile directly; avoid entity side-effects post-load\r\n    const env = opts?.envType\r\n      ? opts.envType\r\n      : downLadderRoom.depth < 2\r\n        ? EnvType.FOREST\r\n        : downLadderRoom.depth > 2\r\n          ? Random.rand() < 0.5\r\n            ? EnvType.FOREST\r\n            : EnvType.CAVE\r\n          : EnvType.CAVE;\r\n    const lockOverride =\r\n      opts && typeof opts.locked === \"boolean\"\r\n        ? { lockType: opts.locked ? LockType.LOCKED : LockType.NONE }\r\n        : undefined;\r\n\r\n    const dl = new DownLadder(\r\n      downLadderRoom,\r\n      this.level.game,\r\n      position.x,\r\n      position.y,\r\n      true,\r\n      env,\r\n      LockType.NONE,\r\n      opts,\r\n      lockOverride,\r\n    );\r\n\r\n    downLadderRoom.roomArray[position.x][position.y] = dl;\r\n    if (dl.lockable.isLocked()) {\r\n      console.log(\"adding key to downladder\");\r\n      this.level.distributeKey(dl);\r\n    }\r\n  };\r\n\r\n  populateByType = (room: Room) => {};\r\n\r\n  private addProps(room: Room, numProps: number, envType?: EnvType) {\r\n    const envData = envType\r\n      ? environmentData[envType]\r\n      : environmentData[room.level.environment.type];\r\n    let tiles = room.getEmptyTiles();\r\n\r\n    for (let i = 0; i < numProps; i++) {\r\n      if (tiles.length === 0) break;\r\n\r\n      const selectedProp = Utils.randTableWeighted(envData.props);\r\n      if (!selectedProp) continue;\r\n\r\n      // Determine required footprint\r\n      const size = selectedProp.size || { w: 1, h: 1 };\r\n\r\n      // Find a placement that fits the footprint on currently-empty tiles\r\n      const pos =\r\n        size.w === 1 && size.h === 1\r\n          ? room.getRandomEmptyPosition(tiles)\r\n          : room.getEmptyAreaPosition(tiles, size.w, size.h);\r\n\r\n      if (!pos) break;\r\n      const { x, y } = pos;\r\n\r\n      // Place the prop\r\n      if (selectedProp.class && selectedProp.class.add) {\r\n        const args = selectedProp.additionalParams || [];\r\n        selectedProp.class.add(room, room.game, x, y, ...args);\r\n      }\r\n\r\n      // Remove used tiles from the tiles list according to footprint\r\n      for (let dx = 0; dx < size.w; dx++) {\r\n        for (let dy = 0; dy < size.h; dy++) {\r\n          const idx = tiles.findIndex((t) => t.x === x + dx && t.y === y + dy);\r\n          if (idx !== -1) tiles.splice(idx, 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds props with clustering behavior - entities are more likely to be placed near existing entities\r\n   * @param room - The room to populate\r\n   * @param numProps - Number of props to place\r\n   * @param envType - Environment type for prop selection\r\n   * @param clusteringOptions - Optional clustering configuration\r\n   */\r\n  private addPropsWithClustering(\r\n    room: Room,\r\n    numProps: number,\r\n    envType?: EnvType,\r\n    clusteringOptions?: ClusteringOptions,\r\n  ) {\r\n    const envData = envType\r\n      ? environmentData[envType]\r\n      : environmentData[room.level.environment.type];\r\n\r\n    const clusterer = new PropClusterer(room, clusteringOptions);\r\n    const positions = clusterer.generateClusteredPositions(numProps);\r\n\r\n    // Convert clustered single-tile seeds into valid placements for larger footprints\r\n    let tiles = room.getEmptyTiles();\r\n    for (const seed of positions) {\r\n      if (tiles.length === 0) break;\r\n      const selectedProp = Utils.randTableWeighted(envData.props);\r\n      if (!selectedProp) continue;\r\n      const size = selectedProp.size || { w: 1, h: 1 };\r\n\r\n      let pos: { x: number; y: number } | null = null;\r\n      if (size.w === 1 && size.h === 1) {\r\n        // Use the seed directly if available\r\n        const hasSeed = tiles.some((t) => t.x === seed.x && t.y === seed.y);\r\n        pos = hasSeed\r\n          ? { x: seed.x, y: seed.y }\r\n          : room.getRandomEmptyPosition(tiles);\r\n      } else {\r\n        // Try to anchor the footprint at or near the seed\r\n        // First, build a small neighborhood tile list near the seed\r\n        const neighborhood = tiles.filter(\r\n          (t) =>\r\n            Math.abs(t.x - seed.x) <= size.w &&\r\n            Math.abs(t.y - seed.y) <= size.h,\r\n        );\r\n        pos = room.getEmptyAreaPosition(\r\n          neighborhood.length ? neighborhood : tiles,\r\n          size.w,\r\n          size.h,\r\n        );\r\n      }\r\n\r\n      if (!pos) continue;\r\n      const { x, y } = pos;\r\n\r\n      if (selectedProp.class && selectedProp.class.add) {\r\n        const args = selectedProp.additionalParams || [];\r\n        selectedProp.class.add(room, room.game, x, y, ...args);\r\n      }\r\n\r\n      for (let dx = 0; dx < size.w; dx++) {\r\n        for (let dy = 0; dy < size.h; dy++) {\r\n          const idx = tiles.findIndex((t) => t.x === x + dx && t.y === y + dy);\r\n          if (idx !== -1) tiles.splice(idx, 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private populateDungeonEnvironment(room: Room) {\r\n    this.populateDefaultEnvironment(room);\r\n  }\r\n\r\n  private populateCaveEnvironment(room: Room) {\r\n    const numProps = this.getNumProps(room);\r\n    //this.addProps(room, numProps, room.envType);\r\n    this.addPropsWithClustering(room, numProps, room.envType, {\r\n      falloffExponent: 2,\r\n      baseScore: 0.1,\r\n      maxInfluenceDistance: 12,\r\n      useSeedPosition: false,\r\n    });\r\n\r\n    // ADD: Enemies after props, based on remaining space\r\n    this.addRandomEnemies(room);\r\n  }\r\n\r\n  private populateForestEnvironment(room: Room) {\r\n    const numProps = this.getNumProps(room, 0.75);\r\n    //this.addProps(room, numProps, room.envType);\r\n    this.addPropsWithClustering(room, numProps, room.envType, {\r\n      falloffExponent: 2,\r\n      baseScore: 0.1,\r\n      maxInfluenceDistance: 12,\r\n      useSeedPosition: false,\r\n    });\r\n\r\n    // ADD: Enemies after props, based on remaining space\r\n    this.addRandomEnemies(room);\r\n  }\r\n\r\n  private populateMagmaCaveEnvironment(room: Room) {\r\n    const numProps = this.getNumProps(room);\r\n    this.addPropsWithClustering(room, numProps, room.envType, {\r\n      falloffExponent: 2,\r\n      baseScore: 0.1,\r\n      maxInfluenceDistance: 12,\r\n      useSeedPosition: false,\r\n    });\r\n\r\n    // ADD: Enemies after props, based on remaining space\r\n    this.addRandomEnemies(room);\r\n  }\r\n\r\n  private populateCastleEnvironment(room: Room) {\r\n    const numProps = this.getNumProps(room);\r\n    this.addPropsWithClustering(room, numProps, room.envType, {\r\n      falloffExponent: 2,\r\n      baseScore: 0.1,\r\n      maxInfluenceDistance: 12,\r\n      useSeedPosition: false,\r\n    });\r\n\r\n    // ADD: Enemies after props, based on remaining space\r\n    this.addRandomEnemies(room);\r\n  }\r\n\r\n  private getNumProps(room: Room, medianDensity?: number) {\r\n    medianDensity = medianDensity || this.medianDensity;\r\n    const numEmptyTiles = room.getEmptyTiles().length;\r\n    const numProps = Utils.randomNormalInt(0, numEmptyTiles, {\r\n      median: Math.ceil(medianDensity * numEmptyTiles),\r\n    });\r\n    const percentFull = Math.round((numProps / numEmptyTiles) * 100);\r\n    //console.log(\"percentFull\", `${percentFull}%`);\r\n    return numProps;\r\n  }\r\n\r\n  private populateDefaultEnvironment(room: Room) {\r\n    const numProps = this.getNumProps(room);\r\n    //this.addProps(room, numProps, room.envType);\r\n    this.addPropsWithClustering(room, numProps, room.envType, {\r\n      falloffExponent: 2,\r\n      baseScore: 0.1,\r\n      maxInfluenceDistance: 12,\r\n      useSeedPosition: false,\r\n    });\r\n\r\n    // ADD: Enemies after props, based on remaining space\r\n    this.addRandomEnemies(room);\r\n  }\r\n\r\n  numRooms = () => {\r\n    // calculate a base room number based on depth\r\n    const baseTotalRooms = Math.ceil(10 * 1.05 ** this.level.depth);\r\n    // find the difference between the base total rooms and the number of rooms in the level\r\n    const roomDiff = baseTotalRooms - this.level.rooms.length;\r\n    // add sidepath rooms to offset the room difference\r\n    return Math.max(roomDiff, 5);\r\n  };\r\n\r\n  // #region TILE ADDING METHODS\r\n  private addDoorTorches(room: Room, x: number, y: number, doorDir: Direction) {\r\n    if (doorDir !== Direction.UP && doorDir !== Direction.DOWN) {\r\n      return;\r\n    }\r\n\r\n    if (x && y) {\r\n      room.calculateWallInfo();\r\n      const leftWallInfo = room.wallInfo.get(`${x - 1},${y}`);\r\n      const rightWallInfo = room.wallInfo.get(`${x + 1},${y}`);\r\n      const leftTile = room.roomArray[x - 1]?.[y];\r\n      const rightTile = room.roomArray[x + 1]?.[y];\r\n      const leftOpen = leftWallInfo?.isLeftWall === false;\r\n      const rightOpen = rightWallInfo?.isRightWall === false;\r\n\r\n      const bottomWall = doorDir === Direction.DOWN ? true : false;\r\n\r\n      if (leftOpen) {\r\n        room.roomArray[x - 1][y] = new WallTorch(room, x - 1, y, bottomWall);\r\n      }\r\n\r\n      if (rightOpen) {\r\n        room.roomArray[x + 1][y] = new WallTorch(room, x + 1, y, bottomWall);\r\n      }\r\n    }\r\n  }\r\n\r\n  private addTorches(\r\n    room: Room,\r\n    numTorches: number,\r\n    rand: () => number,\r\n    placeX?: number,\r\n    placeY?: number,\r\n  ) {\r\n    if (\r\n      room.level.environment.type === EnvType.FOREST &&\r\n      room.type !== RoomType.DOWNLADDER\r\n    )\r\n      return;\r\n\r\n    if (\r\n      placeX !== undefined &&\r\n      placeY !== undefined &&\r\n      room.roomArray[placeX]?.[placeY] instanceof Wall\r\n    ) {\r\n      room.roomArray[placeX][placeY] = new WallTorch(room, placeX, placeY);\r\n\r\n      return;\r\n    }\r\n\r\n    let walls = [];\r\n    for (let xx = room.roomX + 1; xx < room.roomX + room.width - 2; xx++) {\r\n      for (let yy = room.roomY; yy < room.roomY + room.height - 1; yy++) {\r\n        if (\r\n          room.roomArray[xx][yy] instanceof Wall &&\r\n          !(room.roomArray[xx][yy + 1] instanceof Wall)\r\n        ) {\r\n          walls.push(room.roomArray[xx][yy]);\r\n        }\r\n      }\r\n    }\r\n    let bottomWalls = [];\r\n    // Separate loop for bottom wall\r\n    for (let xx = room.roomX + 1; xx < room.roomX + room.width - 2; xx++) {\r\n      const yy = room.roomY + room.height - 1; // Bottom wall\r\n      if (\r\n        room.roomArray[xx][yy] instanceof Wall &&\r\n        !(room.roomArray[xx][yy + 1] instanceof Wall)\r\n      ) {\r\n        bottomWalls.push(room.roomArray[xx][yy]);\r\n      }\r\n    }\r\n\r\n    // Randomly distribute torches between walls and bottom walls\r\n    const wallTorches = Game.rand(0, numTorches, rand);\r\n    const bottomWallTorches = numTorches - wallTorches;\r\n\r\n    for (let i = 0; i < wallTorches; i++) {\r\n      if (walls.length == 0) break;\r\n      const randomIndex = Game.rand(0, walls.length - 1, rand);\r\n      const t = walls.splice(randomIndex, 1)[0];\r\n      const x = t.x;\r\n      const y = t.y;\r\n      room.roomArray[x][y] = new WallTorch(room, x, y);\r\n    }\r\n    for (let i = 0; i < bottomWallTorches; i++) {\r\n      if (bottomWalls.length == 0) break;\r\n      const randomIndex = Game.rand(0, bottomWalls.length - 1, rand);\r\n      const t = bottomWalls.splice(randomIndex, 1)[0];\r\n      const x = t.x;\r\n      const y = t.y;\r\n      room.roomArray[x][y] = new WallTorch(room, x, y, true);\r\n    }\r\n  }\r\n\r\n  // Windows: analogous helpers to torches\r\n  private addDoorWindows(room: Room, x: number, y: number, doorDir: Direction) {\r\n    if (doorDir !== Direction.UP && doorDir !== Direction.DOWN) {\r\n      return;\r\n    }\r\n\r\n    if (x && y) {\r\n      room.calculateWallInfo();\r\n      const leftWallInfo = room.wallInfo.get(`${x - 1},${y}`);\r\n      const rightWallInfo = room.wallInfo.get(`${x + 1},${y}`);\r\n      const leftOpen = leftWallInfo?.isLeftWall === false;\r\n      const rightOpen = rightWallInfo?.isRightWall === false;\r\n\r\n      const bottomWall = doorDir === Direction.DOWN ? true : false;\r\n\r\n      if (leftOpen && room.roomArray[x - 1]?.[y] instanceof Wall) {\r\n        room.roomArray[x - 1][y] = new Window(room, x - 1, y, bottomWall);\r\n      }\r\n\r\n      if (rightOpen && room.roomArray[x + 1]?.[y] instanceof Wall) {\r\n        room.roomArray[x + 1][y] = new Window(room, x + 1, y, bottomWall);\r\n      }\r\n    }\r\n  }\r\n\r\n  private addWindows(\r\n    room: Room,\r\n    numWindows: number,\r\n    rand: () => number,\r\n    placeX?: number,\r\n    placeY?: number,\r\n  ) {\r\n    // Restrict windows to castle-themed rooms to keep them sensible\r\n    const isCastle =\r\n      room.envType === EnvType.CASTLE ||\r\n      room.level.environment.type === EnvType.CASTLE;\r\n    if (!isCastle) return;\r\n\r\n    if (\r\n      placeX !== undefined &&\r\n      placeY !== undefined &&\r\n      room.roomArray[placeX]?.[placeY] instanceof Wall\r\n    ) {\r\n      room.roomArray[placeX][placeY] = new Window(room, placeX, placeY);\r\n      return;\r\n    }\r\n\r\n    let walls: any[] = [];\r\n    for (let xx = room.roomX + 1; xx < room.roomX + room.width - 2; xx++) {\r\n      for (let yy = room.roomY; yy < room.roomY + room.height - 1; yy++) {\r\n        if (\r\n          room.roomArray[xx][yy] instanceof Wall &&\r\n          !(room.roomArray[xx][yy + 1] instanceof Wall)\r\n        ) {\r\n          walls.push(room.roomArray[xx][yy]);\r\n        }\r\n      }\r\n    }\r\n\r\n    let bottomWalls: any[] = [];\r\n    for (let xx = room.roomX + 1; xx < room.roomX + room.width - 2; xx++) {\r\n      const yy = room.roomY + room.height - 1;\r\n      if (\r\n        room.roomArray[xx][yy] instanceof Wall &&\r\n        !(room.roomArray[xx][yy + 1] instanceof Wall)\r\n      ) {\r\n        bottomWalls.push(room.roomArray[xx][yy]);\r\n      }\r\n    }\r\n\r\n    const wallWindows = Game.rand(0, numWindows, rand);\r\n    const bottomWallWindows = numWindows - wallWindows;\r\n\r\n    for (let i = 0; i < wallWindows; i++) {\r\n      if (walls.length === 0) break;\r\n      const randomIndex = Game.rand(0, walls.length - 1, rand);\r\n      const t = walls.splice(randomIndex, 1)[0];\r\n      const x = t.x;\r\n      const y = t.y;\r\n      room.roomArray[x][y] = new Window(room, x, y);\r\n    }\r\n\r\n    for (let i = 0; i < bottomWallWindows; i++) {\r\n      if (bottomWalls.length === 0) break;\r\n      const randomIndex = Game.rand(0, bottomWalls.length - 1, rand);\r\n      const t = bottomWalls.splice(randomIndex, 1)[0];\r\n      const x = t.x;\r\n      const y = t.y;\r\n      room.roomArray[x][y] = new Window(room, x, y, true);\r\n    }\r\n  }\r\n\r\n  private addRectangularTileArea<\r\n    T extends new (\r\n      room: Room,\r\n      x: number,\r\n      y: number,\r\n      leftEdge: boolean,\r\n      rightEdge: boolean,\r\n      topEdge: boolean,\r\n      bottomEdge: boolean,\r\n    ) => any,\r\n  >(room: Room, rand: () => number, TileClass: T) {\r\n    let w = Game.rand(2, 4, rand);\r\n    let h = Game.rand(2, 4, rand);\r\n    let xmin = room.roomX + 2;\r\n    let xmax = room.roomX + room.width - w - 2;\r\n    let ymin = room.roomY + 2;\r\n    let ymax = room.roomY + room.height - h - 2;\r\n    if (xmax < xmin || ymax < ymin) return;\r\n    let x = Game.rand(xmin, xmax, rand);\r\n    let y = Game.rand(ymin, ymax, rand);\r\n\r\n    let clear = true;\r\n\r\n    for (let xx = x - 1; xx < x + w + 1; xx++) {\r\n      for (let yy = y - 1; yy < y + h + 1; yy++) {\r\n        const tile = room.roomArray[xx][yy];\r\n        if (\r\n          (tile instanceof SpawnFloor && !tile.isSolid()) ||\r\n          //tile instanceof Wall ||\r\n          tile instanceof Pool ||\r\n          tile instanceof Chasm\r\n        )\r\n          clear = false;\r\n      }\r\n    }\r\n    if (!clear) {\r\n      console.warn(\"no space for \" + TileClass.name);\r\n    } else {\r\n      console.log(\"space for \" + TileClass.name);\r\n    }\r\n    if (!clear) return;\r\n    for (let xx = x - 1; xx < x + w + 1; xx++) {\r\n      for (let yy = y - 1; yy < y + h + 1; yy++) {\r\n        // add a floor border\r\n        if (xx === x - 1 || xx === x + w || yy === y - 1 || yy === y + h) {\r\n          const tile = room.roomArray[xx][yy];\r\n          if (\r\n            !(tile instanceof SpawnFloor && !tile.isSolid()) &&\r\n            !(tile instanceof Wall) &&\r\n            !(tile instanceof Pool) &&\r\n            !(tile instanceof Chasm)\r\n          )\r\n            room.roomArray[xx][yy] = new Floor(room, xx, yy);\r\n        } else\r\n          room.roomArray[xx][yy] = new TileClass(\r\n            room,\r\n            xx,\r\n            yy,\r\n            xx === x,\r\n            xx === x + w - 1,\r\n            yy === y,\r\n            yy === y + h - 1,\r\n          );\r\n      }\r\n    }\r\n  }\r\n  private addChasms(room: Room, rand: () => number) {\r\n    this.addRectangularTileArea(room, rand, Chasm);\r\n  }\r\n\r\n  private addMagmaPools(room: Room, rand: () => number) {\r\n    this.addRectangularTileArea(room, rand, MagmaPool);\r\n  }\r\n\r\n  private addPools(room: Room, rand: () => number) {\r\n    this.addRectangularTileArea(room, rand, Pool);\r\n  }\r\n\r\n  private addSpikeTraps(room: Room, numSpikes: number, rand: () => number) {\r\n    if (\r\n      room.level.environment.type === EnvType.FOREST ||\r\n      room.envType === EnvType.FOREST\r\n    )\r\n      return;\r\n    // add spikes\r\n    let tiles = room.getEmptyTiles();\r\n    for (let i = 0; i < numSpikes; i++) {\r\n      const position = room.getRandomEmptyPosition(tiles);\r\n      if (position === null) break;\r\n      const { x, y } = position;\r\n      room.roomArray[x][y] = new SpikeTrap(room, x, y);\r\n    }\r\n  }\r\n  // #endregion\r\n\r\n  // #region ADDING ENTITIES\r\n\r\n  /**\r\n   * Elegant enemy spawning that combines environment selection with progression control\r\n   */\r\n  private addEnemiesUnified(room: Room, numEnemies: number, envType?: EnvType) {\r\n    if (GameplaySettings.NO_ENEMIES === true) return;\r\n\r\n    // Get filtered enemies using our centralized logic\r\n    const availableEnemies = this.getAvailableEnemiesForRoom(room, envType);\r\n\r\n    if (availableEnemies.length === 0) {\r\n      console.log(\r\n        `No enemies available for environment ${envType || room.level.environment.type} at depth ${room.depth}`,\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Use existing spawning logic with filtered enemies\r\n    this.spawnEnemiesFromPool(room, numEnemies, availableEnemies);\r\n\r\n    // Add special enemies (spawners, occultists)\r\n    this.addSpecialEnemies(room);\r\n  }\r\n\r\n  /**\r\n   * Core method: Get available enemies filtered by environment and progression\r\n   */\r\n  private getAvailableEnemiesForRoom(\r\n    room: Room,\r\n    envType?: EnvType,\r\n  ): EnemyInfo[] {\r\n    const environment = envType || room.level.environment.type;\r\n    const envData = environmentData[environment];\r\n\r\n    // Use pre-calculated enemy pool instead of generating it for each room\r\n    const allowedEnemyIds = this.levelEnemyPoolIds;\r\n\r\n    // Filter environment enemies by allowed pool and add IDs\r\n    const availableEnemies = envData.enemies\r\n      .map((enemy) => ({\r\n        ...enemy,\r\n        id: enemyClassToId.get(enemy.class), // Add ID dynamically\r\n      }))\r\n      .filter(\r\n        (enemy) =>\r\n          enemy.id &&\r\n          allowedEnemyIds.includes(enemy.id) &&\r\n          (enemy.minDepth ?? 0) <= room.depth,\r\n      );\r\n\r\n    console.log(\r\n      `Depth ${room.depth}, Env ${environment}: Pool [${allowedEnemyIds.map((id) => enemyIdToName[id] || `Unknown(${id})`).join(\", \")} ] -> Available [${availableEnemies\r\n        .map((e) => enemyIdToName[e.id!] || `Unknown(${e.id})`)\r\n        .join(\", \")}]`,\r\n    );\r\n\r\n    return availableEnemies;\r\n  }\r\n\r\n  /**\r\n   * Spawn enemies from the filtered pool using existing logic\r\n   */\r\n  private spawnEnemiesFromPool(\r\n    room: Room,\r\n    numEnemies: number,\r\n    enemyPool: EnemyInfo[],\r\n  ) {\r\n    let tiles = room.getEmptyTiles();\r\n    if (tiles.length === 0) return;\r\n\r\n    // Existing door avoidance logic\r\n    const excludedCoords = new Set<string>();\r\n    for (const door of room.doors) {\r\n      for (let dx = -2; dx <= 2; dx++) {\r\n        for (let dy = -2; dy <= 2; dy++) {\r\n          excludedCoords.add(`${door.x + dx},${door.y + dy}`);\r\n        }\r\n      }\r\n    }\r\n    tiles = tiles.filter((tile) => !excludedCoords.has(`${tile.x},${tile.y}`));\r\n\r\n    // Spawn enemies\r\n    for (let i = 0; i < numEnemies; i++) {\r\n      if (tiles.length === 0) break;\r\n      const position = room.getRandomEmptyPosition(tiles);\r\n      if (position === null) break;\r\n      const { x, y } = position;\r\n\r\n      const selectedEnemy = Utils.randTableWeighted(enemyPool);\r\n      if (!selectedEnemy?.class?.add) continue;\r\n\r\n      const args = selectedEnemy.additionalParams || [];\r\n\r\n      // Handle special spawn logic\r\n      if (selectedEnemy.specialSpawnLogic === \"clearFloor\") {\r\n        const enemy = new selectedEnemy.class(room, room.game, x, y, ...args);\r\n        if (this.canPlaceBigEnemy(room, enemy, x, y, tiles)) {\r\n          room.entities.push(enemy);\r\n          this.clearFloorForBigEnemy(room, x, y, enemy.w, enemy.h, enemy);\r\n          this.removeTilesForEnemy(tiles, x, y, enemy.w, enemy.h);\r\n        } else {\r\n          numEnemies++; // Retry\r\n        }\r\n      } else {\r\n        selectedEnemy.class.add(room, room.game, x, y, ...args);\r\n        tiles = tiles.filter((t) => !(t.x === x && t.y === y));\r\n      }\r\n    }\r\n    console.log(\r\n      `Spawned ${numEnemies} enemies from pool for total empty tiles ${tiles.length}`,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add special enemies (spawners, occultists) - extracted for clarity\r\n   */\r\n  private addSpecialEnemies(room: Room) {\r\n    // Spawner logic - now based on room area and probability\r\n    if (room.depth > GameplaySettings.SPAWNER_MIN_DEPTH) {\r\n      this.addSpawners(room, Random.rand);\r\n    }\r\n\r\n    // Occultist logic - now based on room area and probability\r\n    if (room.depth > GameplaySettings.OCCULTIST_MIN_DEPTH) {\r\n      this.addOccultists(room, Random.rand);\r\n    }\r\n  }\r\n\r\n  // === ENEMY POOL GENERATION LOGIC (moved from Level) ===\r\n\r\n  /**\r\n   * Generate enemy pool IDs based on depth and progression rules\r\n   */\r\n  private generateEnemyPoolIds(depth: number): number[] {\r\n    // Derive pool from the CURRENT environment's enemies using their minDepth\r\n    const env = this.level.environment.type;\r\n    const envEnemies = environmentData[env].enemies;\r\n\r\n    const availableEnemies = envEnemies\r\n      .map((enemy) => ({\r\n        id: enemyClassToId.get(enemy.class),\r\n        minDepth: enemy.minDepth ?? 0,\r\n      }))\r\n      .filter((e) => typeof e.id === \"number\" && e.minDepth <= depth)\r\n      .map((e) => e.id as number);\r\n\r\n    // Get new enemies not yet encountered\r\n    const newEnemies = availableEnemies.filter(\r\n      (id) => !this.level.game.encounteredEnemies.includes(id),\r\n    );\r\n\r\n    // Add 1-2 new enemies per level (if limiting is enabled)\r\n    const newEnemiesToAddCount = GameplaySettings.LIMIT_ENEMY_TYPES\r\n      ? Math.min(newEnemies.length, GameplaySettings.NEW_ENEMIES_PER_LEVEL)\r\n      : newEnemies.length;\r\n\r\n    const newEnemiesToAdd = this.getRandomElements(\r\n      newEnemies,\r\n      newEnemiesToAddCount,\r\n    );\r\n    this.level.game.encounteredEnemies.push(...newEnemiesToAdd);\r\n\r\n    // Get current enemy pool\r\n    const enemyPoolIds = this.level.game.encounteredEnemies.slice();\r\n\r\n    // Limit variety if setting is enabled\r\n    const numberOfTypes = GameplaySettings.LIMIT_ENEMY_TYPES\r\n      ? this.getNumberOfEnemyTypes(depth)\r\n      : enemyPoolIds.length;\r\n\r\n    const selectedEnemyIds = this.getRandomElements(\r\n      enemyPoolIds,\r\n      numberOfTypes,\r\n    );\r\n    return Array.from(new Set(selectedEnemyIds)).slice(0, numberOfTypes);\r\n  }\r\n\r\n  /**\r\n   * Public method to get enemy pool for spawners and other external use\r\n   */\r\n  public getEnemyPoolForDepth(depth: number): number[] {\r\n    // Use pre-calculated pool instead of generating new one, but filter by depth if different\r\n    if (depth === this.level.depth) {\r\n      return this.levelEnemyPoolIds;\r\n    }\r\n    // If a different depth is requested, generate it on demand (for spawners that might spawn at different depths)\r\n    return this.generateEnemyPoolIds(depth);\r\n  }\r\n\r\n  /**\r\n   * Calculate number of enemy types for depth\r\n   */\r\n  private getNumberOfEnemyTypes(depth: number): number {\r\n    return depth === 0\r\n      ? GameplaySettings.DEPTH_ZERO_ENEMY_TYPES\r\n      : Math.ceil(Math.sqrt(depth + 1)) +\r\n          GameplaySettings.ENEMY_TYPES_BASE_COUNT;\r\n  }\r\n\r\n  /**\r\n   * Utility: Get random elements from array\r\n   */\r\n  private getRandomElements<T>(array: T[], count: number): T[] {\r\n    const shuffled = [...array];\r\n    for (let i = shuffled.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Random.rand() * (i + 1));\r\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n    }\r\n    return shuffled.slice(0, Math.min(count, shuffled.length));\r\n  }\r\n\r\n  /**\r\n   * Check if a big enemy can be placed at the given position\r\n   */\r\n  private canPlaceBigEnemy(\r\n    room: Room,\r\n    enemy: Entity,\r\n    x: number,\r\n    y: number,\r\n    tiles: Tile[],\r\n  ): boolean {\r\n    if (\r\n      enemy.x + enemy.w > room.roomX + room.width ||\r\n      enemy.y + enemy.h > room.roomY + room.height ||\r\n      enemy.x < room.roomX ||\r\n      enemy.y < room.roomY\r\n    ) {\r\n      return false;\r\n    }\r\n    // Check for walls/solid tiles under any part of the enemy\r\n    for (let xx = 0; xx < enemy.w; xx++) {\r\n      for (let yy = 0; yy < enemy.h; yy++) {\r\n        const tile = room.roomArray[x + xx]?.[y + yy];\r\n        if ((tile.x === x + xx || tile.y === y + yy) && tile.isSolid()) {\r\n          console.log(\"wall found\");\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Clear floor tiles for big enemies (preserves existing logic)\r\n   */\r\n  private clearFloorForBigEnemy(\r\n    room: Room,\r\n    x: number,\r\n    y: number,\r\n    w: number,\r\n    h: number,\r\n    enemy: Entity,\r\n  ): void {\r\n    for (let xx = 0; xx < w; xx++) {\r\n      for (let yy = 0; yy < h; yy++) {\r\n        room.roomArray[x + xx][y + yy] = new Floor(room, x + xx, y + yy);\r\n        if (room.entities.some((e) => e.x === x + xx && e.y === y + yy)) {\r\n          room.entities = room.entities.filter(\r\n            (e) => (e.x !== x + xx && e.y !== y + yy) || e === enemy,\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove tiles that are now occupied by an enemy\r\n   */\r\n  private removeTilesForEnemy(\r\n    tiles: any[],\r\n    x: number,\r\n    y: number,\r\n    w: number,\r\n    h: number,\r\n  ): void {\r\n    for (let xx = 0; xx < w; xx++) {\r\n      for (let yy = 0; yy < h; yy++) {\r\n        const index = tiles.findIndex((t) => t.x === x + xx && t.y === y + yy);\r\n        if (index !== -1) tiles.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private addRandomEnemies(room: Room, multiplier: number = 1) {\r\n    const numEmptyTiles = room.getEmptyTiles().length;\r\n    const meanValue = (room.roomArea + numEmptyTiles) / 2;\r\n\r\n    const factor = Math.min(\r\n      (room.depth + GameplaySettings.ENEMY_DENSITY_DEPTH_OFFSET) *\r\n        GameplaySettings.ENEMY_DENSITY_DEPTH_MULTIPLIER,\r\n      GameplaySettings.MAX_ENEMY_DENSITY,\r\n    );\r\n\r\n    const baseEnemyCount = Math.ceil(\r\n      Math.max(\r\n        Utils.randomNormalInt(0, meanValue * factor),\r\n        meanValue * factor,\r\n      ),\r\n    );\r\n\r\n    // Cap at the number of empty tiles (hard limit)\r\n    const numEnemies = Math.min(baseEnemyCount, numEmptyTiles);\r\n\r\n    this.addEnemiesUnified(room, numEnemies * multiplier, room.envType);\r\n  }\r\n\r\n  private addSpawners(room: Room, rand: () => number, numSpawners?: number) {\r\n    let tiles = room.getEmptyTiles();\r\n    if (tiles.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let lastSpawner = null;\r\n\r\n    // If numSpawners is provided, force generate that many\r\n    if (numSpawners !== undefined) {\r\n      for (let i = 0; i < numSpawners; i++) {\r\n        const position = room.getRandomEmptyPosition(tiles);\r\n        if (position === null) break;\r\n        const { x, y } = position;\r\n\r\n        const spawnTable = this.getEnemyPoolForDepth(\r\n          Math.max(0, room.depth),\r\n        ).filter((t) => t !== 7);\r\n\r\n        lastSpawner = Spawner.add(room, room.game, x, y, spawnTable);\r\n\r\n        // Remove used tile\r\n        tiles = tiles.filter((t) => !(t.x === x && t.y === y));\r\n      }\r\n    } else {\r\n      // Original random spawner logic with configurable parameters\r\n      const maxPossibleSpawners = Math.ceil(\r\n        room.roomArea / GameplaySettings.SPAWNER_AREA_THRESHOLD,\r\n      );\r\n\r\n      for (let i = 0; i < maxPossibleSpawners; i++) {\r\n        if (rand() > GameplaySettings.SPAWNER_SPAWN_CHANCE) continue;\r\n\r\n        const position = room.getRandomEmptyPosition(tiles);\r\n        if (position === null) break;\r\n        const { x, y } = position;\r\n\r\n        const spawnTable = this.getEnemyPoolForDepth(\r\n          Math.max(0, room.depth - 1),\r\n        ).filter((t) => t !== 7);\r\n\r\n        lastSpawner = Spawner.add(room, room.game, x, y, spawnTable);\r\n\r\n        tiles = tiles.filter((t) => !(t.x === x && t.y === y));\r\n      }\r\n    }\r\n    return lastSpawner;\r\n  }\r\n\r\n  private addOccultists(\r\n    room: Room,\r\n    rand: () => number,\r\n    numOccultists?: number,\r\n  ) {\r\n    let tiles = room.getEmptyTiles();\r\n    if (tiles.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let lastOccultist = null;\r\n\r\n    // If numOccultists is provided, force generate that many\r\n    if (numOccultists !== undefined) {\r\n      for (let i = 0; i < numOccultists; i++) {\r\n        const position = room.getRandomEmptyPosition(tiles);\r\n        if (position === null) break;\r\n        const { x, y } = position;\r\n\r\n        lastOccultist = OccultistEnemy.add(room, room.game, x, y);\r\n\r\n        // Remove used tile\r\n        tiles = tiles.filter((t) => !(t.x === x && t.y === y));\r\n      }\r\n    } else {\r\n      // Original random occultist logic with configurable parameters\r\n      const maxPossibleOccultists = Math.ceil(\r\n        room.roomArea / GameplaySettings.OCCULTIST_AREA_THRESHOLD,\r\n      );\r\n\r\n      for (let i = 0; i < maxPossibleOccultists; i++) {\r\n        if (rand() > GameplaySettings.OCCULTIST_SPAWN_CHANCE) continue;\r\n\r\n        const position = room.getRandomEmptyPosition(tiles);\r\n        if (position === null) break;\r\n        const { x, y } = position;\r\n\r\n        lastOccultist = OccultistEnemy.add(room, room.game, x, y);\r\n\r\n        tiles = tiles.filter((t) => !(t.x === x && t.y === y));\r\n      }\r\n    }\r\n    return lastOccultist;\r\n  }\r\n\r\n  private addBosses(room: Room, depth: number) {\r\n    if (GameplaySettings.NO_ENEMIES === true) return;\r\n    let tiles = room.getEmptyTiles();\r\n    if (tiles.length === 0) {\r\n      //console.log(`No tiles left to spawn spawners`);\r\n      return;\r\n    }\r\n    if (!GameplaySettings.PRESET_BOSSES) {\r\n      let bosses = [\r\n        \"reaper\",\r\n        \"queen\",\r\n        \"bigskullenemy\",\r\n        \"bigzombieenemy\",\r\n        \"bigfrogenemy\",\r\n        \"exalter\",\r\n      ];\r\n\r\n      if (depth > 0) {\r\n        bosses.push(\"occultist\");\r\n        bosses = bosses.filter((b) => b !== \"queen\");\r\n      }\r\n      if (room.envType === EnvType.FOREST) {\r\n        bosses.push(\"bigfrogenemy\");\r\n      }\r\n      if (depth > 4) {\r\n        bosses.push(\"warden\");\r\n        bosses = bosses.filter(\r\n          (b) =>\r\n            b !== \"bigskullenemy\" &&\r\n            b !== \"bigzombieenemy\" &&\r\n            b !== \"occultist\",\r\n        );\r\n      }\r\n\r\n      const boss = Game.randTable(bosses, Random.rand);\r\n      console.log(\"bosses\", bosses, \"boss\", boss);\r\n\r\n      const position =\r\n        boss.startsWith(\"big\") || boss === \"warden\"\r\n          ? room.getBigRandomEmptyPosition(tiles)\r\n          : room.getRandomEmptyPosition(tiles);\r\n      if (position === null) return;\r\n      const { x, y } = position;\r\n\r\n      switch (boss) {\r\n        case \"reaper\":\r\n          const spawner = this.addSpawners(room, Random.rand, 1);\r\n          spawner.dropTable = [\"weapon\", \"equipment\"];\r\n          spawner.dropChance = 1;\r\n          break;\r\n        case \"queen\":\r\n          const queen = QueenEnemy.add(room, room.game, x, y);\r\n          queen.dropTable = [\"weapon\", \"equipment\"];\r\n          queen.dropChance = 1;\r\n          break;\r\n        case \"bigskullenemy\":\r\n          const bigSkull = BigSkullEnemy.add(room, room.game, x, y);\r\n          bigSkull.dropTable = [\r\n            \"weapon\",\r\n            \"equipment\",\r\n            \"consumable\",\r\n            \"gem\",\r\n            \"tool\",\r\n          ];\r\n\r\n          break;\r\n        case \"occultist\":\r\n          const occultist = this.addOccultists(room, Random.rand, 1);\r\n          occultist.dropTable = [\"weapon\", \"equipment\"];\r\n          occultist.dropChance = 1;\r\n\r\n          break;\r\n        case \"bigzombieenemy\":\r\n          const bigZombie = BigZombieEnemy.add(room, room.game, x, y);\r\n          bigZombie.dropTable = [\r\n            \"weapon\",\r\n            \"equipment\",\r\n            \"consumable\",\r\n            \"gem\",\r\n            \"tool\",\r\n          ];\r\n          bigZombie.dropChance = 1;\r\n          break;\r\n        case \"warden\":\r\n          const warden = WardenEnemy.add(room, room.game, x, y);\r\n          warden.dropTable = [\"weapon\", \"equipment\"];\r\n          warden.dropChance = 1;\r\n          break;\r\n        case \"bigfrogenemy\":\r\n          const bigFrog = BigFrogEnemy.add(room, room.game, x, y);\r\n          bigFrog.dropTable = [\r\n            \"weapon\",\r\n            \"equipment\",\r\n            \"consumable\",\r\n            \"gem\",\r\n            \"tool\",\r\n          ];\r\n          break;\r\n        case \"exalter\":\r\n          const exalter = ExalterEnemy.add(room, room.game, x, y);\r\n          exalter.dropTable = [\"weapon\", \"equipment\"];\r\n          exalter.dropChance = 1;\r\n          break;\r\n      }\r\n    } else {\r\n      const position = room.getBigRandomEmptyPosition(tiles);\r\n      if (position === null) return;\r\n      const { x, y } = position;\r\n      switch (depth) {\r\n        case 0:\r\n          const bigZombie = BigZombieEnemy.add(room, room.game, x, y);\r\n          bigZombie.dropTable = [\r\n            \"weapon\",\r\n            \"equipment\",\r\n            \"consumable\",\r\n            \"gem\",\r\n            \"tool\",\r\n          ];\r\n          bigZombie.dropChance = 1;\r\n\r\n          const queen = QueenEnemy.add(room, room.game, x, y);\r\n          queen.dropTable = [\"weapon\", \"equipment\"];\r\n          queen.dropChance = 1;\r\n\r\n          break;\r\n        case 1:\r\n          const bigSkull = BigSkullEnemy.add(room, room.game, x, y);\r\n          bigSkull.dropTable = [\r\n            \"weapon\",\r\n            \"equipment\",\r\n            \"consumable\",\r\n            \"gem\",\r\n            \"tool\",\r\n          ];\r\n\r\n          const spawner = this.addSpawners(room, Random.rand, 1);\r\n          //spawner.dropTable = [\"weapon\", \"equipment\"];\r\n          spawner.dropChance = 1;\r\n          break;\r\n        case 2:\r\n          const spawner2 = this.addSpawners(room, Random.rand, 1);\r\n          //spawner.dropTable = [\"weapon\", \"equipment\"];\r\n          spawner2.dropChance = 1;\r\n\r\n          const occultist = this.addOccultists(room, Random.rand, 1);\r\n          //occultist.dropTable = [\"weapon\", \"equipment\"];\r\n          occultist.dropChance = 1;\r\n          break;\r\n        case 3:\r\n          const bigZombie2 = BigZombieEnemy.add(room, room.game, x, y);\r\n          bigZombie2.dropTable = [\r\n            \"weapon\",\r\n            \"equipment\",\r\n            \"consumable\",\r\n            \"gem\",\r\n            \"tool\",\r\n          ];\r\n          bigZombie2.dropChance = 1;\r\n\r\n          const bigZombie3 = BigZombieEnemy.add(room, room.game, x, y);\r\n          bigZombie3.dropTable = [\r\n            \"weapon\",\r\n            \"equipment\",\r\n            \"consumable\",\r\n            \"gem\",\r\n            \"tool\",\r\n          ];\r\n          bigZombie3.dropChance = 1;\r\n\r\n          const occultist2 = this.addOccultists(room, Random.rand, 1);\r\n          //occultist.dropTable = [\"weapon\", \"equipment\"];\r\n          occultist2.dropChance = 1;\r\n          break;\r\n        case 4:\r\n          const warden = WardenEnemy.add(room, room.game, x, y);\r\n          warden.dropTable = [\"weapon\", \"equipment\"];\r\n          warden.dropChance = 1;\r\n          break;\r\n        case 5:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private addChests(room: Room, numChests: number, rand: () => number) {\r\n    // add chests\r\n    let tiles = room.getEmptyTiles();\r\n    for (let i = 0; i < numChests; i++) {\r\n      const position = room.getRandomEmptyPosition(tiles);\r\n      if (!position) {\r\n        // No more empty tiles available, break out of loop\r\n        break;\r\n      }\r\n      const { x, y } = position;\r\n      room.entities.push(new Chest(room, room.game, x, y));\r\n    }\r\n  }\r\n\r\n  addBombs(room: Room, numBombs: number, rand: () => number) {\r\n    let tiles = room.getEmptyTiles();\r\n    for (let i = 0; i < room.getEmptyTiles().length; i++) {\r\n      const position = room.getRandomEmptyPosition(tiles);\r\n      if (position === null) break;\r\n      const { x, y } = position;\r\n      Bomb.add(room, room.game, x, y);\r\n    }\r\n  }\r\n\r\n  private addResources(room: Room, numResources: number, rand: () => number) {\r\n    let tiles = room.getEmptyTiles();\r\n    for (let i = 0; i < numResources; i++) {\r\n      const position = room.getRandomEmptyPosition(tiles);\r\n      if (position === null) break;\r\n      const { x, y } = position;\r\n\r\n      let r = rand();\r\n      if (r <= (10 - room.depth ** 3) / 10)\r\n        CoalResource.add(room, room.game, x, y);\r\n      else if (r <= (10 - (room.depth - 2) ** 3) / 10)\r\n        GoldResource.add(room, room.game, x, y);\r\n      else EmeraldResource.add(room, room.game, x, y);\r\n    }\r\n  }\r\n\r\n  private addVendingMachine(\r\n    room: Room,\r\n    rand: () => number,\r\n    placeX?: number,\r\n    placeY?: number,\r\n    item?: Item,\r\n  ) {\r\n    const pos = room.getRandomEmptyPosition(room.getEmptyTiles());\r\n    if (pos === null) return;\r\n    let x = placeX ? placeX : pos.x;\r\n    let y = placeY ? placeY : pos.y;\r\n\r\n    let table =\r\n      room.depth > 0\r\n        ? [\r\n            1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 4, 5, 5, 5,\r\n            5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7,\r\n          ]\r\n        : [1, 1, 1];\r\n    let type = Game.randTable(table, rand);\r\n    if (item) {\r\n      VendingMachine.add(room, room.game, x, y, item);\r\n      return;\r\n    }\r\n    switch (type) {\r\n      case 1:\r\n        VendingMachine.add(room, room.game, x, y, new Heart(room, x, y));\r\n        break;\r\n      case 2:\r\n        VendingMachine.add(room, room.game, x, y, new Candle(room, x, y));\r\n        break;\r\n      case 3:\r\n        VendingMachine.add(room, room.game, x, y, new Armor(room, x, y));\r\n        break;\r\n      case 4:\r\n        VendingMachine.add(room, room.game, x, y, new Spear(room, x, y));\r\n        break;\r\n      case 5:\r\n        VendingMachine.add(room, room.game, x, y, new Torch(room, x, y));\r\n        break;\r\n      case 6:\r\n        VendingMachine.add(room, room.game, x, y, new FishingRod(room, x, y));\r\n        break;\r\n      case 7:\r\n        VendingMachine.add(room, room.game, x, y, new Hammer(room, x, y));\r\n        break;\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region POPULATING METHODS\r\n\r\n  populateEmpty = (room: Room, rand: () => number) => {};\r\n\r\n  populateTreasure = (room: Room, rand: () => number) => {\r\n    this.addChests(room, 10, rand);\r\n  };\r\n\r\n  populateDungeon = (room: Room, rand: () => number) => {\r\n    let factor = Game.rand(1, 36, rand);\r\n    if (factor <= 6) this.placeVendingMachineInWall(room);\r\n\r\n    room.removeDoorObstructions();\r\n  };\r\n\r\n  populateBoss = (room: Room, rand: () => number) => {\r\n    this.addBosses(room, room.depth);\r\n  };\r\n\r\n  populateBigDungeon = (room: Room, rand: () => number) => {\r\n    room.removeDoorObstructions();\r\n  };\r\n\r\n  populateSpawner = (room: Room, rand: () => number) => {\r\n    Spawner.add(\r\n      room,\r\n      room.game,\r\n      Math.floor(room.roomX + room.width / 2),\r\n      Math.floor(room.roomY + room.height / 2),\r\n    );\r\n    room.removeDoorObstructions();\r\n  };\r\n\r\n  populatePuzzle = (room: Room, rand: () => number) => {\r\n    let d;\r\n\r\n    for (let x = room.roomX; x < room.roomX + room.width; x++) {\r\n      let y = room.roomY + Math.floor(room.height / 2);\r\n      if (x === room.roomX + Math.floor(room.width / 2)) {\r\n        d = new InsideLevelDoor(room, room.game, x, y + 1);\r\n        room.roomArray[x][y + 1] = d;\r\n      } else {\r\n        room.roomArray[x][y] = new Wall(room, x, y);\r\n      }\r\n    }\r\n\r\n    let x = Game.rand(room.roomX, room.roomX + room.width - 1, rand);\r\n    let y = Game.rand(\r\n      room.roomY + Math.floor(room.height / 2) + 3,\r\n      room.roomY + room.height - 2,\r\n      rand,\r\n    );\r\n\r\n    room.roomArray[x][y] = new Button(room, x, y, d);\r\n\r\n    let crateTiles = room\r\n      .getEmptyTiles()\r\n      .filter(\r\n        (t) =>\r\n          t.x >= room.roomX + 1 &&\r\n          t.x <= room.roomX + room.width - 2 &&\r\n          t.y >= room.roomY + Math.floor(room.height / 2) + 3 &&\r\n          t.y <= room.roomY + room.height - 2,\r\n      );\r\n    let numCrates = Game.randTable([1, 2, 2, 3, 4], rand);\r\n\r\n    for (let i = 0; i < numCrates; i++) {\r\n      let t = crateTiles.splice(\r\n        Game.rand(0, crateTiles.length - 1, rand),\r\n        1,\r\n      )[0];\r\n      if (t) room.entities.push(new Crate(room, room.game, t.x, t.y));\r\n    }\r\n\r\n    room.removeDoorObstructions();\r\n  };\r\n\r\n  populateSpikeCorridor = (room: Room, rand: () => number) => {\r\n    for (let x = room.roomX; x < room.roomX + room.width; x++) {\r\n      for (let y = room.roomY + 1; y < room.roomY + room.height - 1; y++) {\r\n        room.roomArray[x][y] = new SpikeTrap(room, x, y, Game.rand(0, 3, rand));\r\n      }\r\n    }\r\n    room.removeDoorObstructions();\r\n    // Removed: this.addRandomTorches(room, \"medium\");\r\n  };\r\n\r\n  populateCave = (room: Room, rand: () => number) => {\r\n    let factor = Game.rand(1, 36, rand);\r\n\r\n    // Removed: if (factor > 15) this.addSpikeTraps(...);\r\n    let numEmptyTiles = room.getEmptyTiles().length;\r\n    let numEnemies = Math.ceil(\r\n      numEmptyTiles * Game.randTable([0.25, 0.3, 0.35], rand),\r\n    );\r\n    //this.addEnemiesUnified(room, numEnemies, room.envType); // Use unified system directly\r\n    if (room.level.environment.type === EnvType.CAVE)\r\n      this.addResources(\r\n        room,\r\n        (numEmptyTiles - numEnemies) * Game.randTable([0.1, 0.2, 0.3], rand),\r\n        rand,\r\n      );\r\n    room.removeDoorObstructions();\r\n  };\r\n\r\n  populateUpLadder = (room: Room, rand: () => number) => {\r\n    // Removed: this.addRandomTorches(room, \"medium\");\r\n\r\n    const { x, y } = room.getRoomCenter();\r\n    room.roomArray[x - 1][y - 1] = new UpLadder(room, room.game, x - 1, y - 1);\r\n  };\r\n\r\n  populateDownLadder = (room: Room, rand: () => number) => {\r\n    // Removed: this.addTorches(room, 1, rand, room.roomX + 3, room.roomY);\r\n\r\n    const { x, y } = room.getRoomCenter();\r\n    room.roomArray[x + 1][y - 1] = new DownLadder(\r\n      room,\r\n      room.game,\r\n      x + 1,\r\n      y - 1,\r\n    );\r\n\r\n    const numChests = Math.ceil(Random.rand() * 5);\r\n\r\n    let tiles: Tile[] = room.getEmptyTiles();\r\n    let positions: { x: number; y: number }[] = [];\r\n    if (room.depth === 0) positions = this.populateWeaponGroup(room, tiles);\r\n    tiles = tiles.filter(\r\n      (tile) =>\r\n        !positions.some(\r\n          (position) => position.x === tile.x && position.y === tile.y,\r\n        ),\r\n    );\r\n\r\n    tiles = tiles.filter((tile) => tile.x !== x || tile.y !== y);\r\n    let weaponDropped = false;\r\n    let toolDropped = false;\r\n    let lightDropped = false;\r\n    for (let i = 0; i < numChests; i++) {\r\n      if (tiles.length > 0) {\r\n        const position = room.getRandomEmptyPosition(tiles);\r\n        if (position === null) break;\r\n        const { x, y } = position;\r\n\r\n        let chest = new Chest(room, room.game, x, y);\r\n        /*\r\n        if (!weaponDropped) {\r\n          chest.getDrop([\"weapon\"], true);\r\n          weaponDropped = true;\r\n        } else \r\n         */\r\n\r\n        chest.getDrop(\r\n          [\r\n            \"consumable\",\r\n            \"gem\",\r\n            \"light\",\r\n            \"tool\",\r\n            \"fuel\",\r\n            \"backpack\",\r\n            \"weapon\",\r\n            \"coin\",\r\n          ],\r\n          false,\r\n        );\r\n\r\n        tiles.filter((tile) => tile.x !== x && tile.y !== y);\r\n        room.entities.push(chest);\r\n      }\r\n    }\r\n  };\r\n\r\n  populateWeaponGroup = (room: Room, tiles: Tile[]) => {\r\n    // Target the top interior row for this room\r\n    const topY = room.roomY + 1;\r\n    const minInteriorX = room.roomX + 1;\r\n    const maxInteriorX = room.roomX + room.width - 2;\r\n    const topRowTiles = tiles.filter(\r\n      (tile) =>\r\n        tile.y === topY && tile.x >= minInteriorX && tile.x <= maxInteriorX,\r\n    );\r\n\r\n    if (topRowTiles.length === 0) return; // nothing to place on\r\n\r\n    // Determine center X of the room in tile coordinates\r\n    const center = room.getRoomCenter();\r\n    const centerX = center.x;\r\n\r\n    // Collect unique, sorted X positions on the top row\r\n    const xs = Array.from(new Set(topRowTiles.map((t) => t.x))).sort(\r\n      (a, b) => a - b,\r\n    );\r\n    if (xs.length < 3) return; // not enough space\r\n\r\n    // Pick the middle position closest to centerX (keep this one unchanged)\r\n    const midX = xs\r\n      .slice()\r\n      .sort((a, b) => Math.abs(a - centerX) - Math.abs(b - centerX))[0];\r\n\r\n    // Choose left/right positions leaving exactly one empty tile between them and the middle (gap of 1)\r\n    const leftCandidates = xs.filter((x) => x < midX);\r\n    const rightCandidates = xs.filter((x) => x > midX);\r\n    const availableX = new Set(xs);\r\n    const preferredLeft = midX - 2;\r\n    const preferredRight = midX + 2;\r\n\r\n    // Try to use preferred positions; otherwise choose the closest positions that still keep a gap (<= midX - 2 or >= midX + 2)\r\n    let leftX = availableX.has(preferredLeft)\r\n      ? preferredLeft\r\n      : leftCandidates.filter((x) => x <= midX - 2).slice(-1)[0];\r\n    let rightX = availableX.has(preferredRight)\r\n      ? preferredRight\r\n      : rightCandidates.filter((x) => x >= midX + 2)[0];\r\n\r\n    // Absolute fallback if no gap-capable tiles exist on a side: allow nearest on that side (may violate gap in very tight rooms)\r\n    if (leftX === undefined && leftCandidates.length > 0) {\r\n      leftX = leftCandidates[leftCandidates.length - 1];\r\n    }\r\n    if (rightX === undefined && rightCandidates.length > 0) {\r\n      rightX = rightCandidates[0];\r\n    }\r\n\r\n    let positions: Array<{ x: number; y: number }> = [];\r\n    if (leftX !== undefined && rightX !== undefined) {\r\n      positions = [\r\n        { x: leftX, y: topY },\r\n        { x: midX, y: topY },\r\n        { x: rightX, y: topY },\r\n      ];\r\n    } else {\r\n      // Fallback: pick the three closest to centerX and sort\r\n      const sorted = topRowTiles\r\n        .slice()\r\n        .sort((a, b) => Math.abs(a.x - centerX) - Math.abs(b.x - centerX));\r\n      positions = sorted.slice(0, 3).map((t) => ({ x: t.x, y: topY }));\r\n      if (positions.length < 3) return; // not enough space\r\n      positions.sort((a, b) => a.x - b.x);\r\n    }\r\n\r\n    // Randomize the order of positions (Fisher–Yates shuffle)\r\n    for (let i = positions.length - 1; i > 0; i--) {\r\n      const j = Game.rand(0, i, Random.rand);\r\n      [positions[i], positions[j]] = [positions[j], positions[i]];\r\n    }\r\n\r\n    const weapons = new ItemGroup([\r\n      new Spear(room, positions[0].x, positions[0].y),\r\n      new Warhammer(room, positions[1].x, positions[1].y),\r\n      new Sword(room, positions[2].x, positions[2].y),\r\n    ]);\r\n    for (const item of weapons.items) {\r\n      item.grouped = true;\r\n      item.group = weapons;\r\n      room.items.push(item);\r\n    }\r\n    return positions;\r\n  };\r\n\r\n  populateRopeHole = (room: Room, rand: () => number) => {\r\n    // Removed: this.addRandomTorches(room, \"medium\");\r\n\r\n    const { x, y } = room.getRoomCenter();\r\n\r\n    const environment = room.depth < 1 ? EnvType.FOREST : EnvType.CAVE;\r\n    //console.log(\"About to create DownLadder in rope hole\");\r\n    let d = new DownLadder(room, room.game, x, y, true, environment);\r\n    //console.log(\"DownLadder created, about to add to room array\");\r\n\r\n    // Delay adding to room array to avoid triggering side path generation during level setup\r\n    setTimeout(() => {\r\n      room.roomArray[x][y] = d;\r\n      //console.log(\"DownLadder added to room array successfully (delayed)\");\r\n    }, 0);\r\n  };\r\n\r\n  populateRopeCave = (room: Room, rand: () => number) => {\r\n    let message = \"\";\r\n    switch (room.envType) {\r\n      case EnvType.CAVE:\r\n        message = \"Cave\";\r\n        break;\r\n      case EnvType.MAGMA_CAVE:\r\n        message = \"Magma Cave\";\r\n        break;\r\n      case EnvType.FOREST:\r\n        message = \"Forest\";\r\n        break;\r\n      case EnvType.CASTLE:\r\n        message = \"Castle\";\r\n    }\r\n    room.name = message;\r\n    const { x, y } = room.getRoomCenter();\r\n    let upLadder = new UpLadder(room, room.game, x, y);\r\n    upLadder.isRope = true;\r\n    upLadder.isSidePath = true;\r\n    room.roomArray[x][y] = upLadder;\r\n    if (room.envType === EnvType.CAVE)\r\n      this.placeVendingMachineInWall(room, new Pickaxe(room, 0, 0));\r\n    else this.placeVendingMachineInWall(room);\r\n\r\n    room.removeDoorObstructions();\r\n  };\r\n\r\n  populateShop = (room: Room, rand: () => number) => {\r\n    this.addTorches(room, 2, rand);\r\n    const { x, y } = room.getRoomCenter();\r\n    VendingMachine.add(room, room.game, x - 2, y - 1, new Shotgun(room, 0, 0));\r\n    VendingMachine.add(room, room.game, x + 2, y - 1, new Heart(room, 0, 0));\r\n    VendingMachine.add(room, room.game, x - 2, y + 2, new Armor(room, 0, 0));\r\n    VendingMachine.add(room, room.game, x + 2, y + 2, new Spear(room, 0, 0));\r\n\r\n    room.removeDoorObstructions();\r\n  };\r\n\r\n  // Many populate methods start with adding torches using the same pattern\r\n  private addRandomTorches(\r\n    room: Room,\r\n    intensity: \"none\" | \"low\" | \"medium\" | \"high\" = \"medium\",\r\n  ): void {\r\n    const torchPatterns = {\r\n      none: [0, 0, 0],\r\n      low: [0, 0, 0, 1, 1],\r\n      medium: [0, 0, 0, 1, 1, 2, 2, 3],\r\n      high: [1, 1, 2, 2, 3, 3, 4],\r\n    };\r\n    const randTorches = Game.randTable(torchPatterns[intensity], Random.rand);\r\n    this.addTorches(room, randTorches, Random.rand);\r\n  }\r\n\r\n  // Windows: random and by-area helpers mirroring torches\r\n  private addRandomWindows(\r\n    room: Room,\r\n    intensity: \"none\" | \"low\" | \"medium\" | \"high\" = \"medium\",\r\n  ): void {\r\n    const windowPatterns = {\r\n      none: [0, 0, 0],\r\n      low: [0, 0, 0, 1, 1],\r\n      medium: [0, 0, 0, 1, 1, 2, 2, 3],\r\n      high: [1, 1, 2, 2, 3, 3, 4],\r\n    };\r\n    const randWindows = Game.randTable(windowPatterns[intensity], Random.rand);\r\n    //this.addWindows(room, randWindows, Random.rand);\r\n  }\r\n\r\n  private addTorchesByArea = (room: Room) => {\r\n    let numTorches = Math.max(\r\n      1,\r\n      Math.floor(Math.sqrt(room.roomArea) / 3) -\r\n        Math.floor(Math.sqrt(room.depth)),\r\n    );\r\n    if (room.depth === 0) {\r\n      if (Random.rand() < 0.25) {\r\n        numTorches = 0;\r\n      }\r\n    } else {\r\n      // Exponential falloff starting at depth 1, approaching 90% chance\r\n      const falloffRate = 0.4; // Controls how quickly it approaches 90%\r\n      const maxChance = 0.9;\r\n      const chance =\r\n        maxChance * (1 - Math.exp(-falloffRate * (room.depth - 1)));\r\n      if (Random.rand() < chance) {\r\n        numTorches = 0;\r\n      }\r\n    }\r\n    this.addTorches(room, numTorches, Random.rand);\r\n  };\r\n\r\n  private addWindowsByArea = (room: Room) => {\r\n    // Only place windows in castle-themed rooms\r\n    const isCastle =\r\n      room.envType === EnvType.CASTLE ||\r\n      room.level.environment.type === EnvType.CASTLE;\r\n    if (!isCastle) return;\r\n\r\n    let numWindows = Math.max(\r\n      0,\r\n      Math.floor(Math.sqrt(room.roomArea) / 4) -\r\n        Math.floor(Math.sqrt(room.depth)),\r\n    );\r\n\r\n    // Slight randomness similar to torches\r\n    if (room.depth === 0) {\r\n      if (Random.rand() < 0.15) {\r\n        numWindows = 0;\r\n      }\r\n    }\r\n\r\n    //this.addWindows(room, numWindows, Random.rand);\r\n  };\r\n\r\n  /**\r\n   * Centralized method to add torches, spikes, and pools based on room type\r\n   */\r\n  private addEnvironmentalFeatures(room: Room, rand: () => number) {\r\n    const factor = Game.rand(1, 36, rand);\r\n\r\n    switch (room.type) {\r\n      case RoomType.START:\r\n        if (room.depth !== 0) {\r\n          // No torches for start rooms with upladder\r\n        } else {\r\n          this.addTorchesByArea(room);\r\n        }\r\n        break;\r\n\r\n      case RoomType.BOSS:\r\n        const bossDoor = room.getBossDoor();\r\n        this.addDoorTorches(room, bossDoor.x, bossDoor.y, bossDoor.doorDir);\r\n        this.addTorchesByArea(room);\r\n        this.addSpikeTraps(\r\n          room,\r\n          Game.randTable([0, 0, 0, 1, 1, 2, 5], rand),\r\n          rand,\r\n        );\r\n        break;\r\n\r\n      case RoomType.DUNGEON:\r\n        if (\r\n          this.level.environment.type === EnvType.CAVE ||\r\n          this.level.environment.type === EnvType.MAGMA_CAVE ||\r\n          this.level.environment.type === EnvType.FOREST\r\n        ) {\r\n          if (factor < 20) room.builder.addWallBlocksVariant(rand);\r\n        } else {\r\n          if (factor < 20) room.builder.addWallBlocks(rand);\r\n        }\r\n\r\n        if (room.envType !== EnvType.CASTLE) {\r\n          if (factor < 12) this.addPools(room, rand);\r\n\r\n          if (factor < 12) this.addChasms(room, rand);\r\n\r\n          if (factor < 12 && room.depth > 5) this.addMagmaPools(room, rand);\r\n        }\r\n\r\n        this.addTorchesByArea(room);\r\n        // Add windows for castle rooms\r\n        this.addWindowsByArea(room);\r\n        if (factor > 15)\r\n          this.addSpikeTraps(\r\n            room,\r\n            Game.randTable([0, 0, 0, 1, 1, 2, 3], rand),\r\n            rand,\r\n          );\r\n        break;\r\n\r\n      case RoomType.BIGDUNGEON:\r\n        if (factor < 5) room.builder.addWallBlocks(rand);\r\n\r\n        if (Game.rand(1, 4, rand) === 1) this.addChasms(room, rand);\r\n        this.addTorchesByArea(room);\r\n        if (Game.rand(1, 3, rand) === 1)\r\n          this.addSpikeTraps(room, Game.randTable([3, 5, 7, 8], rand), rand);\r\n        break;\r\n\r\n      case RoomType.CAVE:\r\n        if (\r\n          this.level.environment.type === EnvType.CAVE ||\r\n          this.level.environment.type === EnvType.MAGMA_CAVE ||\r\n          this.level.environment.type === EnvType.FOREST\r\n        ) {\r\n          if (factor < 20) room.builder.addWallBlocksVariant(rand);\r\n        } else {\r\n          if (factor < 20) room.builder.addWallBlocks(rand);\r\n        }\r\n\r\n        if (room.envType !== EnvType.CASTLE) {\r\n          if (factor < 12) this.addChasms(room, rand);\r\n\r\n          if (factor < 12) this.addPools(room, rand);\r\n          if (factor < 12 && room.depth > 5) this.addMagmaPools(room, rand);\r\n        }\r\n\r\n        if (this.level.environment.type === EnvType.CASTLE)\r\n          this.addTorchesByArea(room);\r\n        // Windows for castle cave-style rooms\r\n        this.addWindowsByArea(room);\r\n\r\n        break;\r\n\r\n      case RoomType.BIGCAVE:\r\n        if (factor > 15)\r\n          this.addSpikeTraps(\r\n            room,\r\n            Game.randTable([0, 0, 0, 1, 1, 2, 5], rand),\r\n            rand,\r\n          );\r\n        // Caves don't get torches by default\r\n        break;\r\n\r\n      case RoomType.TREASURE:\r\n        this.addTorchesByArea(room);\r\n        break;\r\n\r\n      case RoomType.SPAWNER:\r\n        this.addTorchesByArea(room);\r\n        break;\r\n\r\n      case RoomType.UPLADDER:\r\n        this.addRandomTorches(room, \"medium\");\r\n        break;\r\n\r\n      case RoomType.DOWNLADDER:\r\n        this.addTorches(room, 1, rand, room.roomX + 3, room.roomY);\r\n        break;\r\n\r\n      case RoomType.ROPEHOLE:\r\n        this.addRandomTorches(room, \"medium\");\r\n        break;\r\n\r\n      case RoomType.SPIKECORRIDOR:\r\n        this.addRandomTorches(room, \"medium\");\r\n        break;\r\n\r\n      case RoomType.SHOP:\r\n        this.addTorches(room, 2, rand);\r\n        break;\r\n\r\n      case RoomType.GRASS:\r\n        if (factor % 4 === 0) this.addChasms(room, rand);\r\n        if (factor % 3 === 0) this.addPools(room, rand);\r\n        this.addTorchesByArea(room);\r\n        if (factor > 15)\r\n          this.addSpikeTraps(\r\n            room,\r\n            Game.randTable([0, 0, 0, 1, 1, 2, 3], rand),\r\n            rand,\r\n          );\r\n        break;\r\n\r\n      default:\r\n        // No environmental features for other room types\r\n        break;\r\n    }\r\n  }\r\n\r\n  populate = (room: Room, rand: () => number) => {\r\n    room.name = \"\";\r\n    switch (room.type) {\r\n      case RoomType.START:\r\n        if (room.depth !== 0) {\r\n          this.populateUpLadder(room, rand);\r\n          this.placeVendingMachineInWall(room);\r\n        }\r\n\r\n        this.populateEmpty(room, rand);\r\n        room.name = \"FLOOR \" + -room.depth;\r\n\r\n        break;\r\n      case RoomType.BOSS:\r\n        this.populateBoss(room, rand);\r\n        room.name = \"BOSS\";\r\n        break;\r\n      case RoomType.DUNGEON:\r\n        if (\r\n          room.level.environment.type === EnvType.CAVE &&\r\n          Random.rand() <= 0.2\r\n        ) {\r\n          this.populateCave(room, rand);\r\n        } else {\r\n          this.populateDungeon(room, rand);\r\n        }\r\n        break;\r\n      case RoomType.BIGDUNGEON:\r\n        this.populateBigDungeon(room, rand);\r\n        break;\r\n\r\n      case RoomType.PUZZLE:\r\n        this.populatePuzzle(room, rand);\r\n        break;\r\n      case RoomType.SPIKECORRIDOR:\r\n        this.populateSpikeCorridor(room, rand);\r\n        break;\r\n      case RoomType.TREASURE:\r\n        this.populateTreasure(room, rand);\r\n        break;\r\n\r\n      case RoomType.GRASS:\r\n        this.populateDungeon(room, rand);\r\n        break;\r\n      case RoomType.BIGCAVE:\r\n        this.populateCave(room, rand);\r\n      case RoomType.CAVE:\r\n        this.populateCave(room, rand);\r\n        break;\r\n      case RoomType.UPLADDER:\r\n        this.populateUpLadder(room, rand);\r\n        room.name = \"FLOOR \" + -room.depth;\r\n\r\n        break;\r\n      case RoomType.DOWNLADDER:\r\n        this.populateDownLadder(room, rand);\r\n        room.name = \"FLOOR \" + -room.depth;\r\n        break;\r\n      case RoomType.ROPEHOLE:\r\n        this.populateRopeHole(room, rand);\r\n        break;\r\n      case RoomType.ROPECAVE:\r\n        this.populateRopeCave(room, rand);\r\n        break;\r\n      case RoomType.SHOP:\r\n        this.populateShop(room, rand);\r\n        break;\r\n      case RoomType.SPAWNER:\r\n        this.populateSpawner(room, rand);\r\n        break;\r\n    }\r\n    room.message = room.name;\r\n  };\r\n\r\n  /**\r\n   * Places a VendingMachine in an empty wall.\r\n   */\r\n  placeVendingMachineInWall(room: Room, item?: Item): void {\r\n    const emptyWalls = room.getEmptyWall();\r\n    if (emptyWalls.length === 0) return;\r\n\r\n    // Select a random empty wall\r\n    const selectedWall = Game.randTable(emptyWalls, Random.rand);\r\n    if (!selectedWall) return;\r\n\r\n    // Remove the selected wall\r\n    const removedWallInfo = room.removeEmptyWall(selectedWall);\r\n    if (!removedWallInfo) return;\r\n\r\n    const { x, y } = removedWallInfo;\r\n\r\n    // Create and add the VendingMachine\r\n    this.addVendingMachine(room, Random.rand, x, y, item);\r\n\r\n    room.roomArray[x][y] = selectedWall;\r\n  }\r\n}\r\n","import { Particle } from \"./particle\";\r\nimport { Game } from \"../game\";\r\n\r\nexport class WizardTeleportParticle extends Particle {\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n  dz: number;\r\n  frame: number;\r\n  dead: boolean;\r\n\r\n  constructor(x: number, y: number) {\r\n    super();\r\n    this.x = x;\r\n    this.y = y;\r\n    this.dead = false;\r\n    this.frame = 0;\r\n    this.z = 0;\r\n    this.dz = 0.1;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.drawFX(Math.floor(this.frame), 3, 1, 1, this.x, this.y - this.z, 1, 1);\r\n    this.z += this.dz * delta;\r\n    this.dz *= 0.9;\r\n    this.frame += 0.3 * delta;\r\n    if (this.frame > 6) this.dead = true;\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Geode } from \"../../item/resource/geode\";\r\nimport { Random } from \"../../utility/random\";\r\nexport class Block extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 10;\r\n    this.tileY = 2;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    //this.pushable = true;\r\n    this.name = \"block\";\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 25;\r\n    this.opaque = true;\r\n    //this.hitSound = Sound.breakRock;\r\n    if (Random.rand() < 0.01)\r\n      this.drops.push(new Geode(this.room, this.x, this.y));\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  uniqueKillBehavior = () => {\r\n    if (this.cloned) return;\r\n    Sound.delayPlay(Sound.breakRock, 50);\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Random } from \"../utility/random\";\r\nimport { ReverbEngine } from \"./reverb\";\r\nimport { Howl, Howler } from \"howler\";\r\n\r\nexport class Sound {\r\n  static playerStoneFootsteps: Array<Howl>;\r\n  static playerGrassFootsteps: Array<Howl>;\r\n  static playerDirtFootsteps: Array<Howl>;\r\n  static enemyFootsteps: Array<Howl>;\r\n  static hitSounds: Array<Howl>;\r\n  static enemySpawnSound: Howl;\r\n  static chestSounds: Array<Howl>;\r\n  static coinPickupSounds: Array<Howl>;\r\n  static miningSounds: Array<Howl>;\r\n  static breakRockSound: Howl;\r\n  static hurtSounds: Array<Howl>;\r\n  static genericPickupSound: Howl;\r\n  static pushSounds: Array<Howl>;\r\n  static healSound: Howl;\r\n  static forestMusic: Howl;\r\n  static caveMusic: Howl;\r\n  static graveSound: Howl;\r\n  static ambientSound: Howl;\r\n  static goreSound: Howl;\r\n  static swingSounds: Array<Howl>;\r\n  static unlockSounds: Array<Howl>;\r\n  static doorOpenSounds: Array<Howl>;\r\n  static potSmashSounds: Array<Howl>;\r\n  static keyPickupSound: Howl;\r\n  static magicSound: Howl;\r\n  static wooshSounds: Array<Howl>;\r\n  static initialized: boolean = false;\r\n  static audioMuted: boolean = true;\r\n  static bombSounds: Array<Howl>;\r\n  static fuseBurnSound: Howl;\r\n  static fuseLoopSound: Howl;\r\n  static fuseStartSound: Howl;\r\n  static warHammerSound: Howl;\r\n  static sliceSound: Array<Howl>;\r\n  static shortSliceSound: Array<Howl>;\r\n  static backpackSound: Howl;\r\n  static smithSound: Howl;\r\n  static bushSounds: Array<Howl>;\r\n  static parrySounds: Array<Howl>;\r\n  static eatSounds: Array<Howl>;\r\n  static gruntSounds: Array<Howl>;\r\n  static lockedSound: Howl;\r\n  static woodSound: Howl;\r\n  static squishSound: Howl;\r\n  static fishingCastSounds: Array<Howl>;\r\n  static fishingReelSound: Howl;\r\n  static fishingCatchSounds: Array<Howl>;\r\n  static crushSounds: Array<Howl>;\r\n\r\n  static currentlyPlaying: Set<number> = new Set();\r\n\r\n  static readonly PRIORITY = {\r\n    AMBIENT: 1,\r\n    FOOTSTEPS: 2,\r\n    INTERACTIONS: 3,\r\n    COMBAT: 4,\r\n    CRITICAL: 5,\r\n  };\r\n\r\n  static isMobile: boolean = false;\r\n  static audioContextResumed: boolean = false;\r\n  static forestMusicId: number | null = null;\r\n  static caveMusicId: number | null = null;\r\n  static ambientSoundId: number | null = null;\r\n\r\n  static detectMobile() {\r\n    const userAgent =\r\n      navigator.userAgent || navigator.vendor || (window as any).opera;\r\n    Sound.isMobile =\r\n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n        userAgent,\r\n      );\r\n    return Sound.isMobile;\r\n  }\r\n\r\n  static async enableAudioForMobile() {\r\n    if (Sound.audioContextResumed) return;\r\n\r\n    try {\r\n      if (Howler.ctx && Howler.ctx.state === \"suspended\") {\r\n        await Howler.ctx.resume();\r\n        Sound.audioContextResumed = true;\r\n        console.log(\"AudioContext resumed\");\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"Could not resume AudioContext:\", error);\r\n    }\r\n  }\r\n\r\n  static addMobileAudioHandlers() {\r\n    const enableAudio = async () => {\r\n      await Sound.enableAudioForMobile();\r\n      if (Sound.audioMuted && ReverbEngine.initialized) {\r\n        Sound.audioMuted = false;\r\n        Howler.mute(false);\r\n      }\r\n    };\r\n\r\n    const events = [\"touchstart\", \"click\", \"keydown\"];\r\n    const handler = () => {\r\n      enableAudio();\r\n      events.forEach((event) => {\r\n        document.removeEventListener(event, handler);\r\n      });\r\n    };\r\n\r\n    events.forEach((event) => {\r\n      document.addEventListener(event, handler, { once: true });\r\n    });\r\n  }\r\n\r\n  static toggleMute() {\r\n    Sound.audioMuted = !Sound.audioMuted;\r\n    if (Sound.audioMuted) {\r\n      Howler.mute(true);\r\n    } else {\r\n      Howler.mute(false);\r\n      if (Sound.isMobile) {\r\n        Sound.enableAudioForMobile();\r\n      }\r\n    }\r\n  }\r\n\r\n  static loadSounds = async () => {\r\n    if (Sound.initialized) return;\r\n    Sound.initialized = true;\r\n\r\n    Sound.detectMobile();\r\n    if (Sound.isMobile) {\r\n      Sound.addMobileAudioHandlers();\r\n    }\r\n\r\n    if (ReverbEngine.initialized) {\r\n      Sound.audioMuted = false;\r\n    }\r\n\r\n    // Optimized Howl creation - always use Web Audio API for better performance\r\n    const createHowlArray = (\r\n      basePath: string,\r\n      indices: number[],\r\n      volume: number = 1.0,\r\n      maxConcurrent: number = 3,\r\n    ): Array<Howl> => {\r\n      return indices.map((i) => {\r\n        return new Howl({\r\n          src: [`${basePath}${i}.mp3`],\r\n          volume: volume,\r\n          preload: true,\r\n          html5: false, // Always use Web Audio API\r\n          pool: maxConcurrent,\r\n        });\r\n      });\r\n    };\r\n\r\n    const createHowl = (\r\n      src: string,\r\n      volume: number = 1.0,\r\n      loop: boolean = false,\r\n      maxConcurrent: number = 2,\r\n    ): Howl => {\r\n      return new Howl({\r\n        src: [src],\r\n        volume: volume,\r\n        preload: true,\r\n        loop: loop,\r\n        html5: false, // Always use Web Audio API\r\n        pool: maxConcurrent,\r\n      });\r\n    };\r\n\r\n    try {\r\n      // Load all sounds with optimized settings\r\n      Sound.magicSound = createHowl(\r\n        \"res/SFX/attacks/magic2.mp3\",\r\n        0.25,\r\n        false,\r\n        3,\r\n      );\r\n      Sound.warHammerSound = createHowl(\r\n        \"res/SFX/attacks/warhammer.mp3\",\r\n        1,\r\n        false,\r\n        3,\r\n      );\r\n      Sound.healSound = createHowl(\"res/SFX/items/powerup1.mp3\", 0.5, false, 1);\r\n      Sound.eatSounds = createHowlArray(\"res/SFX/items/eat\", [1, 2], 1.0, 5);\r\n      // Footstep sounds\r\n      Sound.playerStoneFootsteps = createHowlArray(\r\n        \"res/SFX/footsteps/stone/footstep\",\r\n        [1, 2, 3],\r\n        1.0,\r\n        4,\r\n      );\r\n      Sound.playerGrassFootsteps = createHowlArray(\r\n        \"res/SFX/footsteps/grass/footstep\",\r\n        [1, 2, 3, 6],\r\n        1.0,\r\n        4,\r\n      );\r\n      Sound.playerDirtFootsteps = createHowlArray(\r\n        \"res/SFX/footsteps/dirt/footstep\",\r\n        [1, 2, 3, 4, 5],\r\n        1.0,\r\n        4,\r\n      );\r\n      Sound.enemyFootsteps = createHowlArray(\r\n        \"res/SFX/footsteps/enemy/enemyfootstep\",\r\n        [1, 2, 3, 4, 5],\r\n        1.0,\r\n        4,\r\n      );\r\n\r\n      // Combat sounds\r\n      Sound.swingSounds = createHowlArray(\r\n        \"res/SFX/attacks/swing\",\r\n        [1, 2, 3, 4],\r\n        0.5,\r\n        6,\r\n      );\r\n      Sound.hitSounds = createHowlArray(\r\n        \"res/SFX/attacks/hurt\",\r\n        [1, 2, 3, 4],\r\n        0.5,\r\n        4,\r\n      );\r\n      Sound.hurtSounds = [createHowl(\"res/SFX/attacks/hit.mp3\", 0.3, false, 0)];\r\n      Sound.sliceSound = createHowlArray(\r\n        \"res/SFX/attacks/slice\",\r\n        [1, 2, 3],\r\n        0.5,\r\n        4,\r\n      );\r\n      Sound.shortSliceSound = createHowlArray(\r\n        \"res/SFX/attacks/sliceShort\",\r\n        [1, 2, 3],\r\n        0.5,\r\n        4,\r\n      );\r\n      Sound.parrySounds = createHowlArray(\r\n        \"res/SFX/attacks/parry\",\r\n        [1, 2],\r\n        0.5,\r\n        3,\r\n      );\r\n      Sound.gruntSounds = createHowlArray(\r\n        \"res/SFX/attacks/grunt\",\r\n        [1],\r\n        0.35,\r\n        1,\r\n      );\r\n\r\n      // Single sounds\r\n      Sound.enemySpawnSound = createHowl(\r\n        \"res/SFX/attacks/enemyspawn.mp3\",\r\n        0.7,\r\n        false,\r\n        3,\r\n      );\r\n      Sound.wooshSounds = createHowlArray(\r\n        \"res/SFX/attacks/woosh\",\r\n        [1, 2],\r\n        0.2,\r\n        3,\r\n      );\r\n\r\n      // Interaction sounds\r\n      Sound.chestSounds = createHowlArray(\r\n        \"res/SFX/chest/chest\",\r\n        [1, 2, 3],\r\n        0.5,\r\n        3,\r\n      );\r\n      Sound.coinPickupSounds = createHowlArray(\r\n        \"res/SFX/items/coins\",\r\n        [1, 2, 3, 4],\r\n        1.0,\r\n        5,\r\n      );\r\n      Sound.genericPickupSound = createHowl(\r\n        \"res/SFX/items/pickup.mp3\",\r\n        0.8,\r\n        false,\r\n        3,\r\n      );\r\n      Sound.keyPickupSound = createHowl(\r\n        \"res/SFX/items/keyPickup.mp3\",\r\n        1.0,\r\n        false,\r\n        2,\r\n      );\r\n      Sound.backpackSound = createHowl(\r\n        \"res/SFX/items/backpack.mp3\",\r\n        0.75,\r\n        false,\r\n        2,\r\n      );\r\n      Sound.smithSound = createHowl(\"res/SFX/items/smith.mp3\", 0.5, false, 2);\r\n      Sound.lockedSound = createHowl(\r\n        \"res/SFX/door/locked1.mp3\",\r\n        0.75,\r\n        false,\r\n        2,\r\n      );\r\n      Sound.woodSound = createHowl(\r\n        \"res/SFX/objects/woodHit1.mp3\",\r\n        1.25,\r\n        false,\r\n        2,\r\n      );\r\n      Sound.squishSound = createHowl(\r\n        \"res/SFX/attacks/squish1.mp3\",\r\n        0.75,\r\n        false,\r\n        2,\r\n      );\r\n      Sound.crushSounds = createHowlArray(\r\n        \"res/SFX/attacks/crush\",\r\n        [1, 2],\r\n        0.4,\r\n        2,\r\n      );\r\n      // Mining sounds\r\n      Sound.miningSounds = createHowlArray(\r\n        \"res/SFX/resources/Pickaxe\",\r\n        [1, 2, 3, 4],\r\n        0.3,\r\n        3,\r\n      );\r\n      Sound.breakRockSound = createHowl(\r\n        \"res/SFX/resources/rockbreak.mp3\",\r\n        1.0,\r\n        false,\r\n        2,\r\n      );\r\n\r\n      // Door sounds\r\n      Sound.unlockSounds = createHowlArray(\"res/SFX/door/unlock\", [1], 0.5, 2);\r\n      Sound.doorOpenSounds = createHowlArray(\r\n        \"res/SFX/door/open\",\r\n        [1, 2],\r\n        0.5,\r\n        3,\r\n      );\r\n\r\n      // Object sounds\r\n      Sound.potSmashSounds = createHowlArray(\r\n        \"res/SFX/objects/potSmash\",\r\n        [1, 2, 3],\r\n        0.5,\r\n        3,\r\n      );\r\n      Sound.bushSounds = createHowlArray(\r\n        \"res/SFX/objects/plantHit\",\r\n        [1, 2],\r\n        0.75,\r\n        3,\r\n      );\r\n      Sound.pushSounds = createHowlArray(\r\n        \"res/SFX/pushing/push\",\r\n        [1, 2],\r\n        1.0,\r\n        3,\r\n      );\r\n      Sound.fishingCastSounds = createHowlArray(\r\n        \"res/SFX/fishing/cast\",\r\n        [1, 2],\r\n        0.5,\r\n        3,\r\n      );\r\n      Sound.fishingReelSound = createHowl(\r\n        \"res/SFX/fishing/catch.mp3\",\r\n        0.5,\r\n        false,\r\n        2,\r\n      );\r\n      Sound.fishingCatchSounds = createHowlArray(\r\n        \"res/SFX/fishing/splash\",\r\n        [1, 2],\r\n        0.85,\r\n        3,\r\n      );\r\n      // Bomb sounds\r\n      Sound.bombSounds = createHowlArray(\r\n        \"res/SFX/attacks/explode\",\r\n        [1, 2],\r\n        0.7,\r\n        3,\r\n      );\r\n      Sound.fuseBurnSound = createHowl(\r\n        \"res/SFX/attacks/fuse.mp3\",\r\n        0.2,\r\n        false,\r\n        2,\r\n      );\r\n      Sound.fuseLoopSound = createHowl(\r\n        \"res/SFX/attacks/fuseLoop.mp3\",\r\n        0.2,\r\n        true,\r\n        1,\r\n      );\r\n      Sound.fuseStartSound = createHowl(\r\n        \"res/SFX/attacks/fuseStart.mp3\",\r\n        0.2,\r\n        false,\r\n        2,\r\n      );\r\n\r\n      // Ambient sounds - critical for mobile\r\n      Sound.forestMusic = createHowl(\"res/music/forest1.mp3\", 0.25, true, 1);\r\n      Sound.caveMusic = createHowl(\"res/music/cave1.mp3\", 0.25, true, 1);\r\n      Sound.graveSound = createHowl(\r\n        \"res/SFX/attacks/skelespawn.mp3\",\r\n        1.0,\r\n        false,\r\n        2,\r\n      );\r\n      Sound.ambientSound = createHowl(\r\n        \"res/SFX/ambient/ambientDark2.mp3\",\r\n        0.3,\r\n        true,\r\n        1,\r\n      ); // Reduced volume\r\n      Sound.goreSound = createHowl(\r\n        \"res/SFX/misc Unused/gore2.mp3\",\r\n        0.5,\r\n        false,\r\n        2,\r\n      );\r\n\r\n      console.log(\"All sounds loaded successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error loading sounds:\", error);\r\n    }\r\n  };\r\n\r\n  static playWithReverb(\r\n    sound: Howl,\r\n    priority: number = Sound.PRIORITY.INTERACTIONS,\r\n  ): number | null {\r\n    if (Sound.audioMuted) return null;\r\n\r\n    try {\r\n      // Simple volume-based priority system\r\n      if (\r\n        Sound.currentlyPlaying.size > 10 &&\r\n        priority < Sound.PRIORITY.COMBAT\r\n      ) {\r\n        return null;\r\n      }\r\n\r\n      let soundId: number | null = null;\r\n\r\n      // Always try to use reverb if available and not on mobile\r\n      if (ReverbEngine.initialized && !Sound.isMobile) {\r\n        soundId = ReverbEngine.applyReverb(sound);\r\n      } else {\r\n        soundId = sound.play();\r\n      }\r\n\r\n      if (soundId) {\r\n        Sound.currentlyPlaying.add(soundId);\r\n\r\n        // Clean up tracking\r\n        sound.once(\"end\", () => {\r\n          Sound.currentlyPlaying.delete(soundId);\r\n        });\r\n\r\n        // Fallback cleanup\r\n        setTimeout(() => {\r\n          Sound.currentlyPlaying.delete(soundId);\r\n        }, 5000);\r\n      }\r\n\r\n      return soundId;\r\n    } catch (error) {\r\n      console.error(\"Error playing sound:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static playerStoneFootstep = (environment: number) => {\r\n    if (Sound.audioMuted) return;\r\n    let sound = Sound.playerStoneFootsteps;\r\n    if (environment === 2) sound = Sound.playerGrassFootsteps;\r\n    if (environment === 1) sound = Sound.playerDirtFootsteps;\r\n\r\n    let f = Game.randTable(sound, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.FOOTSTEPS);\r\n  };\r\n\r\n  static enemyFootstep = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.enemyFootsteps, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.FOOTSTEPS);\r\n  };\r\n\r\n  static swing = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.swingSounds, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.COMBAT);\r\n  };\r\n\r\n  static hit = (hard: boolean = false) => {\r\n    if (Sound.audioMuted) return;\r\n\r\n    let sounds = Sound.hitSounds.slice(hard ? 2 : 0, hard ? 3 : 2);\r\n\r\n    setTimeout(() => {\r\n      let f = Game.randTable(sounds, Random.rand);\r\n      this.playWithReverb(f, Sound.PRIORITY.COMBAT);\r\n    }, 100);\r\n  };\r\n\r\n  static hurt = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.hurtSounds, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.CRITICAL);\r\n  };\r\n\r\n  static enemySpawn = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.playWithReverb(Sound.enemySpawnSound, Sound.PRIORITY.CRITICAL);\r\n  };\r\n\r\n  static chest = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.chestSounds, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static potSmash = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.potSmashSounds, Random.rand);\r\n    this.delayPlay(\r\n      () => this.playWithReverb(f, Sound.PRIORITY.INTERACTIONS),\r\n      100,\r\n    );\r\n  };\r\n\r\n  static pickupCoin = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.coinPickupSounds, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static mine = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.miningSounds, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static breakRock = () => {\r\n    if (Sound.audioMuted) return;\r\n    setTimeout(() => {\r\n      this.playWithReverb(Sound.breakRockSound, Sound.PRIORITY.INTERACTIONS);\r\n    }, 100);\r\n  };\r\n\r\n  static heal = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.playWithReverb(Sound.healSound, Sound.PRIORITY.CRITICAL);\r\n  };\r\n\r\n  static genericPickup = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.playWithReverb(Sound.genericPickupSound, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static keyPickup = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.playWithReverb(Sound.keyPickupSound, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static push = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.pushSounds, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static skeleSpawn = () => {\r\n    if (Sound.audioMuted) return;\r\n    // IMPORTANT: Original implementation set volume to 0.3 in this method\r\n    Sound.graveSound.volume(0.3);\r\n    this.playWithReverb(Sound.graveSound, Sound.PRIORITY.CRITICAL);\r\n  };\r\n\r\n  static unlock = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.unlockSounds, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static playCaveMusic = (index: number = 0) => {\r\n    if (Sound.audioMuted) return;\r\n\r\n    try {\r\n      // Stop any existing forest music\r\n      if (Sound.caveMusicId) {\r\n        Sound.caveMusic.stop(Sound.caveMusicId);\r\n      }\r\n\r\n      // Play new instance\r\n      Sound.caveMusicId = Sound.caveMusic.play();\r\n\r\n      // Handle mobile audio context\r\n      if (Sound.isMobile && !Sound.audioContextResumed) {\r\n        Sound.enableAudioForMobile();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error playing cave music:\", error);\r\n    }\r\n  };\r\n\r\n  static playForestMusic = (index: number = 0) => {\r\n    if (Sound.audioMuted) return;\r\n\r\n    try {\r\n      // Stop any existing forest music\r\n      if (Sound.forestMusicId) {\r\n        Sound.forestMusic.stop(Sound.forestMusicId);\r\n      }\r\n\r\n      // Play new instance\r\n      Sound.forestMusicId = Sound.forestMusic.play();\r\n\r\n      // Handle mobile audio context\r\n      if (Sound.isMobile && !Sound.audioContextResumed) {\r\n        Sound.enableAudioForMobile();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error playing forest music:\", error);\r\n    }\r\n  };\r\n\r\n  static stopMusic = () => {\r\n    if (Sound.forestMusicId || Sound.caveMusicId) {\r\n      Sound.forestMusic.stop(Sound.forestMusicId);\r\n      Sound.caveMusic.stop(Sound.caveMusicId);\r\n    }\r\n  };\r\n\r\n  static doorOpen = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.doorOpenSounds, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static playAmbient = () => {\r\n    if (Sound.audioMuted) return;\r\n\r\n    try {\r\n      // Only play if not already playing\r\n      if (\r\n        !Sound.ambientSoundId ||\r\n        !Sound.ambientSound.playing(Sound.ambientSoundId)\r\n      ) {\r\n        Sound.ambientSoundId = Sound.ambientSound.play();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error playing ambient sound:\", error);\r\n    }\r\n  };\r\n\r\n  static stopAmbient = () => {\r\n    if (Sound.ambientSoundId) {\r\n      Sound.ambientSound.stop(Sound.ambientSoundId);\r\n      Sound.ambientSoundId = null;\r\n    }\r\n  };\r\n\r\n  static playFuse = () => {\r\n    if (Sound.audioMuted) return;\r\n\r\n    Sound.fuseStartSound.play();\r\n\r\n    Sound.fuseStartSound.once(\"end\", () => {\r\n      Sound.fuseLoopSound.play();\r\n    });\r\n  };\r\n\r\n  static stopFuse = () => {\r\n    Sound.fuseLoopSound.stop();\r\n    Sound.fuseStartSound.stop();\r\n  };\r\n\r\n  static playGore = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.playWithReverb(Sound.goreSound, Sound.PRIORITY.COMBAT);\r\n  };\r\n\r\n  static playBomb = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.bombSounds, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.CRITICAL);\r\n  };\r\n\r\n  static playWarHammer = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.delayPlay(() => {\r\n      this.playWithReverb(Sound.hitSounds[2], Sound.PRIORITY.COMBAT);\r\n    }, 200);\r\n  };\r\n\r\n  static playMagic = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.playWithReverb(Sound.magicSound, Sound.PRIORITY.COMBAT);\r\n    let f = Sound.wooshSounds[0];\r\n    this.playWithReverb(f, Sound.PRIORITY.COMBAT);\r\n  };\r\n\r\n  static playSlice = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.sliceSound, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.COMBAT);\r\n  };\r\n\r\n  static playShortSlice = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.shortSliceSound, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.COMBAT);\r\n  };\r\n\r\n  static playBackpack = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.playWithReverb(Sound.backpackSound, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static playSmith = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.playWithReverb(Sound.smithSound, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static playBush = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.bushSounds, Random.rand);\r\n    this.delayPlay(\r\n      () => this.playWithReverb(f, Sound.PRIORITY.INTERACTIONS),\r\n      100,\r\n    );\r\n  };\r\n\r\n  static playParry = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.parrySounds, Random.rand);\r\n    this.delayPlay(() => this.playWithReverb(f, Sound.PRIORITY.CRITICAL), 100);\r\n  };\r\n\r\n  static playEat = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.eatSounds, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static playGrunt = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.gruntSounds, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.COMBAT);\r\n  };\r\n\r\n  static playLocked = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.playWithReverb(Sound.lockedSound, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static playWood = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.delayPlay(() => {\r\n      this.playWithReverb(Sound.woodSound, Sound.PRIORITY.INTERACTIONS);\r\n    }, 150);\r\n  };\r\n\r\n  static playSquish = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.playWithReverb(Sound.squishSound, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static playFishingCast = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.fishingCastSounds, Random.rand);\r\n    this.playWithReverb(f, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static playFishingReel = () => {\r\n    if (Sound.audioMuted) return;\r\n    this.playWithReverb(Sound.fishingReelSound, Sound.PRIORITY.INTERACTIONS);\r\n  };\r\n\r\n  static playFishingCatch = () => {\r\n    if (Sound.audioMuted) return;\r\n    let f = Game.randTable(Sound.fishingCatchSounds, Random.rand);\r\n    this.delayPlay(\r\n      () => this.playWithReverb(f, Sound.PRIORITY.INTERACTIONS),\r\n      100,\r\n    );\r\n  };\r\n\r\n  static playCrush = () => {\r\n    if (Sound.audioMuted) return;\r\n    let w = Sound.wooshSounds[1];\r\n    let f = Sound.crushSounds[1];\r\n    this.playWithReverb(w, Sound.PRIORITY.COMBAT);\r\n    this.delayPlay(() => {\r\n      this.playWithReverb(f, Sound.PRIORITY.COMBAT);\r\n    }, 200);\r\n    this.playWithReverb(w, Sound.PRIORITY.COMBAT);\r\n  };\r\n\r\n  static delayPlay = (method: () => void, delay: number) => {\r\n    setTimeout(method, delay);\r\n  };\r\n\r\n  static stopSound(sound: Howl) {\r\n    sound.stop();\r\n  }\r\n\r\n  static stopSoundWithReverb(sound: Howl) {\r\n    ReverbEngine.removeReverb(sound);\r\n    this.stopSound(sound);\r\n  }\r\n\r\n  static cleanup() {\r\n    Sound.currentlyPlaying.clear();\r\n    Howler.unload();\r\n  }\r\n}\r\n","import { Item } from \"./item\";\r\nimport { Player } from \"../player/player\";\r\nimport { Game } from \"../game\";\r\nimport { Room, RoomType } from \"../room/room\";\r\nimport { TextParticle } from \"../particle/textParticle\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Usable } from \"./usable/usable\";\r\nimport { DownLadder } from \"../tile/downLadder\";\r\n\r\nexport class GodStone extends Usable {\r\n  count: number;\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.count = 0;\r\n    this.tileX = 31;\r\n    this.tileY = 0;\r\n\r\n    this.stackable = true;\r\n  }\r\n\r\n  onUse = (player: Player): void => {\r\n    this.teleportToExit(player);\r\n  };\r\n  teleportToExit = (player: Player): void => {\r\n    let downLadders = this.level.game.rooms.filter(\r\n      (room) => room.type === RoomType.DOWNLADDER,\r\n    );\r\n    console.log(\"downLadders\", downLadders);\r\n    const targetRoom = downLadders[downLadders.length - 1];\r\n    this.level.game.rooms.forEach((r) => {\r\n      r.entered = true;\r\n      r.calculateWallInfo();\r\n    });\r\n    // Use door transition which sets player.roomGID; prefer first door\r\n    targetRoom.game.changeLevelThroughDoor(player, targetRoom.doors[0], 1);\r\n    player.x = targetRoom.roomX + 2;\r\n    player.y = targetRoom.roomY + 3;\r\n    // Ensure player's map reflects the new room immediately\r\n    try {\r\n      player.map.updateSeenTiles();\r\n      player.map.saveMapData();\r\n    } catch {}\r\n  };\r\n  getDescription = (): string => {\r\n    return \"YOU SHOULD NOT HAVE THIS\";\r\n  };\r\n}\r\n","import { Barrel } from \"../entity/object/barrel\";\r\nimport { Block } from \"../entity/object/block\";\r\nimport { Bush } from \"../entity/object/bush\";\r\nimport { Chest } from \"../entity/object/chest\";\r\nimport { Crate } from \"../entity/object/crate\";\r\nimport { Mushrooms } from \"../entity/object/mushrooms\";\r\nimport { Pot } from \"../entity/object/pot\";\r\nimport { PottedPlant } from \"../entity/object/pottedPlant\";\r\nimport { Pumpkin } from \"../entity/object/pumpkin\";\r\nimport { Sprout } from \"../entity/object/sprout\";\r\nimport { TombStone } from \"../entity/object/tombStone\";\r\nimport { Rock } from \"../entity/resource/rockResource\";\r\nimport { SkinType } from \"../tile/tile\";\r\nimport { RoomType } from \"../room/room\";\r\nimport { CoalResource } from \"../entity/resource/coalResource\";\r\nimport { GoldResource } from \"../entity/resource/goldResource\";\r\nimport { EmeraldResource } from \"../entity/resource/emeraldResource\";\r\nimport { GlowBugEnemy } from \"../entity/enemy/glowBugEnemy\";\r\nimport { Tree } from \"../entity/object/tree\";\r\nimport { EnvType } from \"../constants/environmentTypes\";\r\nimport { DownladderMaker } from \"../entity/downladderMaker\";\r\nimport { DecoBlock } from \"../entity/object/decoBlock\";\r\nimport { Furnace } from \"../entity/object/furnace\";\r\n\r\n// Enemy imports\r\nimport { CrabEnemy } from \"../entity/enemy/crabEnemy\";\r\nimport { FrogEnemy } from \"../entity/enemy/frogEnemy\";\r\nimport { ZombieEnemy } from \"../entity/enemy/zombieEnemy\";\r\nimport { SkullEnemy } from \"../entity/enemy/skullEnemy\";\r\nimport { EnergyWizardEnemy } from \"../entity/enemy/energyWizard\";\r\nimport { ChargeEnemy } from \"../entity/enemy/chargeEnemy\";\r\nimport { RookEnemy } from \"../entity/enemy/rookEnemy\";\r\nimport { BishopEnemy } from \"../entity/enemy/bishopEnemy\";\r\nimport { ArmoredzombieEnemy } from \"../entity/enemy/armoredzombieEnemy\";\r\nimport { BigSkullEnemy } from \"../entity/enemy/bigSkullEnemy\";\r\nimport { QueenEnemy } from \"../entity/enemy/queenEnemy\";\r\nimport { KnightEnemy } from \"../entity/enemy/knightEnemy\";\r\nimport { BigKnightEnemy } from \"../entity/enemy/bigKnightEnemy\";\r\nimport { ArmoredSkullEnemy } from \"../entity/enemy/armoredSkullEnemy\";\r\nimport { FireWizardEnemy } from \"../entity/enemy/fireWizard\";\r\nimport { MummyEnemy } from \"../entity/enemy/mummyEnemy\";\r\nimport { SpiderEnemy } from \"../entity/enemy/spiderEnemy\";\r\nimport { ObsidianResource } from \"../entity/resource/obsidianResource\";\r\nimport { PawnEnemy } from \"../entity/enemy/pawnEnemy\";\r\nimport { BigFrogEnemy } from \"../entity/enemy/bigFrogEnemy\";\r\nimport { BeetleEnemy } from \"../entity/enemy/beetleEnemy\";\r\nimport { GarnetResource } from \"../entity/resource/garnetResource\";\r\nimport { ZirconResource } from \"../entity/resource/zirconResource\";\r\nimport { AmberResource } from \"../entity/resource/amberResource\";\r\nimport { Candelabra } from \"../entity/object/candelabra\";\r\nimport { KingEnemy } from \"../entity/enemy/kingEnemy\";\r\nimport { BishopStatue } from \"../entity/object/bishopStatue\";\r\nimport { RookStatue } from \"../entity/object/rookStatue\";\r\nimport { PawnStatue } from \"../entity/object/pawnStatue\";\r\nimport { FallenPillar } from \"../entity/object/fallenPillar\";\r\nimport { Succulent } from \"../entity/object/succulent\";\r\nimport { SmallBush } from \"../entity/object/smallBush\";\r\nimport { ObsidianBlock } from \"../entity/object/obsidianBlock\";\r\nimport { DarkPillar } from \"../entity/object/darkPillar\";\r\nimport { DarkCrate } from \"../entity/object/darkCrate\";\r\nimport { DarkPot } from \"../entity/object/darkPot\";\r\nimport { DarkVase } from \"../entity/object/darkVase\";\r\n\r\n// Enemy ID mapping for integration with level progression system\r\nexport const enemyClassToId: Map<any, number> = new Map([\r\n  [CrabEnemy, 1],\r\n  [FrogEnemy, 2],\r\n  [ZombieEnemy, 3],\r\n  [SkullEnemy, 4],\r\n  [EnergyWizardEnemy, 5],\r\n  [ChargeEnemy, 6],\r\n  [RookEnemy, 7],\r\n  [BishopEnemy, 8],\r\n  [ArmoredzombieEnemy, 9],\r\n  [BigSkullEnemy, 10],\r\n  [QueenEnemy, 11],\r\n  [KnightEnemy, 12],\r\n  [BigKnightEnemy, 13],\r\n  [FireWizardEnemy, 14],\r\n  [ArmoredSkullEnemy, 15],\r\n  [MummyEnemy, 16],\r\n  [SpiderEnemy, 17],\r\n  [PawnEnemy, 18],\r\n  [BigFrogEnemy, 19],\r\n  [BeetleEnemy, 20],\r\n  [KingEnemy, 21],\r\n]);\r\n\r\nexport class Environment {\r\n  type: EnvType;\r\n  skin: SkinType;\r\n  constructor(type: EnvType) {\r\n    this.type = type;\r\n    this.skin = this.type as unknown as SkinType;\r\n  }\r\n}\r\n\r\n// Import the enemy minimum depth from level.ts\r\n//export { enemyMinimumDepth } from \"./level\";\r\n\r\ninterface PropInfo {\r\n  class: any; // The class constructor\r\n  weight?: number; // Spawn weight\r\n  blacklistedEnvironments?: EnvType[]; // Environments where this prop shouldn't spawn\r\n  additionalParams?: any[]; // Extra constructor parameters if needed\r\n  size?: { w: number; h: number }; // Optional footprint size in tiles\r\n}\r\n\r\ninterface EnemyInfo {\r\n  class: any;\r\n  weight?: number;\r\n  minDepth?: number;\r\n  blacklistedEnvironments?: EnvType[];\r\n  additionalParams?: any[];\r\n  specialSpawnLogic?: \"clearFloor\" | \"bigEnemy\";\r\n  size?: { w: number; h: number };\r\n}\r\n\r\ninterface EnvironmentData {\r\n  props: PropInfo[];\r\n  enemies: EnemyInfo[];\r\n}\r\n\r\n// A do-nothing prop used to control spawn density without placing anything\r\nexport class NullProp {\r\n  static add(): void {\r\n    // intentionally empty\r\n  }\r\n}\r\n\r\nconst environmentData: Record<EnvType, EnvironmentData> = {\r\n  [EnvType.DUNGEON]: {\r\n    props: [\r\n      { class: Crate, weight: 1 },\r\n      { class: Barrel, weight: 1 },\r\n      { class: TombStone, weight: 0.01, additionalParams: [1] },\r\n      { class: TombStone, weight: 0.01, additionalParams: [0] },\r\n      { class: Pumpkin, weight: 0.05 },\r\n      { class: Block, weight: 1 },\r\n      { class: Pot, weight: 1 },\r\n      { class: PottedPlant, weight: 1 },\r\n      { class: Mushrooms, weight: 0.1 },\r\n      { class: Bush, weight: 0.1 },\r\n      { class: Sprout, weight: 0.025 },\r\n      { class: Chest, weight: 0.025 },\r\n      { class: DecoBlock, weight: 0.05 },\r\n      { class: Furnace, weight: 0.05 },\r\n    ],\r\n    enemies: [\r\n      // Early game enemies (depth 0+)\r\n      { class: CrabEnemy, weight: 1.0, minDepth: 0 },\r\n      { class: ZombieEnemy, weight: 1.2, minDepth: 0 },\r\n      { class: SkullEnemy, weight: 1.0, minDepth: 0 },\r\n      { class: SpiderEnemy, weight: 1.0, minDepth: 2 },\r\n      { class: MummyEnemy, weight: 1.0, minDepth: 2 },\r\n      { class: PawnEnemy, weight: 1.0, minDepth: 1 },\r\n      { class: KingEnemy, weight: 0.25, minDepth: 3 },\r\n\r\n      // Mid game enemies (depth 1+)\r\n      { class: EnergyWizardEnemy, weight: 0.1, minDepth: 1 },\r\n      { class: RookEnemy, weight: 0.6, minDepth: 1 },\r\n      { class: BishopEnemy, weight: 0.6, minDepth: 1 },\r\n      { class: ArmoredzombieEnemy, weight: 0.8, minDepth: 1 },\r\n      { class: KnightEnemy, weight: 0.7, minDepth: 1 },\r\n\r\n      // Late game enemies (depth 2+)\r\n      { class: ChargeEnemy, weight: 0.5, minDepth: 2 },\r\n      {\r\n        class: BigSkullEnemy,\r\n        weight: 0.1,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n      { class: QueenEnemy, weight: 0.2, minDepth: 2 },\r\n      {\r\n        class: BigKnightEnemy,\r\n        weight: 0.1,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n      { class: FireWizardEnemy, weight: 0.1, minDepth: 2 },\r\n      { class: ArmoredSkullEnemy, weight: 0.5, minDepth: 2 },\r\n      {\r\n        class: BigFrogEnemy,\r\n        weight: 0.1,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n    ],\r\n  },\r\n  [EnvType.CAVE]: {\r\n    props: [\r\n      { class: NullProp, weight: 1 },\r\n      { class: CoalResource, weight: 1 },\r\n      { class: GoldResource, weight: 0.1 },\r\n      { class: EmeraldResource, weight: 0.01 },\r\n      { class: GarnetResource, weight: 0.01 },\r\n      { class: ZirconResource, weight: 0.01 },\r\n      { class: AmberResource, weight: 0.01 },\r\n      { class: Block, weight: 0.2 },\r\n      { class: Rock, weight: 0.4 },\r\n      { class: Mushrooms, weight: 0.3 },\r\n      { class: Pot, weight: 0.2 },\r\n      { class: Chest, weight: 0.1 },\r\n    ],\r\n    enemies: [\r\n      // Cave-dwelling creatures\r\n      { class: CrabEnemy, weight: 1.5, minDepth: 0 }, // Crabs like caves\r\n      { class: SpiderEnemy, weight: 1.2, minDepth: 1 }, // Cave spiders\r\n      { class: SkullEnemy, weight: 0.8, minDepth: 0 }, // Ancient cave remains\r\n\r\n      // Mid depth cave enemies\r\n      { class: ChargeEnemy, weight: 1.0, minDepth: 2 }, // Charging creatures\r\n      { class: ArmoredzombieEnemy, weight: 0.6, minDepth: 1 }, // Less common undead\r\n      { class: EnergyWizardEnemy, weight: 0.5, minDepth: 1 }, // Rare magic users\r\n      { class: BeetleEnemy, weight: 0.5, minDepth: 1 }, // Rare magic users\r\n\r\n      // Deep cave threats\r\n      {\r\n        class: BigSkullEnemy,\r\n        weight: 0.15,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n      { class: ArmoredSkullEnemy, weight: 0.7, minDepth: 2 },\r\n      //{ class: MummyEnemy, weight: 0.4, minDepth: 2 }, // Ancient cave mummies\r\n    ],\r\n  },\r\n  [EnvType.FOREST]: {\r\n    props: [\r\n      { class: NullProp, weight: 2 },\r\n      { class: TombStone, weight: 0.035, additionalParams: [1] },\r\n      { class: TombStone, weight: 0.035, additionalParams: [0] },\r\n      { class: Pumpkin, weight: 0.05 },\r\n      { class: Bush, weight: 2 },\r\n      { class: Sprout, weight: 0.05 },\r\n      { class: Mushrooms, weight: 0.2 },\r\n      { class: Rock, weight: 0.1 },\r\n      { class: Chest, weight: 0.05 },\r\n      { class: GlowBugEnemy, weight: 0.05 },\r\n      { class: Tree, weight: 0.1 },\r\n      { class: Succulent, weight: 0.1 },\r\n      { class: SmallBush, weight: 0.5 },\r\n    ],\r\n    enemies: [\r\n      // Nature creatures (higher weights)\r\n      { class: GlowBugEnemy, weight: 1.5, minDepth: 0 },\r\n      { class: FrogEnemy, weight: 0.25, minDepth: 0 }, // Frogs love forests\r\n      { class: BeetleEnemy, weight: 0.1, minDepth: 0 }, // Rare magic users\r\n      //{ class: SpiderEnemy, weight: 0.25, minDepth: 0 }, // Forest spiders\r\n\r\n      // Less common forest enemies\r\n      { class: CrabEnemy, weight: 0.3, minDepth: 0 }, // Rare in forest\r\n      { class: ZombieEnemy, weight: 0.2, minDepth: 0 }, // Very rare undead\r\n      { class: SkullEnemy, weight: 0.1, minDepth: 0 }, // Ancient forest spirits\r\n\r\n      // Rare magical forest creatures\r\n      { class: EnergyWizardEnemy, weight: 0.4, minDepth: 1 }, // Forest wizards\r\n      //{ class: ChargeEnemy, weight: 0.3, minDepth: 2 }, // Charging forest beasts\r\n      {\r\n        class: BigFrogEnemy,\r\n        weight: 0.1,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n    ],\r\n  },\r\n  [EnvType.DESERT]: {\r\n    props: [\r\n      { class: NullProp, weight: 2 },\r\n      { class: Barrel, weight: 8 },\r\n      { class: TombStone, weight: 5, additionalParams: [1] },\r\n      { class: TombStone, weight: 2, additionalParams: [0] },\r\n      { class: Block, weight: 5 },\r\n      { class: Mushrooms, weight: 0.5 },\r\n      { class: Bush, weight: 0.25 },\r\n      { class: Pot, weight: 0.15 },\r\n      { class: Rock, weight: 0.05 },\r\n      { class: Chest, weight: 0.05 },\r\n    ],\r\n    enemies: [\r\n      // Decay and poison themed enemies\r\n      { class: ZombieEnemy, weight: 1.8, minDepth: 0 }, // Swamp zombies\r\n      { class: FrogEnemy, weight: 1.5, minDepth: 1 }, // Poison frogs\r\n      { class: MummyEnemy, weight: 1.0, minDepth: 2 }, // Preserved in swamp\r\n      { class: ArmoredzombieEnemy, weight: 1.2, minDepth: 1 },\r\n\r\n      // Other swamp dwellers\r\n      { class: CrabEnemy, weight: 0.8, minDepth: 0 }, // Swamp crabs\r\n      { class: SkullEnemy, weight: 1.0, minDepth: 0 }, // Bog spirits\r\n      { class: SpiderEnemy, weight: 0.6, minDepth: 0 }, // Swamp spiders\r\n\r\n      // Powerful swamp creatures\r\n      { class: ArmoredSkullEnemy, weight: 0.8, minDepth: 2 },\r\n      { class: EnergyWizardEnemy, weight: 0.3, minDepth: 1 }, // Swamp witches\r\n    ],\r\n  },\r\n  [EnvType.GLACIER]: {\r\n    props: [\r\n      { class: NullProp, weight: 2 },\r\n      { class: Block, weight: 20 },\r\n      { class: Crate, weight: 5 },\r\n      { class: Rock, weight: 0.6 },\r\n      { class: Chest, weight: 0.4 },\r\n    ],\r\n    enemies: [\r\n      // Ice and cold themed enemies\r\n      { class: CrabEnemy, weight: 1.0, minDepth: 0 }, // Ice crabs\r\n      { class: ChargeEnemy, weight: 1.2, minDepth: 2 }, // Charging ice beasts\r\n      { class: KnightEnemy, weight: 1.0, minDepth: 1 }, // Frozen knights\r\n      {\r\n        class: BigKnightEnemy,\r\n        weight: 0.15,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n\r\n      // Hardy creatures that survive cold\r\n      { class: ArmoredzombieEnemy, weight: 0.8, minDepth: 1 }, // Frozen zombies\r\n      { class: ArmoredSkullEnemy, weight: 0.9, minDepth: 2 }, // Ice spirits\r\n      { class: RookEnemy, weight: 0.7, minDepth: 1 }, // Ice constructs\r\n      { class: BishopEnemy, weight: 0.7, minDepth: 1 },\r\n\r\n      // Rare glacier threats\r\n      {\r\n        class: BigSkullEnemy,\r\n        weight: 0.1,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n    ],\r\n  },\r\n  [EnvType.CASTLE]: {\r\n    props: [\r\n      { class: NullProp, weight: 1 },\r\n      { class: Crate, weight: 2 },\r\n      { class: Barrel, weight: 2 },\r\n      { class: Block, weight: 0.25 },\r\n      { class: PottedPlant, weight: 0.1 },\r\n      { class: Pot, weight: 0.1 },\r\n      { class: Chest, weight: 0.1 },\r\n      { class: Candelabra, weight: 0.5 },\r\n      { class: PawnStatue, weight: 0.75 },\r\n      { class: RookStatue, weight: 0.75 },\r\n      { class: BishopStatue, weight: 0.75 },\r\n      { class: FallenPillar, weight: 0.5, size: { w: 2, h: 1 } },\r\n    ],\r\n    enemies: [\r\n      // Royal guards and castle defenders\r\n      { class: KnightEnemy, weight: 2.0, minDepth: 0 }, // Castle knights\r\n      {\r\n        class: BigKnightEnemy,\r\n        weight: 0.2,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n      { class: PawnEnemy, weight: 1.5, minDepth: 0 }, // Castle pawns\r\n      { class: RookEnemy, weight: 1, minDepth: 0 }, // Castle guardians\r\n      { class: BishopEnemy, weight: 1, minDepth: 0 }, // Castle clergy\r\n      { class: QueenEnemy, weight: 0.5, minDepth: 0 }, // Royal enemies\r\n      { class: KingEnemy, weight: 0.125, minDepth: 0 },\r\n\r\n      // Castle undead\r\n      { class: ArmoredzombieEnemy, weight: 0.25, minDepth: 0 }, // Fallen guards\r\n      { class: ArmoredSkullEnemy, weight: 0.25, minDepth: 0 }, // Armored spirits\r\n\r\n      // Other castle inhabitants\r\n      { class: EnergyWizardEnemy, weight: 0.1, minDepth: 0 }, // Court wizards\r\n      { class: FireWizardEnemy, weight: 0.1, minDepth: 0 }, // Battle mages\r\n      { class: ChargeEnemy, weight: 0.1, minDepth: 0 }, // War beasts\r\n    ],\r\n  },\r\n  [EnvType.DARK_CASTLE]: {\r\n    props: [\r\n      { class: NullProp, weight: 2 },\r\n      { class: DarkCrate, weight: 2 },\r\n      { class: Barrel, weight: 1 },\r\n      { class: DarkPot, weight: 1 },\r\n      { class: DarkVase, weight: 1 },\r\n      { class: Chest, weight: 0.15 },\r\n      { class: DarkPillar, weight: 0.05 },\r\n      { class: PawnStatue, weight: 0.2 },\r\n      { class: RookStatue, weight: 0.2 },\r\n      { class: BishopStatue, weight: 0.2 },\r\n    ],\r\n    enemies: [\r\n      // Chess-themed defenders\r\n      { class: RookEnemy, weight: 1.2, minDepth: 1 },\r\n      { class: BishopEnemy, weight: 1.2, minDepth: 1 },\r\n      { class: KnightEnemy, weight: 1.6, minDepth: 1 },\r\n      { class: PawnEnemy, weight: 1.5, minDepth: 0 }, // Castle pawns\r\n      { class: QueenEnemy, weight: 0.35, minDepth: 2 },\r\n      { class: KingEnemy, weight: 0.125, minDepth: 2 },\r\n\r\n      // Court mages\r\n      { class: EnergyWizardEnemy, weight: 0.4, minDepth: 1 },\r\n      { class: FireWizardEnemy, weight: 0.35, minDepth: 2 },\r\n\r\n      // Elite guards and constructs\r\n      {\r\n        class: BigKnightEnemy,\r\n        weight: 0.15,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n      { class: ArmoredSkullEnemy, weight: 0.8, minDepth: 2 },\r\n    ],\r\n  },\r\n  [EnvType.PLACEHOLDER]: {\r\n    props: [{ class: NullProp, weight: 1 }],\r\n    enemies: [],\r\n  },\r\n  [EnvType.MAGMA_CAVE]: {\r\n    props: [\r\n      { class: NullProp, weight: 1 },\r\n      { class: ObsidianResource, weight: 0.5 },\r\n      // Keep sparse and harsh\r\n      { class: Chest, weight: 0.05 },\r\n      { class: ObsidianBlock, weight: 3 },\r\n      { class: EmeraldResource, weight: 0.025 },\r\n      { class: GarnetResource, weight: 0.025 },\r\n      { class: ZirconResource, weight: 0.025 },\r\n      { class: AmberResource, weight: 0.025 },\r\n    ],\r\n    enemies: [\r\n      // Only high-level, late-game threats\r\n      // Depth 1 enemies\r\n      { class: ArmoredzombieEnemy, weight: 0.8, minDepth: 1 },\r\n      { class: BishopEnemy, weight: 0.6, minDepth: 1 },\r\n      { class: EnergyWizardEnemy, weight: 0.1, minDepth: 1 },\r\n      { class: KnightEnemy, weight: 0.7, minDepth: 1 },\r\n      { class: RookEnemy, weight: 0.6, minDepth: 1 },\r\n\r\n      // Depth 2 enemies\r\n      { class: ArmoredSkullEnemy, weight: 0.7, minDepth: 2 },\r\n      {\r\n        class: BigKnightEnemy,\r\n        weight: 0.3,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n      {\r\n        class: BigSkullEnemy,\r\n        weight: 0.35,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n      { class: BishopEnemy, weight: 0.5, minDepth: 2 },\r\n      { class: ChargeEnemy, weight: 0.5, minDepth: 2 },\r\n      { class: FireWizardEnemy, weight: 0.9, minDepth: 2 },\r\n      { class: MummyEnemy, weight: 0.5, minDepth: 2 },\r\n      { class: QueenEnemy, weight: 0.25, minDepth: 2 },\r\n      { class: SpiderEnemy, weight: 0.5, minDepth: 2 },\r\n    ],\r\n  },\r\n  [EnvType.DARK_DUNGEON]: {\r\n    props: [\r\n      { class: DarkCrate, weight: 1 },\r\n      { class: Barrel, weight: 1 },\r\n      { class: TombStone, weight: 0.01, additionalParams: [1] },\r\n      { class: TombStone, weight: 0.01, additionalParams: [0] },\r\n      { class: Pumpkin, weight: 0.05 },\r\n      { class: Block, weight: 1 },\r\n      { class: DarkPot, weight: 1 },\r\n      { class: DarkVase, weight: 1 },\r\n      { class: Mushrooms, weight: 0.1 },\r\n      { class: Bush, weight: 0.1 },\r\n      { class: Sprout, weight: 0.025 },\r\n      { class: Chest, weight: 0.025 },\r\n      { class: DarkPillar, weight: 0.05 },\r\n      { class: Furnace, weight: 0.05 },\r\n    ],\r\n    enemies: [\r\n      // Early game enemies (depth 0+)\r\n      { class: CrabEnemy, weight: 1.0, minDepth: 0 },\r\n      { class: ZombieEnemy, weight: 1.2, minDepth: 0 },\r\n      { class: SkullEnemy, weight: 1.0, minDepth: 0 },\r\n      { class: SpiderEnemy, weight: 1.0, minDepth: 2 },\r\n      { class: MummyEnemy, weight: 1.0, minDepth: 2 },\r\n      { class: PawnEnemy, weight: 1.0, minDepth: 1 },\r\n      { class: KingEnemy, weight: 0.25, minDepth: 3 },\r\n\r\n      // Mid game enemies (depth 1+)\r\n      { class: EnergyWizardEnemy, weight: 0.1, minDepth: 1 },\r\n      { class: RookEnemy, weight: 0.6, minDepth: 1 },\r\n      { class: BishopEnemy, weight: 0.6, minDepth: 1 },\r\n      { class: ArmoredzombieEnemy, weight: 0.8, minDepth: 1 },\r\n      { class: KnightEnemy, weight: 0.7, minDepth: 1 },\r\n\r\n      // Late game enemies (depth 2+)\r\n      { class: ChargeEnemy, weight: 0.5, minDepth: 2 },\r\n      {\r\n        class: BigSkullEnemy,\r\n        weight: 0.1,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n      { class: QueenEnemy, weight: 0.2, minDepth: 2 },\r\n      {\r\n        class: BigKnightEnemy,\r\n        weight: 0.1,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n      { class: FireWizardEnemy, weight: 0.1, minDepth: 2 },\r\n      { class: ArmoredSkullEnemy, weight: 0.5, minDepth: 2 },\r\n      {\r\n        class: BigFrogEnemy,\r\n        weight: 0.1,\r\n        minDepth: 2,\r\n        specialSpawnLogic: \"clearFloor\",\r\n        size: { w: 2, h: 2 },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nexport { environmentData, PropInfo, EnemyInfo, EnvironmentData };\r\n","import { Player } from \"../player/player\";\r\nimport { Game } from \"../game\";\r\nimport { Room } from \"../room/room\";\r\nimport { LevelConstants } from \"../level/levelConstants\";\r\nimport { Tile } from \"./tile\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Crate } from \"../entity/object/crate\";\r\nimport { Barrel } from \"../entity/object/barrel\";\r\nimport { HitWarning } from \"../drawable/hitWarning\";\r\n\r\nexport class SpikeTrap extends Tile {\r\n  on: boolean;\r\n  tickCount: number;\r\n  frame: number;\r\n  t: number;\r\n\r\n  constructor(room: Room, x: number, y: number, tickCount?: number) {\r\n    super(room, x, y);\r\n    if (tickCount) this.tickCount = tickCount;\r\n    else this.tickCount = 0;\r\n    this.on = false;\r\n    this.frame = 0;\r\n    this.t = 0;\r\n    this.name = \"spike trap\";\r\n  }\r\n\r\n  tick = () => {\r\n    this.tickCount++;\r\n    if (this.tickCount >= 4) this.tickCount = 0;\r\n    this.on = this.tickCount === 0;\r\n\r\n    if (this.on) {\r\n      for (const i in this.room.game.players) {\r\n        if (\r\n          this.room ===\r\n            this.room.game.rooms[this.room.game.players[i].levelID] &&\r\n          this.room.game.players[i].x === this.x &&\r\n          this.room.game.players[i].y === this.y\r\n        )\r\n          this.room.game.players[i].hurt(0.5, \"spike trap\");\r\n      }\r\n    }\r\n\r\n    if (this.tickCount === 3)\r\n      this.room.hitwarnings.push(\r\n        new HitWarning(this.room.game, this.x, this.y, this.x, this.y, false),\r\n      );\r\n  };\r\n\r\n  tickEnd = () => {\r\n    if (this.on) {\r\n      for (const e of this.room.entities) {\r\n        if (e.x === this.x && e.y === this.y) {\r\n          e.hurt(null, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  onCollideEnemy = (enemy: Entity) => {\r\n    if (this.on && !(enemy instanceof Crate || enemy instanceof Barrel))\r\n      enemy.hurt(null, 1);\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    //this.drawableY = this.y - 0.01;\r\n    Game.drawTile(\r\n      1,\r\n      this.skin,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n\r\n    let rumbleOffsetX = 0;\r\n    this.t += delta;\r\n    if (!this.on && this.tickCount === 3) {\r\n      if (Math.floor(this.t) % 4 === 1) rumbleOffsetX = 0.0325;\r\n      if (Math.floor(this.t) % 4 === 3) rumbleOffsetX = -0.0325;\r\n    }\r\n    let frames = [0, 1, 2, 3, 3, 4, 2, 0];\r\n    let f = 6 + frames[Math.floor(this.frame)];\r\n    if (\r\n      this.tickCount === 1 ||\r\n      (this.tickCount === 0 && frames[Math.floor(this.frame)] === 0)\r\n    ) {\r\n      f = 5;\r\n    }\r\n    Game.drawObj(\r\n      f,\r\n      1,\r\n      1,\r\n      1,\r\n      this.x + rumbleOffsetX,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n    Game.drawObj(\r\n      f,\r\n      0,\r\n      1,\r\n      1,\r\n      this.x + rumbleOffsetX,\r\n      this.y - 1,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(0, 0, false),\r\n    );\r\n\r\n    if (this.on && this.frame < frames.length - 1) {\r\n      if (frames[Math.floor(this.frame)] < 3) this.frame += 0.4 * delta;\r\n      else this.frame += 0.2 * delta;\r\n    }\r\n    if (!this.on) this.frame = 0;\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Equippable } from \"../equippable\";\r\nimport { EmeraldRing } from \"./emeraldRing\";\r\nimport { ZirconRing } from \"./zirconRing\";\r\nimport { AmberRing } from \"./amberRing\";\r\nimport { GarnetRing } from \"./garnetRing\";\r\n\r\nexport class GoldRing extends Equippable {\r\n  static itemName = \"gold ring\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 19;\r\n    this.tileY = 2;\r\n    this.name = GoldRing.itemName;\r\n    this.stackable = false;\r\n    this.description = \"Embed a gem within this ring to imbue it with magic.\";\r\n  }\r\n\r\n  embed = (player: Player, gem: Item) => {\r\n    player.inventory.subtractItem(gem, 1);\r\n    player.inventory.removeItem(this);\r\n    switch (gem.name) {\r\n      case \"emerald\":\r\n        player.inventory.addItem(new EmeraldRing(this.level, this.x, this.y));\r\n        break;\r\n      case \"zircon\":\r\n        player.inventory.addItem(new ZirconRing(this.level, this.x, this.y));\r\n        break;\r\n      case \"amber\":\r\n        player.inventory.addItem(new AmberRing(this.level, this.x, this.y));\r\n        break;\r\n      case \"garnet\":\r\n        player.inventory.addItem(new GarnetRing(this.level, this.x, this.y));\r\n        break;\r\n    }\r\n    this.level.game.pushMessage(`You embed the gem into the ring.`);\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Weapon } from \"./weapon\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { SlashParticle } from \"../../particle/slashParticle\";\r\nimport { Crate } from \"../../entity/object/crate\";\r\nimport { Barrel } from \"../../entity/object/barrel\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\n\r\nexport class Shotgun extends Weapon {\r\n  static itemName = \"shotgun\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 26;\r\n    this.tileY = 0;\r\n    this.name = \"shotgun\";\r\n  }\r\n\r\n  weaponMove = (newX: number, newY: number): boolean => {\r\n    let newX2 = 2 * newX - this.wielder.x;\r\n    let newY2 = 2 * newY - this.wielder.y;\r\n    let newX3 = 3 * newX - 2 * this.wielder.x;\r\n    let newY3 = 3 * newY - 2 * this.wielder.y;\r\n    let range = 3;\r\n\r\n    if (\r\n      !this.game.rooms[this.wielder.levelID].tileInside(newX, newY) ||\r\n      this.game.rooms[this.wielder.levelID].roomArray[newX][newY].isSolid()\r\n    )\r\n      return true;\r\n    else if (\r\n      !this.game.rooms[this.wielder.levelID].tileInside(newX2, newY2) ||\r\n      this.game.rooms[this.wielder.levelID].roomArray[newX2][newY2].isSolid()\r\n    )\r\n      range = 1;\r\n    else if (\r\n      !this.game.rooms[this.wielder.levelID].tileInside(newX3, newY3) ||\r\n      this.game.rooms[this.wielder.levelID].roomArray[newX3][newY3].isSolid()\r\n    )\r\n      range = 2;\r\n\r\n    let enemyHitCandidates = [];\r\n    let firstPushable = 4;\r\n    let firstNonPushable = 5;\r\n    let firstNonDestroyable = 5;\r\n\r\n    for (let e of this.game.rooms[this.wielder.levelID].entities) {\r\n      if (e.pushable) {\r\n        if (e.pointIn(newX, newY)) return true;\r\n        if (e.pointIn(newX2, newY2) && range >= 2) {\r\n          enemyHitCandidates.push({ enemy: e, dist: 2 });\r\n          firstPushable = 2;\r\n        }\r\n        if (e.pointIn(newX3, newY3) && range >= 3) {\r\n          enemyHitCandidates.push({ enemy: e, dist: 3 });\r\n          firstPushable = Math.min(firstPushable, 3);\r\n        }\r\n      } else if (e.destroyable) {\r\n        if (e.pointIn(newX, newY) && range >= 1) {\r\n          firstNonPushable = 1;\r\n          enemyHitCandidates.push({ enemy: e, dist: 1 });\r\n        }\r\n        if (e.pointIn(newX2, newY2) && range >= 2) {\r\n          firstNonPushable = Math.min(firstNonPushable, 2);\r\n          enemyHitCandidates.push({ enemy: e, dist: 2 });\r\n        }\r\n        if (e.pointIn(newX3, newY3) && range >= 3) {\r\n          firstNonPushable = Math.min(firstNonPushable, 3);\r\n          enemyHitCandidates.push({ enemy: e, dist: 3 });\r\n        }\r\n      } else {\r\n        if (e.pointIn(newX, newY) && range >= 1) {\r\n          firstNonDestroyable = 1;\r\n        }\r\n        if (e.pointIn(newX2, newY2) && range >= 2) {\r\n          firstNonDestroyable = Math.min(firstNonDestroyable, 2);\r\n        }\r\n        if (e.pointIn(newX3, newY3) && range >= 3) {\r\n          firstNonDestroyable = Math.min(firstNonDestroyable, 3);\r\n        }\r\n      }\r\n    }\r\n\r\n    let targetX = newX3;\r\n    let targetY = newY3;\r\n\r\n    if (\r\n      firstNonDestroyable < firstNonPushable &&\r\n      firstNonDestroyable < firstPushable\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    if (firstNonPushable <= firstPushable) {\r\n      for (const c of enemyHitCandidates) {\r\n        let e = c.enemy;\r\n        let d = c.dist;\r\n        if (d === 3) e.hurt(this.wielder, 0.5);\r\n        else e.hurt(this.wielder, 1);\r\n      }\r\n\r\n      this.hitSound();\r\n      this.wielder.setHitXY(newX, newY);\r\n\r\n      GenericParticle.shotgun(\r\n        this.game.rooms[this.wielder.levelID],\r\n        this.wielder.x + 0.5,\r\n        this.wielder.y,\r\n        targetX + 0.5,\r\n        targetY,\r\n        \"black\",\r\n      );\r\n      GenericParticle.shotgun(\r\n        this.game.rooms[this.wielder.levelID],\r\n        this.wielder.x + 0.5,\r\n        this.wielder.y,\r\n        targetX + 0.5,\r\n        targetY,\r\n        \"#ffddff\",\r\n      );\r\n      let gp = new GenericParticle(\r\n        this.game.rooms[this.wielder.levelID],\r\n        0.5 * (newX + this.wielder.x) + 0.5,\r\n        0.5 * (newY + this.wielder.y),\r\n        0,\r\n        1,\r\n        0,\r\n        0,\r\n        0,\r\n        \"white\",\r\n        0,\r\n      );\r\n      gp.expirationTimer = 10;\r\n      this.game.rooms[this.wielder.levelID].particles.push(gp);\r\n\r\n      this.game.rooms[this.wielder.levelID].tick(this.wielder);\r\n      this.shakeScreen(newX, newY);\r\n      this.degrade();\r\n\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n}\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { HitWarning } from \"../../drawable/hitWarning\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Utils } from \"../../utility/utils\";\r\n\r\nexport class FrogEnemy extends Enemy {\r\n  ticks: number;\r\n  frame: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  frameLength: number;\r\n  startFrame: number;\r\n  animationSpeed: number;\r\n  tickCount: number;\r\n  rumbling: boolean;\r\n  jumping: boolean;\r\n  jumpDistance: number;\r\n  static difficulty: number = 1;\r\n  static tileX: number = 12;\r\n  static tileY: number = 16;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 12;\r\n    this.tileY = 16;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.deathParticleColor = \"#ffffff\";\r\n    this.frameLength = 3;\r\n    this.startFrame = 0;\r\n    this.animationSpeed = 0.1;\r\n    this.tickCount = 0;\r\n    this.jumping = false;\r\n    this.jumpDistance = 1;\r\n    this.drop = drop ? drop : new Coin(this.room, this.x, this.y);\r\n    this.name = \"frog\";\r\n    this.orthogonalAttack = true;\r\n    this.diagonalAttack = true;\r\n    this.jumpHeight = 1;\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 30;\r\n    this.baseDamage = 0.5;\r\n    if (drop) this.drop = drop;\r\n    this.getDrop([\"weapon\", \"consumable\", \"tool\", \"coin\", \"poison\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    this.tileX = 1;\r\n    this.frameLength = 3;\r\n    this.animationSpeed = 0.1;\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      if (!this.seenPlayer) {\r\n        this.tileX = 12;\r\n        this.lookForPlayer();\r\n      } else if (this.seenPlayer) {\r\n        this.tileX = 1;\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          this.ticks++;\r\n          if (this.ticks % 2 === 1) {\r\n            this.rumbling = true;\r\n            let oldX = this.x;\r\n            let oldY = this.y;\r\n            let disablePositions = Array<astar.Position>();\r\n\r\n            for (const e of this.room.entities) {\r\n              if (e !== this) {\r\n                disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n              }\r\n            }\r\n\r\n            for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n              for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n                if (\r\n                  this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                  (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n                ) {\r\n                  // don't walk on active spiketraps\r\n                  disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n                }\r\n              }\r\n            }\r\n\r\n            let grid = [];\r\n            for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n              grid[x] = [];\r\n              for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n                if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                  grid[x][y] = this.room.roomArray[x][y];\r\n                else grid[x][y] = false;\r\n              }\r\n            }\r\n            let targetPosition = {\r\n              x: this.targetPlayer.x,\r\n              y: this.targetPlayer.y,\r\n            };\r\n            let dx = this.targetPlayer.x - this.x;\r\n            let dy = this.targetPlayer.y - this.y;\r\n            if (\r\n              (dx === 0 && dy <= 1) ||\r\n              (dx <= 1 && dy === 0) ||\r\n              (dx === 0 && dy >= -1) ||\r\n              (dx >= -1 && dy === 0)\r\n            ) {\r\n              let jumpOverX = this.targetPlayer.x + dx;\r\n              let jumpOverY = this.targetPlayer.y + dy;\r\n              if (\r\n                this.room.roomArray[jumpOverX] &&\r\n                this.room.roomArray[jumpOverX][jumpOverY]\r\n              ) {\r\n                if (!this.room.roomArray[jumpOverX][jumpOverY].isSolid()) {\r\n                  targetPosition = {\r\n                    x: jumpOverX,\r\n                    y: jumpOverY,\r\n                  };\r\n                }\r\n              }\r\n            }\r\n            let moves = astar.AStar.search(\r\n              grid,\r\n              this,\r\n              targetPosition,\r\n              disablePositions,\r\n              false,\r\n              false,\r\n              false,\r\n              undefined,\r\n              undefined,\r\n              false,\r\n              this.lastPlayerPos,\r\n            );\r\n            //console.log(moves); //DON'T REMOVE THIS\r\n\r\n            if (moves[1]) {\r\n              let hitPlayer = false;\r\n              for (const i in this.game.players) {\r\n                if (\r\n                  this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                  this.game.players[i].x === moves[1].pos.x &&\r\n                  this.game.players[i].y === moves[1].pos.y\r\n                ) {\r\n                  this.game.players[i].hurt(this.hit(), this.name);\r\n                  this.drawX += 1.5 * (this.x - this.game.players[i].x);\r\n                  this.drawY += 1.5 * (this.y - this.game.players[i].y);\r\n                  if (\r\n                    this.game.players[i] ===\r\n                    this.game.players[this.game.localPlayerID]\r\n                  )\r\n                    this.game.shakeScreen(5 * this.drawX, 5 * this.drawY);\r\n                  hitPlayer = true;\r\n                }\r\n              }\r\n              if (!hitPlayer) {\r\n                if (moves.length > 1) {\r\n                  let moveX = moves[1].pos.x;\r\n                  let moveY = moves[1].pos.y;\r\n                  this.tryMove(moveX, moveY);\r\n                  this.setDrawXY(this.lastX, this.lastY);\r\n\r\n                  if (this.jumping) {\r\n                    this.frame = 8;\r\n                    this.animationSpeed = 1;\r\n                  }\r\n                  if (this.x > moveX) this.direction = Direction.RIGHT;\r\n                  else if (this.x < moveX) this.direction = Direction.LEFT;\r\n                  else if (this.y > moveY) this.direction = Direction.DOWN;\r\n                  else if (this.y < moveY) this.direction = Direction.UP;\r\n                }\r\n              }\r\n            }\r\n            this.rumbling = false;\r\n          } else {\r\n            this.makeHitWarnings();\r\n            this.rumbling = true;\r\n            this.tileX = 3;\r\n            this.frame = 0;\r\n            this.frameLength = 2;\r\n            this.animationSpeed = 0.2;\r\n          }\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                if (this.ticks % 2 === 0) {\r\n                  this.makeHitWarnings();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  jump = (delta: number) => {\r\n    //console.log(`this.drawX, this.drawY: ${this.drawX}, ${this.drawY}`);\r\n    if (this.jumping) {\r\n      let j = Math.max(Math.abs(this.drawX), Math.abs(this.drawY));\r\n      if (j > 1) {\r\n        this.jumpDistance = 2;\r\n      }\r\n      this.jumpY =\r\n        Math.sin((j / this.jumpDistance) * Math.PI) * this.jumpHeight;\r\n      if (this.jumpY < 0.01 && this.jumpY > -0.01) {\r\n        this.jumpY = 0;\r\n        this.jumpDistance = 1;\r\n      }\r\n      if (this.jumpY > this.jumpHeight) this.jumpY = this.jumpHeight;\r\n    }\r\n  };\r\n\r\n  makeHitWarnings = () => {\r\n    const cullFactor = 0.25;\r\n    const player: Player = this.getPlayer();\r\n    const orthogonal = this.orthogonalAttack;\r\n    const diagonal = this.diagonalAttack;\r\n    const forwardOnly = this.forwardOnlyAttack;\r\n    const direction = this.direction;\r\n    const orthoRange = this.attackRange;\r\n    const diagRange = this.diagonalAttackRange;\r\n\r\n    const generateOffsets = (\r\n      isOrthogonal: boolean,\r\n      range: number,\r\n    ): number[][] => {\r\n      const baseOffsets = isOrthogonal\r\n        ? [\r\n            [-2, 0],\r\n            [2, 0],\r\n            [0, -2],\r\n            [0, 2],\r\n          ]\r\n        : [\r\n            [-1, -1],\r\n            [1, 1],\r\n            [1, -1],\r\n            [-1, 1],\r\n          ];\r\n      return baseOffsets.flatMap(([dx, dy]) =>\r\n        Array.from({ length: range }, (_, i) => [(i + 1) * dx, (i + 1) * dy]),\r\n      );\r\n    };\r\n\r\n    const directionOffsets = {\r\n      [Direction.LEFT]: [-1, 0],\r\n      [Direction.RIGHT]: [1, 0],\r\n      [Direction.UP]: [0, -1],\r\n      [Direction.DOWN]: [0, 1],\r\n    };\r\n\r\n    let offsets: number[][] = [];\r\n    if (forwardOnly) {\r\n      const [dx, dy] = directionOffsets[direction];\r\n      offsets = Array.from({ length: orthoRange }, (_, i) => [\r\n        (i + 1) * dx,\r\n        (i + 1) * dy,\r\n      ]);\r\n    } else {\r\n      if (orthogonal) offsets.push(...generateOffsets(true, orthoRange));\r\n      if (diagonal) offsets.push(...generateOffsets(false, diagRange));\r\n    }\r\n\r\n    const warningCoordinates = offsets\r\n      .map(([dx, dy]) => ({\r\n        x: dx,\r\n        y: dy,\r\n        distance: Utils.distance(dx, dy, player.x - this.x, player.y - this.y),\r\n      }))\r\n      .sort((a, b) => a.distance - b.distance);\r\n\r\n    const keepCount = Math.ceil(warningCoordinates.length * (1 - cullFactor));\r\n    const culledWarnings = warningCoordinates.slice(0, keepCount);\r\n\r\n    culledWarnings.forEach(({ x, y }) => {\r\n      const targetX = this.x + x;\r\n      const targetY = this.y + y;\r\n      if (this.isWithinRoomBounds(targetX, targetY)) {\r\n        const hitWarning = new HitWarning(\r\n          this.game,\r\n          targetX,\r\n          targetY,\r\n          this.x,\r\n          this.y,\r\n          true,\r\n          false,\r\n          this,\r\n        );\r\n        this.room.hitwarnings.push(hitWarning);\r\n        //this.hitWarnings.push(hitWarning);\r\n      }\r\n    });\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.frame += this.animationSpeed * delta;\r\n      if (this.frame >= this.frameLength) {\r\n        this.frame = 0;\r\n      }\r\n      let rumbleX = this.rumble(this.rumbling, this.frame).x;\r\n      let rumbleY = this.rumble(this.rumbling, this.frame).y;\r\n      if (this.drawX !== 0 || this.drawY !== 0) {\r\n        this.jumping = true;\r\n      } else {\r\n        this.jumping = false;\r\n      }\r\n      if (this.jumping) {\r\n        this.frameLength = 10;\r\n        this.animationSpeed = 0.4;\r\n      } else {\r\n        this.frameLength = 3;\r\n        this.animationSpeed = 0.1;\r\n      }\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX +\r\n          (this.tileX !== 12 && !this.rumbling ? Math.floor(this.frame) : 0),\r\n        this.tileY /*+ this.direction * 2,*/,\r\n        1,\r\n        2,\r\n        this.x + rumbleX - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Equippable } from \"../equippable\";\r\nimport { Torch } from \"./torch\";\r\nimport { Lantern } from \"./lantern\";\r\nimport { Inventory } from \"../../inventory/inventory\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Light } from \"./light\";\r\n\r\nexport class GlowBugs extends Light {\r\n  static itemName = \"glow bugs\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.fuel = 100; //how many turns before it burns out\r\n    this.tileX = 27;\r\n    this.tileY = 2;\r\n    this.name = \"glow bugs\";\r\n    this.fuelCap = 100;\r\n    this.radius = 6;\r\n    this.stackable = true;\r\n    this.maxBrightness = 2;\r\n    this.maxBrightness = 0.25;\r\n    //teal blue green rgb 0-255\r\n    this.color = [5, 75, 75];\r\n  }\r\n}\r\n","import { GameConstants } from \"./game/gameConstants\";\r\nimport { EnemyType, Room, RoomType } from \"./room/room\";\r\nimport { Player } from \"./player/player\";\r\nimport { Door, DoorType } from \"./tile/door\";\r\nimport { Sound } from \"./sound/sound\";\r\nimport { LevelConstants } from \"./level/levelConstants\";\r\nimport { LevelGenerator } from \"./level/levelGenerator\";\r\nimport { Input, InputEnum } from \"./game/input\";\r\nimport { DownLadder } from \"./tile/downLadder\";\r\nimport { TextBox } from \"./game/textbox\";\r\nimport {\r\n  createGameState,\r\n  GameState,\r\n  loadGameState,\r\n  TileType,\r\n} from \"./game/gameState\";\r\nimport { DoorDir } from \"./tile/door\";\r\nimport { LevelImageGenerator } from \"./level/levelImageGenerator\";\r\nimport { Enemy } from \"./entity/enemy/enemy\";\r\nimport { TutorialListener } from \"./game/tutorialListener\";\r\nimport { MouseCursor } from \"./gui/mouseCursor\";\r\nimport { PostProcessor } from \"./gui/postProcess\";\r\nimport { globalEventBus } from \"./event/eventBus\";\r\nimport { ReverbEngine } from \"./sound/reverb\";\r\nimport { Level } from \"./level/level\";\r\nimport { statsTracker } from \"./game/stats\";\r\nimport { EVENTS } from \"./event/events\";\r\nimport { UpLadder } from \"./tile/upLadder\";\r\nimport { CameraAnimation } from \"./game/cameraAnimation\";\r\nimport { Tips } from \"./tips\";\r\nimport { GameplaySettings } from \"./game/gameplaySettings\";\r\nimport { Random } from \"./utility/random\";\r\nimport { IdGenerator } from \"./globalStateManager/IdGenerator\";\r\nimport { ReplayManager } from \"./game/replayManager\";\r\nimport { PlayerAction } from \"./player/playerAction\";\r\nimport tilesetUrl = require(\"../res/tileset.png\");\r\nimport objsetUrl = require(\"../res/objset.png\");\r\nimport mobsetUrl = require(\"../res/mobset.png\");\r\nimport itemsetUrl = require(\"../res/itemset.png\");\r\nimport fxsetUrl = require(\"../res/fxset.png\");\r\nimport fontUrl = require(\"../res/font.png\");\r\nimport { FeedbackButton } from \"./gui/feedbackButton\";\r\n\r\nexport enum LevelState {\r\n  IN_LEVEL,\r\n  TRANSITIONING,\r\n  TRANSITIONING_LADDER,\r\n  LEVEL_GENERATION,\r\n}\r\n\r\nexport enum Direction {\r\n  DOWN,\r\n  UP,\r\n  RIGHT,\r\n  LEFT,\r\n  DOWN_RIGHT,\r\n  UP_LEFT,\r\n  UP_RIGHT,\r\n  DOWN_LEFT,\r\n  CENTER,\r\n}\r\n\r\nexport class ChatMessage {\r\n  message: string;\r\n  timestamp: number;\r\n  private cachedLines: string[] | null = null;\r\n  private cachedWidth: number = -1;\r\n\r\n  constructor(message: string) {\r\n    this.message = message;\r\n    this.timestamp = Date.now();\r\n  }\r\n\r\n  // Get wrapped lines for the given max width, with caching\r\n  getWrappedLines(maxWidth: number): string[] {\r\n    if (this.cachedLines && this.cachedWidth === maxWidth) {\r\n      return this.cachedLines;\r\n    }\r\n\r\n    this.cachedLines = this.wrapText(this.message, maxWidth);\r\n    this.cachedWidth = maxWidth;\r\n    return this.cachedLines;\r\n  }\r\n\r\n  private wrapText(text: string, maxWidth: number): string[] {\r\n    if (text === \"\") return [\"\"];\r\n\r\n    const words = text.split(\" \");\r\n    const lines: string[] = [];\r\n    let currentLine = \"\";\r\n\r\n    for (const word of words) {\r\n      const testLine = currentLine === \"\" ? word : currentLine + \" \" + word;\r\n\r\n      if (Game.measureText(testLine).width <= maxWidth) {\r\n        currentLine = testLine;\r\n      } else {\r\n        if (currentLine !== \"\") {\r\n          lines.push(currentLine);\r\n          currentLine = word;\r\n        } else {\r\n          // Single word is too long, just add it anyway\r\n          lines.push(word);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (currentLine !== \"\") {\r\n      lines.push(currentLine);\r\n    }\r\n\r\n    return lines.length > 0 ? lines : [\"\"];\r\n  }\r\n\r\n  // Clear cache when screen resizes\r\n  clearCache(): void {\r\n    this.cachedLines = null;\r\n    this.cachedWidth = -1;\r\n  }\r\n}\r\n\r\nlet getShadeCanvasKey = (\r\n  set: HTMLImageElement,\r\n  sX: number,\r\n  sY: number,\r\n  sW: number,\r\n  sH: number,\r\n  opacity: number,\r\n  shadeColor: string,\r\n  fadeDir?: \"left\" | \"right\" | \"up\" | \"down\",\r\n): string => {\r\n  return (\r\n    set.src +\r\n    \",\" +\r\n    sX +\r\n    \",\" +\r\n    sY +\r\n    \",\" +\r\n    sW +\r\n    \",\" +\r\n    sH +\r\n    \",\" +\r\n    opacity +\r\n    \",\" +\r\n    shadeColor +\r\n    \",fade=\" +\r\n    (fadeDir || \"none\")\r\n  );\r\n};\r\n\r\n// fps counter\r\nconst times = [];\r\nlet fps = 60;\r\n\r\nexport class Game {\r\n  // Replay manager singleton\r\n  private static _replayManager: ReplayManager | null = null;\r\n  get replayManager(): ReplayManager {\r\n    if (!Game._replayManager) Game._replayManager = new ReplayManager();\r\n    return Game._replayManager;\r\n  }\r\n  globalId: string;\r\n  static ctx: CanvasRenderingContext2D;\r\n  static shade_canvases: Record<string, HTMLCanvasElement>;\r\n  prevLevel: Room; // for transitions\r\n  room: Room;\r\n  rooms: Array<Room>;\r\n  level: Level;\r\n  levels: Array<Level>;\r\n  roomsById: Map<string, Room>;\r\n  levelsById: Map<string, Level>;\r\n  // Active path identifier for filtering draw/update\r\n  currentPathId: string = \"main\";\r\n  levelgen: LevelGenerator;\r\n  readonly localPlayerID = \"localplayer\";\r\n  players: Record<string, Player>;\r\n  offlinePlayers: Record<string, Player>;\r\n  levelState: LevelState;\r\n  transitionStartTime: number;\r\n  transitionX: number;\r\n  transitionY: number;\r\n  upwardTransition: boolean;\r\n  sideTransition: boolean;\r\n  sideTransitionDirection: number;\r\n  transition: boolean;\r\n  transitioningLadder: UpLadder | DownLadder;\r\n  screenShakeX: number;\r\n  screenShakeY: number;\r\n  shakeAmountX: number;\r\n  shakeAmountY: number;\r\n  shakeFrame: number;\r\n  screenShakeCutoff: number;\r\n  chat: Array<ChatMessage>;\r\n  chatOpen: boolean;\r\n  chatTextBox: TextBox;\r\n  private keyboardHeightPx: number = 0;\r\n  previousFrameTimestamp: number;\r\n  player: Player;\r\n  gameStartTimeMs: number;\r\n  hasRecordedStats: boolean = false;\r\n  loadedFromSaveFile: boolean = false;\r\n  // Reference package.json\r\n  version = \"0.3.0\";\r\n\r\n  static inputReceived = false;\r\n\r\n  loginMessage: string = \"\";\r\n  username: string;\r\n  usernameTextBox: TextBox;\r\n  passwordTextBox: TextBox;\r\n  worldCodes: Array<string>;\r\n  private selectedWorldCode: number;\r\n  tutorialActive: boolean;\r\n  static scale: number;\r\n  static interpolatedScale: number;\r\n  static tileset: HTMLImageElement;\r\n  static objset: HTMLImageElement;\r\n  static mobset: HTMLImageElement;\r\n  static itemset: HTMLImageElement;\r\n  static fxset: HTMLImageElement;\r\n  static fontsheet: HTMLImageElement;\r\n  isMobile: boolean;\r\n  started: boolean;\r\n  startedFadeOut: boolean;\r\n  screenShakeActive: boolean;\r\n  encounteredEnemies: Array<number>;\r\n  paused: boolean;\r\n  private startScreenAlpha = 1;\r\n  static delta: number;\r\n  currentDepth: number;\r\n  //previousDepth: number;\r\n  private ellipsisFrame: number = 0;\r\n  private ellipsisStartTime: number = 0;\r\n  cameraAnimation: CameraAnimation;\r\n\r\n  cameraTargetX: number;\r\n  cameraTargetY: number;\r\n  cameraX: number;\r\n  cameraY: number;\r\n  justTransitioned: boolean = false;\r\n  lastDroppedScythePiece: \"handle\" | \"blade\" | null = null;\r\n  lastDroppedShieldPiece: \"left\" | \"right\" | null = null;\r\n\r\n  tip: string = Tips.getRandomTip();\r\n  private currentLevelGenerator: LevelImageGenerator | null = null;\r\n  static text_rendering_canvases: Record<string, HTMLCanvasElement>;\r\n  static readonly letters =\r\n    \"abcdefghijklmnopqrstuvwxyz1234567890,.!?:'()[]%-/+\";\r\n  static readonly letter_widths = [\r\n    4, 4, 4, 4, 3, 3, 4, 4, 1, 4, 4, 3, 5, 5, 4, 4, 4, 4, 4, 3, 4, 5, 5, 5, 5,\r\n    3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 1, 1, 4, 1, 1, 2, 2, 2, 2, 5, 3, 3, 3,\r\n  ];\r\n  static readonly letter_height = 6;\r\n  static letter_positions = [];\r\n\r\n  // [min, max] inclusive\r\n  static rand = (min: number, max: number, rand): number => {\r\n    if (max < min) return min;\r\n    return Math.floor(rand() * (max - min + 1) + min);\r\n  };\r\n\r\n  static randTable = (table: any[], rand): any => {\r\n    return table[Game.rand(0, table.length - 1, rand)];\r\n  };\r\n  tutorialListener: TutorialListener;\r\n\r\n  private focusTimeout: number | null = null;\r\n  private readonly FOCUS_TIMEOUT_DURATION = 15000; // 5 seconds\r\n  private wasMuted = false;\r\n  private wasStarted = false;\r\n\r\n  private lastChatWidth: number = 0;\r\n  private savedGameState: GameState | null = null;\r\n  // Start screen menu (optional)\r\n  startMenu: any = null;\r\n  startMenuActive: boolean = false;\r\n\r\n  feedbackButton: FeedbackButton = null;\r\n\r\n  constructor() {\r\n    this.globalId = IdGenerator.generate(\"G\");\r\n    this.roomsById = new Map();\r\n    this.levelsById = new Map();\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      let canvas = document.getElementById(\"gameCanvas\");\r\n      Game.ctx = (canvas as HTMLCanvasElement).getContext(\"2d\", {\r\n        alpha: false,\r\n      }) as CanvasRenderingContext2D;\r\n\r\n      // Create TextBox instances and associate them with HTML elements\r\n      const usernameElement = document.createElement(\"input\");\r\n      usernameElement.type = \"text\";\r\n      usernameElement.autocomplete = \"off\";\r\n      usernameElement.autocapitalize = \"off\";\r\n      usernameElement.style.position = \"absolute\";\r\n      usernameElement.style.left = \"-1000px\"; // Position off-screen\r\n      //const passwordElement = document.createElement(\"input\");\r\n      //passwordElement.type = \"password\";\r\n      //passwordElement.style.position = \"absolute\";\r\n      //passwordElement.style.left = \"-1000px\"; // Position off-screen\r\n      const chatElement = document.createElement(\"input\");\r\n      chatElement.type = \"text\";\r\n      chatElement.autocomplete = \"off\";\r\n      chatElement.autocapitalize = \"off\";\r\n      (chatElement as any).autocorrect = \"off\";\r\n      chatElement.spellcheck = false;\r\n      chatElement.inputMode = \"text\";\r\n      chatElement.style.position = \"absolute\";\r\n      chatElement.style.left = \"-1000px\"; // Position off-screen by default\r\n      //document.body.appendChild(usernameElement);\r\n      //document.body.appendChild(passwordElement);\r\n      document.body.appendChild(chatElement);\r\n\r\n      document.addEventListener(\r\n        \"click\",\r\n        () => {\r\n          usernameElement.focus();\r\n        },\r\n        { once: true },\r\n      );\r\n\r\n      this.chat = [];\r\n      this.chatTextBox = new TextBox(chatElement);\r\n      this.chatTextBox.setEnterCallback(() => {\r\n        if (this.chatTextBox.text.length > 0) {\r\n          this.chat.push(new ChatMessage(this.chatTextBox.text));\r\n          this.chatTextBox.clear();\r\n        } else {\r\n          this.chatOpen = false;\r\n        }\r\n      });\r\n      this.chatTextBox.setEscapeCallback(() => {\r\n        this.chatOpen = false;\r\n      });\r\n      this.worldCodes = [];\r\n      this.selectedWorldCode = 0;\r\n\r\n      Game.shade_canvases = {};\r\n      Game.text_rendering_canvases = {};\r\n\r\n      let resourcesLoaded = 0;\r\n      const NUM_RESOURCES = 6;\r\n\r\n      Game.tileset = new Image();\r\n      Game.tileset.onload = () => {\r\n        resourcesLoaded++;\r\n      };\r\n      Game.tileset.src = tilesetUrl;\r\n      Game.objset = new Image();\r\n      Game.objset.onload = () => {\r\n        resourcesLoaded++;\r\n      };\r\n      Game.objset.src = objsetUrl;\r\n      Game.mobset = new Image();\r\n      Game.mobset.onload = () => {\r\n        resourcesLoaded++;\r\n      };\r\n      Game.mobset.src = mobsetUrl;\r\n      Game.itemset = new Image();\r\n      Game.itemset.onload = () => {\r\n        resourcesLoaded++;\r\n      };\r\n      Game.itemset.src = itemsetUrl;\r\n      Game.fxset = new Image();\r\n      Game.fxset.onload = () => {\r\n        resourcesLoaded++;\r\n      };\r\n      Game.fxset.src = fxsetUrl;\r\n      Game.fontsheet = new Image();\r\n      Game.fontsheet.onload = () => {\r\n        resourcesLoaded++;\r\n      };\r\n      Game.fontsheet.src = fontUrl;\r\n\r\n      this.levelState = LevelState.LEVEL_GENERATION;\r\n\r\n      // Initialize camera properties\r\n      this.cameraX = 0;\r\n      this.cameraY = 0;\r\n      this.cameraTargetX = 0;\r\n      this.cameraTargetY = 0;\r\n\r\n      let checkResourcesLoaded = () => {\r\n        if (resourcesLoaded < NUM_RESOURCES) {\r\n          window.setTimeout(checkResourcesLoaded, 500);\r\n        } else {\r\n          // proceed with constructor\r\n\r\n          Game.scale = GameConstants.SCALE;\r\n\r\n          document.addEventListener(\r\n            \"touchstart\",\r\n            function (e) {\r\n              if (e.target == canvas) {\r\n                e.preventDefault();\r\n              }\r\n            },\r\n            false,\r\n          );\r\n          document.addEventListener(\r\n            \"touchend\",\r\n            function (e) {\r\n              if (e.target == canvas) {\r\n                e.preventDefault();\r\n              }\r\n            },\r\n            false,\r\n          );\r\n          document.addEventListener(\r\n            \"touchmove\",\r\n            function (e) {\r\n              if (e.target == canvas) {\r\n                e.preventDefault();\r\n              }\r\n            },\r\n            false,\r\n          );\r\n\r\n          document.addEventListener(\"touchstart\", Input.handleTouchStart, {\r\n            passive: false,\r\n          });\r\n          document.addEventListener(\"touchmove\", Input.handleTouchMove, {\r\n            passive: false,\r\n          });\r\n          document.addEventListener(\"touchend\", Input.handleTouchEnd, {\r\n            passive: false,\r\n          });\r\n\r\n          Input.keyDownListener = (key: string) => {\r\n            this.keyDownListener(key);\r\n          };\r\n\r\n          window.requestAnimationFrame(this.run);\r\n          this.onResize();\r\n          window.addEventListener(\"resize\", this.onResize);\r\n          window.addEventListener(\"orientationchange\", () => {\r\n            // Small delay to ensure new dimensions are available\r\n            setTimeout(this.onResize, 100);\r\n          });\r\n\r\n          // Keyboard detection using VisualViewport (iOS 13+, Android Chrome)\r\n          if (GameConstants.MOBILE_KEYBOARD_SUPPORT) {\r\n            try {\r\n              const vv = (window as any).visualViewport;\r\n              if (vv && typeof vv.addEventListener === \"function\") {\r\n                const updateKeyboard = () => {\r\n                  // When keyboard shows, the layout viewport height shrinks\r\n                  const layoutH = window.innerHeight;\r\n                  const visualH = vv.height;\r\n                  const dy = Math.max(\r\n                    0,\r\n                    layoutH - visualH - (vv.offsetTop || 0),\r\n                  );\r\n                  this.keyboardHeightPx = dy;\r\n                };\r\n                vv.addEventListener(\"resize\", updateKeyboard);\r\n                vv.addEventListener(\"scroll\", updateKeyboard);\r\n              } else {\r\n                // Fallback: compare window.innerHeight changes\r\n                let baseline = window.innerHeight;\r\n                window.addEventListener(\"resize\", () => {\r\n                  const current = window.innerHeight;\r\n                  this.keyboardHeightPx = Math.max(0, baseline - current);\r\n                  if (current > baseline) baseline = current; // update baseline on orientation change etc.\r\n                });\r\n              }\r\n            } catch {}\r\n          } else {\r\n            this.keyboardHeightPx = 0;\r\n          }\r\n\r\n          //Sound.playMusic(); // loops forever\r\n\r\n          this.players = {};\r\n          this.offlinePlayers = {};\r\n          this.chatOpen = false;\r\n          this.cameraAnimation = new CameraAnimation(0, 0, 1000, 1, 0, false);\r\n          this.feedbackButton = new FeedbackButton();\r\n\r\n          // Enable tap-to-open chat on mobile: tap bottom-left region to focus chat input\r\n          if (GameConstants.MOBILE_KEYBOARD_SUPPORT) {\r\n            Input.mouseDownListeners.push((x: number, y: number) => {\r\n              if (!this.isMobile) return;\r\n              // Do not allow opening chat via touch when the death screen is active\r\n              const localPlayer = this.players?.[this.localPlayerID];\r\n              if (localPlayer && localPlayer.dead) return;\r\n              // If already open, don't steal the event\r\n              if (this.chatOpen) return;\r\n              if (this.isPointInChatHotspot(x, y)) {\r\n                this.chatOpen = true;\r\n                this.chatTextBox.focus();\r\n                Input.mouseDownHandled = true;\r\n              }\r\n            });\r\n          }\r\n\r\n          this.screenShakeX = 0;\r\n          this.screenShakeY = 0;\r\n          this.shakeAmountX = 0;\r\n          this.shakeAmountY = 0;\r\n          this.shakeFrame = (3 * Math.PI) / 2;\r\n          this.screenShakeCutoff = 0;\r\n          this.tutorialActive = false;\r\n          this.screenShakeActive = false;\r\n          this.levels = [];\r\n          this.encounteredEnemies = [];\r\n\r\n          this.newGame();\r\n          // If a save exists, build a start-screen menu to choose Continue/New\r\n          try {\r\n            const { getCookie } = require(\"./utility/cookies\");\r\n            const hasSave = !!getCookie(\"wr_save_meta\");\r\n            if (hasSave) {\r\n              const { Menu } = require(\"./gui/menu\");\r\n              this.startMenu = new Menu({ game: this, showCloseButton: false });\r\n              this.startMenu.buildStartMenu();\r\n              this.startMenu.openMenu();\r\n              this.startMenuActive = true;\r\n            }\r\n          } catch {}\r\n        }\r\n      };\r\n      checkResourcesLoaded();\r\n    });\r\n    ReverbEngine.initialize();\r\n\r\n    Sound.loadSounds();\r\n\r\n    this.started = false;\r\n    this.tutorialListener = null;\r\n\r\n    this.setupEventListeners();\r\n\r\n    globalEventBus.on(EVENTS.LEVEL_GENERATION_STARTED, () => {\r\n      this.levelState = LevelState.LEVEL_GENERATION;\r\n    });\r\n    globalEventBus.on(EVENTS.LEVEL_GENERATION_COMPLETED, () => {\r\n      this.levelState = LevelState.IN_LEVEL;\r\n    });\r\n\r\n    // Add focus/blur event listeners\r\n    //window.addEventListener(\"blur\", this.handleWindowBlur);\r\n    //window.addEventListener(\"focus\", this.handleWindowFocus);\r\n  }\r\n\r\n  updateDepth = (depth: number) => {\r\n    //this.previousDepth = this.currentDepth;\r\n    this.currentDepth = depth;\r\n    this.players[this.localPlayerID].depth = depth;\r\n  };\r\n\r\n  updateLevel = (room: Room) => {\r\n    if (room && room.level) {\r\n      this.level = room.level;\r\n    }\r\n    if (this.level.rooms.length > 0) {\r\n      this.rooms = this.level.rooms;\r\n      this.roomsById = new Map(this.rooms.map((r) => [r.globalId, r]));\r\n    }\r\n  };\r\n\r\n  getRoomById = (id: string): Room | undefined => {\r\n    return this.roomsById?.get(id);\r\n  };\r\n\r\n  getLevelById = (id: string): Level | undefined => {\r\n    return this.levelsById?.get(id);\r\n  };\r\n\r\n  registerLevel = (level: Level) => {\r\n    this.levelsById.set(level.globalId, level);\r\n  };\r\n\r\n  registerRooms = (rooms: Room[]) => {\r\n    this.rooms = rooms;\r\n    this.roomsById = new Map(rooms.map((r) => [r.globalId, r]));\r\n  };\r\n\r\n  setCurrentRoomById = (id: string): Room | undefined => {\r\n    const room = this.roomsById.get(id);\r\n    if (room) {\r\n      this.room = room;\r\n      this.updateLevel(room);\r\n    }\r\n    return room;\r\n  };\r\n\r\n  setPlayer = () => {\r\n    this.player = this.players[this.localPlayerID];\r\n  };\r\n\r\n  newGame = (seed?: number) => {\r\n    // Clear all input listeners to prevent duplicates from previous game instances\r\n    Input.mouseDownListeners.length = 0;\r\n    Input.mouseUpListeners.length = 0;\r\n    Input.mouseMoveListeners.length = 0;\r\n    Input.mouseLeftClickListeners.length = 0;\r\n    Input.mouseRightClickListeners.length = 0;\r\n    Input.touchStartListeners.length = 0;\r\n    Input.touchEndListeners.length = 0;\r\n\r\n    statsTracker.resetStats();\r\n    this.currentDepth = 0;\r\n    this.encounteredEnemies = [];\r\n    this.levels = [];\r\n    this.hasRecordedStats = false;\r\n    this.loadedFromSaveFile = false;\r\n\r\n    // In some cases, this starts the timer when a player views the start menu rather than when\r\n    // the gameplay starts. This field is only used for analytics, so approximate timing is acceptable.\r\n    this.gameStartTimeMs = Date.now();\r\n\r\n    // Reset path context to main for a fresh world\r\n    (this as any).currentPathId = \"main\";\r\n    // Attempt auto-load from cookies/localStorage if a save exists\r\n    // Auto-load disabled\r\n\r\n    // No cookie save found: start a fresh world\r\n    this.startFreshWorld(seed);\r\n    // Load settings from cookies after basic init\r\n    try {\r\n      const { loadSettings } = require(\"./game/settingsPersistence\");\r\n      loadSettings(this);\r\n    } catch {}\r\n\r\n    this.levelState = LevelState.LEVEL_GENERATION;\r\n    // Begin replay recording with this seed and capture a base state when ready\r\n    this.replayManager.beginRecording(gs.seed, this);\r\n  };\r\n\r\n  private startFreshWorld(seed?: number) {\r\n    //gs = new GameState();\r\n    gs.seed = seed ?? (Math.random() * 4294967296) >>> 0;\r\n    gs.randomState = gs.seed;\r\n    loadGameState(this, [this.localPlayerID], gs, true);\r\n\r\n    try {\r\n      const { loadSettings } = require(\"./game/settingsPersistence\");\r\n      loadSettings(this);\r\n    } catch {}\r\n    this.levelState = LevelState.LEVEL_GENERATION;\r\n    this.replayManager.beginRecording(gs.seed, this);\r\n  }\r\n\r\n  keyDownListener = (key: string) => {\r\n    Game.inputReceived = true;\r\n\r\n    if (!this.started) {\r\n      // If a start menu is active, ignore the default start behavior\r\n      if (this.startMenuActive) {\r\n        return;\r\n      }\r\n      this.startedFadeOut = true;\r\n      return;\r\n    }\r\n\r\n    // Handle global keys\r\n    if (!this.chatOpen) {\r\n      switch (key.toUpperCase()) {\r\n        case \"M\":\r\n          Sound.toggleMute();\r\n          this.pushMessage(Sound.audioMuted ? \"Audio muted\" : \"Audio unmuted\");\r\n          return;\r\n\r\n        case \"C\":\r\n          this.chatOpen = true;\r\n          return;\r\n\r\n        case \"/\":\r\n          this.chatOpen = true;\r\n          this.chatTextBox.clear();\r\n          this.chatTextBox.handleKeyPress(key);\r\n          return;\r\n\r\n        case \"1\":\r\n          LevelGenerator.ANIMATION_CONSTANT = 1;\r\n          return;\r\n        case \"2\":\r\n          LevelGenerator.ANIMATION_CONSTANT = 2;\r\n          return;\r\n        case \"3\":\r\n          LevelGenerator.ANIMATION_CONSTANT = 5;\r\n          return;\r\n        case \"4\":\r\n          LevelGenerator.ANIMATION_CONSTANT = 10000;\r\n          return;\r\n        case \"0\":\r\n          LevelGenerator.ANIMATION_CONSTANT = 0;\r\n          return;\r\n      }\r\n\r\n      // Forward all player input\r\n      const player = this.players[this.localPlayerID];\r\n      player.inputHandler.handleKeyboardKey(key);\r\n    } else {\r\n      this.chatTextBox.handleKeyPress(key);\r\n    }\r\n  };\r\n\r\n  changeLevelThroughLadder = (\r\n    player: Player,\r\n    ladder: UpLadder | DownLadder,\r\n  ) => {\r\n    player.map.saveOldMap();\r\n    if (ladder instanceof DownLadder && !ladder.linkedRoom) ladder.generate();\r\n\r\n    const newRoom = ladder.linkedRoom;\r\n    // If downladder provided an entry up-ladder position, pass it through transition\r\n    let entryPosition: { x: number; y: number } | undefined = undefined;\r\n    if ((ladder as any).entryUpLadderPos) {\r\n      entryPosition = { ...(ladder as any).entryUpLadderPos };\r\n      console.log(\r\n        `changeLevelThroughLadder: captured entryPosition (${entryPosition.x}, ${entryPosition.y}) for newRoom gid=${(newRoom as any)?.globalId}`,\r\n      );\r\n    }\r\n\r\n    if (this.players[this.localPlayerID] === player) {\r\n      player.levelID = newRoom.id;\r\n      (player as any).roomGID = newRoom.globalId;\r\n\r\n      // Immediately deactivate the old room like door transitions do\r\n      this.prevLevel = this.room;\r\n      this.prevLevel.exitLevel();\r\n    }\r\n\r\n    this.updateDepth(newRoom.depth);\r\n\r\n    this.levelState = LevelState.TRANSITIONING_LADDER;\r\n    this.transitionStartTime = Date.now();\r\n    this.transitioningLadder = ladder;\r\n    // Attach desired entry position onto the target room so enterLevel can read it\r\n    if (entryPosition) {\r\n      (newRoom as any).__entryPositionFromLadder = entryPosition;\r\n      console.log(\r\n        `changeLevelThroughLadder: wrote __entryPositionFromLadder to room gid=${(newRoom as any)?.globalId}`,\r\n      );\r\n    } else {\r\n      console.log(\r\n        `changeLevelThroughLadder: no entryPosition available for room gid=${(newRoom as any)?.globalId}`,\r\n      );\r\n    }\r\n  };\r\n\r\n  changeLevelThroughDoor = (player: Player, door: Door, side?: number) => {\r\n    door.linkedDoor.room.entered = true;\r\n    // Prefer stable roomGID; maintain legacy levelID for compatibility\r\n    (player as any).roomGID = door.room.globalId;\r\n    try {\r\n      // Compute index defensively instead of trusting door.room.id\r\n      const idx = this.rooms?.indexOf(door.room);\r\n      if (idx !== undefined && idx >= 0) player.levelID = idx;\r\n    } catch {}\r\n\r\n    if (this.players[this.localPlayerID] === player) {\r\n      this.levelState = LevelState.TRANSITIONING;\r\n      this.transitionStartTime = Date.now();\r\n      const hasDir = door.doorDir !== door.linkedDoor.doorDir;\r\n\r\n      let oldX = this.players[this.localPlayerID].x;\r\n      let oldY = this.players[this.localPlayerID].y;\r\n\r\n      this.prevLevel = this.room;\r\n      this.prevLevel.exitLevel();\r\n\r\n      //this.level.exitLevel();\r\n      this.room = door.room;\r\n\r\n      door.room.enterLevelThroughDoor(player, door, side);\r\n\r\n      this.transitionX =\r\n        (this.players[this.localPlayerID].x - oldX) * GameConstants.TILESIZE;\r\n      this.transitionY =\r\n        (this.players[this.localPlayerID].y - oldY) * GameConstants.TILESIZE;\r\n\r\n      this.upwardTransition = false;\r\n      this.sideTransition = false;\r\n      this.sideTransitionDirection = side;\r\n      if (\r\n        door instanceof Door &&\r\n        [Direction.RIGHT, Direction.LEFT].includes(door.doorDir) &&\r\n        hasDir\r\n      )\r\n        this.sideTransition = true;\r\n      else if (\r\n        door instanceof Door &&\r\n        door.doorDir === Direction.DOWN &&\r\n        hasDir\r\n      )\r\n        this.upwardTransition = true;\r\n    } else {\r\n      door.room.enterLevelThroughDoor(player, door, side);\r\n    }\r\n    player.map.saveMapData();\r\n  };\r\n\r\n  run = (timestamp: number) => {\r\n    if (this.paused) {\r\n      // Still request next frame even when paused to maintain loop\r\n      window.requestAnimationFrame(this.run);\r\n      return;\r\n    }\r\n\r\n    if (!this.previousFrameTimestamp) {\r\n      this.previousFrameTimestamp = timestamp;\r\n      window.requestAnimationFrame(this.run);\r\n      return;\r\n    }\r\n\r\n    // Calculate elapsed time in milliseconds\r\n    let elapsed = timestamp - this.previousFrameTimestamp;\r\n\r\n    // Normalize delta to 60 FPS\r\n    let delta = (elapsed * 60) / 1000.0;\r\n\r\n    // Define minimum and maximum delta values\r\n    const deltaMin = 1 / 10; // 600fps\r\n    const deltaMax = 8; //7.5fps\r\n    // Cap delta within [deltaMin, deltaMax]\r\n    if (Game.delta) delta = Game.delta;\r\n    if (delta < deltaMin) {\r\n      delta = deltaMin;\r\n    } else if (delta > deltaMax) {\r\n      delta = deltaMax;\r\n    }\r\n    //delta = 0.025;\r\n    // Update FPS tracking\r\n    while (times.length > 0 && times[0] <= timestamp - 1000) {\r\n      times.shift();\r\n    }\r\n    times.push(timestamp);\r\n    fps = times.length;\r\n    // Update game logic\r\n    if (\r\n      Math.floor(timestamp / (1000 / 60)) >\r\n      Math.floor(this.previousFrameTimestamp / (1000 / 60))\r\n    ) {\r\n      this.update();\r\n    }\r\n\r\n    if (\r\n      Math.floor(timestamp) >\r\n      Math.floor(this.previousFrameTimestamp) + 1000\r\n    ) {\r\n      this.refreshDimensions();\r\n    }\r\n    //delta = 0.1;\r\n    // Render the frame with capped delta\r\n\r\n    this.draw(delta * GameConstants.ANIMATION_SPEED * 1);\r\n\r\n    // Request the next frame\r\n    window.requestAnimationFrame(this.run);\r\n\r\n    // Update the previous frame timestamp\r\n    this.previousFrameTimestamp = timestamp;\r\n  };\r\n\r\n  update = () => {\r\n    this.refreshDimensions();\r\n    Input.checkIsTapHold();\r\n\r\n    // Existing key repeat (disabled during replay)\r\n    if (!this.replayManager.isReplaying()) {\r\n      if (\r\n        Input.lastPressTime !== 0 &&\r\n        Date.now() - Input.lastPressTime > GameConstants.KEY_REPEAT_TIME\r\n      ) {\r\n        Input.onKeydown({\r\n          repeat: false,\r\n          key: Input.lastPressKey,\r\n        } as KeyboardEvent);\r\n      }\r\n    }\r\n\r\n    // Add mouse repeat for movement (disabled during replay)\r\n    if (!this.replayManager.isReplaying()) {\r\n      if (\r\n        Input.mouseDown &&\r\n        Input.mouseDownHandled &&\r\n        Input.lastMouseDownTime !== 0 &&\r\n        Date.now() - Input.lastMouseDownTime > GameConstants.KEY_REPEAT_TIME\r\n      ) {\r\n        // Re-trigger mouse movement\r\n        const player = this.players[this.localPlayerID];\r\n        if (\r\n          player &&\r\n          player.game.levelState === LevelState.IN_LEVEL &&\r\n          !player.dead &&\r\n          !player.menu.open &&\r\n          !player.busyAnimating &&\r\n          !player.game.cameraAnimation.active\r\n        ) {\r\n          // Update mouse position and trigger movement\r\n          player.moveWithMouse();\r\n          Input.lastMouseDownTime = Date.now(); // Reset timer for next repeat\r\n        }\r\n      }\r\n    }\r\n\r\n    // Swipe hold repeat with initial delay\r\n    if (Input.swipeHoldActive && Input.lastSwipeTime !== 0) {\r\n      const timeSinceSwipe = Date.now() - Input.lastSwipeTime;\r\n\r\n      if (!Input.swipeHoldRepeating) {\r\n        // Check if we've waited long enough for initial delay\r\n        if (timeSinceSwipe > GameConstants.SWIPE_HOLD_INITIAL_DELAY) {\r\n          Input.swipeHoldRepeating = true;\r\n          Input.lastSwipeTime = Date.now(); // Reset timer for repeat timing\r\n        }\r\n      } else {\r\n        // We're in repeat mode, check if it's time to repeat\r\n        if (timeSinceSwipe > GameConstants.SWIPE_HOLD_REPEAT_TIME) {\r\n          // Trigger the swipe listener again based on last direction\r\n          switch (Input.lastSwipeDirection) {\r\n            case Direction.LEFT:\r\n              Input.leftSwipeListener();\r\n              break;\r\n            case Direction.RIGHT:\r\n              Input.rightSwipeListener();\r\n              break;\r\n            case Direction.UP:\r\n              Input.upSwipeListener();\r\n              break;\r\n            case Direction.DOWN:\r\n              Input.downSwipeListener();\r\n              break;\r\n          }\r\n          Input.lastSwipeTime = Date.now(); // Reset timer for next repeat\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.levelState === LevelState.TRANSITIONING) {\r\n      if (\r\n        Date.now() - this.transitionStartTime >=\r\n        LevelConstants.LEVEL_TRANSITION_TIME\r\n      ) {\r\n        this.levelState = LevelState.IN_LEVEL;\r\n      }\r\n    }\r\n    if (this.levelState === LevelState.TRANSITIONING_LADDER) {\r\n      if (\r\n        Date.now() - this.transitionStartTime >=\r\n        LevelConstants.LEVEL_TRANSITION_TIME_LADDER\r\n      ) {\r\n        this.levelState = LevelState.IN_LEVEL;\r\n        this.players[this.localPlayerID].map.saveMapData();\r\n      }\r\n    }\r\n    if (this.levelState !== LevelState.LEVEL_GENERATION) {\r\n      for (const i in this.players) {\r\n        this.players[i].update();\r\n\r\n        // Don't update rooms during level transitions\r\n        if (\r\n          this.levelState !== LevelState.TRANSITIONING &&\r\n          this.levelState !== LevelState.TRANSITIONING_LADDER\r\n        ) {\r\n          const player = this.players[i];\r\n          const room = (player as any).getRoom\r\n            ? (player as any).getRoom()\r\n            : this.levels[player.depth].rooms[player.levelID];\r\n          room.update();\r\n        }\r\n\r\n        if (this.players[i].dead) {\r\n          for (const j in this.players) {\r\n            this.players[j].dead = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  lerp = (a: number, b: number, t: number): number => {\r\n    return (1 - t) * a + t * b;\r\n  };\r\n\r\n  pushMessage = (message: string) => {\r\n    this.chat.push(new ChatMessage(message));\r\n  };\r\n\r\n  // Add this helper function before the commandHandler\r\n  private convertSeedToNumber = (seed: string): number => {\r\n    // If it's already a number, parse and return it\r\n    if (/^\\d+$/.test(seed)) {\r\n      return parseInt(seed);\r\n    }\r\n\r\n    // Convert letters to numbers using character codes\r\n    let hash = 0;\r\n    for (let i = 0; i < seed.length; i++) {\r\n      const char = seed.charCodeAt(i);\r\n      hash = (hash << 5) - hash + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n\r\n    // Ensure positive number\r\n    return Math.abs(hash);\r\n  };\r\n\r\n  commandHandler = (command: string): void => {\r\n    command = command.toLowerCase();\r\n    let enabled = \"\";\r\n\r\n    // Handle \"new\" command with optional seed parameter\r\n\r\n    if (command.startsWith(\"new\")) {\r\n      if (command.startsWith(\"new \")) {\r\n        const seedInput = command.slice(4).trim();\r\n        const seedNumber = this.convertSeedToNumber(seedInput);\r\n        this.pushMessage(\r\n          `Starting new game with seed: ${seedInput} (${seedNumber})`,\r\n        );\r\n        this.newGame(seedNumber);\r\n      } else if (command === \"new\") {\r\n        this.newGame();\r\n      }\r\n      return;\r\n    }\r\n\r\n    switch (command) {\r\n      case \"ladder\":\r\n        this.pushMessage(\r\n          `Distance to nearest up ladder: ${this.room.getDistanceToNearestLadder(\"up\")}`,\r\n        );\r\n        break;\r\n      case \"encounter\":\r\n        this.pushMessage(\r\n          \"Encountering enemies...\" + this.encounteredEnemies.length,\r\n        );\r\n        break;\r\n      case \"key\":\r\n        const keyRoom = this.level.getKeyRoom(this.room);\r\n        if (keyRoom) {\r\n          this.pushMessage(`Key room: ${keyRoom.id}`);\r\n          keyRoom.entered = true;\r\n          keyRoom.calculateWallInfo();\r\n          this.changeLevelThroughDoor(\r\n            this.players[this.localPlayerID],\r\n            keyRoom.doors[0],\r\n            1,\r\n          );\r\n          const tile = keyRoom.getRandomEmptyPosition(keyRoom.getEmptyTiles());\r\n          this.players[this.localPlayerID].x = tile.x;\r\n          this.players[this.localPlayerID].y = tile.y;\r\n          keyRoom.updateLighting();\r\n          this.pushMessage(\"Downladder located\");\r\n        }\r\n        break;\r\n\r\n      case \"level\":\r\n        this.pushMessage(`Level: ${this.level.globalId}`);\r\n        break;\r\n      case \"down\":\r\n        let downladder: DownLadder;\r\n        for (const room of this.level.rooms) {\r\n          if (room.type !== RoomType.DOWNLADDER) {\r\n            for (let x = room.roomX; x < room.roomX + room.width; x++) {\r\n              for (let y = room.roomY; y < room.roomY + room.height; y++) {\r\n                if (room.roomArray[x][y] instanceof DownLadder) {\r\n                  downladder = room.roomArray[x][y] as DownLadder;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (downladder) {\r\n          downladder.room.entered = true;\r\n          downladder.room.calculateWallInfo();\r\n          this.changeLevelThroughDoor(\r\n            this.players[this.localPlayerID],\r\n            downladder.room.doors[0],\r\n            1,\r\n          );\r\n          downladder.lockable.removeLock();\r\n          this.players[this.localPlayerID].x = downladder.x;\r\n          this.players[this.localPlayerID].y = downladder.y;\r\n          downladder.room.updateLighting();\r\n          this.pushMessage(\"Downladder located\");\r\n        }\r\n        break;\r\n      case \"lightup\":\r\n        LevelConstants.LIGHTING_ANGLE_STEP += 1;\r\n        this.pushMessage(\r\n          `Lighting angle step is now ${LevelConstants.LIGHTING_ANGLE_STEP}`,\r\n        );\r\n        break;\r\n      case \"lightdown\":\r\n        if (LevelConstants.LIGHTING_ANGLE_STEP > 1) {\r\n          LevelConstants.LIGHTING_ANGLE_STEP -= 1;\r\n        }\r\n        this.pushMessage(\r\n          `Lighting angle step is now ${LevelConstants.LIGHTING_ANGLE_STEP}`,\r\n        );\r\n        break;\r\n      case \"savec\": {\r\n        try {\r\n          const { saveToCookies } = require(\"./game/savePersistence\");\r\n          saveToCookies(this);\r\n          this.pushMessage(\r\n            \"Attempted cookie save (cookies/localStorage fallback).\",\r\n          );\r\n        } catch (e) {\r\n          this.pushMessage(\"Cookie save failed.\");\r\n        }\r\n        break;\r\n      }\r\n      case \"loadc\": {\r\n        try {\r\n          const { loadFromCookies } = require(\"./game/savePersistence\");\r\n          loadFromCookies(this);\r\n          this.pushMessage(\r\n            \"Attempted cookie load (cookies/localStorage fallback).\",\r\n          );\r\n        } catch (e) {\r\n          this.pushMessage(\"Cookie load failed.\");\r\n        }\r\n        break;\r\n      }\r\n      case \"replay\":\r\n        this.pushMessage(\"Starting replay...\");\r\n        this.replayManager.replay(this);\r\n        break;\r\n      case \"replayinfo\": {\r\n        const s = (this.replayManager as any).getStats?.();\r\n        this.pushMessage(\r\n          s\r\n            ? `Replay stats: actions=${s.count}, seed=${s.seed}, recording=${s.recording}, replaying=${s.replaying}`\r\n            : \"No replay stats available.\",\r\n        );\r\n        break;\r\n      }\r\n      case \"replayclear\":\r\n        (this.replayManager as any).clearRecording?.();\r\n        this.pushMessage(\"Replay buffer cleared.\");\r\n        break;\r\n      case \"devmode\":\r\n        GameConstants.DEVELOPER_MODE = !GameConstants.DEVELOPER_MODE;\r\n        console.log(`Developer mode is now ${GameConstants.DEVELOPER_MODE}`);\r\n        break;\r\n      case \"dev\":\r\n        GameConstants.DEVELOPER_MODE = !GameConstants.DEVELOPER_MODE;\r\n        console.log(`Developer mode is now ${GameConstants.DEVELOPER_MODE}`);\r\n        this.newGame();\r\n        break;\r\n      case \"kill\":\r\n        for (const i in this.players) {\r\n          this.players[i].dead = true;\r\n        }\r\n        break;\r\n      case \"killall\":\r\n        for (const i in this.players) {\r\n          this.players[i].game.room.entities.forEach((e) => {\r\n            e.kill();\r\n          });\r\n        }\r\n        break;\r\n      case \"bomb\":\r\n        this.room.addBombs(1, () => Random.rand());\r\n        break;\r\n      case \"col\":\r\n        GameConstants.SET_COLOR_LAYER_COMPOSITE_OPERATION(false);\r\n        break;\r\n      case \"scl\":\r\n        GameConstants.SET_SCALE();\r\n        this.onResize();\r\n        break;\r\n      case \"shd\":\r\n        //GameConstants.SHADE_ENABLED = !GameConstants.SHADE_ENABLED;\r\n        //enabled = GameConstants.SHADE_ENABLED ? \"enabled\" : \"disabled\";\r\n        //this.pushMessage(`Shade is now ${enabled}`);\r\n        break;\r\n      case \"shdop\":\r\n        GameConstants.SET_SHADE_LAYER_COMPOSITE_OPERATION(false);\r\n        break;\r\n      case \"smooth\":\r\n        GameConstants.SMOOTH_LIGHTING = !GameConstants.SMOOTH_LIGHTING;\r\n        enabled = GameConstants.SMOOTH_LIGHTING ? \"enabled\" : \"disabled\";\r\n        this.pushMessage(`Smooth lighting is now ${enabled}`);\r\n        try {\r\n          const { saveSettings } = require(\"./game/settingsPersistence\");\r\n          saveSettings(this);\r\n        } catch {}\r\n        break;\r\n      case \"rooms\":\r\n        GameConstants.drawOtherRooms = !GameConstants.drawOtherRooms;\r\n        enabled = GameConstants.drawOtherRooms ? \"enabled\" : \"disabled\";\r\n        this.pushMessage(`Drawing other rooms is now ${enabled}`);\r\n        break;\r\n      case \"opq\":\r\n        GameConstants.ENEMIES_BLOCK_LIGHT = !GameConstants.ENEMIES_BLOCK_LIGHT;\r\n        enabled = GameConstants.ENEMIES_BLOCK_LIGHT ? \"enabled\" : \"disabled\";\r\n        this.pushMessage(`Enemies block light is now ${enabled}`);\r\n        break;\r\n      case \"peace\":\r\n        GameplaySettings.NO_ENEMIES = !GameplaySettings.NO_ENEMIES;\r\n        this.newGame();\r\n        enabled = GameplaySettings.NO_ENEMIES ? \"enabled\" : \"disabled\";\r\n        this.pushMessage(`Peaceful mode is now ${enabled}`);\r\n        break;\r\n      case \"equip\":\r\n        GameplaySettings.EQUIP_USES_TURN = !GameplaySettings.EQUIP_USES_TURN;\r\n        enabled = GameplaySettings.EQUIP_USES_TURN ? \"enabled\" : \"disabled\";\r\n        this.pushMessage(`Equipping an item takes a turn is now ${enabled}`);\r\n        break;\r\n      case \"inline\":\r\n        GameConstants.SHADE_INLINE_IN_ENTITY_LAYER =\r\n          !GameConstants.SHADE_INLINE_IN_ENTITY_LAYER;\r\n        enabled = GameConstants.SHADE_INLINE_IN_ENTITY_LAYER\r\n          ? \"enabled\"\r\n          : \"disabled\";\r\n        this.pushMessage(`Inline tile shading ${enabled}`);\r\n        break;\r\n\r\n      case \"webgl\": {\r\n        // Toggle WebGL blur and initialize renderer if enabling\r\n        GameConstants.TOGGLE_USE_WEBGL_BLUR();\r\n        if (GameConstants.USE_WEBGL_BLUR) {\r\n          try {\r\n            const { WebGLBlurRenderer } = require(\"./gui/webglBlurRenderer\");\r\n            WebGLBlurRenderer.getInstance();\r\n            this.pushMessage(\"WebGL blur enabled and initialized.\");\r\n          } catch (e) {\r\n            this.pushMessage(\r\n              \"Failed to initialize WebGL blur. Falling back to Canvas blur.\",\r\n            );\r\n            GameConstants.USE_WEBGL_BLUR = false;\r\n          }\r\n        } else {\r\n          // Optional: clear any cached results when disabling\r\n          try {\r\n            const { WebGLBlurRenderer } = require(\"./gui/webglBlurRenderer\");\r\n            WebGLBlurRenderer.getInstance().clearCache?.();\r\n          } catch {}\r\n          this.pushMessage(\"WebGL blur disabled.\");\r\n        }\r\n        break;\r\n      }\r\n      case \"hq\":\r\n        GameConstants.TOGGLE_HIGH_QUALITY_BLUR();\r\n        break;\r\n      case \"genroom\":\r\n        this.generateAndShowRoomLayout();\r\n        break;\r\n      case \"cleargen\":\r\n        this.currentLevelGenerator = null;\r\n        this.pushMessage(\"Cleared generated level display\");\r\n        break;\r\n      case \"post\":\r\n        PostProcessor.settings.enabled = !PostProcessor.settings.enabled;\r\n        enabled = PostProcessor.settings.enabled ? \"enabled\" : \"disabled\";\r\n        this.pushMessage(`Post processor is now ${enabled}`);\r\n        break;\r\n      case \"save\":\r\n        try {\r\n          if (this.replayManager.isReplaying()) {\r\n            this.pushMessage(\"Cannot save during replay.\");\r\n          } else {\r\n            this.savedGameState = createGameState(this);\r\n            this.pushMessage(\"Game state saved successfully!\");\r\n            console.log(\"Saved game state:\", this.savedGameState);\r\n          }\r\n        } catch (error) {\r\n          this.pushMessage(\"Error saving game state: \" + error.message);\r\n          console.error(\"Save error:\", error);\r\n        }\r\n        break;\r\n\r\n      case \"load\":\r\n        if (!this.savedGameState) {\r\n          this.pushMessage(\r\n            \"No saved game state found. Use 'save' command first.\",\r\n          );\r\n          return;\r\n        }\r\n        try {\r\n          // Get current active usernames (for multiplayer support)\r\n          const activeUsernames = Object.keys(this.players);\r\n          loadGameState(this, activeUsernames, this.savedGameState, false);\r\n          this.pushMessage(\"Game state loaded successfully!\");\r\n          console.log(\"Loaded game state\");\r\n        } catch (error) {\r\n          this.pushMessage(\"Error loading game state: \" + error.message);\r\n          console.error(\"Load error:\", error);\r\n        }\r\n        break;\r\n\r\n      case \"saveinfo\":\r\n        if (!this.savedGameState) {\r\n          this.pushMessage(\"No saved game state found.\");\r\n          return;\r\n        }\r\n        this.pushMessage(\r\n          `Saved state - Seed: ${this.savedGameState.seed}, Depth: ${this.savedGameState.level.depth}, Players: ${Object.keys(this.savedGameState.players).length}`,\r\n        );\r\n        console.log(\"Saved game state details:\", this.savedGameState);\r\n        break;\r\n\r\n      case \"currentinfo\":\r\n        this.pushMessage(\r\n          `Current state - Seed: ${this.levelgen.seed}, Depth: ${this.level.depth}, Players: ${Object.keys(this.players).length}`,\r\n        );\r\n        console.log(\"Current game state details:\", {\r\n          seed: this.levelgen.seed,\r\n          depth: this.level.depth,\r\n          players: Object.keys(this.players),\r\n          rooms: this.rooms.length,\r\n        });\r\n        break;\r\n\r\n      case \"testsave\":\r\n        // Save current state, make some changes, then load to verify\r\n        try {\r\n          if (this.replayManager.isReplaying()) {\r\n            this.pushMessage(\"Cannot save during replay.\");\r\n            break;\r\n          }\r\n          this.savedGameState = createGameState(this);\r\n          const originalHealth = this.players[this.localPlayerID].health;\r\n          const originalX = this.players[this.localPlayerID].x;\r\n          const originalY = this.players[this.localPlayerID].y;\r\n\r\n          // Make some changes\r\n          this.players[this.localPlayerID].health = Math.max(\r\n            1,\r\n            this.players[this.localPlayerID].health - 1,\r\n          );\r\n          this.players[this.localPlayerID].x += 1;\r\n          this.players[this.localPlayerID].y += 1;\r\n\r\n          this.pushMessage(\r\n            `Changes made - Health: ${originalHealth} -> ${this.players[this.localPlayerID].health}, Pos: (${originalX},${originalY}) -> (${this.players[this.localPlayerID].x},${this.players[this.localPlayerID].y})`,\r\n          );\r\n          this.pushMessage(\"Use 'load' to restore the saved state\");\r\n        } catch (error) {\r\n          this.pushMessage(\"Error in test save: \" + error.message);\r\n          console.error(\"Test save error:\", error);\r\n        }\r\n        break;\r\n      default:\r\n        if (command.startsWith(\"spawn \")) {\r\n          this.room.addNewEnemy(command.slice(6) as EnemyType);\r\n        } else if (command.startsWith(\"fill\")) {\r\n          while (this.room.getEmptyTiles().length > 0) {\r\n            this.room.addNewEnemy(command.slice(5) as EnemyType);\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  private setupEventListeners(): void {\r\n    //console.log(\"Setting up event listeners\");\r\n    globalEventBus.on(\"ChatCommand\", this.commandHandler.bind(this));\r\n    try {\r\n      // Save on tab close/refresh and when page becomes hidden\r\n      const saveOnExit = () => {\r\n        try {\r\n          const { saveToCookies } = require(\"./game/savePersistence\");\r\n          // Avoid heavy work in beforeunload; keep it minimal\r\n          saveToCookies(this);\r\n        } catch {}\r\n      };\r\n      window.addEventListener(\"beforeunload\", saveOnExit);\r\n      document.addEventListener(\"visibilitychange\", () => {\r\n        if (document.visibilityState === \"hidden\") saveOnExit();\r\n      });\r\n      window.addEventListener(\"pagehide\", saveOnExit);\r\n      window.addEventListener(\"unload\", () => {\r\n        try {\r\n          const { Sound } = require(\"./sound/sound\");\r\n          Sound.cleanup?.();\r\n        } catch {}\r\n      });\r\n      // Save on back/forward navigation\r\n      window.addEventListener(\"popstate\", saveOnExit);\r\n      window.addEventListener(\"hashchange\", saveOnExit);\r\n    } catch {}\r\n  }\r\n\r\n  private generateAndShowRoomLayout(): void {\r\n    // Generate different patterns\r\n    const patterns: (\"center\" | \"split\" | \"corners\")[] = [\r\n      \"center\",\r\n      \"split\",\r\n      \"corners\",\r\n    ];\r\n    const pattern = patterns[Math.floor(Random.rand() * patterns.length)];\r\n\r\n    // Generate level with random parameters\r\n    const numRooms = 8 + Math.floor(Random.rand() * 12); // 8-20 rooms\r\n    const width = 60 + Math.floor(Random.rand() * 40); // 60-100 width\r\n    const height = 50 + Math.floor(Random.rand() * 30); // 50-80 height\r\n\r\n    const generator = LevelImageGenerator.generateRandomLevel(\r\n      width,\r\n      height,\r\n      numRooms,\r\n      Random.rand,\r\n      pattern,\r\n    );\r\n\r\n    // Check accessibility\r\n    const accessible = generator.areRoomsAccessible();\r\n    const accessibilityText = accessible\r\n      ? \"✓ All rooms accessible\"\r\n      : \"✗ Some rooms inaccessible\";\r\n\r\n    // Store generator for drawing\r\n    this.currentLevelGenerator = generator;\r\n\r\n    this.pushMessage(\r\n      `Generated ${numRooms} rooms (${pattern} pattern) - ${accessibilityText}`,\r\n    );\r\n    this.pushMessage(\"Level layout shown on screen. Use '/cleargen' to clear.\");\r\n\r\n    // Save PNG with organized filename\r\n    const timestamp = new Date()\r\n      .toISOString()\r\n      .slice(0, 19)\r\n      .replace(/[T:]/g, \"_\");\r\n    const filename = `${pattern}_${width}x${height}_${numRooms}rooms_${timestamp}.png`;\r\n\r\n    generator.savePNG(filename);\r\n    this.pushMessage(`PNG saved as: generated_levels/${filename}`);\r\n    this.pushMessage(\"Check browser downloads or console for data URL\");\r\n\r\n    // Log detailed info for developers\r\n    if (GameConstants.DEVELOPER_MODE) {\r\n      console.log(\"Generated level details:\", {\r\n        pattern,\r\n        dimensions: `${width}x${height}`,\r\n        numRooms,\r\n        accessible,\r\n        rooms: generator.getRooms(),\r\n      });\r\n    }\r\n  }\r\n\r\n  maxScale = () => {\r\n    let dimension = window.innerWidth;\r\n    let measure = 130;\r\n\r\n    for (let i = GameConstants.MIN_SCALE; i <= GameConstants.MAX_SCALE; i++) {\r\n      if (dimension / i < measure) {\r\n        return i;\r\n      }\r\n    }\r\n    return GameConstants.MAX_SCALE;\r\n  };\r\n\r\n  increaseScale = () => {\r\n    GameConstants.INCREASE_SCALE();\r\n    this.onResize();\r\n    // Recalculate mouse position for new scale\r\n    Input.recalculateMousePosition();\r\n  };\r\n\r\n  decreaseScale = () => {\r\n    GameConstants.DECREASE_SCALE();\r\n    this.onResize();\r\n    // Recalculate mouse position for new scale\r\n    Input.recalculateMousePosition();\r\n  };\r\n\r\n  updateScale = (delta: number) => {\r\n    if (GameConstants.smoothScaling) {\r\n      if (\r\n        GameConstants.SOFT_SCALE < GameConstants.SCALE &&\r\n        Math.abs(GameConstants.SOFT_SCALE - GameConstants.SCALE) >= 0.1\r\n      ) {\r\n        GameConstants.SOFT_SCALE +=\r\n          ((GameConstants.SCALE - GameConstants.SOFT_SCALE) * delta) / 10;\r\n      }\r\n      if (\r\n        GameConstants.SOFT_SCALE > GameConstants.SCALE &&\r\n        Math.abs(GameConstants.SOFT_SCALE - GameConstants.SCALE) >= 0.1\r\n      ) {\r\n        GameConstants.SOFT_SCALE -=\r\n          ((GameConstants.SOFT_SCALE - GameConstants.SCALE) * delta) / 10;\r\n      }\r\n\r\n      if (\r\n        GameConstants.SOFT_SCALE < GameConstants.SCALE &&\r\n        Math.abs(GameConstants.SOFT_SCALE - GameConstants.SCALE) <= 0.1\r\n      ) {\r\n        GameConstants.SOFT_SCALE += delta / 25;\r\n      }\r\n      if (\r\n        GameConstants.SOFT_SCALE > GameConstants.SCALE &&\r\n        Math.abs(GameConstants.SOFT_SCALE - GameConstants.SCALE) <= 0.1\r\n      ) {\r\n        GameConstants.SOFT_SCALE -= delta / 25;\r\n      }\r\n      if (Math.abs(GameConstants.SOFT_SCALE - GameConstants.SCALE) <= 0.01) {\r\n        GameConstants.SOFT_SCALE = GameConstants.SCALE;\r\n      }\r\n    } else {\r\n      //GameConstants.SCALE = Math.floor(GameConstants.SCALE);\r\n      GameConstants.SOFT_SCALE = GameConstants.SCALE;\r\n    }\r\n\r\n    this.onResize();\r\n    // Recalculate mouse position for new scale\r\n    Input.recalculateMousePosition();\r\n  };\r\n\r\n  refreshDimensions = () => {\r\n    Game.ctx.canvas.setAttribute(\"width\", `${GameConstants.WIDTH}`);\r\n    Game.ctx.canvas.setAttribute(\"height\", `${GameConstants.HEIGHT}`);\r\n  };\r\n\r\n  onResize = () => {\r\n    if (\r\n      this.localPlayerID !== undefined &&\r\n      this.players?.[this.localPlayerID] &&\r\n      this.players?.[this.localPlayerID]?.menu\r\n    ) {\r\n      this.players[this.localPlayerID].menu.positionButtons();\r\n    }\r\n    this.isMobile =\r\n      /iPhone|iPad|iPod|Android|webOS|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i.test(\r\n        navigator.userAgent,\r\n      );\r\n\r\n    GameConstants.isIOS =\r\n      /iPhone|iPad|iPod/i.test(navigator.userAgent) &&\r\n      !navigator.userAgent.includes(\"Chrome DevTools\");\r\n\r\n    // Detect Safari browser and enable WebGL blur\r\n    const isSafari =\r\n      /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);\r\n    if (isSafari) {\r\n      GameConstants.USE_WEBGL_BLUR = true;\r\n      // Only set default once at initialization; do not override user choice during resize/scale changes\r\n      if (GameConstants.SCALE === null) {\r\n        GameConstants.SMOOTH_LIGHTING = false;\r\n      }\r\n    }\r\n\r\n    // Define scale adjustment based on device pixel ratio\r\n    if (GameConstants.SCALE === null) {\r\n      GameConstants.SCALE = GameConstants.FIND_SCALE(this.isMobile);\r\n      GameConstants.SOFT_SCALE = GameConstants.SCALE;\r\n    }\r\n    let scaleOffset = 0;\r\n\r\n    // Calculate maximum possible scale based on window size\r\n    let maxWidthScale = Math.floor(\r\n      window.innerWidth / GameConstants.DEFAULTWIDTH,\r\n    );\r\n    let maxHeightScale = Math.floor(\r\n      window.innerHeight / GameConstants.DEFAULTHEIGHT,\r\n    );\r\n\r\n    if (this.isMobile) {\r\n      if (this.isMobile) console.log(\"Mobile detected\");\r\n      GameConstants.SHADE_LEVELS = 35;\r\n      GameConstants.isMobile = true;\r\n      LevelConstants.LIGHTING_ANGLE_STEP = 8;\r\n      LevelConstants.LIGHTING_MAX_DISTANCE = 7;\r\n      GameConstants.USE_WEBGL_BLUR = true;\r\n\r\n      // Use smaller scale for mobile devices based on screen size\r\n      // Adjust max scale with scaleOffset\r\n      const integerScale = GameConstants.SOFT_SCALE + scaleOffset;\r\n      Game.scale = Math.min(maxWidthScale, maxHeightScale, integerScale); // Cap at 3 + offset for mobile\r\n    } else {\r\n      GameConstants.isMobile = false;\r\n      // For desktop, use standard scaling logic\r\n      // Ensure GameConstants.SCALE is an integer. If not, round it.\r\n      const integerScale = GameConstants.SOFT_SCALE + scaleOffset;\r\n      Game.scale = Math.min(maxWidthScale, maxHeightScale, integerScale);\r\n    }\r\n\r\n    // Handle case where scale would be 0\r\n    if (Game.scale === 0) {\r\n      // Recalculate max scales without flooring to check for minimum scale\r\n      maxWidthScale = window.innerWidth / GameConstants.DEFAULTWIDTH;\r\n      maxHeightScale = window.innerHeight / GameConstants.DEFAULTHEIGHT;\r\n      // Ensure Game.scale is at least 1 and an integer\r\n      Game.scale = Math.max(\r\n        1,\r\n        Math.min(maxWidthScale, maxHeightScale, 1 + scaleOffset),\r\n      );\r\n    }\r\n\r\n    // Apply device pixel ratio negation by setting scale to compensate for DPI\r\n    const NEGATE_DPR_FACTOR = 1;\r\n    Game.scale *= NEGATE_DPR_FACTOR / window.devicePixelRatio;\r\n\r\n    // Calculate screen width and height in tiles, ensuring integer values\r\n    LevelConstants.SCREEN_W = Math.floor(\r\n      window.innerWidth / Game.scale / GameConstants.TILESIZE,\r\n    );\r\n    LevelConstants.SCREEN_H = Math.floor(\r\n      window.innerHeight / Game.scale / GameConstants.TILESIZE,\r\n    );\r\n\r\n    // Calculate canvas width and height in pixels\r\n    GameConstants.WIDTH = Math.floor(window.innerWidth / Game.scale);\r\n    GameConstants.HEIGHT = Math.floor(window.innerHeight / Game.scale);\r\n\r\n    // Set canvas width and height attributes\r\n    Game.ctx.canvas.setAttribute(\"width\", `${GameConstants.WIDTH}`);\r\n    Game.ctx.canvas.setAttribute(\"height\", `${GameConstants.HEIGHT}`);\r\n\r\n    // Set CSS styles for scaling, applying negated DPR factor\r\n    Game.ctx.canvas.setAttribute(\r\n      \"style\",\r\n      `width: ${GameConstants.WIDTH * Game.scale}px; height: ${\r\n        GameConstants.HEIGHT * Game.scale\r\n      }px;\r\n      display: block;\r\n      margin: 0 auto;\r\n      image-rendering: optimizeSpeed; /* Older versions of FF */\r\n      image-rendering: -moz-crisp-edges; /* FF 6.0+ */\r\n      image-rendering: -webkit-optimize-contrast; /* Safari */\r\n      image-rendering: -o-crisp-edges; /* OS X & Windows Opera (12.02+) */\r\n      image-rendering: pixelated; /* Future-browsers */\r\n      -ms-interpolation-mode: nearest-neighbor; /* IE */\r\n      `,\r\n    );\r\n\r\n    // Clear chat cache if width changed\r\n    const newChatWidth = GameConstants.WIDTH - 20; // Account for margins\r\n    if (newChatWidth !== this.lastChatWidth) {\r\n      this.chat.forEach((msg) => msg.clearCache());\r\n      this.lastChatWidth = newChatWidth;\r\n    }\r\n  };\r\n\r\n  shakeScreen = (shakeX: number, shakeY: number, clamp: boolean = false) => {\r\n    if (GameConstants.SCREEN_SHAKE_ENABLED) {\r\n      let finalX = clamp ? Math.max(-3, Math.min(3, shakeX)) : shakeX;\r\n      let finalY = clamp ? Math.max(-3, Math.min(3, shakeY)) : shakeY;\r\n\r\n      this.screenShakeActive = true;\r\n      this.screenShakeX += finalX;\r\n      this.screenShakeY += finalY;\r\n      this.shakeAmountX += Math.abs(finalX);\r\n      this.shakeAmountY += Math.abs(finalY);\r\n      if (finalX < 0 || finalY < 0) this.shakeFrame = (3 * Math.PI) / 2;\r\n      if (finalX > 0 || finalY > 0) this.shakeFrame = Math.PI / 2;\r\n      this.screenShakeCutoff = Date.now();\r\n    }\r\n  };\r\n\r\n  drawRooms = (delta: number, skipLocalPlayer: boolean = false) => {\r\n    if (!GameConstants.drawOtherRooms) {\r\n      // Ensure current room is drawn even if flags are stale\r\n      if (!this.room || this.room.pathId !== this.currentPathId) return;\r\n      this.room.draw(delta);\r\n      this.room.drawEntities(delta, true);\r\n    } else if (GameConstants.drawOtherRooms) {\r\n      // Create a sorted copy of the rooms array based on roomY + height\r\n      const sortedRooms = this.rooms\r\n        .filter((r) => r.pathId === this.currentPathId)\r\n        .slice()\r\n        .sort((a, b) => {\r\n          const aPosition = a.roomY + a.height;\r\n          const bPosition = b.roomY + b.height;\r\n          return aPosition - bPosition; // Ascending order\r\n        });\r\n\r\n      for (const room of sortedRooms) {\r\n        const shouldDraw =\r\n          room === this.room || room.active || (room.entered && room.onScreen);\r\n        if (shouldDraw) {\r\n          room.draw(delta);\r\n\r\n          room.drawEntities(delta, skipLocalPlayer);\r\n          //room.drawShade(delta); // this used to come after the color layer\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  drawRoomShadeAndColor = (delta: number) => {\r\n    for (const room of this.rooms) {\r\n      if (room.pathId !== this.currentPathId) continue;\r\n      const shouldDraw = room === this.room || room.active || room.entered;\r\n      if (shouldDraw) {\r\n        if (\r\n          GameConstants.SMOOTH_LIGHTING &&\r\n          !GameConstants.SHADE_INLINE_IN_ENTITY_LAYER\r\n        )\r\n          room.drawShadeLayer();\r\n        room.drawColorLayer();\r\n        room.drawBloomLayer(delta);\r\n      }\r\n    }\r\n    for (const room of this.rooms) {\r\n      if (room.pathId !== this.currentPathId) continue;\r\n      const shouldDrawOver =\r\n        room === this.room || (room.active && room.entered);\r\n      if (shouldDrawOver) {\r\n        room.drawOverShade(delta);\r\n      }\r\n    }\r\n  };\r\n\r\n  static measureText = (text: string): { width: number; height: number } => {\r\n    let w = 0;\r\n    for (const letter of text.toLowerCase()) {\r\n      if (letter === \" \") w += 4;\r\n      else\r\n        for (let i = 0; i < Game.letters.length; i++) {\r\n          if (Game.letters[i] === letter) {\r\n            w += Game.letter_widths[i] + 1;\r\n          }\r\n        }\r\n    }\r\n    return { width: w, height: Game.letter_height };\r\n  };\r\n\r\n  static fillText = (text: string, x: number, y: number, maxWidth?: number) => {\r\n    x = Math.round(x);\r\n    y = Math.round(y);\r\n\r\n    if (Game.letter_positions.length === 0) {\r\n      // calculate letter positions\r\n      for (let i = 0; i < Game.letter_widths.length; i++) {\r\n        if (i === 0) Game.letter_positions[0] = 0;\r\n        else\r\n          Game.letter_positions[i] =\r\n            Game.letter_positions[i - 1] + Game.letter_widths[i - 1] + 2;\r\n      }\r\n    } else {\r\n      let dimensions = Game.measureText(text);\r\n      if (dimensions.width > 0) {\r\n        let key = text + Game.ctx.fillStyle;\r\n\r\n        if (!Game.text_rendering_canvases[key]) {\r\n          Game.text_rendering_canvases[key] = document.createElement(\"canvas\");\r\n          Game.text_rendering_canvases[key].width = dimensions.width;\r\n          Game.text_rendering_canvases[key].height = dimensions.height;\r\n          let bx = Game.text_rendering_canvases[key].getContext(\"2d\");\r\n\r\n          let letter_x = 0;\r\n          for (const letter of text.toLowerCase()) {\r\n            if (letter === \" \") letter_x += 4;\r\n            else\r\n              for (let i = 0; i < Game.letters.length; i++) {\r\n                if (Game.letters[i] === letter) {\r\n                  bx.drawImage(\r\n                    Game.fontsheet,\r\n                    Game.letter_positions[i] + 1,\r\n                    0,\r\n                    Game.letter_widths[i],\r\n                    Game.letter_height,\r\n                    letter_x,\r\n                    0,\r\n                    Game.letter_widths[i],\r\n                    Game.letter_height,\r\n                  );\r\n                  letter_x += Game.letter_widths[i] + 1;\r\n                }\r\n              }\r\n          }\r\n          bx.fillStyle = Game.ctx.fillStyle;\r\n          bx.globalCompositeOperation = \"source-in\";\r\n          bx.fillRect(\r\n            0,\r\n            0,\r\n            Game.text_rendering_canvases[key].width,\r\n            Game.text_rendering_canvases[key].height,\r\n          );\r\n          Game.ctx.drawImage(Game.text_rendering_canvases[key], x, y);\r\n        } else {\r\n          Game.ctx.drawImage(Game.text_rendering_canvases[key], x, y);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  static fillTextOutline = (\r\n    text: string,\r\n    x: number,\r\n    y: number,\r\n    outlineColor: string,\r\n    fillColor: string,\r\n  ) => {\r\n    Game.ctx.fillStyle = outlineColor;\r\n    for (let xx = -1; xx <= 1; xx++) {\r\n      for (let yy = -1; yy <= 1; yy++) {\r\n        Game.fillText(text, x + xx, y + yy);\r\n      }\r\n    }\r\n    Game.ctx.fillStyle = fillColor;\r\n    Game.fillText(text, x, y);\r\n  };\r\n\r\n  drawStartScreen = (delta: number) => {\r\n    let startString = \"Welcome to Turnarchist\";\r\n\r\n    Game.ctx.globalAlpha = this.startScreenAlpha;\r\n    if (!this.started && !this.startedFadeOut) {\r\n      this.startScreenAlpha = 1;\r\n      if (this.startScreenAlpha <= 0) this.startScreenAlpha = 0;\r\n    } else if (!this.started && this.startedFadeOut) {\r\n      this.startScreenAlpha -= delta * 0.025;\r\n      if (this.startScreenAlpha <= 0) {\r\n        this.startScreenAlpha = 0;\r\n        this.started = true;\r\n        Sound.playAmbient();\r\n      }\r\n    }\r\n\r\n    Game.ctx.fillStyle = \"black\";\r\n    Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n    Game.ctx.fillStyle = LevelConstants.LEVEL_TEXT_COLOR;\r\n\r\n    // Draw CTA or menu buttons depending on startMenuActive\r\n    if (!this.startMenuActive && !this.startedFadeOut) {\r\n      Game.fillText(\r\n        startString,\r\n        GameConstants.WIDTH / 2 - Game.measureText(startString).width / 2,\r\n        GameConstants.HEIGHT / 2 - Game.letter_height + 2,\r\n      );\r\n      let restartButton = \"Press space or click to start\";\r\n      if (this.isMobile) restartButton = \"Tap to start\";\r\n      Game.fillText(\r\n        restartButton,\r\n        GameConstants.WIDTH / 2 - Game.measureText(restartButton).width / 2,\r\n        GameConstants.HEIGHT / 2 + Game.letter_height + 5,\r\n      );\r\n    } else {\r\n      // Draw the start screen menu buttons (Continue/New Game)\r\n      this.startMenu?.draw();\r\n    }\r\n\r\n    Game.ctx.globalAlpha = 1;\r\n  };\r\n\r\n  drawTipScreen = (delta: number) => {\r\n    let tip = this.tip;\r\n\r\n    Game.ctx.fillStyle = \"black\";\r\n    Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n    Game.ctx.fillStyle = LevelConstants.LEVEL_TEXT_COLOR;\r\n\r\n    Game.fillText(\r\n      tip,\r\n      GameConstants.WIDTH / 2 - Game.measureText(tip).width / 2,\r\n      GameConstants.HEIGHT / 2 - Game.letter_height + 2,\r\n    );\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (GameConstants.SOFT_SCALE !== GameConstants.SCALE) {\r\n      this.updateScale(delta);\r\n      this.onResize();\r\n    }\r\n    //Game.ctx.canvas.setAttribute(\"role\", \"presentation\");\r\n\r\n    Game.ctx.clearRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n    Game.ctx.save(); // Save the current canvas state\r\n\r\n    // Reset transformations to ensure the black background covers the entire canvas\r\n    Game.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\r\n    Game.ctx.globalAlpha = 1;\r\n    Game.ctx.globalCompositeOperation = \"source-over\";\r\n    Game.ctx.fillStyle = \"black\";\r\n    Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n\r\n    //if (this.room) Game.ctx.fillStyle = this.room.shadeColor;\r\n    //else Game.ctx.fillStyle = \"black\";\r\n    //Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n\r\n    if (this.levelState === LevelState.TRANSITIONING) {\r\n      this.screenShakeX = 0;\r\n      this.screenShakeY = 0;\r\n      this.screenShakeActive = false;\r\n\r\n      let levelOffsetX = Math.floor(\r\n        this.lerp(\r\n          (Date.now() - this.transitionStartTime) /\r\n            LevelConstants.LEVEL_TRANSITION_TIME,\r\n          0,\r\n          -this.transitionX,\r\n        ),\r\n      );\r\n      let levelOffsetY = Math.floor(\r\n        this.lerp(\r\n          (Date.now() - this.transitionStartTime) /\r\n            LevelConstants.LEVEL_TRANSITION_TIME,\r\n          0,\r\n          -this.transitionY,\r\n        ),\r\n      );\r\n      let playerOffsetX = levelOffsetX - this.transitionX;\r\n      let playerOffsetY = levelOffsetY - this.transitionY;\r\n\r\n      let playerCX =\r\n        (this.players[this.localPlayerID].x -\r\n          this.players[this.localPlayerID].drawX +\r\n          0.5) *\r\n        GameConstants.TILESIZE;\r\n      let playerCY =\r\n        (this.players[this.localPlayerID].y -\r\n          this.players[this.localPlayerID].drawY +\r\n          0.5) *\r\n        GameConstants.TILESIZE;\r\n\r\n      Game.ctx.translate(\r\n        -Math.round(playerCX + playerOffsetX - 0.5 * GameConstants.WIDTH),\r\n        -Math.round(playerCY + playerOffsetY - 0.5 * GameConstants.HEIGHT),\r\n      );\r\n\r\n      let extraTileLerp = Math.floor(\r\n        this.lerp(\r\n          (Date.now() - this.transitionStartTime) /\r\n            LevelConstants.LEVEL_TRANSITION_TIME,\r\n          0,\r\n          GameConstants.TILESIZE,\r\n        ),\r\n      );\r\n\r\n      let newLevelOffsetX = playerOffsetX;\r\n      let newLevelOffsetY = playerOffsetY;\r\n\r\n      if (this.sideTransition) {\r\n        if (this.sideTransitionDirection > 0) {\r\n          levelOffsetX += extraTileLerp;\r\n          newLevelOffsetX += extraTileLerp + GameConstants.TILESIZE;\r\n        } else {\r\n          levelOffsetX -= extraTileLerp;\r\n          newLevelOffsetX -= extraTileLerp + GameConstants.TILESIZE;\r\n        }\r\n      } else if (this.upwardTransition) {\r\n        levelOffsetY -= extraTileLerp;\r\n        newLevelOffsetY -= extraTileLerp + GameConstants.TILESIZE;\r\n      } else {\r\n        levelOffsetY += extraTileLerp;\r\n        newLevelOffsetY += extraTileLerp + GameConstants.TILESIZE;\r\n      }\r\n\r\n      let ditherFrame = Math.floor(\r\n        (7 * (Date.now() - this.transitionStartTime)) /\r\n          LevelConstants.LEVEL_TRANSITION_TIME,\r\n      );\r\n\r\n      Game.ctx.translate(levelOffsetX, levelOffsetY);\r\n      if (!GameConstants.drawOtherRooms) {\r\n        this.prevLevel.draw(delta);\r\n        this.prevLevel.drawEntities(delta);\r\n        this.prevLevel.drawColorLayer();\r\n        this.prevLevel.drawShade(delta);\r\n        this.prevLevel.drawOverShade(delta);\r\n\r\n        /*\r\n        for (\r\n          let x = this.prevLevel.roomX - 1;\r\n          x <= this.prevLevel.roomX + this.prevLevel.width;\r\n          x++\r\n        ) {\r\n          for (\r\n            let y = this.prevLevel.roomY - 1;\r\n            y <= this.prevLevel.roomY + this.prevLevel.height;\r\n            y++\r\n          ) {\r\n            Game.drawFX(7 - ditherFrame, 10, 1, 1, x, y, 1, 1);\r\n          }\r\n        }\r\n\r\n      */\r\n      }\r\n      Game.ctx.translate(-levelOffsetX, -levelOffsetY);\r\n\r\n      Game.ctx.translate(newLevelOffsetX, newLevelOffsetY);\r\n\r\n      if (GameConstants.drawOtherRooms) {\r\n        this.drawRooms(delta, true);\r\n\r\n        Game.ctx.translate(-newLevelOffsetX, -newLevelOffsetY);\r\n        Game.ctx.translate(playerOffsetX, playerOffsetY);\r\n        this.players[this.localPlayerID].draw(delta); // draw the translation\r\n\r\n        Game.ctx.translate(-playerOffsetX, -playerOffsetY);\r\n        Game.ctx.translate(newLevelOffsetX, newLevelOffsetY);\r\n\r\n        this.drawRoomShadeAndColor(delta);\r\n      }\r\n\r\n      for (\r\n        let x = this.room.roomX - 1;\r\n        x <= this.room.roomX + this.room.width;\r\n        x++\r\n      ) {\r\n        for (\r\n          let y = this.room.roomY - 1;\r\n          y <= this.room.roomY + this.room.height;\r\n          y++\r\n        ) {\r\n          //Game.drawFX(ditherFrame, 10, 1, 1, x, y, 1, 1);\r\n        }\r\n      }\r\n\r\n      //this.drawStuff(delta);\r\n\r\n      Game.ctx.translate(-newLevelOffsetX, -newLevelOffsetY);\r\n\r\n      Game.ctx.translate(\r\n        Math.round(playerCX + playerOffsetX - 0.5 * GameConstants.WIDTH),\r\n        Math.round(playerCY + playerOffsetY - 0.5 * GameConstants.HEIGHT),\r\n      );\r\n\r\n      this.players[this.localPlayerID].drawGUI(delta);\r\n      this.justTransitioned = true;\r\n\r\n      //for (const i in this.players) this.players[i].updateDrawXY(delta);\r\n    } else if (this.levelState === LevelState.TRANSITIONING_LADDER) {\r\n      let playerCX =\r\n        (this.players[this.localPlayerID].x -\r\n          this.players[this.localPlayerID].drawX +\r\n          0.5) *\r\n        GameConstants.TILESIZE;\r\n      let playerCY =\r\n        (this.players[this.localPlayerID].y -\r\n          this.players[this.localPlayerID].drawY +\r\n          0.5) *\r\n        GameConstants.TILESIZE;\r\n\r\n      Game.ctx.translate(\r\n        -Math.round(playerCX - 0.5 * GameConstants.WIDTH),\r\n        -Math.round(playerCY - 0.5 * GameConstants.HEIGHT),\r\n      );\r\n\r\n      let deadFrames = 6;\r\n      let ditherFrame = Math.floor(\r\n        ((7 * 2 + deadFrames) * (Date.now() - this.transitionStartTime)) /\r\n          LevelConstants.LEVEL_TRANSITION_TIME_LADDER,\r\n      );\r\n\r\n      Game.ctx.translate(\r\n        Math.round(playerCX - 0.5 * GameConstants.WIDTH),\r\n        Math.round(playerCY - 0.5 * GameConstants.HEIGHT),\r\n      );\r\n\r\n      if (ditherFrame < 7) {\r\n        this.drawRooms(delta);\r\n        this.drawRoomShadeAndColor(delta);\r\n\r\n        if (!GameConstants.drawOtherRooms) {\r\n          for (\r\n            let x = this.room.roomX - 1;\r\n            x <= this.room.roomX + this.room.width;\r\n            x++\r\n          ) {\r\n            for (\r\n              let y = this.room.roomY - 1;\r\n              y <= this.room.roomY + this.room.height;\r\n              y++\r\n            ) {\r\n              Game.drawFX(7 - ditherFrame, 10, 1, 1, x, y, 1, 1);\r\n            }\r\n          }\r\n        }\r\n      } else if (ditherFrame >= 7 + deadFrames) {\r\n        if (this.transitioningLadder) {\r\n          // this.prevLevel = this.room;\r\n          // this.room.exitLevel();\r\n          this.room = this.transitioningLadder.linkedRoom;\r\n\r\n          // this.players[this.localPlayerID].levelID = this.room.id;\r\n          this.room.enterLevel(this.players[this.localPlayerID]);\r\n          this.transitioningLadder = null;\r\n        }\r\n\r\n        this.drawRooms(delta);\r\n        this.drawRoomShadeAndColor(delta);\r\n\r\n        //        this.room.draw(delta);\r\n        //        this.room.drawEntities(delta);\r\n        //        this.drawStuff(delta);\r\n        if (!GameConstants.drawOtherRooms) {\r\n          for (\r\n            let x = this.room.roomX - 1;\r\n            x <= this.room.roomX + this.room.width;\r\n            x++\r\n          ) {\r\n            for (\r\n              let y = this.room.roomY - 1;\r\n              y <= this.room.roomY + this.room.height;\r\n              y++\r\n            ) {\r\n              Game.drawFX(ditherFrame - (7 + deadFrames), 10, 1, 1, x, y, 1, 1);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      //this.players[this.localPlayerID].drawGUI(delta);  // removed this to prevent drawing gui during level transition\r\n      //for (const i in this.players) this.players[i].updateDrawXY(delta);\r\n      this.drawTextScreen(\"loading level\");\r\n    } else if (this.levelState === LevelState.LEVEL_GENERATION) {\r\n      this.levelgen.draw(delta);\r\n    } else if (this.levelState === LevelState.IN_LEVEL) {\r\n      // Start of Selection\r\n\r\n      this.drawScreenShake(delta);\r\n\r\n      const { cameraX, cameraY } = this.applyCamera(delta);\r\n\r\n      Game.ctx.translate(-cameraX, -cameraY);\r\n      this.drawRooms(delta);\r\n      this.drawRoomShadeAndColor(delta);\r\n\r\n      //      this.room.draw(delta);\r\n      //      this.room.drawEntities(delta);\r\n\r\n      // this.drawStuff(delta);\r\n\r\n      Game.ctx.translate(cameraX, cameraY);\r\n\r\n      this.room.drawTopLayer(delta);\r\n      this.players[this.localPlayerID].drawGUI(delta);\r\n      //for (const i in this.players) this.players[i].updateDrawXY(delta);\r\n    }\r\n    this.drawChat(delta);\r\n\r\n    // game version\r\n    if (GameConstants.ALPHA_ENABLED) Game.ctx.globalAlpha = 0.1;\r\n    Game.ctx.fillStyle = LevelConstants.LEVEL_TEXT_COLOR;\r\n    Game.fillText(\r\n      GameConstants.VERSION,\r\n      GameConstants.WIDTH - Game.measureText(GameConstants.VERSION).width - 1,\r\n      1,\r\n    );\r\n    Game.ctx.globalAlpha = 1;\r\n\r\n    // fps\r\n    if (GameConstants.ALPHA_ENABLED) Game.ctx.globalAlpha = 0.1;\r\n    Game.ctx.fillStyle = LevelConstants.LEVEL_TEXT_COLOR;\r\n    Game.fillText(fps + \"fps\", 1, 1);\r\n    Game.ctx.globalAlpha = 1;\r\n    if (!this.started && this.levelState !== LevelState.LEVEL_GENERATION) {\r\n      this.drawStartScreen(delta * 10);\r\n    }\r\n\r\n    // Draw level generator if active\r\n    if (this.currentLevelGenerator) {\r\n      this.currentLevelGenerator.draw(10, 10, 3);\r\n    }\r\n\r\n    MouseCursor.getInstance().draw(delta, this.isMobile);\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  drawChat = (delta: number) => {\r\n    const CHAT_X = 5;\r\n    // Lift chat above the on-screen keyboard if enabled\r\n    const keyboardOffset = GameConstants.MOBILE_KEYBOARD_SUPPORT\r\n      ? Math.ceil(this.keyboardHeightPx / Game.scale)\r\n      : 0;\r\n    const CHAT_BOTTOM_Y =\r\n      GameConstants.HEIGHT - Game.letter_height - 38 - keyboardOffset;\r\n    const CHAT_OPACITY = this.players?.[this.localPlayerID]?.inventory.isOpen\r\n      ? 0.05\r\n      : 1;\r\n    const CHAT_MAX_WIDTH = GameConstants.WIDTH - 5; // Leave some margin\r\n    const LINE_HEIGHT = Game.letter_height + 1;\r\n    const MAX_LINES_WHEN_CLOSED = 4;\r\n    let linesRemaining = MAX_LINES_WHEN_CLOSED;\r\n\r\n    if (this.chatOpen) {\r\n      Game.ctx.fillStyle = \"black\";\r\n      if (GameConstants.ALPHA_ENABLED) Game.ctx.globalAlpha = 0.75;\r\n      Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n\r\n      Game.ctx.globalAlpha = 1;\r\n      Game.ctx.fillStyle = \"white\";\r\n      Game.fillText(this.chatTextBox.text, CHAT_X, CHAT_BOTTOM_Y);\r\n      const cursorX = Game.measureText(\r\n        this.chatTextBox.text.substring(0, this.chatTextBox.cursor),\r\n      ).width;\r\n      Game.ctx.fillRect(CHAT_X + cursorX, CHAT_BOTTOM_Y, 1, Game.letter_height);\r\n    }\r\n\r\n    // Calculate total height needed for all visible messages\r\n    let totalHeight = 0;\r\n    const messageHeights: number[] = [];\r\n\r\n    for (let i = 0; i < this.chat.length; i++) {\r\n      const lines = this.chat[i].getWrappedLines(CHAT_MAX_WIDTH);\r\n      const messageHeight = lines.length * LINE_HEIGHT;\r\n      messageHeights.push(messageHeight);\r\n      totalHeight += messageHeight;\r\n    }\r\n\r\n    // Draw messages from bottom to top\r\n    let currentY = CHAT_BOTTOM_Y;\r\n    if (this.chatOpen) {\r\n      currentY -= LINE_HEIGHT; // Account for input line\r\n    }\r\n\r\n    for (let i = this.chat.length - 1; i >= 0; i--) {\r\n      const message = this.chat[i];\r\n      const lines = message.getWrappedLines(CHAT_MAX_WIDTH);\r\n      const messageHeight = messageHeights[i];\r\n\r\n      // Calculate opacity based on age\r\n      const age = Date.now() - message.timestamp;\r\n      let alpha = 1;\r\n\r\n      if (!this.chatOpen) {\r\n        if (age <= GameConstants.CHAT_APPEAR_TIME) {\r\n          alpha = GameConstants.ALPHA_ENABLED ? CHAT_OPACITY : 1;\r\n        } else if (\r\n          age <=\r\n          GameConstants.CHAT_APPEAR_TIME + GameConstants.CHAT_FADE_TIME\r\n        ) {\r\n          alpha = GameConstants.ALPHA_ENABLED\r\n            ? CHAT_OPACITY *\r\n              (1 -\r\n                (age - GameConstants.CHAT_APPEAR_TIME) /\r\n                  GameConstants.CHAT_FADE_TIME)\r\n            : 1;\r\n        } else {\r\n          alpha = 0;\r\n        }\r\n      }\r\n\r\n      let linesDrawnThisMessage = 0;\r\n      if (alpha > 0) {\r\n        // Set message color\r\n        Game.ctx.fillStyle = \"white\";\r\n        //if (message.message[0] === \"/\") {\r\n        //  Game.ctx.fillStyle = GameConstants.GREEN;\r\n        //}\r\n        Game.ctx.globalAlpha = alpha;\r\n\r\n        // Draw lines (respect max when chat is closed)\r\n        let lineY = currentY;\r\n        if (this.chatOpen) {\r\n          for (let lineIndex = lines.length - 1; lineIndex >= 0; lineIndex--) {\r\n            Game.fillText(lines[lineIndex], CHAT_X, lineY);\r\n            lineY -= LINE_HEIGHT;\r\n          }\r\n          linesDrawnThisMessage = lines.length;\r\n        } else {\r\n          const allowed = Math.max(0, linesRemaining);\r\n          const drawCount = Math.min(lines.length, allowed);\r\n          const startIndex = lines.length - drawCount;\r\n          for (\r\n            let lineIndex = lines.length - 1;\r\n            lineIndex >= startIndex;\r\n            lineIndex--\r\n          ) {\r\n            Game.fillText(lines[lineIndex], CHAT_X, lineY);\r\n            lineY -= LINE_HEIGHT;\r\n          }\r\n          linesDrawnThisMessage = drawCount;\r\n          linesRemaining -= drawCount;\r\n        }\r\n      }\r\n\r\n      // Move up by the height that was actually drawn\r\n      if (this.chatOpen) {\r\n        currentY -= messageHeight;\r\n      } else {\r\n        currentY -= linesDrawnThisMessage * LINE_HEIGHT;\r\n      }\r\n\r\n      if (!this.chatOpen && linesRemaining <= 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Reset alpha\r\n    Game.ctx.globalAlpha = 1;\r\n  };\r\n\r\n  public isPointInChatHotspot(x: number, y: number): boolean {\r\n    // Define a bottom-left area aligned with chat rendering baseline\r\n    const margin = 5;\r\n    const LINE_HEIGHT = Game.letter_height + 1;\r\n    const inputLineHeight = LINE_HEIGHT + 4;\r\n    // Match drawChat() constants\r\n    const CHAT_X = 5;\r\n    const CHAT_MAX_WIDTH = GameConstants.WIDTH - 5;\r\n    const left = Math.max(0, CHAT_X - margin);\r\n    const right = Math.min(GameConstants.WIDTH, CHAT_X + CHAT_MAX_WIDTH);\r\n    const bottom = GameConstants.HEIGHT - margin;\r\n    const top = Math.max(0, bottom - inputLineHeight - 10);\r\n    return x >= left && x <= right && y >= top && y <= bottom;\r\n  }\r\n\r\n  targetCamera = (targetX: number, targetY: number) => {\r\n    let cameraX = Math.round(\r\n      (targetX + 0.5) * GameConstants.TILESIZE - 0.5 * GameConstants.WIDTH,\r\n    );\r\n    let cameraY = Math.round(\r\n      (targetY + 0.5) * GameConstants.TILESIZE - 0.5 * GameConstants.HEIGHT,\r\n    );\r\n    this.cameraTargetX = cameraX;\r\n    this.cameraTargetY = cameraY;\r\n  };\r\n\r\n  updateCamera = (delta: number) => {\r\n    const dx = this.cameraTargetX - this.cameraX;\r\n    const dy = this.cameraTargetY - this.cameraY;\r\n\r\n    let speed = GameConstants.CAMERA_SPEED;\r\n\r\n    if (this.justTransitioned) {\r\n      speed = 1;\r\n      this.justTransitioned = false;\r\n    }\r\n\r\n    if (this.cameraAnimation.active) {\r\n      // While a camera animation is active, never hard-snap due to large distance\r\n      // Speed up significantly if fast-forward is engaged\r\n      speed = this.cameraAnimation.fast ? 0.5 : 0.075;\r\n    } else if (Math.abs(dx) > 250 || Math.abs(dy) > 250) {\r\n      // Only allow instant snaps when no animation is active\r\n      speed = 1;\r\n    }\r\n\r\n    if ((Math.abs(dx) > 1 || Math.abs(dy) > 1) && speed !== 1) {\r\n      this.cameraX += dx * speed * delta;\r\n      this.cameraY += dy * speed * delta;\r\n    } else {\r\n      this.cameraX = this.cameraTargetX;\r\n      this.cameraY = this.cameraTargetY;\r\n    }\r\n    //console.log(\"camera\", this.cameraX, this.cameraY);\r\n  };\r\n\r\n  applyCamera = (delta: number) => {\r\n    let player = this.players[this.localPlayerID];\r\n\r\n    this.targetCamera(player.x - player.drawX, player.y - player.drawY);\r\n    this.updateCameraAnimation(delta);\r\n    this.updateCamera(delta);\r\n\r\n    const roundedCameraX = Math.round(this.cameraX - this.screenShakeX);\r\n    const roundedCameraY = Math.round(this.cameraY - this.screenShakeY);\r\n\r\n    return {\r\n      cameraX: roundedCameraX,\r\n      cameraY: roundedCameraY,\r\n    };\r\n  };\r\n\r\n  drawScreenShake = (delta: number) => {\r\n    if (!this.screenShakeActive) {\r\n      this.resetScreenShake();\r\n      return;\r\n    }\r\n\r\n    this.shakeAmountX *= 0.8 ** delta;\r\n    this.shakeAmountY *= 0.8 ** delta;\r\n    this.screenShakeX = Math.sin(this.shakeFrame * Math.PI) * this.shakeAmountX;\r\n    this.screenShakeY = Math.sin(this.shakeFrame * Math.PI) * this.shakeAmountY;\r\n    this.shakeFrame += 0.15 * delta;\r\n\r\n    if (\r\n      Math.abs(this.shakeAmountX) < 0.5 &&\r\n      Math.abs(this.shakeAmountY) < 0.5\r\n    ) {\r\n      this.resetScreenShake();\r\n    }\r\n  };\r\n\r\n  private resetScreenShake = () => {\r\n    this.shakeAmountX = 0;\r\n    this.shakeAmountY = 0;\r\n    this.shakeFrame = 0;\r\n    this.screenShakeX = 0;\r\n    this.screenShakeY = 0;\r\n    this.screenShakeActive = false;\r\n  };\r\n\r\n  updateCameraAnimation = (delta: number) => {\r\n    //console.log(\"updating camera animation\", this.cameraAnimation.active);\r\n    if (!this.cameraAnimation.active) return;\r\n    const speed = this.cameraAnimation.fast ? 10 : 1;\r\n    const elapsed =\r\n      (this.cameraAnimation.frame / this.cameraAnimation.duration) * speed;\r\n\r\n    if (elapsed < 0.6)\r\n      this.targetCamera(this.cameraAnimation.x, this.cameraAnimation.y);\r\n    // Accelerate frames if fast mode is enabled\r\n    this.cameraAnimation.frame += delta * (this.cameraAnimation.fast ? 10 : 1);\r\n    if (this.cameraAnimation.frame > this.cameraAnimation.duration)\r\n      this.cameraAnimation.active = false;\r\n  };\r\n\r\n  // Allow skipping the active camera animation immediately\r\n  skipCameraAnimation = () => {\r\n    if (this.cameraAnimation.active) {\r\n      this.cameraAnimation.active = false;\r\n      // Snap camera to target to avoid mid-lerp offset\r\n      this.cameraX = this.cameraTargetX;\r\n      this.cameraY = this.cameraTargetY;\r\n    }\r\n  };\r\n\r\n  startCameraAnimation = (x: number, y: number, duration: number) => {\r\n    //console.log(\"starting camera animation\", x, y, duration);\r\n    this.cameraAnimation.active = true;\r\n    this.cameraAnimation.x = x;\r\n    this.cameraAnimation.y = y;\r\n    this.cameraAnimation.duration = duration;\r\n    this.cameraAnimation.frame = 0;\r\n    this.cameraAnimation.fast = false;\r\n    const skipMsg = this.isMobile\r\n      ? \"Tap to skip camera animation\"\r\n      : \"Press space or click to skip camera animation\";\r\n    this.pushMessage(skipMsg);\r\n  };\r\n\r\n  drawTextScreen = (text: string, bg: boolean = true) => {\r\n    if (bg) {\r\n      Game.ctx.fillStyle = \"rgb(0, 0, 0)\";\r\n      Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n    }\r\n    const ellipsis = this.animateEllipsis();\r\n    const dimensions = Game.measureText(text + ellipsis);\r\n\r\n    Game.ctx.fillStyle = \"rgb(255, 255, 255)\";\r\n    Game.fillText(\r\n      text + ellipsis,\r\n      GameConstants.WIDTH / 2 - dimensions.width / 2,\r\n      GameConstants.HEIGHT / 2 - dimensions.height / 2,\r\n    );\r\n  };\r\n\r\n  animateEllipsis = () => {\r\n    if (Date.now() - this.ellipsisStartTime > 150) {\r\n      this.ellipsisStartTime = Date.now();\r\n      this.ellipsisFrame = (this.ellipsisFrame + 1) % 4;\r\n    }\r\n    return \".\".repeat(this.ellipsisFrame);\r\n  };\r\n\r\n  /**\r\n   * Draw a sub-rectangle from a spritesheet onto the main canvas with optional shading and fade.\r\n   *\r\n   * How it works (high level):\r\n   * - Quantizes the shade opacity to a fixed number of steps (reduces cache churn)\r\n   * - Builds a cache key from the source sprite + shade settings\r\n   * - If not cached, renders the shaded sprite once into an offscreen canvas and stores it\r\n   * - Blits the cached shaded sprite to the destination on the main canvas\r\n   *\r\n   * Notes on units:\r\n   * - sX/sY/sW/sH are in tile units within the spritesheet\r\n   * - dX/dY/dW/dH are in world tile units on the destination\r\n   * - Internally we multiply by TILESIZE when drawing to actual pixels\r\n   *\r\n   * @param set Image sheet to sample from (tileset/objset/mobset/itemset/fxset)\r\n   * @param sX Source X in tiles within the sheet\r\n   * @param sY Source Y in tiles within the sheet\r\n   * @param sW Source width in tiles\r\n   * @param sH Source height in tiles\r\n   * @param dX Destination X in world tiles\r\n   * @param dY Destination Y in world tiles\r\n   * @param dW Destination width in world tiles\r\n   * @param dH Destination height in world tiles\r\n   * @param shadeColor Overlay color applied atop the sprite (default: black)\r\n   * @param shadeOpacity Opacity of the overlay [0..1] (quantized internally)\r\n   * @param entity If true, uses entity shade quantization levels\r\n   * @param fadeDir Optional directional fade mask (left/right/up/down)\r\n   */\r\n  static drawHelper = (\r\n    set: HTMLImageElement,\r\n    sX: number,\r\n    sY: number,\r\n    sW: number,\r\n    sH: number,\r\n    dX: number,\r\n    dY: number,\r\n    dW: number,\r\n    dH: number,\r\n    shadeColor = \"black\",\r\n    shadeOpacity = 0,\r\n    entity: boolean = false,\r\n    fadeDir?: \"left\" | \"right\" | \"up\" | \"down\",\r\n  ) => {\r\n    Game.ctx.save(); // Save current canvas state so we can safely modify it\r\n\r\n    // Snap to nearest shading increment\r\n    const shadeLevel = entity\r\n      ? GameConstants.ENTITY_SHADE_LEVELS\r\n      : GameConstants.SHADE_LEVELS;\r\n    shadeOpacity =\r\n      // Round shadeOpacity to nearest increment based on shade levels (min 12 increments)\r\n      // e.g. if shadeLevel=8, uses 12 increments, so opacity rounds to multiples of 1/12\r\n      Math.round(shadeOpacity * Math.max(shadeLevel, 12)) /\r\n      Math.max(shadeLevel, 12);\r\n\r\n    // Build a cache key that includes shade amount, color and optional fade direction\r\n    let key = getShadeCanvasKey(\r\n      set,\r\n      sX,\r\n      sY,\r\n      sW,\r\n      sH,\r\n      shadeOpacity,\r\n      shadeColor,\r\n      fadeDir,\r\n    );\r\n\r\n    if (!Game.shade_canvases[key]) {\r\n      // First time for this shaded sprite: render it into an offscreen canvas and cache it\r\n      Game.shade_canvases[key] = document.createElement(\"canvas\");\r\n      Game.shade_canvases[key].width = Math.round(sW * GameConstants.TILESIZE);\r\n      Game.shade_canvases[key].height = Math.round(sH * GameConstants.TILESIZE);\r\n      let shCtx = Game.shade_canvases[key].getContext(\"2d\");\r\n\r\n      shCtx.clearRect(\r\n        0,\r\n        0,\r\n        Game.shade_canvases[key].width,\r\n        Game.shade_canvases[key].height,\r\n      );\r\n\r\n      // 1) Draw the base sprite\r\n      shCtx.globalCompositeOperation = \"source-over\";\r\n      shCtx.drawImage(\r\n        set,\r\n        Math.round(sX * GameConstants.TILESIZE),\r\n        Math.round(sY * GameConstants.TILESIZE),\r\n        Math.round(sW * GameConstants.TILESIZE),\r\n        Math.round(sH * GameConstants.TILESIZE),\r\n        0,\r\n        0,\r\n        Math.round(sW * GameConstants.TILESIZE),\r\n        Math.round(sH * GameConstants.TILESIZE),\r\n      );\r\n\r\n      // 2) Tint overlay (shadeColor at shadeOpacity) over the sprite area\r\n      shCtx.globalAlpha = shadeOpacity;\r\n      shCtx.fillStyle = shadeColor;\r\n      shCtx.fillRect(\r\n        0,\r\n        0,\r\n        Game.shade_canvases[key].width,\r\n        Game.shade_canvases[key].height,\r\n      );\r\n      shCtx.globalAlpha = 1.0;\r\n\r\n      // 3) Keep only the sprite’s opaque pixels by masking with the sprite alpha\r\n      shCtx.globalCompositeOperation = \"destination-in\";\r\n      // Base alpha mask from sprite bounds\r\n      shCtx.drawImage(\r\n        set,\r\n        Math.round(sX * GameConstants.TILESIZE),\r\n        Math.round(sY * GameConstants.TILESIZE),\r\n        Math.round(sW * GameConstants.TILESIZE),\r\n        Math.round(sH * GameConstants.TILESIZE),\r\n        0,\r\n        0,\r\n        Math.round(sW * GameConstants.TILESIZE),\r\n        Math.round(sH * GameConstants.TILESIZE),\r\n      );\r\n\r\n      // 4) Optional directional fade: multiplies in a 1→0 gradient (feathered edge)\r\n      if (fadeDir) {\r\n        const w = Math.round(sW * GameConstants.TILESIZE);\r\n        const h = Math.round(sH * GameConstants.TILESIZE);\r\n        let grad: CanvasGradient | null = null;\r\n        switch (fadeDir) {\r\n          case \"left\":\r\n            grad = shCtx.createLinearGradient(0, 0, w, 0);\r\n            grad.addColorStop(0, \"rgba(0,0,0,0)\");\r\n            grad.addColorStop(1, \"rgba(0,0,0,1)\");\r\n            break;\r\n          case \"right\":\r\n            grad = shCtx.createLinearGradient(0, 0, w, 0);\r\n            grad.addColorStop(0, \"rgba(0,0,0,1)\");\r\n            grad.addColorStop(1, \"rgba(0,0,0,0)\");\r\n            break;\r\n          case \"up\":\r\n            grad = shCtx.createLinearGradient(0, 0, 0, h);\r\n            grad.addColorStop(0, \"rgba(0,0,0,0)\");\r\n            grad.addColorStop(1, \"rgba(0,0,0,1)\");\r\n            break;\r\n          case \"down\":\r\n            grad = shCtx.createLinearGradient(0, 0, 0, h);\r\n            grad.addColorStop(0, \"rgba(0,0,0,1)\");\r\n            grad.addColorStop(1, \"rgba(0,0,0,0)\");\r\n            break;\r\n        }\r\n        if (grad) {\r\n          shCtx.globalCompositeOperation = \"destination-in\"; // multiply existing alpha\r\n          shCtx.fillStyle = grad;\r\n          shCtx.fillRect(0, 0, w, h);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Blit the pre-shaded sprite to the main canvas at the destination position/size\r\n    Game.ctx.drawImage(\r\n      Game.shade_canvases[key],\r\n      Math.round(dX * GameConstants.TILESIZE),\r\n      Math.round(dY * GameConstants.TILESIZE),\r\n      Math.round(dW * GameConstants.TILESIZE),\r\n      Math.round(dH * GameConstants.TILESIZE),\r\n    );\r\n\r\n    Game.ctx.restore(); // Restore the canvas to the previous state\r\n  };\r\n\r\n  /**\r\n   * Draw a tile from the main tileset. Convenience wrapper around drawHelper.\r\n   * Uses entity=false so the tile shade uses world/tile shade quantization.\r\n   */\r\n  static drawTile = (\r\n    sX: number,\r\n    sY: number,\r\n    sW: number,\r\n    sH: number,\r\n    dX: number,\r\n    dY: number,\r\n    dW: number,\r\n    dH: number,\r\n    shadeColor = \"black\",\r\n    shadeOpacity = 0,\r\n    fadeDir?: \"left\" | \"right\" | \"up\" | \"down\",\r\n  ) => {\r\n    Game.drawHelper(\r\n      Game.tileset,\r\n      sX,\r\n      sY,\r\n      sW,\r\n      sH,\r\n      dX,\r\n      dY,\r\n      dW,\r\n      dH,\r\n      shadeColor,\r\n      shadeOpacity,\r\n      false,\r\n      fadeDir,\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Draw an object (props, decorations) from the object sheet. Convenience wrapper.\r\n   * Uses entity=true so objects use entity shade quantization.\r\n   */\r\n  static drawObj = (\r\n    sX: number,\r\n    sY: number,\r\n    sW: number,\r\n    sH: number,\r\n    dX: number,\r\n    dY: number,\r\n    dW: number,\r\n    dH: number,\r\n    shadeColor = \"black\",\r\n    shadeOpacity = 0,\r\n    fadeDir?: \"left\" | \"right\" | \"up\" | \"down\",\r\n  ) => {\r\n    Game.drawHelper(\r\n      Game.objset,\r\n      sX,\r\n      sY,\r\n      sW,\r\n      sH,\r\n      dX,\r\n      dY,\r\n      dW,\r\n      dH,\r\n      shadeColor,\r\n      shadeOpacity,\r\n      true,\r\n      fadeDir,\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Draw a mob (enemies, player parts) from the mob sheet. Convenience wrapper.\r\n   * Uses entity=true so mobs use entity shade quantization.\r\n   */\r\n  static drawMob = (\r\n    sX: number,\r\n    sY: number,\r\n    sW: number,\r\n    sH: number,\r\n    dX: number,\r\n    dY: number,\r\n    dW: number,\r\n    dH: number,\r\n    shadeColor = \"black\",\r\n    shadeOpacity = 0,\r\n    fadeDir?: \"left\" | \"right\" | \"up\" | \"down\",\r\n  ) => {\r\n    Game.drawHelper(\r\n      Game.mobset,\r\n      sX,\r\n      sY,\r\n      sW,\r\n      sH,\r\n      dX,\r\n      dY,\r\n      dW,\r\n      dH,\r\n      shadeColor,\r\n      shadeOpacity,\r\n      true,\r\n      fadeDir,\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Draw an item from the item sheet. Convenience wrapper.\r\n   * Uses entity=true so items use entity shade quantization.\r\n   */\r\n  static drawItem = (\r\n    sX: number,\r\n    sY: number,\r\n    sW: number,\r\n    sH: number,\r\n    dX: number,\r\n    dY: number,\r\n    dW: number,\r\n    dH: number,\r\n    shadeColor = \"black\",\r\n    shadeOpacity = 0,\r\n    fadeDir?: \"left\" | \"right\" | \"up\" | \"down\",\r\n  ) => {\r\n    Game.drawHelper(\r\n      Game.itemset,\r\n      sX,\r\n      sY,\r\n      sW,\r\n      sH,\r\n      dX,\r\n      dY,\r\n      dW,\r\n      dH,\r\n      shadeColor,\r\n      shadeOpacity,\r\n      true,\r\n      fadeDir,\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Draw an FX frame from the FX sheet. Convenience wrapper.\r\n   * Uses entity=true so FX uses entity shade quantization.\r\n   */\r\n  static drawFX = (\r\n    sX: number,\r\n    sY: number,\r\n    sW: number,\r\n    sH: number,\r\n    dX: number,\r\n    dY: number,\r\n    dW: number,\r\n    dH: number,\r\n    shadeColor = \"black\",\r\n    shadeOpacity = 0,\r\n    fadeDir?: \"left\" | \"right\" | \"up\" | \"down\",\r\n  ) => {\r\n    Game.drawHelper(\r\n      Game.fxset,\r\n      sX,\r\n      sY,\r\n      sW,\r\n      sH,\r\n      dX,\r\n      dY,\r\n      dW,\r\n      dH,\r\n      shadeColor,\r\n      shadeOpacity,\r\n      true,\r\n      fadeDir,\r\n    );\r\n  };\r\n\r\n  private handleWindowBlur = () => {\r\n    // Start a timeout when window loses focus\r\n    this.focusTimeout = window.setTimeout(() => {\r\n      // Store current state\r\n      this.wasMuted = Sound.audioMuted;\r\n      this.wasStarted = this.started;\r\n\r\n      // Mute audio and pause game\r\n      Sound.audioMuted = true;\r\n      //this.started = false;\r\n      this.paused = true;\r\n\r\n      // Optional: Show a message in chat\r\n      this.pushMessage(\"Game paused - window inactive\");\r\n    }, this.FOCUS_TIMEOUT_DURATION);\r\n  };\r\n\r\n  private handleWindowFocus = () => {\r\n    // Clear the timeout if it exists\r\n    if (this.focusTimeout) {\r\n      clearTimeout(this.focusTimeout);\r\n      this.focusTimeout = null;\r\n    }\r\n\r\n    // If game was paused due to inactivity, restore previous state\r\n    if (this.paused) {\r\n      Sound.audioMuted = this.wasMuted;\r\n      this.started = this.wasStarted;\r\n      this.paused = false;\r\n\r\n      // Optional: Show a message in chat\r\n      this.pushMessage(\"Game resumed\");\r\n    }\r\n  };\r\n\r\n  destroy() {\r\n    window.removeEventListener(\"blur\", this.handleWindowBlur);\r\n    window.removeEventListener(\"focus\", this.handleWindowFocus);\r\n    if (this.focusTimeout) {\r\n      clearTimeout(this.focusTimeout);\r\n    }\r\n  }\r\n}\r\nexport let game = new Game();\r\nexport let gs = new GameState();\r\n","import { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Input } from \"../game/input\";\r\nimport { Player } from \"../player/player\";\r\nimport { Room } from \"../room/room\";\r\n\r\nexport class HoverText {\r\n  static getHoverText(\r\n    x: number,\r\n    y: number,\r\n    room: Room,\r\n    player: Player,\r\n    drawFor: \"inGame\" | \"inventory\" | \"vendingMachine\" | \"none\",\r\n  ): string[] {\r\n    // Handle undefined mouse coordinates\r\n    if (\r\n      Input.mouseX === undefined ||\r\n      Input.mouseY === undefined ||\r\n      drawFor === \"none\"\r\n    ) {\r\n      return [];\r\n    }\r\n\r\n    // Get screen center coordinates\r\n    const screenCenterX = GameConstants.WIDTH / 2;\r\n    const screenCenterY = GameConstants.HEIGHT / 2;\r\n\r\n    // Convert pixel offset to tile offset\r\n    const tileOffsetX = Math.floor(\r\n      (Input.mouseX - screenCenterX + GameConstants.TILESIZE / 2) /\r\n        GameConstants.TILESIZE,\r\n    );\r\n    const tileOffsetY = Math.floor(\r\n      (Input.mouseY - screenCenterY + GameConstants.TILESIZE / 2) /\r\n        GameConstants.TILESIZE,\r\n    );\r\n\r\n    const offsetX = x + tileOffsetX;\r\n    const offsetY = y + tileOffsetY;\r\n\r\n    const strings: string[] = [];\r\n    if (\r\n      drawFor === \"inGame\" &&\r\n      !player.inventory.isPointInQuickbarBounds(x, y).inBounds\r\n    ) {\r\n      for (const entity of room.entities) {\r\n        if (entity.x === offsetX && entity.y === offsetY) {\r\n          strings.push(entity.hoverText());\r\n        }\r\n      }\r\n\r\n      for (const item of room.items) {\r\n        if (item.x === offsetX && item.y === offsetY) {\r\n          strings.push(item.hoverText());\r\n        }\r\n      }\r\n\r\n      const tile = room.getTile(offsetX, offsetY);\r\n      if (tile) {\r\n        strings.push(tile.getName());\r\n      }\r\n    } else if (drawFor === \"inventory\") {\r\n      if (player.inventory.itemAtSelectedSlot()) {\r\n        strings.push(player.inventory.itemAtSelectedSlot()?.hoverText());\r\n      }\r\n    } else {\r\n      if (player.openVendingMachine) {\r\n        strings.push(player.openVendingMachine.hoverText());\r\n      }\r\n    }\r\n\r\n    return strings;\r\n  }\r\n\r\n  static draw(\r\n    delta: number,\r\n    x: number,\r\n    y: number,\r\n    room: Room,\r\n    player: Player,\r\n    drawX: number,\r\n    drawY: number,\r\n    drawFor: \"inGame\" | \"inventory\" | \"vendingMachine\" | \"none\",\r\n  ) {\r\n    const strings: string[] = HoverText.getHoverText(\r\n      x,\r\n      y,\r\n      room,\r\n      player,\r\n      drawFor,\r\n    );\r\n    if (strings.length === 0) {\r\n      return;\r\n    }\r\n    Game.ctx.save();\r\n    if (drawFor === \"none\") {\r\n      return;\r\n    }\r\n    for (const string of strings) {\r\n      const offsetY = strings.indexOf(string) * 6;\r\n      if (drawFor === \"inventory\") {\r\n        Game.ctx.globalAlpha = 1;\r\n      } else {\r\n        Game.ctx.globalAlpha = 0.5;\r\n      }\r\n      Game.ctx.fillStyle = \"yellow\";\r\n\r\n      const offsetX = Game.measureText(string).width / 2;\r\n\r\n      let posX = x;\r\n      let posY = y;\r\n\r\n      switch (drawFor) {\r\n        case \"inGame\":\r\n          posX = GameConstants.IN_GAME_HOVER_TEXT_FOLLOWS_MOUSE\r\n            ? drawX + 8\r\n            : GameConstants.WIDTH / 2 - offsetX;\r\n          posY = GameConstants.IN_GAME_HOVER_TEXT_FOLLOWS_MOUSE\r\n            ? drawY + 8 // + offsetY\r\n            : GameConstants.HEIGHT - 32;\r\n          break;\r\n        case \"inventory\":\r\n          posX = GameConstants.INVENTORY_HOVER_TEXT_FOLLOWS_MOUSE\r\n            ? drawX + 8\r\n            : GameConstants.WIDTH / 2 - offsetX;\r\n          posY = GameConstants.INVENTORY_HOVER_TEXT_FOLLOWS_MOUSE\r\n            ? drawY + 8 // + offsetY\r\n            : GameConstants.HEIGHT - 32;\r\n          break;\r\n        case \"vendingMachine\":\r\n          posX = GameConstants.VENDING_MACHINE_HOVER_TEXT_FOLLOWS_MOUSE\r\n            ? drawX + 8\r\n            : GameConstants.WIDTH / 2 - offsetX;\r\n          posY = GameConstants.VENDING_MACHINE_HOVER_TEXT_FOLLOWS_MOUSE\r\n            ? drawY + 8 // + offsetY\r\n            : GameConstants.HEIGHT - 32;\r\n          break;\r\n      }\r\n\r\n      //Game.ctx.globalCompositeOperation = \"destination-out\";\r\n      Game.fillTextOutline(string, posX, posY, \"black\", \"yellow\");\r\n    }\r\n    Game.ctx.restore();\r\n  }\r\n}\r\n","import { Random } from \"../utility/random\";\r\nimport { Room } from \"./room\";\r\n\r\n/**\r\n * Configuration options for clustering behavior\r\n */\r\nexport interface ClusteringOptions {\r\n  /** Falloff function exponent (default: 2 for inverse square distance) */\r\n  falloffExponent?: number;\r\n  /** Base score added to all tiles to ensure some randomness (default: 0.1) */\r\n  baseScore?: number;\r\n  /** Maximum distance for influence calculation (default: 10) */\r\n  maxInfluenceDistance?: number;\r\n  /** Whether to use a seed position or start randomly (default: false) */\r\n  useSeedPosition?: boolean;\r\n  /** Seed position coordinates (used if useSeedPosition is true) */\r\n  seedPosition?: { x: number; y: number };\r\n}\r\n\r\n/**\r\n * Handles clustering logic for prop placement\r\n */\r\nexport class PropClusterer {\r\n  private room: Room;\r\n  private options: Required<ClusteringOptions>;\r\n  private placedPositions: { x: number; y: number }[] = [];\r\n  private availableTiles: { x: number; y: number }[] = [];\r\n\r\n  constructor(room: Room, options: ClusteringOptions = {}) {\r\n    this.room = room;\r\n    this.options = {\r\n      falloffExponent: options.falloffExponent ?? 2,\r\n      baseScore: options.baseScore ?? 0.1,\r\n      maxInfluenceDistance: options.maxInfluenceDistance ?? 10,\r\n      useSeedPosition: options.useSeedPosition ?? false,\r\n      seedPosition: options.seedPosition ?? { x: 0, y: 0 },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates clustered positions for the specified number of props\r\n   */\r\n  generateClusteredPositions(numProps: number): { x: number; y: number }[] {\r\n    this.placedPositions = [];\r\n    this.availableTiles = this.getAvailableTiles();\r\n\r\n    if (this.availableTiles.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    // Initialize with seed position or random position\r\n    if (\r\n      this.options.useSeedPosition &&\r\n      this.isValidPosition(this.options.seedPosition)\r\n    ) {\r\n      this.placePosition(this.options.seedPosition);\r\n    } else if (this.availableTiles.length > 0) {\r\n      const randomIndex = Math.floor(\r\n        Random.rand() * this.availableTiles.length,\r\n      );\r\n      const randomPosition = this.availableTiles.splice(randomIndex, 1)[0];\r\n      this.placedPositions.push(randomPosition);\r\n    }\r\n\r\n    // Generate remaining positions\r\n    for (let i = 1; i < numProps && this.availableTiles.length > 0; i++) {\r\n      const position = this.selectNextPosition();\r\n      if (position) {\r\n        this.placePosition(position);\r\n      } else {\r\n        break; // No valid positions left\r\n      }\r\n    }\r\n\r\n    return [...this.placedPositions];\r\n  }\r\n\r\n  /**\r\n   * Gets all available tiles in the room\r\n   */\r\n  private getAvailableTiles(): { x: number; y: number }[] {\r\n    const tiles = this.room.getEmptyTiles();\r\n    return tiles.map((tile) => ({ x: tile.x, y: tile.y }));\r\n  }\r\n\r\n  /**\r\n   * Checks if a position is valid and available\r\n   */\r\n  private isValidPosition(position: { x: number; y: number }): boolean {\r\n    return this.availableTiles.some(\r\n      (tile) => tile.x === position.x && tile.y === position.y,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Places a position and removes it from available tiles\r\n   */\r\n  private placePosition(position: { x: number; y: number }): void {\r\n    this.placedPositions.push(position);\r\n    this.availableTiles = this.availableTiles.filter(\r\n      (tile) => !(tile.x === position.x && tile.y === position.y),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Selects the next position based on clustering algorithm\r\n   */\r\n  private selectNextPosition(): { x: number; y: number } | null {\r\n    if (this.availableTiles.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Score each available tile based on proximity to placed entities\r\n    const scoredTiles = this.availableTiles.map((tile) => ({\r\n      position: tile,\r\n      score: this.calculateTileScore(tile),\r\n    }));\r\n\r\n    // Normalize scores to create probability weights\r\n    const totalScore = scoredTiles.reduce((sum, tile) => sum + tile.score, 0);\r\n\r\n    if (totalScore <= 0) {\r\n      // Fallback to uniform distribution if all scores are 0\r\n      const randomIndex = Math.floor(\r\n        Random.rand() * this.availableTiles.length,\r\n      );\r\n      return this.availableTiles.splice(randomIndex, 1)[0];\r\n    }\r\n\r\n    // Perform weighted random selection\r\n    const randomValue = Random.rand() * totalScore;\r\n    let cumulativeScore = 0;\r\n\r\n    for (const tile of scoredTiles) {\r\n      cumulativeScore += tile.score;\r\n      if (cumulativeScore >= randomValue) {\r\n        return tile.position;\r\n      }\r\n    }\r\n\r\n    // Fallback to last tile\r\n    return scoredTiles[scoredTiles.length - 1].position;\r\n  }\r\n\r\n  /**\r\n   * Calculates the score for a tile based on its proximity to placed entities\r\n   */\r\n  private calculateTileScore(tile: { x: number; y: number }): number {\r\n    let score = this.options.baseScore;\r\n\r\n    for (const placed of this.placedPositions) {\r\n      const distance = this.calculateDistance(tile, placed);\r\n\r\n      if (distance <= this.options.maxInfluenceDistance) {\r\n        // Use inverse power function for falloff\r\n        const influence = 1 / Math.pow(distance, this.options.falloffExponent);\r\n        score += influence;\r\n      }\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  /**\r\n   * Calculates Euclidean distance between two positions\r\n   */\r\n  private calculateDistance(\r\n    pos1: { x: number; y: number },\r\n    pos2: { x: number; y: number },\r\n  ): number {\r\n    const dx = pos1.x - pos2.x;\r\n    const dy = pos1.y - pos2.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n}\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Enemy } from \"./enemy\";\r\n\r\nexport class SkullEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  ticksSinceFirstHit: number;\r\n  flashingFrame: number;\r\n  targetPlayer: Player;\r\n  readonly REGEN_TICKS = 5;\r\n  drop: Item;\r\n  static difficulty: number = 2;\r\n  static tileX: number = 5;\r\n  static tileY: number = 8;\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 2;\r\n    this.maxHealth = 2;\r\n    this.defaultMaxHealth = 2;\r\n    this.tileX = 5;\r\n    this.tileY = 8;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.ticksSinceFirstHit = 0;\r\n    this.flashingFrame = 0;\r\n    this.deathParticleColor = \"#ffffff\";\r\n    this.name = \"skeleton\";\r\n    this.forwardOnlyAttack = true;\r\n    if (drop) this.drop = drop;\r\n    this.getDrop([\"weapon\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  hurt = (\r\n    playerHitBy: Player,\r\n    damage: number,\r\n    type: \"none\" | \"poison\" | \"blood\" | \"heal\" = \"none\",\r\n  ) => {\r\n    this.handleEnemyCase(playerHitBy);\r\n\r\n    let hitShield = false;\r\n    let shieldHealth = 0;\r\n    if (this.shielded) {\r\n      shieldHealth = this.shield.health;\r\n      if (shieldHealth > 0) {\r\n        this.shield.hurt(damage);\r\n        hitShield = true;\r\n      }\r\n    }\r\n    this.ticksSinceFirstHit = 0;\r\n    if (this.health == 2) this.unconscious = false;\r\n    this.health -= damage;\r\n    this.maxHealth -= shieldHealth;\r\n    this.startHurting();\r\n\r\n    this.healthBar.hurt();\r\n    this.createDamageNumber(damage, type);\r\n    this.playHitSound();\r\n\r\n    if (this.health == 1) {\r\n      this.unconscious = true;\r\n\r\n      ImageParticle.spawnCluster(this.room, this.x + 0.5, this.y + 0.5, 3, 28);\r\n    } else {\r\n      this.healthBar.hurt();\r\n    }\r\n    if (this.health <= 0) {\r\n      ImageParticle.spawnCluster(this.room, this.x + 0.5, this.y + 0.5, 0, 24);\r\n      this.kill();\r\n    } else this.hurtCallback();\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        this.ticks++;\r\n\r\n        return;\r\n      }\r\n\r\n      if (this.health <= 1) {\r\n        this.unconscious = true;\r\n        this.ticksSinceFirstHit++;\r\n        if (this.ticksSinceFirstHit >= this.REGEN_TICKS) {\r\n          this.healthBar.hurt();\r\n          this.health = 2;\r\n          this.unconscious = false;\r\n        }\r\n        this.ticks++;\r\n\r\n        return;\r\n      }\r\n\r\n      this.ticks++;\r\n      if (!this.seenPlayer) {\r\n        this.lookForPlayer();\r\n      } else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n            }\r\n          }\r\n          for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n              if (\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n          let grid = [];\r\n          for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n            grid[x] = [];\r\n            for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n              if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                grid[x][y] = this.room.roomArray[x][y];\r\n              else grid[x][y] = false;\r\n            }\r\n          }\r\n          let moves = astar.AStar.search(\r\n            grid,\r\n            this,\r\n            this.targetPlayer,\r\n            disablePositions,\r\n            false,\r\n            false,\r\n            true,\r\n            this.direction,\r\n            undefined,\r\n            undefined,\r\n          );\r\n          if (moves.length > 0) {\r\n            let moveX = moves[0].pos.x;\r\n            let moveY = moves[0].pos.y;\r\n            let oldDir = this.direction;\r\n            let player = this.targetPlayer;\r\n\r\n            this.facePlayer(player);\r\n\r\n            if (moveX > oldX) this.direction = Direction.RIGHT;\r\n            else if (moveX < oldX) this.direction = Direction.LEFT;\r\n            else if (moveY > oldY) this.direction = Direction.DOWN;\r\n            else if (moveY < oldY) this.direction = Direction.UP;\r\n\r\n            if (oldDir == this.direction) {\r\n              let hitPlayer = false;\r\n              for (const i in this.game.players) {\r\n                if (\r\n                  this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                  this.game.players[i].x === moveX &&\r\n                  this.game.players[i].y === moveY\r\n                ) {\r\n                  this.game.players[i].hurt(this.hit(), this.name);\r\n                  this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                  this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                  if (\r\n                    this.game.players[i] ===\r\n                    this.game.players[this.game.localPlayerID]\r\n                  )\r\n                    this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n                }\r\n              }\r\n              if (!hitPlayer) {\r\n                this.tryMove(moveX, moveY);\r\n                this.setDrawXY(oldX, oldY);\r\n\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (this.direction == Direction.LEFT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.RIGHT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.DOWN) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.UP) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          this.makeHitWarnings();\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.makeHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.tileX = 5;\r\n      this.tileY = 8;\r\n\r\n      if (this.health <= 1 || this.dying) {\r\n        this.tileX = 3;\r\n        this.tileY = 0;\r\n        if (this.ticksSinceFirstHit >= 3) {\r\n          this.flashingFrame += 0.1 * delta;\r\n          if (Math.floor(this.flashingFrame) % 2 === 0) {\r\n            this.tileX = 2;\r\n          }\r\n        }\r\n      }\r\n\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX + (this.tileX === 5 ? Math.floor(this.frame) : 0),\r\n        this.tileY + this.direction * 2,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Shrooms } from \"../../item/usable/shrooms\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\n\r\nexport class Sprout extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 17;\r\n    this.tileY = 2;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"sprout\";\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 28;\r\n    //this.drops.push(new Shrooms(this.room, this.x, this.y));\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class PottedPlant extends Entity {\r\n  drop: Item;\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 2;\r\n    this.tileX = 3;\r\n    this.tileY = 0;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"plant\";\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 28;\r\n    if (drop) this.drop = drop;\r\n    /*\r\n    else {\r\n      let dropProb = Random.rand();\r\n      if (dropProb < 0.025)\r\n        this.drops.push(new Heart(this.room, this.x, this.y));\r\n      else this.drops.push(new Coin(this.room, this.x, this.y));\r\n    }\r\n      */\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  uniqueKillBehavior = () => {\r\n    this.createHitParticles(0, 29);\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      if (this.health <= 1 || this.dying) this.tileX = 2;\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Stone } from \"../../item/resource/stone\";\r\nimport { Resource } from \"./resource\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Geode } from \"../../item/resource/geode\";\r\nimport { Random } from \"../../utility/random\";\r\n\r\nexport class Rock extends Resource {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 2;\r\n    this.tileX = 8;\r\n    this.tileY = 2;\r\n    this.hasShadow = false;\r\n    this.chainPushable = false;\r\n    this.name = \"rock\";\r\n    if (Random.rand() < 0.05) {\r\n      this.drops.push(new Geode(this.room, this.x, this.y));\r\n    }\r\n    //this.drops.push(new Stone(this.room, this.x, this.y));\r\n  }\r\n}\r\n","import { Item } from \"../item/item\";\r\nimport { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Equippable } from \"../item/equippable\";\r\nimport { Armor } from \"../item/armor\";\r\nimport { Coin } from \"../item/coin\";\r\nimport { Weapon } from \"../item/weapon/weapon\";\r\nimport { Room } from \"../room/room\";\r\nimport { Usable } from \"../item/usable/usable\";\r\nimport { Player } from \"../player/player\";\r\nimport { MouseCursor } from \"../gui/mouseCursor\";\r\nimport { Input } from \"../game/input\";\r\nimport { Pickaxe } from \"../item/tool/pickaxe\";\r\nimport { Menu } from \"../gui/menu\";\r\nimport { XPCounter } from \"../gui/xpCounter\";\r\nimport { FishingRod } from \"../item/tool/fishingRod\";\r\nimport { IdGenerator } from \"../globalStateManager/IdGenerator\";\r\nimport { globalEventBus } from \"../event/eventBus\";\r\nimport { EVENTS } from \"../event/events\";\r\nimport { WoodenShield } from \"../item/woodenShield\";\r\n\r\nlet OPEN_TIME = 100; // milliseconds\r\n// Dark gray color used for the background of inventory slots\r\nlet FILL_COLOR = \"#5a595b\";\r\n// Very dark blue-gray color used for outlines and borders\r\nlet OUTLINE_COLOR = \"#292c36\";\r\n// Light blue color used to indicate equipped items\r\nlet EQUIP_COLOR = \"#85a8e6\";\r\n// White color used for the outer border of the inventory\r\nlet FULL_OUTLINE = \"white\";\r\n\r\nexport class Inventory {\r\n  globalId: string;\r\n  player: Player;\r\n  items: Array<Item | null>;\r\n  rows = 4;\r\n  cols = 5;\r\n  selX = 0;\r\n  selY = 0;\r\n  game: Game;\r\n  isOpen: boolean = false;\r\n  openTime: number = Date.now();\r\n  coins: number = 0;\r\n  equipAnimAmount: Array<number>;\r\n  weapon: Weapon | null = null;\r\n  private _expansion: number = 0;\r\n  grabbedItem: Item | null = null;\r\n  private _mouseDownStartX: number | null = null;\r\n  private _mouseDownStartY: number | null = null;\r\n  private _mouseDownItem: Item | null = null;\r\n  private _wasHoldDetected: boolean = false;\r\n  private _isDragging: boolean = false;\r\n  private _dragStartItem: Item | null = null;\r\n  private _dragStartSlot: number | null = null;\r\n  private itemEquipAnimations: Map<Item, number> = new Map();\r\n  foundItems: Item[] = [];\r\n\r\n  dragEndTime: number = Date.now();\r\n\r\n  closeTime: number = Date.now();\r\n\r\n  // New state for using items on other items\r\n  private usingItem: Usable | null = null;\r\n  private usingItemIndex: number | null = null;\r\n  mostRecentInput: \"mouse\" | \"keyboard\" = \"keyboard\";\r\n\r\n  // Static variables for inventory button position\r\n  private buttonY: number;\r\n  private buttonX: number;\r\n\r\n  constructor(game: Game, player: Player) {\r\n    this.globalId = IdGenerator.generate(\"INV\");\r\n    this.game = game;\r\n    this.player = player;\r\n\r\n    this.buttonX =\r\n      (Math.round(GameConstants.WIDTH / 2) + 3) / GameConstants.TILESIZE;\r\n    this.buttonY = 10;\r\n\r\n    Input.mouseDownListeners.push((x, y, button) =>\r\n      this.handleMouseDown(x, y, button),\r\n    );\r\n    Input.mouseUpListeners.push((x, y, button) =>\r\n      this.handleMouseUp(x, y, button),\r\n    );\r\n\r\n    Input.holdCallback = () => this.onHoldDetected();\r\n\r\n    this.items = new Array<Item | null>(\r\n      (this.rows + this._expansion) * this.cols,\r\n    ).fill(null);\r\n    this.equipAnimAmount = new Array<number>(\r\n      (this.rows + this._expansion) * this.cols,\r\n    ).fill(0);\r\n    let a = (i: Item | null) => {\r\n      if (i === null) return;\r\n      if (i instanceof Equippable) {\r\n        i.setWielder(this.player);\r\n      }\r\n      if (i instanceof Weapon && this.weapon === null) {\r\n        i.toggleEquip();\r\n        this.weapon = i;\r\n        //this.player.weapon = this.weapon;\r\n      }\r\n\r\n      this.addItem(i);\r\n    };\r\n    let startingInv = GameConstants.DEVELOPER_MODE\r\n      ? GameConstants.STARTING_DEV_INVENTORY\r\n      : GameConstants.STARTING_INVENTORY;\r\n\r\n    startingInv.forEach((item) => {\r\n      a(new item({ game: this.game } as Room, 0, 0));\r\n    });\r\n  }\r\n\r\n  clear = () => {\r\n    this.items.fill(null);\r\n    this.equipAnimAmount.fill(0);\r\n  };\r\n\r\n  get isDragging() {\r\n    return this._isDragging;\r\n  }\r\n\r\n  open = () => {\r\n    this.isOpen = !this.isOpen;\r\n    if (this.isOpen) this.openTime = Date.now();\r\n  };\r\n\r\n  toggleOpen = () => {\r\n    if (this.isOpen) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  };\r\n\r\n  close = () => {\r\n    if (!this.isOpen) return;\r\n    this.isOpen = false;\r\n    this.closeTime = Date.now();\r\n    if (this.selY > 0) {\r\n      this.selY = 0;\r\n    }\r\n    this.usingItem = null;\r\n    this.usingItemIndex = null;\r\n  };\r\n\r\n  left = () => {\r\n    if (this.selX > 0) {\r\n      this.selX--;\r\n    }\r\n  };\r\n\r\n  right = () => {\r\n    if (this.selX < this.cols - 1) {\r\n      this.selX++;\r\n    }\r\n  };\r\n\r\n  up = () => {\r\n    if (this.selY > 0) {\r\n      this.selY--;\r\n    }\r\n  };\r\n\r\n  down = () => {\r\n    if (this.selY < this.rows + this._expansion - 1) {\r\n      this.selY++;\r\n    }\r\n  };\r\n\r\n  space = () => {\r\n    this.itemUse();\r\n  };\r\n\r\n  itemAtSelectedSlot = (): Item | null => {\r\n    let index = this.selX + this.selY * this.cols;\r\n    if (index < 0 || index >= this.items.length) {\r\n      return null;\r\n    }\r\n    return this.items[index];\r\n  };\r\n\r\n  getIndexOfItem = (item: Item): number => {\r\n    if (item === null) return -1;\r\n    return this.items.indexOf(item);\r\n  };\r\n\r\n  itemUse = () => {\r\n    let index = this.selX + this.selY * this.cols;\r\n    if (index < 0 || index >= this.items.length) return;\r\n    const item = this.items[index];\r\n\r\n    if (this.usingItem) {\r\n      // Attempt to use 'usingItem' on the currently selected item\r\n      if (item === null) {\r\n        // Clicked on empty slot; cancel the using state\r\n        this.usingItem = null;\r\n        this.usingItemIndex = null;\r\n        return;\r\n      }\r\n      // Attempt to use on other\r\n      if (item instanceof Item) {\r\n        this.usingItem.useOnOther(this.player, item);\r\n      }\r\n      // Exit tryingToUse state\r\n      this.usingItem = null;\r\n      this.usingItemIndex = null;\r\n    } else {\r\n      // Not in tryingToUse state\r\n      if (item instanceof Usable) {\r\n        if (item.canUseOnOther) {\r\n          // Enter tryingToUse state\r\n          this.usingItem = item;\r\n          this.usingItemIndex = index;\r\n        } else {\r\n          // Use normally\r\n          item.onUse(this.player);\r\n          // Optionally remove the item\r\n          // this.items[index] = null;\r\n        }\r\n      } else if (item instanceof Equippable) {\r\n        // Existing equipping logic\r\n        item.toggleEquip();\r\n        if (item instanceof Weapon) {\r\n          if (item.broken || item.cooldown > 0) return;\r\n          this.weapon = item.equipped ? item : null;\r\n        }\r\n        if (item.equipped) {\r\n          this.items.forEach((i, idx) => {\r\n            if (\r\n              i instanceof Equippable &&\r\n              i !== item &&\r\n              !item.coEquippable(i)\r\n            ) {\r\n              i.equipped = false;\r\n              this.equipAnimAmount[idx] = 0;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  canPickup = (item: Item): boolean => {\r\n    if (!this.isFull()) return true;\r\n    if (item instanceof Coin) return true;\r\n    if (\r\n      this.items.find(\r\n        (i) => i !== null && i.constructor === item.constructor,\r\n      ) &&\r\n      item.stackable\r\n    )\r\n      return true;\r\n    return false;\r\n  };\r\n\r\n  leftQuickbar = () => {\r\n    this.mostRecentInput = \"keyboard\";\r\n\r\n    this.left();\r\n  };\r\n\r\n  rightQuickbar = () => {\r\n    this.mostRecentInput = \"keyboard\";\r\n    this.right();\r\n  };\r\n\r\n  spaceQuickbar = () => {\r\n    this.mostRecentInput = \"keyboard\";\r\n    this.itemUse();\r\n  };\r\n\r\n  mouseMove = () => {\r\n    const { x, y } = MouseCursor.getInstance().getPosition();\r\n    const bounds = this.isPointInInventoryBounds(x, y);\r\n\r\n    if (bounds.inBounds) {\r\n      this.mostRecentInput = \"mouse\";\r\n      const s = this.isOpen\r\n        ? Math.min(18, (18 * (Date.now() - this.openTime)) / OPEN_TIME)\r\n        : 18;\r\n      const b = 2;\r\n      const g = -2;\r\n\r\n      const oldSelX = this.selX;\r\n      const oldSelY = this.selY;\r\n\r\n      this.selX = Math.max(\r\n        0,\r\n        Math.min(\r\n          Math.floor((x - bounds.startX) / (s + 2 * b + g)),\r\n          this.cols - 1,\r\n        ),\r\n      );\r\n      this.selY = this.isOpen\r\n        ? Math.max(\r\n            0,\r\n            Math.min(\r\n              Math.floor((y - bounds.startY) / (s + 2 * b + g)),\r\n              this.rows + this._expansion - 1,\r\n            ),\r\n          )\r\n        : 0;\r\n\r\n      if (oldSelX !== this.selX || oldSelY !== this.selY) {\r\n        // Optional: Handle selection change\r\n      }\r\n    }\r\n  };\r\n\r\n  moveItemToSlot = (\r\n    item: Item | null,\r\n    index: number,\r\n    otherItem: Item | null,\r\n    otherIndex: number,\r\n  ) => {\r\n    if (item === null) return;\r\n\r\n    // Preserve animation states before moving\r\n    const itemAnim = this.equipAnimAmount[index];\r\n    const otherAnim = otherItem ? this.equipAnimAmount[otherIndex] : 0;\r\n\r\n    if (otherItem === null) {\r\n      this.items[index] = item;\r\n      this.equipAnimAmount[index] = this.itemEquipAnimations.get(item) ?? 0;\r\n    } else {\r\n      this.items[index] = otherItem;\r\n      this.items[otherIndex] = item;\r\n      this.equipAnimAmount[index] =\r\n        this.itemEquipAnimations.get(otherItem) ?? 0;\r\n      this.equipAnimAmount[otherIndex] =\r\n        this.itemEquipAnimations.get(item) ?? 0;\r\n    }\r\n  };\r\n\r\n  grabItem = (item: Item) => {\r\n    if (item === null) {\r\n      return;\r\n    }\r\n    if (this.grabbedItem !== null) {\r\n      return;\r\n    }\r\n\r\n    // Remove the item from its slot when grabbed\r\n    const index = this.getIndexOfItem(item);\r\n\r\n    if (index !== -1) {\r\n      this.items[index] = null;\r\n      this.grabbedItem = item;\r\n    } else {\r\n    }\r\n  };\r\n\r\n  releaseItem = () => {\r\n    if (this.grabbedItem === null) {\r\n      return;\r\n    }\r\n\r\n    const targetIndex = this.selX + this.selY * this.cols;\r\n    const existingItem = this.items[targetIndex];\r\n\r\n    // If target slot is empty, place item there\r\n    if (existingItem === null) {\r\n      this.items[targetIndex] = this.grabbedItem;\r\n    } else {\r\n      // Swap items\r\n      this.items[targetIndex] = this.grabbedItem;\r\n    }\r\n\r\n    this.grabbedItem = null;\r\n  };\r\n\r\n  drawDraggedItem = (delta: number) => {\r\n    if (this.grabbedItem === null) return;\r\n    const { x, y } = MouseCursor.getInstance().getPosition();\r\n\r\n    const drawX = Math.round(x - 0.5 * GameConstants.TILESIZE);\r\n    const drawY = Math.round(y - 0.5 * GameConstants.TILESIZE);\r\n    const drawXScaled = drawX / GameConstants.TILESIZE;\r\n    const drawYScaled = drawY / GameConstants.TILESIZE;\r\n    this.grabbedItem.drawIcon(delta, drawXScaled, drawYScaled);\r\n  };\r\n\r\n  drop = () => {\r\n    if (!this.isOpen) return;\r\n    let index = this.selX + this.selY * this.cols;\r\n    if (index < 0 || index >= this.items.length) return;\r\n    const item = this.items[index];\r\n    if (item === null) return;\r\n    this.dropItem(item, index);\r\n  };\r\n\r\n  dropItem = (item: Item, index: number) => {\r\n    const room = (this.player as any).getRoom\r\n      ? (this.player as any).getRoom()\r\n      : this.game.levels[this.player.depth].rooms[this.player.levelID];\r\n    item.level = room;\r\n    item.x = this.player.x;\r\n    item.y = this.player.y;\r\n    item.alpha = 1;\r\n    item.pickedUp = false;\r\n    item.dropFromInventory();\r\n    this.equipAnimAmount[index] = 0;\r\n    item.drawableY = this.player.y;\r\n    room.items.push(item);\r\n    this.items[index] = null;\r\n  };\r\n\r\n  dropFromInventory = () => {\r\n    // Intentionally left blank or implement if needed\r\n  };\r\n\r\n  hasItem = <T extends Item>(itemType: new (...args: any[]) => T): T | null => {\r\n    return this.items.find((i): i is T => i instanceof itemType) || null;\r\n  };\r\n\r\n  hasItemCount = (item: Item | null): boolean => {\r\n    if (item === null) return false;\r\n    if (item instanceof Coin) return this.coinCount() >= item.stackCount;\r\n    return this.items.some(\r\n      (i) =>\r\n        i !== null &&\r\n        i.constructor === item.constructor &&\r\n        i.stackCount >= item.stackCount,\r\n    );\r\n  };\r\n\r\n  subtractItemCount = (item: Item | null) => {\r\n    if (item === null) return;\r\n    if (item instanceof Coin) {\r\n      this.subtractCoins(item.stackCount);\r\n      return;\r\n    }\r\n    this.items.forEach((i, idx) => {\r\n      if (i === null) return;\r\n      if (i.constructor === item.constructor) {\r\n        i.stackCount -= item.stackCount;\r\n        if (i.stackCount <= 0) {\r\n          this.items[idx] = null;\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  subtractItem = (item: Item | null, count: number) => {\r\n    if (item === null) return;\r\n    if (item instanceof Coin) {\r\n      this.subtractCoins(item.stackCount);\r\n      return;\r\n    }\r\n    this.items.forEach((i, idx) => {\r\n      if (i === null) return;\r\n      if (i.constructor === item.constructor) {\r\n        i.stackCount -= count;\r\n        if (i.stackCount <= 0) {\r\n          this.items[idx] = null;\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  coinCount = (): number => {\r\n    return this.coins;\r\n  };\r\n\r\n  subtractCoins = (n: number) => {\r\n    this.coins = Math.max(0, this.coins - n);\r\n  };\r\n\r\n  addCoins = (n: number) => {\r\n    this.coins += n;\r\n  };\r\n\r\n  isFull = (): boolean => {\r\n    return (\r\n      this.items.filter((i) => i !== null).length >=\r\n      (this.rows + this._expansion) * this.cols\r\n    );\r\n  };\r\n\r\n  addItem = (item: Item | null, stackCount: number | null = null): boolean => {\r\n    if (item === null) return false;\r\n    if (item instanceof Coin) {\r\n      this.coins += item.stackCount;\r\n      // Emit coin collected event for statistics tracking\r\n      globalEventBus.emit(EVENTS.COIN_COLLECTED, { amount: item.stackCount });\r\n      return true;\r\n    }\r\n    if (item instanceof Equippable) {\r\n      item.setWielder(this.player);\r\n    }\r\n    if (item.stackable) {\r\n      if (stackCount) {\r\n        item.stackCount = stackCount;\r\n      }\r\n      for (let i = 0; i < this.items.length; i++) {\r\n        if (\r\n          this.items[i] !== null &&\r\n          this.items[i]!.constructor === item.constructor\r\n        ) {\r\n          this.items[i]!.stackCount += item.stackCount;\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    if (!this.isFull()) {\r\n      for (let i = 0; i < this.items.length; i++) {\r\n        if (this.items[i] === null) {\r\n          this.items[i] = item;\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  removeItem = (item: Item | null) => {\r\n    if (item === null) return;\r\n    const index = this.items.indexOf(item);\r\n    if (index !== -1) {\r\n      this.items[index] = null;\r\n    }\r\n  };\r\n\r\n  canMine = (): boolean => {\r\n    return this.hasItem(Pickaxe) !== null;\r\n  };\r\n\r\n  canFish = (): boolean => {\r\n    return this.hasItem(FishingRod) !== null;\r\n  };\r\n\r\n  getArmor = (): Armor | null => {\r\n    return (\r\n      this.items.find(\r\n        (i): i is Armor =>\r\n          (i instanceof Armor || i instanceof WoodenShield) && i.equipped,\r\n      ) || null\r\n    );\r\n  };\r\n\r\n  hasWeapon = (): boolean => {\r\n    return this.weapon !== null;\r\n  };\r\n\r\n  getWeapon = (): Weapon | null => {\r\n    return this.weapon;\r\n  };\r\n\r\n  tick = () => {\r\n    this.items.forEach((i) => {\r\n      if (i !== null) i.tickInInventory();\r\n    });\r\n\r\n    // Check for drag initiation\r\n    this.checkForDragStart();\r\n  };\r\n\r\n  textWrap = (text: string, x: number, y: number, maxWidth: number): number => {\r\n    // Returns y value for next line\r\n    if (text === \"\") return y;\r\n    let words = text.split(\" \");\r\n    let line = \"\";\r\n\r\n    while (words.length > 0) {\r\n      if (Game.measureText(line + words[0]).width > maxWidth) {\r\n        Game.fillText(line, x, y);\r\n        line = \"\";\r\n        y += 8;\r\n      } else {\r\n        if (line !== \"\") line += \" \";\r\n        line += words[0];\r\n        words.splice(0, 1);\r\n      }\r\n    }\r\n    if (line.trim() !== \"\") {\r\n      Game.fillText(line, x, y);\r\n      y += 8;\r\n    }\r\n    return y;\r\n  };\r\n\r\n  drawCoins = (delta: number) => {\r\n    let coinTileX = 19;\r\n    if (this.coins >= 3) coinTileX = 20;\r\n    if (this.coins >= 7) coinTileX = 21;\r\n\r\n    // Calculate the right edge of the quickbar\r\n    const quickbarStartX = this.getQuickbarStartX();\r\n    const s = 18; // size of box\r\n    const b = 2; // border\r\n    const g = -2; // gap\r\n    const quickbarWidth = this.cols * (s + 2 * b + g) - g;\r\n    const quickbarRightEdge = quickbarStartX + quickbarWidth;\r\n    // Position coin slightly to the right of the quickbar\r\n    let coinX = (quickbarRightEdge - 5) / GameConstants.TILESIZE - 1;\r\n    let coinY = GameConstants.HEIGHT / GameConstants.TILESIZE - 1.3;\r\n\r\n    // Ensure coin doesn't go off the right edge of the screen\r\n    const maxCoinX = (GameConstants.WIDTH - 36) / GameConstants.TILESIZE;\r\n    if (coinX > maxCoinX) {\r\n      coinX = maxCoinX;\r\n    }\r\n\r\n    if (GameConstants.WIDTH < 180) {\r\n      coinY -= 1.25;\r\n      coinX += 1.15;\r\n    } else {\r\n      coinX += 1.5;\r\n    }\r\n    if (GameConstants.WIDTH < 145) {\r\n      coinX -= 1.15;\r\n    }\r\n\r\n    Game.drawItem(coinTileX, 0, 1, 2, coinX, coinY - 1, 1, 2);\r\n\r\n    const countText = `${this.coins}`;\r\n    const width = Game.measureText(countText).width;\r\n    const countX = 10;\r\n    const countY = 9;\r\n\r\n    Game.fillTextOutline(\r\n      countText,\r\n      coinX * GameConstants.TILESIZE +\r\n        countX -\r\n        Game.measureText(this.coins.toString()).width +\r\n        5,\r\n      coinY * GameConstants.TILESIZE + countY + 2,\r\n      GameConstants.OUTLINE,\r\n      \"white\",\r\n    );\r\n    /*\r\n    const turnCountText = `${this.player.turnCount}`;\r\n    Game.fillTextOutline(\r\n      turnCountText,\r\n      coinX * GameConstants.TILESIZE + countX,\r\n      coinY * GameConstants.TILESIZE + countY - 15,\r\n      GameConstants.OUTLINE,\r\n      \"white\",\r\n    );\r\n    */\r\n  };\r\n\r\n  pointInside = (x: number, y: number): boolean => {\r\n    const s = Math.min(18, (18 * (Date.now() - this.openTime)) / OPEN_TIME); // size of box\r\n    const b = 2; // border\r\n    const g = -2; // gap\r\n    const hg = 1 + Math.round(0.5 * Math.sin(Date.now() * 0.01) + 0.5); // highlighted growth\r\n    const ob = 1; // outer border\r\n    const width = this.cols * (s + 2 * b + g) - g;\r\n    const height = (this.rows + this._expansion) * (s + 2 * b + g) - g;\r\n\r\n    const startX = Math.round(0.5 * GameConstants.WIDTH - 0.5 * width) - ob;\r\n    const startY = this.isOpen\r\n      ? Math.round(0.5 * GameConstants.HEIGHT - 0.5 * height) - ob\r\n      : GameConstants.HEIGHT - (s + 2 * b) - 5 - ob;\r\n    const checkHeight = this.isOpen ? height + 2 * ob : s + 2 * b + 2 * ob;\r\n\r\n    return (\r\n      x >= startX &&\r\n      x <= startX + width + 2 * ob &&\r\n      y >= startY &&\r\n      y <= startY + checkHeight\r\n    );\r\n  };\r\n\r\n  drawQuickbar = (delta: number) => {\r\n    const { x, y } = MouseCursor.getInstance().getPosition();\r\n    const isInBounds = this.isPointInInventoryBounds(x, y).inBounds;\r\n    const isActive = isInBounds || this.mostRecentInput === \"keyboard\";\r\n\r\n    const s = 18; // size of box\r\n    const b = 2; // border\r\n    const g = -2; // gap\r\n    const hg = 1; // + Math.round(0.5 * Math.sin(Date.now() * 0.01) + 0.5); // highlighted growth\r\n    const ob = 1; // outer border\r\n    const width = Math.floor(this.cols * (s + 2 * b + g) - g);\r\n    const height = Math.floor(s + 2 * b);\r\n    const startX = Math.round(0.5 * GameConstants.WIDTH - 0.5 * width);\r\n    const startY = Math.floor(GameConstants.HEIGHT - height - 2);\r\n\r\n    // Draw main background\r\n    /*\r\n    Game.ctx.fillStyle = FULL_OUTLINE;\r\n    Game.ctx.fillRect(startX - ob, startY - 1, width + 2, height + 2);\r\n    */\r\n    //Game.ctx.globalCompositeOperation = \"xor\";\r\n\r\n    // Draw highlighted background for selected item only if active (hover or keyboard-like input)\r\n    if (isActive) {\r\n      /*\r\n      Game.ctx.fillRect(\r\n        Math.floor(startX + this.selX * (s + 2 * b + g) - hg - ob),\r\n        Math.floor(startY - hg - ob),\r\n        Math.floor(s + 2 * b + 2 * hg + 2 * ob),\r\n        Math.floor(s + 2 * b + 2 * hg + 2 * ob),\r\n      );\r\n      */\r\n    }\r\n\r\n    // Draw individual item slots\r\n    for (let xIdx = 0; xIdx < this.cols; xIdx++) {\r\n      // Skip drawing normal background and icon if this is the selected slot\r\n      const idx = xIdx;\r\n\r\n      // Draw slot background\r\n      if (xIdx !== this.selX) {\r\n        Game.ctx.fillStyle = FILL_COLOR;\r\n        Game.ctx.fillRect(\r\n          Math.floor(startX + xIdx * (s + 2 * b + g) + b),\r\n          Math.floor(startY + b),\r\n          Math.floor(s),\r\n          Math.floor(s),\r\n        );\r\n\r\n        Game.ctx.clearRect(\r\n          Math.floor(startX + xIdx * (s + 2 * b + g) + b + 1),\r\n          Math.floor(startY + b + 1),\r\n          Math.floor(s - 2),\r\n          Math.floor(s - 2),\r\n        );\r\n\r\n        // Draw equip animation (this should always show)\r\n        Game.ctx.fillStyle = EQUIP_COLOR;\r\n        Game.ctx.globalAlpha = 0.3;\r\n        const yOff = Math.floor(s * (1 - this.equipAnimAmount[idx]));\r\n        Game.ctx.fillRect(\r\n          Math.floor(startX + xIdx * (s + 2 * b + g) + b),\r\n          Math.floor(startY + b + yOff),\r\n          Math.floor(s),\r\n          Math.floor(s - yOff),\r\n        );\r\n        Game.ctx.globalAlpha = 1;\r\n        /*\r\n        Game.ctx.clearRect(\r\n          Math.floor(startX + xIdx * (s + 2 * b + g) + b + 1),\r\n          Math.floor(startY + b + 1),\r\n          Math.floor(s - 2),\r\n          Math.floor(s - 2),\r\n        );\r\n        */\r\n      }\r\n\r\n      // Draw item icon if exists\r\n      if (idx < this.items.length && this.items[idx] !== null) {\r\n        const drawX =\r\n          startX +\r\n          xIdx * (s + 2 * b + g) +\r\n          b +\r\n          Math.floor(0.5 * s) -\r\n          0.5 * GameConstants.TILESIZE;\r\n        const drawY =\r\n          startY + b + Math.floor(0.5 * s) - 0.5 * GameConstants.TILESIZE;\r\n        const drawXScaled = drawX / GameConstants.TILESIZE;\r\n        const drawYScaled = drawY / GameConstants.TILESIZE;\r\n        this.items[idx]?.drawIcon(delta, drawXScaled, drawYScaled);\r\n      }\r\n    }\r\n\r\n    // Draw selection box; use active state to control emphasis\r\n    if (true) {\r\n      const selStartX = Math.floor(startX + this.selX * (s + 2 * b + g));\r\n      const selStartY = Math.floor(startY);\r\n      const hg2 = isActive ? hg : 0;\r\n      /*\r\n      // Outer selection box (dark)\r\n      Game.ctx.fillStyle = OUTLINE_COLOR;\r\n      Game.ctx.fillRect(\r\n        selStartX - hg,\r\n        selStartY - hg,\r\n        s + 2 * b + 2 * hg,\r\n        s + 2 * b + 2 * hg,\r\n      );\r\n      */\r\n\r\n      // Inner selection box (light grey)\r\n      Game.ctx.fillStyle = FILL_COLOR;\r\n      Game.ctx.fillRect(\r\n        Math.floor(selStartX + b - hg2),\r\n        Math.floor(selStartY + b - hg2),\r\n        Math.floor(s + 2 * hg2),\r\n        Math.floor(s + 2 * hg2),\r\n      );\r\n\r\n      // Clear inner rectangle - use normal size when not in bounds\r\n      const clearSize = isActive ? s : s - 2;\r\n      const selOffset = isActive ? 0 : 1;\r\n      Game.ctx.clearRect(\r\n        Math.floor(startX + this.selX * (s + 2 * b + g) + b + selOffset),\r\n        Math.floor(startY + b + selOffset),\r\n        Math.floor(clearSize),\r\n        Math.floor(clearSize),\r\n      );\r\n\r\n      // Draw equip animation for selected slot with highlight\r\n      const idx = this.selX;\r\n      Game.ctx.fillStyle = EQUIP_COLOR;\r\n      Game.ctx.globalAlpha = 0.3;\r\n      const yOff = (s + 2 * hg2) * (1 - this.equipAnimAmount[idx]);\r\n      Game.ctx.fillRect(\r\n        Math.round(startX + this.selX * (s + 2 * b + g) + b - hg2),\r\n        Math.round(startY + b + yOff - hg2),\r\n        Math.round(s + 2 * hg2),\r\n        Math.round(s + 2 * hg2 - yOff),\r\n      );\r\n      Game.ctx.globalAlpha = 1;\r\n\r\n      /*\r\n      Game.ctx.clearRect(\r\n        Math.floor(startX + this.selX * (s + 2 * b + g) + b),\r\n        Math.floor(startY + b),\r\n        Math.floor(s),\r\n        Math.floor(s),\r\n      );\r\n      */\r\n      this.drawUsingItem(delta, startX, startY, s, b, g);\r\n\r\n      // Redraw the selected item\r\n      if (idx < this.items.length && this.items[idx] !== null) {\r\n        const drawX =\r\n          selStartX + b + Math.floor(0.5 * s) - 0.5 * GameConstants.TILESIZE;\r\n        const drawY =\r\n          selStartY + b + Math.floor(0.5 * s) - 0.5 * GameConstants.TILESIZE;\r\n        const drawXScaled = drawX / GameConstants.TILESIZE;\r\n        const drawYScaled = drawY / GameConstants.TILESIZE;\r\n\r\n        this.items[idx]?.drawIcon(delta, drawXScaled, drawYScaled);\r\n      }\r\n      this.drawUsingItem(delta, startX, startY, s, b, g);\r\n    }\r\n    this.drawUsingItem(delta, startX, startY, s, b, g);\r\n  };\r\n\r\n  drawUsingItem = (\r\n    delta: number,\r\n    startX: number,\r\n    startY: number,\r\n    s: number,\r\n    b: number,\r\n    g: number,\r\n  ) => {\r\n    // Highlight the usingItem's slot if in using state and it's different from current selection\r\n    Game.ctx.globalCompositeOperation = \"source-over\";\r\n    if (this.usingItem && this.usingItemIndex !== null) {\r\n      const usingX = this.usingItemIndex % this.cols;\r\n      const usingY = Math.floor(this.usingItemIndex / this.cols);\r\n      const highlightStartX = startX + usingX * (s + 2 * b + g);\r\n      const highlightStartY = startY + usingY * (s + 2 * b + g);\r\n\r\n      Game.ctx.strokeStyle = \"yellow\"; // Choose a distinct color for using item\r\n      Game.ctx.lineWidth = 2;\r\n      Game.ctx.strokeRect(\r\n        highlightStartX,\r\n        highlightStartY,\r\n        s + 2 * b,\r\n        s + 2 * b,\r\n      );\r\n      Game.ctx.lineWidth = 1; // Reset line width\r\n    }\r\n  };\r\n\r\n  updateEquipAnimAmount = (delta: number) => {\r\n    this.equipAnimAmount.forEach((amount, idx) => {\r\n      const item = this.items[idx];\r\n      if (item instanceof Equippable) {\r\n        let targetAmount = item.equipped ? 1 : 0;\r\n        let currentAmount = this.itemEquipAnimations.get(item) ?? amount;\r\n\r\n        currentAmount += 0.2 * delta * (targetAmount - currentAmount);\r\n        currentAmount = Math.max(0, Math.min(1, currentAmount));\r\n\r\n        this.itemEquipAnimations.set(item, currentAmount);\r\n        this.equipAnimAmount[idx] = currentAmount;\r\n      } else {\r\n        this.equipAnimAmount[idx] = 0;\r\n        if (item) this.itemEquipAnimations.delete(item);\r\n      }\r\n    });\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    Game.ctx.imageSmoothingEnabled = false;\r\n    Game.ctx.imageSmoothingQuality = \"low\";\r\n    const { x, y } = MouseCursor.getInstance().getPosition();\r\n    const isInBounds = this.isPointInInventoryBounds(x, y).inBounds;\r\n    const s = Math.floor(\r\n      Math.min(18, (18 * (Date.now() - this.openTime)) / OPEN_TIME),\r\n    ); // size of box\r\n    const b = 2; // border\r\n    const g = -2; // gap\r\n    const hg = 1 + Math.round(0.5 * Math.sin(Date.now() * 0.01) + 0.5); // highlighted growth\r\n    const invRows = Math.floor(this.rows + this._expansion);\r\n    const ob = 1; // outer border\r\n    const width = Math.floor(this.cols * (s + 2 * b + g) - g);\r\n    const height = Math.floor(invRows * (s + 2 * b + g) - g);\r\n    const mainBgX = Math.round(0.5 * GameConstants.WIDTH - 0.5 * width) - ob;\r\n    const mainBgY = Math.round(0.5 * GameConstants.HEIGHT - 0.5 * height) - ob;\r\n\r\n    // Draw coins and quickbar (these are always visible)\r\n    this.drawCoins(delta);\r\n    this.drawQuickbar(delta);\r\n    this.updateEquipAnimAmount(delta);\r\n    this.drawInventoryButton(delta);\r\n    Menu.drawOpenMenuButton();\r\n    XPCounter.draw(delta);\r\n\r\n    if (this.isOpen) {\r\n      // Draw semi-transparent background for full inventory\r\n      Game.ctx.fillStyle = \"rgba(0, 0, 0, 0.8)\";\r\n      Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n\r\n      Game.ctx.globalAlpha = 1;\r\n\r\n      // Define dimensions and styling variables (similar to drawQuickbar)\r\n      const s = Math.floor(\r\n        Math.min(18, (18 * (Date.now() - this.openTime)) / OPEN_TIME),\r\n      ); // size of box\r\n      const b = 2; // border\r\n      const g = -2; // gap\r\n      const hg = Math.floor(\r\n        1 + Math.round(0.5 * Math.sin(Date.now() * 0.01) + 0.5),\r\n      ); // highlighted growth\r\n      const invRows = this.rows + this._expansion;\r\n      const ob = 1; // outer border\r\n      const width = Math.floor(this.cols * (s + 2 * b + g) - g);\r\n      const height = Math.floor(invRows * (s + 2 * b + g) - g);\r\n\r\n      // Draw main inventory background (similar to drawQuickbar)\r\n      Game.ctx.fillStyle = FULL_OUTLINE;\r\n      const mainBgX = Math.round(0.5 * GameConstants.WIDTH - 0.5 * width) - ob;\r\n      const mainBgY =\r\n        Math.round(0.5 * GameConstants.HEIGHT - 0.5 * height) - ob;\r\n      Game.ctx.fillRect(mainBgX, mainBgY, width + 2 * ob, height + 2 * ob);\r\n\r\n      // Draw highlighted background for selected item only if mouse is in bounds\r\n      if (isInBounds || this.mostRecentInput === \"keyboard\") {\r\n        const highlightX =\r\n          Math.round(\r\n            0.5 * GameConstants.WIDTH -\r\n              0.5 * width +\r\n              this.selX * (s + 2 * b + g),\r\n          ) -\r\n          hg -\r\n          ob;\r\n        const highlightY =\r\n          Math.round(\r\n            0.5 * GameConstants.HEIGHT -\r\n              0.5 * height +\r\n              this.selY * (s + 2 * b + g),\r\n          ) -\r\n          hg -\r\n          ob;\r\n\r\n        Game.ctx.fillRect(\r\n          highlightX,\r\n          highlightY,\r\n          s + 2 * b + 2 * hg + 2 * ob,\r\n          s + 2 * b + 2 * hg + 2 * ob,\r\n        );\r\n      }\r\n\r\n      // Draw individual inventory slots (similar to drawQuickbar, but for all rows)\r\n      for (let xIdx = 0; xIdx < this.cols; xIdx++) {\r\n        for (let yIdx = 0; yIdx < this.rows + this._expansion; yIdx++) {\r\n          // Draw slot outline\r\n          const slotX = Math.round(\r\n            0.5 * GameConstants.WIDTH - 0.5 * width + xIdx * (s + 2 * b + g),\r\n          );\r\n          const slotY = Math.round(\r\n            0.5 * GameConstants.HEIGHT - 0.5 * height + yIdx * (s + 2 * b + g),\r\n          );\r\n          Game.ctx.fillStyle = OUTLINE_COLOR;\r\n          Game.ctx.fillRect(slotX, slotY, s + 2 * b, s + 2 * b);\r\n\r\n          // Draw slot background\r\n          Game.ctx.fillStyle = FILL_COLOR;\r\n          Game.ctx.fillRect(slotX + b, slotY + b, s, s);\r\n\r\n          // Draw equip animation (unique to full inventory view)\r\n          const idx = xIdx + yIdx * this.cols;\r\n          Game.ctx.fillStyle = EQUIP_COLOR;\r\n          const yOff = Math.round(s * (1 - this.equipAnimAmount[idx]));\r\n          Game.ctx.fillRect(slotX + b, slotY + b + yOff, s, s - yOff);\r\n\r\n          // Draw item icon if exists\r\n          if (idx < this.items.length && this.items[idx] !== null) {\r\n            const drawX = Math.round(\r\n              0.5 * GameConstants.WIDTH -\r\n                0.5 * width +\r\n                xIdx * (s + 2 * b + g) +\r\n                b +\r\n                Math.floor(0.5 * s) -\r\n                0.5 * GameConstants.TILESIZE,\r\n            );\r\n            const drawY = Math.round(\r\n              0.5 * GameConstants.HEIGHT -\r\n                0.5 * height +\r\n                yIdx * (s + 2 * b + g) +\r\n                b +\r\n                Math.floor(0.5 * s) -\r\n                0.5 * GameConstants.TILESIZE,\r\n            );\r\n            const drawXScaled = drawX / GameConstants.TILESIZE;\r\n            const drawYScaled = drawY / GameConstants.TILESIZE;\r\n\r\n            this.items[idx]?.drawIcon(delta, drawXScaled, drawYScaled);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Draw item icons after animation delay (similar to drawQuickbar, but for all items)\r\n      if (Date.now() - this.openTime >= OPEN_TIME) {\r\n        this.items.forEach((item, idx) => {\r\n          if (item === null) return;\r\n          const x = idx % this.cols;\r\n          const y = Math.floor(idx / this.cols);\r\n\r\n          const drawX = Math.round(\r\n            0.5 * GameConstants.WIDTH -\r\n              0.5 * width +\r\n              x * (s + 2 * b + g) +\r\n              b +\r\n              Math.floor(0.5 * s) -\r\n              0.5 * GameConstants.TILESIZE,\r\n          );\r\n          const drawY = Math.round(\r\n            0.5 * GameConstants.HEIGHT -\r\n              0.5 * height +\r\n              y * (s + 2 * b + g) +\r\n              b +\r\n              Math.floor(0.5 * s) -\r\n              0.5 * GameConstants.TILESIZE,\r\n          );\r\n\r\n          const drawXScaled = drawX / GameConstants.TILESIZE;\r\n          const drawYScaled = drawY / GameConstants.TILESIZE;\r\n\r\n          item.drawIcon(delta, drawXScaled, drawYScaled);\r\n        });\r\n\r\n        // Draw selection box and related elements only if mouse is in bounds\r\n        if (isInBounds || this.mostRecentInput === \"keyboard\") {\r\n          // Draw selection box\r\n          Game.ctx.fillStyle = OUTLINE_COLOR;\r\n          Game.ctx.fillRect(\r\n            Math.round(\r\n              0.5 * GameConstants.WIDTH -\r\n                0.5 * width +\r\n                this.selX * (s + 2 * b + g) -\r\n                hg,\r\n            ),\r\n            Math.round(\r\n              0.5 * GameConstants.HEIGHT -\r\n                0.5 * height +\r\n                this.selY * (s + 2 * b + g) -\r\n                hg,\r\n            ),\r\n            s + 2 * b + 2 * hg,\r\n            s + 2 * b + 2 * hg,\r\n          );\r\n\r\n          const slotX = Math.round(\r\n            0.5 * GameConstants.WIDTH -\r\n              0.5 * width +\r\n              this.selX * (s + 2 * b + g) +\r\n              b -\r\n              hg,\r\n          );\r\n          const slotY = Math.round(\r\n            0.5 * GameConstants.HEIGHT -\r\n              0.5 * height +\r\n              this.selY * (s + 2 * b + g) +\r\n              b -\r\n              hg,\r\n          );\r\n          Game.ctx.fillStyle = FILL_COLOR;\r\n          Game.ctx.fillRect(slotX, slotY, s + 2 * hg, s + 2 * hg);\r\n\r\n          // Draw equip animation for selected item (unique to full inventory view)\r\n          const idx = this.selX + this.selY * this.cols;\r\n          if (idx < this.items.length && this.items[idx] !== null) {\r\n            Game.ctx.fillStyle = EQUIP_COLOR;\r\n            const yOff = Math.round(\r\n              (s + 2 * hg) * (1 - this.equipAnimAmount[idx]),\r\n            );\r\n            Game.ctx.fillRect(\r\n              Math.round(\r\n                0.5 * GameConstants.WIDTH -\r\n                  0.5 * width +\r\n                  this.selX * (s + 2 * b + g) +\r\n                  b -\r\n                  hg,\r\n              ),\r\n              Math.round(\r\n                0.5 * GameConstants.HEIGHT -\r\n                  0.5 * height +\r\n                  this.selY * (s + 2 * b + g) +\r\n                  b -\r\n                  hg +\r\n                  yOff,\r\n              ),\r\n              s + 2 * hg,\r\n              s + 2 * hg - yOff,\r\n            );\r\n\r\n            // Redraw selected item icon (similar to drawQuickbar)\r\n            const drawX = Math.round(\r\n              0.5 * GameConstants.WIDTH -\r\n                0.5 * width +\r\n                this.selX * (s + 2 * b + g) +\r\n                b +\r\n                Math.floor(0.5 * s) -\r\n                0.5 * GameConstants.TILESIZE,\r\n            );\r\n            const drawY = Math.round(\r\n              0.5 * GameConstants.HEIGHT -\r\n                0.5 * height +\r\n                this.selY * (s + 2 * b + g) +\r\n                b +\r\n                Math.floor(0.5 * s) -\r\n                0.5 * GameConstants.TILESIZE,\r\n            );\r\n\r\n            const drawXScaled = drawX / GameConstants.TILESIZE;\r\n            const drawYScaled = drawY / GameConstants.TILESIZE;\r\n\r\n            this.items[idx]?.drawIcon(delta, drawXScaled, drawYScaled);\r\n          }\r\n\r\n          // **Move drawUsingItem here, after the main selection box**\r\n        }\r\n\r\n        // **Ensure drawUsingItem is not called again here**\r\n        // this.drawUsingItem(delta, mainBgX, mainBgY, s, b, g);\r\n      }\r\n\r\n      // **Ensure drawUsingItem is not called again here**\r\n      // this.drawUsingItem(delta, mainBgX, mainBgY, s, b, g);\r\n      // Draw item description and action text (unique to full inventory view)\r\n      const selectedIdx = this.selX + this.selY * this.cols;\r\n\r\n      if (selectedIdx < this.items.length && this.items[selectedIdx] !== null) {\r\n        const item = this.items[selectedIdx]!;\r\n        Game.ctx.fillStyle = \"white\";\r\n\r\n        // Determine action text\r\n        let topPhrase = \"\";\r\n        if (item instanceof Equippable) {\r\n          topPhrase = item.equipped ? \"[SPACE] to unequip\" : \"[SPACE] to equip\";\r\n        }\r\n        if (item instanceof Usable) {\r\n          topPhrase = \"[SPACE] to use\";\r\n        }\r\n\r\n        // Draw action text\r\n        const actionTextWidth = Game.measureText(topPhrase).width;\r\n        Game.fillText(\r\n          topPhrase,\r\n          Math.round(0.5 * (GameConstants.WIDTH - actionTextWidth)),\r\n          5,\r\n        );\r\n\r\n        // Draw item description\r\n        const lines = item.getDescription().split(\"\\n\");\r\n        let nextY = Math.round(\r\n          0.5 * GameConstants.HEIGHT -\r\n            0.5 * height +\r\n            (this.rows + this.expansion) * (s + 2 * b + g) +\r\n            b +\r\n            5,\r\n        );\r\n        lines.forEach((line) => {\r\n          nextY = this.textWrap(line, 5, nextY, GameConstants.WIDTH - 10);\r\n        });\r\n      }\r\n    }\r\n    if (this.isOpen) {\r\n      this.drawUsingItem(delta, mainBgX + 1, mainBgY + 1, s, b, g);\r\n    }\r\n\r\n    this.drawDraggedItem(delta);\r\n  };\r\n\r\n  isPointInInventoryBounds = (\r\n    x: number,\r\n    y: number,\r\n  ): { inBounds: boolean; startX: number; startY: number } => {\r\n    const s = this.isOpen\r\n      ? Math.min(18, (18 * (Date.now() - this.openTime)) / OPEN_TIME)\r\n      : 18;\r\n    const b = 2; // border\r\n    const g = -2; // gap\r\n    const hg = 1 + Math.round(0.5 * Math.sin(Date.now() * 0.01) + 0.5); // highlighted growth\r\n    const ob = 1; // outer border\r\n    const width = this.cols * (s + 2 * b + g) - g;\r\n\r\n    let startX: number;\r\n    let startY: number;\r\n    let height: number;\r\n\r\n    if (this.isOpen) {\r\n      // Full inventory bounds\r\n      height = (this.rows + this._expansion) * (s + 2 * b + g) - g;\r\n      startX = Math.round(0.5 * GameConstants.WIDTH - 0.5 * width);\r\n      startY = Math.round(0.5 * GameConstants.HEIGHT - 0.5 * height);\r\n    } else {\r\n      // Quickbar bounds\r\n      height = s + 2 * b;\r\n      startX = Math.round(0.5 * GameConstants.WIDTH - 0.5 * width);\r\n      startY = Math.round(GameConstants.HEIGHT - height - 5);\r\n    }\r\n\r\n    const inBounds =\r\n      x >= startX - ob &&\r\n      x <= startX + width + ob &&\r\n      y >= startY - ob &&\r\n      y <= startY + height + ob;\r\n\r\n    return {\r\n      inBounds,\r\n      startX,\r\n      startY,\r\n    };\r\n  };\r\n  isPointInQuickbarBounds = (\r\n    x: number,\r\n    y: number,\r\n  ): { inBounds: boolean; startX: number; startY: number } => {\r\n    const s = this.isOpen\r\n      ? Math.min(18, (18 * (Date.now() - this.openTime)) / OPEN_TIME)\r\n      : 18;\r\n    const b = 2; // border\r\n    const g = -2; // gap\r\n    const width = this.cols * (s + 2 * b + g) - g;\r\n    const startX = Math.round(0.5 * GameConstants.WIDTH - 0.5 * width);\r\n    const startY = Math.round(GameConstants.HEIGHT - (s + 2 * b) - 5);\r\n    const quickbarHeight = s + 2 * b;\r\n\r\n    const inBounds =\r\n      x >= startX &&\r\n      x <= startX + width &&\r\n      y >= startY &&\r\n      y <= startY + quickbarHeight;\r\n\r\n    return {\r\n      inBounds,\r\n      startX,\r\n      startY,\r\n    };\r\n  };\r\n\r\n  isPointInInventoryButton = (x: number, y: number): boolean => {\r\n    const tX = x / GameConstants.TILESIZE;\r\n    const tY = y / GameConstants.TILESIZE;\r\n    return (\r\n      tX >= this.buttonX &&\r\n      tX <= this.buttonX + 1 &&\r\n      tY >= this.buttonY &&\r\n      tY <= this.buttonY + 1\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Draws the inventory button to the canvas.\r\n   * Added `ctx.save()` at the beginning and `ctx.restore()` at the end\r\n   * to ensure canvas state is preserved.\r\n   */\r\n  drawInventoryButton = (delta: number) => {\r\n    Game.ctx.save(); // Save the current canvas state\r\n    this.buttonX = GameConstants.WIDTH / GameConstants.TILESIZE - 1.25;\r\n    this.buttonY = GameConstants.HEIGHT / GameConstants.TILESIZE - 1.25;\r\n    if (GameConstants.WIDTH < 145) {\r\n      //this.buttonX -= 1;\r\n      this.buttonY -= 1.25;\r\n    }\r\n    Game.drawFX(0, 0, 1, 1, this.buttonX, this.buttonY, 1, 1);\r\n\r\n    Game.ctx.restore(); // Restore the canvas state\r\n  };\r\n\r\n  getQuickbarStartX = () => {\r\n    const s = 18; // size of box\r\n    const b = 2; // border\r\n    const g = -2; // gap\r\n    const width = Math.floor(this.cols * (s + 2 * b + g) - g);\r\n    return Math.round(0.5 * GameConstants.WIDTH - 0.5 * width);\r\n  };\r\n\r\n  handleMouseDown = (x: number, y: number, button: number) => {\r\n    if (this.player.menu.open) return;\r\n\r\n    // Ignore if not left click\r\n    if (button !== 0) return;\r\n\r\n    const bounds = this.isPointInInventoryBounds(x, y);\r\n    if (bounds.inBounds) {\r\n      const selectedItem = this.itemAtSelectedSlot();\r\n      if (selectedItem !== null) {\r\n        this._dragStartItem = selectedItem;\r\n        this._dragStartSlot = this.selX + this.selY * this.cols;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Unified method to initiate dragging.\r\n   */\r\n  initiateDrag = () => {\r\n    if (this._dragStartItem === null || this._isDragging) {\r\n      return;\r\n    }\r\n    this._isDragging = true;\r\n    this.grabbedItem = this._dragStartItem;\r\n\r\n    // Remove item from original slot\r\n    if (this._dragStartSlot !== null) {\r\n      this.items[this._dragStartSlot] = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle hold detection for both mouse and touch.\r\n   */\r\n  onHoldDetected = () => {\r\n    this.initiateDrag();\r\n  };\r\n\r\n  /**\r\n   * Continuously check for mouse hold during tick.\r\n   */\r\n  checkForDragStart = () => {\r\n    if (Input.mouseDown && Input.isMouseHold) {\r\n      this.initiateDrag();\r\n    } else if (Input.isTapHold) {\r\n      this.initiateDrag();\r\n    }\r\n  };\r\n\r\n  handleMouseUp = (x: number, y: number, button: number) => {\r\n    if (this.player.menu.open) return;\r\n\r\n    // Ignore if not left click\r\n    if (button !== 0) return;\r\n\r\n    const invBounds = this.isPointInInventoryBounds(x, y);\r\n    const quickbarBounds = this.isPointInQuickbarBounds(x, y);\r\n    const isValidDropZone = this.isOpen\r\n      ? invBounds.inBounds\r\n      : quickbarBounds.inBounds;\r\n\r\n    if (isValidDropZone) {\r\n      if (this._isDragging && this.grabbedItem !== null) {\r\n        // We were dragging, place the item\r\n        const targetSlot = this.selX + this.selY * this.cols;\r\n        this.placeItemInSlot(targetSlot);\r\n      } else if (this._dragStartItem !== null) {\r\n        // We had an item but weren't dragging (quick click)\r\n        this.itemUse();\r\n      }\r\n    } else if (this.grabbedItem !== null) {\r\n      // Drop the item in the world\r\n      this.dropItem(this.grabbedItem, this._dragStartSlot);\r\n\r\n      this.grabbedItem = null;\r\n      this.items[this._dragStartSlot] = null;\r\n      this.dragEndTime = Date.now();\r\n    }\r\n\r\n    // Reset all drag/hold state\r\n    this._isDragging = false;\r\n    this._dragStartItem = null;\r\n    this._dragStartSlot = null;\r\n    this.grabbedItem = null;\r\n  };\r\n\r\n  placeItemInSlot = (targetSlot: number) => {\r\n    if (this.grabbedItem === null) return;\r\n\r\n    const existingItem = this.items[targetSlot];\r\n\r\n    // If target slot is empty\r\n    if (existingItem === null) {\r\n      this.items[targetSlot] = this.grabbedItem;\r\n    } else {\r\n      // Swap items\r\n      if (this._dragStartSlot !== null) {\r\n        this.items[this._dragStartSlot] = existingItem;\r\n      }\r\n      this.items[targetSlot] = this.grabbedItem;\r\n    }\r\n\r\n    // Record move for replay\r\n    try {\r\n      const fromIdx = this._dragStartSlot ?? targetSlot;\r\n      const toIdx = targetSlot;\r\n      (this.game as any).replayManager?.recordAction({\r\n        type: \"InventoryMove\",\r\n        fromIndex: fromIdx,\r\n        toIndex: toIdx,\r\n      });\r\n    } catch {}\r\n\r\n    this.grabbedItem = null;\r\n  };\r\n\r\n  get expansion(): number {\r\n    return this._expansion;\r\n  }\r\n\r\n  set expansion(value: number) {\r\n    if (value !== this._expansion) {\r\n      const oldTotalSlots = (this.rows + this._expansion) * this.cols;\r\n      this._expansion = value;\r\n      const newTotalSlots = (this.rows + this._expansion) * this.cols;\r\n\r\n      // Resize items array\r\n      if (newTotalSlots > oldTotalSlots) {\r\n        this.items.push(...Array(newTotalSlots - oldTotalSlots).fill(null));\r\n        this.equipAnimAmount.push(\r\n          ...Array(newTotalSlots - oldTotalSlots).fill(0),\r\n        );\r\n      } else if (newTotalSlots < oldTotalSlots) {\r\n        this.items.length = newTotalSlots;\r\n        this.equipAnimAmount.length = newTotalSlots;\r\n      }\r\n    }\r\n  }\r\n\r\n  expandInventory(additionalRows: number) {\r\n    this.expansion += additionalRows;\r\n  }\r\n}\r\n","import { Entity } from \"../entity/entity\";\r\nimport { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Particle } from \"../particle/particle\";\r\nimport { Projectile } from \"./projectile\";\r\nimport { Room } from \"../room/room\";\r\nimport { Random } from \"../utility/random\";\r\nimport { IdGenerator } from \"../globalStateManager/IdGenerator\";\r\n\r\ninterface Point {\r\n  x: number;\r\n  y: number;\r\n  oldX: number;\r\n  oldY: number;\r\n  velocityX: number;\r\n  velocityY: number;\r\n  angle: number;\r\n}\r\n\r\nexport class BeamEffect extends Projectile {\r\n  // Number of points that make up the beam (higher = smoother but more expensive)\r\n  // Range: 10-100, recommended: 30\r\n  private static readonly SEGMENTS = 30;\r\n\r\n  // Downward force applied to each point (0 = no gravity)\r\n  // Range: 0-10, recommended: 2\r\n  private static readonly GRAVITY = 2;\r\n\r\n  // Physics simulation steps per frame (higher = more accurate but more expensive)\r\n  // Range: 1-10, recommended: 1\r\n  private static readonly ITERATIONS = 5;\r\n\r\n  // How much the beam reacts to movement of start/end points\r\n  // Range: 0-5, recommended: 1\r\n  private static readonly MOTION_INFLUENCE = 1;\r\n\r\n  // Amount of random movement applied to points (0 = straight beam)\r\n  // Range: 0-1, recommended: 0.5\r\n  private static readonly TURBULENCE = 0.5;\r\n\r\n  // How quickly velocity decreases over time\r\n  // Range: 0-1, recommended: 0.5\r\n  private static readonly VELOCITY_DECAY = 0.1;\r\n\r\n  // How quickly the turbulence angle changes\r\n  // Range: 0-2, recommended: 0.9\r\n  private static readonly ANGLE_CHANGE = 0.01; // for turbulence specifically\r\n\r\n  // Maximum speed any point can move per frame\r\n  // Range: 10-1000, recommended: 100\r\n  private static readonly MAX_VELOCITY = 100;\r\n\r\n  // General movement resistance (1 = no damping, 0 = full stop)\r\n  // Range: 0.9-0.999, recommended: 0.8\r\n  private static readonly DAMPING = 0.8;\r\n\r\n  // How strongly points pull toward their neighbors\r\n  // Range: 0.01-1, recommended: 0.01\r\n  private static readonly SPRING_STIFFNESS = 0.01;\r\n\r\n  // How quickly spring oscillations settle\r\n  // Range: 0.001-0.1, recommended: 0.1\r\n  private static readonly SPRING_DAMPING = 0.1;\r\n\r\n  private points: Point[];\r\n  private prevStartX: number;\r\n  private prevStartY: number;\r\n  private prevEndX: number;\r\n  private prevEndY: number;\r\n  private active: boolean = true;\r\n  private time: number = 0;\r\n  alpha: number = 1;\r\n  targetX: number;\r\n  targetY: number;\r\n  color: string;\r\n  compositeOperation: string;\r\n  gravity: number = BeamEffect.GRAVITY;\r\n  motionInfluence: number = BeamEffect.MOTION_INFLUENCE;\r\n  turbulence: number = BeamEffect.TURBULENCE;\r\n  velocityDecay: number = BeamEffect.VELOCITY_DECAY;\r\n  angleChange: number = BeamEffect.ANGLE_CHANGE;\r\n  maxVelocity: number = BeamEffect.MAX_VELOCITY;\r\n  damping: number = BeamEffect.DAMPING;\r\n  springStiffness: number = BeamEffect.SPRING_STIFFNESS;\r\n  springDamping: number = BeamEffect.SPRING_DAMPING;\r\n  iterations: number = BeamEffect.ITERATIONS;\r\n  segments: number = BeamEffect.SEGMENTS;\r\n  type: string;\r\n  constructor(x1: number, y1: number, x2: number, y2: number, parent: Entity) {\r\n    super(parent, x1, y1);\r\n    const startX = x1 * GameConstants.TILESIZE + 0.5 * GameConstants.TILESIZE;\r\n    const startY = y1 * GameConstants.TILESIZE + 0.5 * GameConstants.TILESIZE;\r\n    const endX = x2 * GameConstants.TILESIZE + 0.5 * GameConstants.TILESIZE;\r\n    const endY = y2 * GameConstants.TILESIZE + 0.5 * GameConstants.TILESIZE;\r\n    this.x = x1;\r\n    this.y = y1;\r\n    this.targetX = x2;\r\n    this.targetY = y2;\r\n\r\n    this.points = this.initializePoints(startX, startY, endX, endY);\r\n    this.prevStartX = startX;\r\n    this.prevStartY = startY;\r\n    this.prevEndX = endX;\r\n    this.prevEndY = endY;\r\n    this.color = \"cyan\";\r\n    this.compositeOperation = \"source-over\";\r\n  }\r\n  /**\r\n   * Sets the physics properties for the beam effect.\r\n   *\r\n   * @param {number} [gravity] - The gravitational force applied to the beam. Default: 2\r\n   * @param {number} [motionInfluence] - The influence of motion on the beam. Default: 1\r\n   * @param {number} [turbulence] - The turbulence applied to the beam. Default: 0.5\r\n   * @param {number} [velocityDecay] - The rate at which velocity decays. Default: 0.1\r\n   * @param {number} [angleChange] - The change in angle of the beam. Default: 0.01\r\n   * @param {number} [maxVelocity] - The maximum velocity of the beam.\r\n   * @param {number} [damping] - The damping factor for the beam's motion.\r\n   * @param {number} [springStiffness] - The stiffness of the spring effect.\r\n   * @param {number} [springDamping] - The damping of the spring effect.\r\n   * @param {number} [iterations] - The number of iterations for the physics simulation.\r\n   * @param {number} [segments] - The number of segments for the beam.\r\n   */\r\n  setPhysics(\r\n    gravity?: number,\r\n    motionInfluence?: number,\r\n    turbulence?: number,\r\n    velocityDecay?: number,\r\n    angleChange?: number,\r\n    maxVelocity?: number,\r\n    damping?: number,\r\n    springStiffness?: number,\r\n    springDamping?: number,\r\n    iterations?: number,\r\n    segments?: number,\r\n  ) {\r\n    this.gravity = gravity ?? BeamEffect.GRAVITY;\r\n    this.motionInfluence = motionInfluence ?? BeamEffect.MOTION_INFLUENCE;\r\n    this.turbulence = turbulence ?? BeamEffect.TURBULENCE;\r\n    this.velocityDecay = velocityDecay ?? BeamEffect.VELOCITY_DECAY;\r\n    this.angleChange = angleChange ?? BeamEffect.ANGLE_CHANGE;\r\n    this.maxVelocity = maxVelocity ?? BeamEffect.MAX_VELOCITY;\r\n    this.damping = damping ?? BeamEffect.DAMPING;\r\n    this.springStiffness = springStiffness ?? BeamEffect.SPRING_STIFFNESS;\r\n    this.springDamping = springDamping ?? BeamEffect.SPRING_DAMPING;\r\n    this.iterations = iterations ?? BeamEffect.ITERATIONS;\r\n    this.segments = segments ?? BeamEffect.SEGMENTS;\r\n  }\r\n\r\n  setTarget(x: number, y: number, x2: number, y2: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.targetX = x2;\r\n    this.targetY = y2;\r\n  }\r\n\r\n  render(\r\n    x1: number,\r\n    y1: number,\r\n    x2: number,\r\n    y2: number,\r\n    color: string = this.color,\r\n    lineWidth: number = 2,\r\n    delta: number = 1 / 60,\r\n    compositeOperation: string = this.compositeOperation,\r\n  ): void {\r\n    const startX =\r\n      this.x * GameConstants.TILESIZE + 0.5 * GameConstants.TILESIZE;\r\n    const startY =\r\n      this.y * GameConstants.TILESIZE + 0.5 * GameConstants.TILESIZE;\r\n    const endX =\r\n      this.targetX * GameConstants.TILESIZE + 0.5 * GameConstants.TILESIZE;\r\n    const endY =\r\n      this.targetY * GameConstants.TILESIZE + 0.5 * GameConstants.TILESIZE;\r\n\r\n    const startForceX =\r\n      (startX - this.prevStartX) * this.motionInfluence * delta;\r\n    const startForceY =\r\n      (startY - this.prevStartY) * this.motionInfluence * delta;\r\n    const endForceX = (endX - this.prevEndX) * this.motionInfluence * delta;\r\n    const endForceY = (endY - this.prevEndY) * this.motionInfluence * delta;\r\n\r\n    for (let i = 1; i < 4; i++) {\r\n      const influence = 1 - i / 4;\r\n      this.points[i].x += startForceX * influence;\r\n      this.points[i].y += startForceY * influence;\r\n    }\r\n    for (let i = this.points.length - 4; i < this.points.length - 1; i++) {\r\n      const influence = 1 - (this.points.length - i) / 4;\r\n      this.points[i].x += endForceX * influence;\r\n      this.points[i].y += endForceY * influence;\r\n    }\r\n\r\n    this.simulateRope(startX, startY, endX, endY, delta);\r\n\r\n    const ctx = Game.ctx;\r\n    ctx.save();\r\n    Game.ctx.globalCompositeOperation =\r\n      compositeOperation as GlobalCompositeOperation;\r\n    for (let i = 0; i < this.points.length - 1; i++) {\r\n      const p1 = this.points[i];\r\n      const p2 = this.points[i + 1];\r\n\r\n      const dx = p2.x - p1.x;\r\n      const dy = p2.y - p1.y;\r\n      const steps = Math.max(Math.abs(dx), Math.abs(dy));\r\n\r\n      const xIncrement = dx / steps;\r\n      const yIncrement = dy / steps;\r\n\r\n      let x = p1.x;\r\n      let y = p1.y;\r\n\r\n      for (let step = 0; step <= steps; step++) {\r\n        for (let w = 0; w < lineWidth; w++) {\r\n          for (let h = 0; h < lineWidth; h++) {\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(Math.round(x + w), Math.round(y + h), 1, 1);\r\n          }\r\n        }\r\n        x += xIncrement;\r\n        y += yIncrement;\r\n      }\r\n    }\r\n\r\n    ctx.restore();\r\n\r\n    this.prevStartX = startX;\r\n    this.prevStartY = startY;\r\n    this.prevEndX = endX;\r\n    this.prevEndY = endY;\r\n  }\r\n\r\n  private initializePoints(\r\n    startX: number,\r\n    startY: number,\r\n    endX: number,\r\n    endY: number,\r\n  ): Point[] {\r\n    const points: Point[] = [];\r\n    for (let i = 0; i < this.segments; i++) {\r\n      const t = i / (this.segments - 1);\r\n      points.push({\r\n        x: startX + (endX - startX) * t,\r\n        y: startY + (endY - startY) * t,\r\n        oldX: startX + (endX - startX) * t,\r\n        oldY: startY + (endY - startY) * t,\r\n        velocityX: 0,\r\n        velocityY: 0,\r\n        angle: Random.rand() * Math.PI * 2,\r\n      });\r\n    }\r\n    return points;\r\n  }\r\n\r\n  private applyTurbulence(point: Point, index: number): void {\r\n    point.angle += Math.sin(this.time * 0.1 + index * 0.5) * this.angleChange;\r\n\r\n    const turbulenceX = Math.cos(point.angle) * this.turbulence;\r\n    const turbulenceY = Math.sin(point.angle) * this.turbulence;\r\n\r\n    point.velocityX += turbulenceX;\r\n    point.velocityY += turbulenceY;\r\n\r\n    point.velocityX = Math.min(\r\n      Math.max(point.velocityX, -this.maxVelocity),\r\n      this.maxVelocity,\r\n    );\r\n    point.velocityY = Math.min(\r\n      Math.max(point.velocityY, -this.maxVelocity),\r\n      this.maxVelocity,\r\n    );\r\n  }\r\n\r\n  tick = () => {\r\n    if (this.parent.dead) {\r\n      this.destroy();\r\n    }\r\n  };\r\n\r\n  private simulateRope(\r\n    startX: number,\r\n    startY: number,\r\n    endX: number,\r\n    endY: number,\r\n    delta: number,\r\n  ): void {\r\n    const iterationsThisFrame = Math.ceil(this.iterations * delta);\r\n\r\n    for (let iteration = 0; iteration < iterationsThisFrame; iteration++) {\r\n      for (let i = 1; i < this.points.length - 1; i++) {\r\n        const point = this.points[i];\r\n        const prevPoint = this.points[i - 1];\r\n        const nextPoint = this.points[i + 1];\r\n\r\n        const springForceXPrev = (prevPoint.x - point.x) * this.springStiffness;\r\n        const springForceYPrev = (prevPoint.y - point.y) * this.springStiffness;\r\n        const springForceXNext = (nextPoint.x - point.x) * this.springStiffness;\r\n        const springForceYNext = (nextPoint.y - point.y) * this.springStiffness;\r\n\r\n        this.applyTurbulence(point, i);\r\n\r\n        point.velocityX =\r\n          (point.velocityX + springForceXPrev + springForceXNext) *\r\n          this.damping;\r\n        point.velocityY =\r\n          (point.velocityY + springForceYPrev + springForceYNext) *\r\n          this.damping;\r\n\r\n        const relativeVXPrev = prevPoint.velocityX - point.velocityX;\r\n        const relativeVYPrev = prevPoint.velocityY - point.velocityY;\r\n        const relativeVXNext = nextPoint.velocityX - point.velocityX;\r\n        const relativeVYNext = nextPoint.velocityY - point.velocityY;\r\n\r\n        point.velocityX +=\r\n          (relativeVXPrev + relativeVXNext) * this.springDamping;\r\n        point.velocityY +=\r\n          (relativeVYPrev + relativeVYNext) * this.springDamping;\r\n\r\n        point.oldX = point.x;\r\n        point.oldY = point.y;\r\n\r\n        point.x += point.velocityX;\r\n        point.y += point.velocityY + this.gravity;\r\n      }\r\n\r\n      const segmentLength =\r\n        Math.sqrt(Math.pow(endX - startX, 2) + Math.pow(endY - startY, 2)) /\r\n        (this.segments - 1);\r\n\r\n      for (\r\n        let constraintIteration = 0;\r\n        constraintIteration < 2;\r\n        constraintIteration++\r\n      ) {\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n          const p1 = this.points[i];\r\n          const p2 = this.points[i + 1];\r\n\r\n          const dx = p2.x - p1.x;\r\n          const dy = p2.y - p1.y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n          const difference = segmentLength - distance;\r\n          const percent = difference / distance / 2;\r\n          const offsetX = dx * percent;\r\n          const offsetY = dy * percent;\r\n\r\n          if (i > 0) {\r\n            p1.x -= offsetX * 1.5;\r\n            p1.y -= offsetY * 1.5;\r\n          }\r\n          if (i < this.points.length - 2) {\r\n            p2.x += offsetX * 1.5;\r\n            p2.y += offsetY * 1.5;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.points[0].x = startX;\r\n    this.points[0].y = startY;\r\n    this.points[0].oldX = startX;\r\n    this.points[0].oldY = startY;\r\n    this.points[this.points.length - 1].x = endX;\r\n    this.points[this.points.length - 1].y = endY;\r\n    this.points[this.points.length - 1].oldX = endX;\r\n    this.points[this.points.length - 1].oldY = endY;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    this.drawableY = this.y - 0.01;\r\n    this.render(\r\n      this.targetX,\r\n      this.targetY,\r\n      this.x,\r\n      this.y,\r\n      this.color,\r\n      2,\r\n      delta,\r\n      this.compositeOperation,\r\n    );\r\n  };\r\n\r\n  static renderBeam(\r\n    x1: number,\r\n    y1: number,\r\n    x2: number,\r\n    y2: number,\r\n    color: string = \"cyan\",\r\n    lineWidth: number = 2,\r\n    alpha: number = 1,\r\n  ): void {\r\n    const ctx = Game.ctx;\r\n    ctx.globalAlpha = alpha;\r\n\r\n    const startX = x1 * GameConstants.TILESIZE + 0.5 * GameConstants.TILESIZE;\r\n    const startY = y1 * GameConstants.TILESIZE + 0.5 * GameConstants.TILESIZE;\r\n    const endX = x2 * GameConstants.TILESIZE + 0.5 * GameConstants.TILESIZE;\r\n    const endY = y2 * GameConstants.TILESIZE + 0.5 * GameConstants.TILESIZE;\r\n\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    ctx.moveTo(startX, startY);\r\n    ctx.lineTo(endX, endY);\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.strokeStyle = color;\r\n    ctx.stroke();\r\n    ctx.restore();\r\n  }\r\n\r\n  destroy(): void {\r\n    this.active = false;\r\n    this.points = [];\r\n    this.dead = true;\r\n  }\r\n\r\n  isActive(): boolean {\r\n    return this.active;\r\n  }\r\n}\r\n","import { LevelConstants } from \"../level/levelConstants\";\r\nimport { Game } from \"../game\";\r\nimport { guiButton } from \"./guiButton\";\r\n\r\nexport class LinkButton extends guiButton {\r\n  constructor({\r\n    text,\r\n    linkUrl,\r\n    x,\r\n    y,\r\n  }: {\r\n    text: string;\r\n    linkUrl: string;\r\n    x: number;\r\n    y: number;\r\n  }) {\r\n    const width = Game.measureText(text).width + 10;\r\n    const height = 16;\r\n\r\n    super(\r\n      x,\r\n      y,\r\n      width,\r\n      height,\r\n      text,\r\n      () => window.open(linkUrl, \"_blank\", \"noopener,noreferrer\"),\r\n      false,\r\n    );\r\n  }\r\n\r\n  draw() {\r\n    Game.ctx.save();\r\n    Game.ctx.imageSmoothingEnabled = false;\r\n\r\n    // Draw button background\r\n    Game.ctx.fillStyle = \"rgba(100, 100, 100, 0.8)\";\r\n    Game.ctx.fillRect(\r\n      Math.round(this.x),\r\n      Math.round(this.y),\r\n      Math.round(this.width),\r\n      Math.round(this.height),\r\n    );\r\n\r\n    // Draw button border\r\n    Game.ctx.fillStyle = LevelConstants.LEVEL_TEXT_COLOR;\r\n    Game.ctx.lineWidth = 1;\r\n    Game.ctx.strokeRect(\r\n      Math.round(this.x),\r\n      Math.round(this.y),\r\n      Math.round(this.width),\r\n      Math.round(this.height),\r\n    );\r\n\r\n    // Draw button text\r\n    Game.ctx.fillStyle = \"rgba(255, 255, 255, 1)\";\r\n    const textWidth = Game.measureText(this.text).width;\r\n    const textX = this.x + (this.width - textWidth) / 2;\r\n    const textY = this.y + this.height / 2 - Game.letter_height / 2;\r\n\r\n    Game.ctx.fillStyle = LevelConstants.LEVEL_TEXT_COLOR;\r\n    Game.fillText(this.text, Math.round(textX), Math.round(textY));\r\n    Game.ctx.restore();\r\n  }\r\n}\r\n","import { Room } from \"../room/room\";\r\nimport { Player } from \"../player/player\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Drawable } from \"../drawable/drawable\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { IdGenerator } from \"../globalStateManager/IdGenerator\";\r\n\r\nexport enum SkinType {\r\n  DUNGEON = 0,\r\n  CAVE = 1,\r\n  FOREST = 2,\r\n  CASTLE = 3,\r\n  GLACIER = 4,\r\n  DARK_CASTLE = 5,\r\n  PLACEHOLDER = 6,\r\n  DESERT = 7,\r\n  MAGMA_CAVE = 8,\r\n  DARK_DUNGEON = 9,\r\n}\r\n\r\nexport abstract class Tile extends Drawable {\r\n  globalId: string;\r\n  x: number;\r\n  y: number;\r\n  room: Room;\r\n  skin: SkinType;\r\n  isDoor: boolean;\r\n  opacity: number;\r\n  name: string = \"\";\r\n\r\n  constructor(room: Room, x: number, y: number) {\r\n    super();\r\n    this.globalId = IdGenerator.generate(\"T\");\r\n    this.skin = room.skin;\r\n    this.room = room;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.drawableY = y;\r\n    this.isDoor = false;\r\n    this.opacity = 1;\r\n  }\r\n\r\n  getName = () => {\r\n    return this.name;\r\n  };\r\n\r\n  hasPlayer = (player: Player) => {\r\n    if (player.x === this.x && player.y === this.y) return true;\r\n    else return false;\r\n  };\r\n\r\n  shadeAmount = (\r\n    offsetX: number = 0,\r\n    offsetY: number = 0,\r\n    disable: boolean = true,\r\n  ) => {\r\n    if (GameConstants.SMOOTH_LIGHTING && disable) return 0;\r\n    return this.room.softVis[this.x + offsetX][this.y + offsetY];\r\n  };\r\n\r\n  isSolid = (): boolean => {\r\n    return false;\r\n  };\r\n  canCrushEnemy = (): boolean => {\r\n    return false;\r\n  };\r\n  isOpaque = (): boolean => {\r\n    return false;\r\n  };\r\n  onCollide = (player: Player) => {};\r\n  onCollideEnemy = (enemy: Entity) => {};\r\n  tick = () => {};\r\n  tickEnd = () => {};\r\n\r\n  draw = (delta: number) => {};\r\n  drawUnderPlayer = (delta: number) => {};\r\n  drawAbovePlayer = (delta: number) => {};\r\n  drawAboveShading = (delta: number) => {};\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Equippable } from \"../equippable\";\r\nimport { Torch } from \"./torch\";\r\nimport { Lantern } from \"./lantern\";\r\nimport { Inventory } from \"../../inventory/inventory\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Light } from \"./light\";\r\n\r\nexport class Candle extends Light {\r\n  static itemName = \"candle\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.fuel = 100; //how many turns before it burns out\r\n    this.tileX = 27;\r\n    this.tileY = 0;\r\n    this.name = \"candle\";\r\n    this.fuelCap = 100;\r\n    this.radius = 4;\r\n    this.stackable = true;\r\n    this.maxBrightness = 2;\r\n    this.maxBrightness = 0.25;\r\n  }\r\n}\r\n","export class Drawable {\r\n  drawableY = 0;\r\n  // When true, this drawable should be rendered above the Player\r\n  shouldDrawAbovePlayer: boolean = false;\r\n\r\n  draw = (delta: number) => {};\r\n\r\n  hasBloom: boolean = false;\r\n  bloomColor: string = \"#FFFFFF\";\r\n  bloomAlpha: number = 1;\r\n  softBloomAlpha: number = 0;\r\n  updateBloom = (delta: number) => {\r\n    if (this.hasBloom) {\r\n      let diff = this.softBloomAlpha - this.bloomAlpha;\r\n      if (Math.abs(diff) > 0.001) {\r\n        this.softBloomAlpha = this.softBloomAlpha - diff * 0.1 * delta;\r\n      } else {\r\n        this.softBloomAlpha = this.bloomAlpha;\r\n      }\r\n    } else {\r\n      this.softBloomAlpha = 0;\r\n    }\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\n\r\nexport class CameraAnimation {\r\n  constructor(\r\n    public x: number,\r\n    public y: number,\r\n    public duration: number,\r\n    public speed: number,\r\n    public frame: number,\r\n    public active: boolean,\r\n  ) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.speed = speed;\r\n    this.frame = 0;\r\n    this.active = false;\r\n    this.fast = false;\r\n  }\r\n  public fast: boolean;\r\n}\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Utils } from \"../../utility/utils\";\r\n\r\nexport class CrabEnemy extends Enemy {\r\n  ticks: number;\r\n  frame: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  static difficulty: number = 1;\r\n  static tileX: number = 8;\r\n  static tileY: number = 4;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 8;\r\n    this.tileY = 4;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.name = \"crab\";\r\n    this.orthogonalAttack = true;\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 24;\r\n    this.baseDamage = 0.5;\r\n    //if (drop) this.drop = drop;\r\n    this.drawYOffset = 0.25;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  get alertText() {\r\n    return `New Enemy Spotted: Crab \r\n    Health: ${this.health}\r\n    Attack Pattern: Omnidirectional\r\n    Moves every other turn`;\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          this.ticks++;\r\n          if (this.ticks % 2 === 1) {\r\n            this.rumbling = true;\r\n            let oldX = this.x;\r\n            let oldY = this.y;\r\n            let disablePositions = Array<astar.Position>();\r\n\r\n            for (const e of this.room.entities) {\r\n              if (e !== this) {\r\n                disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n              }\r\n            }\r\n\r\n            for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n              for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n                if (\r\n                  this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                  (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n                ) {\r\n                  // don't walk on active spiketraps\r\n                  disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n                }\r\n              }\r\n            }\r\n\r\n            let grid = [];\r\n            for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n              grid[x] = [];\r\n              for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n                if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                  grid[x][y] = this.room.roomArray[x][y];\r\n                else grid[x][y] = false;\r\n              }\r\n            }\r\n            this.target =\r\n              this.getAverageLuminance() > 0 // 0.8\r\n                ? this.targetPlayer\r\n                : this.room.getExtremeLuminanceFromPoint(this.x, this.y)\r\n                    .darkest;\r\n            let moves = astar.AStar.search(\r\n              grid,\r\n              this,\r\n              this.target,\r\n              disablePositions,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              this.lastPlayerPos,\r\n            );\r\n            if (moves.length > 0) {\r\n              let hitPlayer = false;\r\n              for (const i in this.game.players) {\r\n                if (\r\n                  this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                  this.game.players[i].x === moves[0].pos.x &&\r\n                  this.game.players[i].y === moves[0].pos.y\r\n                ) {\r\n                  this.game.players[i].hurt(this.hit(), this.name);\r\n                  this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                  this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                  if (\r\n                    this.game.players[i] ===\r\n                    this.game.players[this.game.localPlayerID]\r\n                  )\r\n                    this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n                  hitPlayer = true;\r\n                }\r\n              }\r\n\r\n              if (!hitPlayer) {\r\n                this.tryMove(moves[0].pos.x, moves[0].pos.y);\r\n                this.setDrawXY(oldX, oldY);\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n              }\r\n            }\r\n            this.rumbling = false;\r\n          } else {\r\n            this.rumbling = true;\r\n            /*\r\n            if (\r\n              (this.target.x === this.targetPlayer.x &&\r\n                this.target.y === this.targetPlayer.y) ||\r\n              Utils.distance(\r\n                this.targetPlayer.x,\r\n                this.targetPlayer.y,\r\n                this.x,\r\n                this.y,\r\n              ) <= 2\r\n            )\r\n              */ {\r\n              this.makeHitWarnings();\r\n            }\r\n          }\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                if (this.ticks % 2 === 0) {\r\n                  /*\r\n                  if (\r\n                    (this.target.x === this.targetPlayer.x &&\r\n                      this.target.y === this.targetPlayer.y) ||\r\n                    Utils.distance(\r\n                      this.targetPlayer.x,\r\n                      this.targetPlayer.y,\r\n                      this.x,\r\n                      this.y,\r\n                    ) <= 2\r\n                  ) */ {\r\n                    this.makeHitWarnings();\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      if (this.ticks % 2 === 0) {\r\n        this.tileX = 9;\r\n        this.tileY = 4;\r\n      } else {\r\n        this.tileX = 8;\r\n        this.tileY = 4;\r\n      }\r\n      let rumbleX = this.rumble(this.rumbling, this.frame, this.direction).x;\r\n      let rumbleY = this.rumble(this.rumbling, this.frame, this.direction).y;\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX,\r\n        this.tileY + this.direction,\r\n        1,\r\n        1,\r\n        this.x - this.drawX + rumbleX,\r\n        this.y - this.drawYOffset - this.drawY + rumbleY,\r\n        1 * this.crushX,\r\n        1 * this.crushY,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n      if (this.crushed) {\r\n        this.crushAnim(delta);\r\n      }\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta, 0, 0.75 * GameConstants.TILESIZE);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta, 0, 0.75 * GameConstants.TILESIZE);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Weapon } from \"./weapon\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { SlashParticle } from \"../../particle/slashParticle\";\r\nimport type { Enemy } from \"../../entity/enemy/enemy\";\r\nimport { AttackAnimation } from \"../../particle/attackAnimation\";\r\n\r\nexport class Spear extends Weapon {\r\n  static itemName = \"spear\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 24;\r\n    this.tileY = 0;\r\n    this.name = \"spear\";\r\n    this.description =\r\n      \"Hits enemies in front of you within a range of 2 tiles.\";\r\n    this.iconOffset = 0.1; //default 0\r\n    this.offsetY = -0.25; //default -0.25\r\n    this.useCost = 1;\r\n    this.degradeable = false;\r\n  }\r\n\r\n  weaponMove = (newX: number, newY: number): boolean => {\r\n    let newX2 = 2 * newX - this.wielder.x;\r\n    let newY2 = 2 * newY - this.wielder.y;\r\n    let hitEnemies = false;\r\n\r\n    // Check if there are any pushables at first tile - these completely block the spear\r\n    const pushables = this.getEntitiesAt(newX, newY).filter((e) => e.pushable);\r\n    if (pushables.length > 0) return true;\r\n\r\n    // Get entities at both tiles\r\n    const entitiesAtFirstTile = this.getEntitiesAt(newX, newY);\r\n    const entitiesAtSecondTile = this.getEntitiesAt(newX2, newY2);\r\n\r\n    // Check if first tile has non-enemy entities that would block the spear\r\n    const nonEnemiesAtFirstTile = entitiesAtFirstTile.filter(\r\n      (e) => !e.pushable && !e.isEnemy,\r\n    );\r\n    if (nonEnemiesAtFirstTile.length > 0) {\r\n      // Hit non-enemy entities at first tile and stop (blocked)\r\n      for (const entity of nonEnemiesAtFirstTile) {\r\n        this.attack(entity, this.damage + this.wielder.damageBonus);\r\n      }\r\n      this.hitSound();\r\n      this.attackAnimation(newX, newY);\r\n      this.game.rooms[this.wielder.levelID].tick(this.wielder);\r\n      this.shakeScreen(newX, newY);\r\n      this.degrade();\r\n      return false;\r\n    }\r\n\r\n    // Hit all enemies at first tile (spear penetrates through)\r\n    const enemiesAtFirstTile = entitiesAtFirstTile.filter(\r\n      (e) => !e.pushable && e.isEnemy,\r\n    );\r\n    if (enemiesAtFirstTile.length > 0) {\r\n      for (const enemy of enemiesAtFirstTile) {\r\n        this.attack(enemy, this.damage + this.wielder.damageBonus);\r\n      }\r\n      hitEnemies = true;\r\n    }\r\n\r\n    // Hit all enemies at second tile (if tile is valid and not solid)\r\n    if (\r\n      this.game.rooms[this.wielder.levelID].roomArray[newX2] &&\r\n      this.game.rooms[this.wielder.levelID].roomArray[newX2][newY2] &&\r\n      !this.game.rooms[this.wielder.levelID].roomArray[newX2][newY2].isSolid()\r\n    ) {\r\n      const enemiesAtSecondTile = entitiesAtSecondTile.filter(\r\n        (e) => !e.pushable && e.isEnemy,\r\n      );\r\n      if (enemiesAtSecondTile.length > 0) {\r\n        for (const enemy of enemiesAtSecondTile) {\r\n          this.attack(enemy, this.damage + this.wielder.damageBonus);\r\n        }\r\n        hitEnemies = true;\r\n      }\r\n    }\r\n\r\n    if (hitEnemies) {\r\n      this.hitSound();\r\n      this.attackAnimation(newX2, newY2); // Show animation at the furthest point\r\n      this.game.rooms[this.wielder.levelID].tick(this.wielder);\r\n      this.shakeScreen(newX2, newY2);\r\n      this.degrade();\r\n    }\r\n\r\n    return !hitEnemies;\r\n  };\r\n}\r\n","export class GameplaySettings {\r\n  static readonly LIMIT_ENEMY_TYPES = true;\r\n  static readonly MEDIAN_ROOM_DENSITY = 0.25;\r\n  static readonly UNLIMITED_SPAWNERS = true;\r\n  static readonly THROTTLE_SPAWNERS = true;\r\n  static NO_ENEMIES = false;\r\n  static EQUIP_USES_TURN = false;\r\n  static UNBREAKABLE_ITEMGROUP_LOOT = false;\r\n  static readonly PRESET_BOSSES = false;\r\n  static readonly PNG_LEVEL_PROBABILITY = 0.1;\r\n\r\n  static readonly MAIN_PATH_BRANCHING = 0.1;\r\n  static readonly MAIN_PATH_LOOPINESS = 0.05;\r\n\r\n  static readonly BASE_ENEMY_ALERT_RANGE = 4;\r\n  static readonly BASE_ENEMY_ALERT_NEARBY_RANGE = 2;\r\n\r\n  // === ENEMY POOL SETTINGS ===\r\n\r\n  // Enemy Type Progression\r\n  static readonly NEW_ENEMIES_PER_LEVEL = 2; // How many new enemy types to add per level when LIMIT_ENEMY_TYPES is true\r\n  static readonly ENEMY_TYPES_BASE_COUNT = 4; // Base number added to sqrt formula for enemy type calculation\r\n  static readonly DEPTH_ZERO_ENEMY_TYPES = 3; // Number of enemy types available at depth 0\r\n\r\n  // Special Enemy Depth Requirements\r\n  static readonly SPAWNER_MIN_DEPTH = 0; // Minimum depth before spawners can appear (depth > this value)\r\n  static readonly OCCULTIST_MIN_DEPTH = 1; // Minimum depth before occultists can appear (depth > this value)\r\n\r\n  // Special Enemy Spawn Probabilities\r\n  static readonly SPAWNER_SPAWN_CHANCE = 0.1; // Probability per attempt to spawn a spawner (10%)\r\n  static readonly OCCULTIST_SPAWN_CHANCE = 0.1; // Probability per attempt to spawn an occultist (10%)\r\n\r\n  // Special Enemy Area Thresholds\r\n  static readonly SPAWNER_AREA_THRESHOLD = 50; // Room area divided by this = max possible spawners\r\n  static readonly OCCULTIST_AREA_THRESHOLD = 200; // Room area divided by this = max possible occultists\r\n\r\n  // Enemy Density Settings\r\n  static readonly ENEMY_DENSITY_DEPTH_MULTIPLIER = 0.04; // Multiplied by (depth + 2) for base density\r\n  static readonly ENEMY_DENSITY_DEPTH_OFFSET = 2; // Added to depth before multiplying\r\n  static readonly MAX_ENEMY_DENSITY = 0.25; // Maximum enemy density cap\r\n  static readonly FOREST_ENEMY_REDUCTION = 0.25; // Multiplier for enemy count in forest environments\r\n\r\n  static readonly MAX_OCCULTIST_SHIELDS = 7; // Maximum number of shields an occultist can have\r\n  static readonly MAX_EXALTER_BUFFS = 7; // Maximum number of buffs an exalter can have\r\n}\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { GlowBugs } from \"../../item/light/glowBugs\";\r\nimport { LightSource } from \"../../lighting/lightSource\";\r\nimport { Entity } from \"../entity\";\r\n\r\nexport class GlowBugEnemy extends Entity {\r\n  ticks: number;\r\n  frame: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  static difficulty: number = 1;\r\n  static tileX: number = 8;\r\n  static tileY: number = 4;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 8;\r\n    this.tileY = 0;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.name = \"glowbug\";\r\n    this.orthogonalAttack = true;\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 24;\r\n    //if (drop) this.drop = drop;\r\n    this.drawYOffset = 1;\r\n    this.hasShadow = true;\r\n    this.hasHitParticles = false;\r\n    this.hasDamageNumbers = false;\r\n    this.hasBloom = true;\r\n    this.bloomAlpha = 1;\r\n    this.bloomColor = \"#054B4B\";\r\n\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      6,\r\n      [5, 75, 75],\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n    this.drops = [new GlowBugs(this.room, this.x, this.y)]; //this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  get alertText() {\r\n    return `New Enemy Spotted: Crab \r\n    Health: ${this.health}\r\n    Attack Pattern: Omnidirectional\r\n    Moves every other turn`;\r\n  }\r\n\r\n  hit = (): number => {\r\n    return 0.5;\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    this.seenPlayer = true;\r\n    this.aggro = true;\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      this.wander();\r\n\r\n      this.lightSource.x = this.x + 0.5;\r\n      this.lightSource.y = this.y + 0.5;\r\n      this.room.updateLighting();\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n\r\n      this.frame += 0.15 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n      this.tileX = 8 + this.frame;\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        Math.floor(this.tileX),\r\n        this.tileY,\r\n        1,\r\n        1,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        1,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n      if (this.crushed) {\r\n        this.crushAnim(delta);\r\n      }\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta, 0, 0.75 * GameConstants.TILESIZE);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta, 0, 0.75 * GameConstants.TILESIZE);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Projectile } from \"./projectile\";\r\nimport { Game } from \"../game\";\r\nimport { WizardEnemy } from \"../entity/enemy/wizardEnemy\";\r\nimport { Player } from \"../player/player\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Room } from \"../room/room\";\r\nimport { GenericParticle } from \"../particle/genericParticle\";\r\nimport { Sound } from \"../sound/sound\";\r\nimport { HitWarning } from \"../drawable/hitWarning\";\r\nimport { ImageParticle } from \"../particle/imageParticle\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\n\r\nexport class EnemySpawnAnimation extends Projectile {\r\n  readonly ANIM_COUNT = 3;\r\n\r\n  room: Room;\r\n  enemy: Entity;\r\n  frame: number;\r\n  constructor(room: Room, enemy: Entity, x: number, y: number) {\r\n    super(enemy, x, y);\r\n    this.room = room;\r\n    this.enemy = enemy;\r\n    this.frame = 0;\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#00BFFF\";\r\n    this.bloomOffsetY = -0.5;\r\n\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      1,\r\n      [0, 50, 150],\r\n      1,\r\n    );\r\n    this.room.lightSources.push(this.lightSource);\r\n    this.room.updateLighting();\r\n  }\r\n\r\n  tick = () => {\r\n    if (this.room === this.room.game.room) Sound.enemySpawn();\r\n\r\n    let hitPlayer = false;\r\n    for (const i in this.room.game.players) {\r\n      if (\r\n        this.room.game.players[i].x === this.x &&\r\n        this.room.game.players[i].y === this.y\r\n      ) {\r\n        this.room.game.players[i].hurt(0.5, \"reaper\");\r\n        hitPlayer = true;\r\n      }\r\n    }\r\n    if (!hitPlayer) {\r\n      this.dead = true;\r\n      this.enemy.skipNextTurns = 1;\r\n      this.room.entities.push(this.enemy);\r\n      this.enemy.createHitParticles();\r\n      this.lightSource.dead = true;\r\n    } else {\r\n      this.room.hitwarnings.push(\r\n        new HitWarning(this.room.game, this.x, this.y, this.x, this.y),\r\n      );\r\n    }\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    if (this.dead) return;\r\n\r\n    this.frame += 0.25 * delta;\r\n    if (this.frame >= 8) this.frame = 0;\r\n    for (let i = 0; i < this.ANIM_COUNT; i++) {\r\n      let offsetX = 0;\r\n      Game.drawFX(\r\n        Math.floor(this.frame),\r\n        27,\r\n        1,\r\n        1,\r\n        this.x + Math.round(offsetX) / 16.0,\r\n        this.y - 0.5,\r\n        1,\r\n        1,\r\n      );\r\n    }\r\n  };\r\n}\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { HitWarning } from \"../../drawable/hitWarning\";\r\n\r\nexport class BeetleEnemy extends Enemy {\r\n  ticks: number;\r\n  frame: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  static difficulty: number = 1;\r\n  static tileX: number = 8;\r\n  static tileY: number = 4;\r\n  revealTick: number;\r\n  jumpDistance: number;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 13;\r\n    this.tileY = 4;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.name = \"beetle\";\r\n    this.orthogonalAttack = true;\r\n    this.diagonalAttack = false;\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 24;\r\n    //if (drop) this.drop = drop;\r\n    this.drawYOffset = 1.2;\r\n    this.revealTick = 0;\r\n    this.hasShadow = true;\r\n    this.jumpHeight = 1;\r\n    this.jumpDistance = 1;\r\n    this.attackRange = 1;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  get alertText() {\r\n    return `New Enemy Spotted: Beetle \r\n    Health: ${this.health}\r\n    Attack Pattern: Omnidirectional\r\n    Moves every other turn`;\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  toggleReveal = () => {\r\n    let ticksSince = this.ticks - this.revealTick;\r\n\r\n    this.revealTick = this.ticks;\r\n  };\r\n\r\n  jump = (delta: number) => {\r\n    //console.log(`this.drawX, this.drawY: ${this.drawX}, ${this.drawY}`);\r\n    let j = Math.max(Math.abs(this.drawX), Math.abs(this.drawY));\r\n    if (j > 2) {\r\n      this.jumpDistance = 3;\r\n    } else if (j > 1) {\r\n      this.jumpDistance = 2;\r\n    }\r\n    this.jumpY = Math.sin((j / this.jumpDistance) * Math.PI) * this.jumpHeight;\r\n    if (this.jumpY < 0.01 && this.jumpY > -0.01) {\r\n      this.jumpY = 0;\r\n      this.jumpDistance = 1;\r\n    }\r\n    if (this.jumpY > this.jumpHeight) this.jumpY = this.jumpHeight;\r\n  };\r\n\r\n  // Helpers to keep movement logic concise\r\n  private isTileFree = (x: number, y: number): boolean => {\r\n    if (!this.room.roomArray[x] || !this.room.roomArray[x][y]) return false;\r\n    const t = this.room.roomArray[x][y];\r\n    if (t.isSolid()) return false;\r\n    if (t instanceof SpikeTrap && (t as SpikeTrap).on) return false;\r\n    for (const e of this.room.entities) {\r\n      if (e !== this && e.x === x && e.y === y) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  private getTwoTileCandidates = (\r\n    startX: number,\r\n    startY: number,\r\n  ): Array<{\r\n    endX: number;\r\n    endY: number;\r\n    axis: \"x\" | \"y\";\r\n    dx: number;\r\n    dy: number;\r\n  }> => {\r\n    const directions = [\r\n      { dx: 1, dy: 0, axis: \"x\" as const },\r\n      { dx: -1, dy: 0, axis: \"x\" as const },\r\n      { dx: 0, dy: 1, axis: \"y\" as const },\r\n      { dx: 0, dy: -1, axis: \"y\" as const },\r\n    ];\r\n    const candidates = [] as Array<{\r\n      endX: number;\r\n      endY: number;\r\n      axis: \"x\" | \"y\";\r\n      dx: number;\r\n      dy: number;\r\n    }>;\r\n    for (const d of directions) {\r\n      const midX = startX + d.dx;\r\n      const midY = startY + d.dy;\r\n      const endX = startX + 2 * d.dx;\r\n      const endY = startY + 2 * d.dy;\r\n      if (this.isTileFree(midX, midY) && this.isTileFree(endX, endY)) {\r\n        candidates.push({ endX, endY, axis: d.axis, dx: d.dx, dy: d.dy });\r\n      }\r\n    }\r\n    return candidates;\r\n  };\r\n\r\n  private getThreeTileCandidates = (\r\n    startX: number,\r\n    startY: number,\r\n  ): Array<{\r\n    endX: number;\r\n    endY: number;\r\n    axis: \"x\" | \"y\";\r\n    dx: number;\r\n    dy: number;\r\n  }> => {\r\n    const directions = [\r\n      { dx: 1, dy: 0, axis: \"x\" as const },\r\n      { dx: -1, dy: 0, axis: \"x\" as const },\r\n      { dx: 0, dy: 1, axis: \"y\" as const },\r\n      { dx: 0, dy: -1, axis: \"y\" as const },\r\n    ];\r\n    const candidates = [] as Array<{\r\n      endX: number;\r\n      endY: number;\r\n      axis: \"x\" | \"y\";\r\n      dx: number;\r\n      dy: number;\r\n    }>;\r\n    for (const d of directions) {\r\n      const mid1X = startX + d.dx;\r\n      const mid1Y = startY + d.dy;\r\n      const mid2X = startX + 2 * d.dx;\r\n      const mid2Y = startY + 2 * d.dy;\r\n      const endX = startX + 3 * d.dx;\r\n      const endY = startY + 3 * d.dy;\r\n      if (\r\n        this.isTileFree(mid1X, mid1Y) &&\r\n        this.isTileFree(mid2X, mid2Y) &&\r\n        this.isTileFree(endX, endY)\r\n      ) {\r\n        candidates.push({ endX, endY, axis: d.axis, dx: d.dx, dy: d.dy });\r\n      }\r\n    }\r\n    return candidates;\r\n  };\r\n\r\n  private pickBestCandidate = (\r\n    candidates: Array<{\r\n      endX: number;\r\n      endY: number;\r\n      axis: \"x\" | \"y\";\r\n      dx: number;\r\n      dy: number;\r\n    }>,\r\n    targetX: number,\r\n    targetY: number,\r\n    preferXAxis: boolean,\r\n    dxToTarget: number,\r\n    dyToTarget: number,\r\n  ) => {\r\n    const signX = dxToTarget === 0 ? 0 : dxToTarget > 0 ? 1 : -1;\r\n    const signY = dyToTarget === 0 ? 0 : dyToTarget > 0 ? 1 : -1;\r\n    candidates.sort((a, b) => {\r\n      const da = Math.abs(a.endX - targetX) + Math.abs(a.endY - targetY);\r\n      const db = Math.abs(b.endX - targetX) + Math.abs(b.endY - targetY);\r\n      if (da !== db) return da - db;\r\n      if (preferXAxis) {\r\n        if (a.axis !== b.axis) return a.axis === \"x\" ? -1 : 1;\r\n      } else {\r\n        if (a.axis !== b.axis) return a.axis === \"y\" ? -1 : 1;\r\n      }\r\n      const aTowards = (a.dx !== 0 ? a.dx === signX : a.dy === signY) ? -1 : 1;\r\n      const bTowards = (b.dx !== 0 ? b.dx === signX : b.dy === signY) ? -1 : 1;\r\n      if (aTowards !== bTowards) return aTowards - bTowards;\r\n      return 0;\r\n    });\r\n    return candidates[0];\r\n  };\r\n\r\n  private getOneTileCandidates = (\r\n    startX: number,\r\n    startY: number,\r\n  ): Array<{ x: number; y: number }> => {\r\n    const directions = [\r\n      { dx: 1, dy: 0 },\r\n      { dx: -1, dy: 0 },\r\n      { dx: 0, dy: 1 },\r\n      { dx: 0, dy: -1 },\r\n    ];\r\n    const candidates: Array<{ x: number; y: number }> = [];\r\n\r\n    for (const d of directions) {\r\n      const newX = startX + d.dx;\r\n      const newY = startY + d.dy;\r\n      if (this.isTileFree(newX, newY)) {\r\n        candidates.push({ x: newX, y: newY });\r\n      }\r\n    }\r\n    return candidates;\r\n  };\r\n\r\n  private pickBestOneTileCandidate = (\r\n    candidates: Array<{ x: number; y: number }>,\r\n    targetX: number,\r\n    targetY: number,\r\n    preferXAxis: boolean,\r\n    dxToTarget: number,\r\n    dyToTarget: number,\r\n  ) => {\r\n    const signX = dxToTarget === 0 ? 0 : dxToTarget > 0 ? 1 : -1;\r\n    const signY = dyToTarget === 0 ? 0 : dyToTarget > 0 ? 1 : -1;\r\n\r\n    candidates.sort((a, b) => {\r\n      const da = Math.abs(a.x - targetX) + Math.abs(a.y - targetY);\r\n      const db = Math.abs(b.x - targetX) + Math.abs(b.y - targetY);\r\n      if (da !== db) return da - db;\r\n\r\n      // Prefer movement along the preferred axis\r\n      const aAxis =\r\n        Math.abs(a.x - targetX) > Math.abs(a.y - targetY) ? \"x\" : \"y\";\r\n      const bAxis =\r\n        Math.abs(b.x - targetX) > Math.abs(b.y - targetY) ? \"x\" : \"y\";\r\n\r\n      if (preferXAxis) {\r\n        if (aAxis !== bAxis) return aAxis === \"x\" ? -1 : 1;\r\n      } else {\r\n        if (aAxis !== bAxis) return aAxis === \"y\" ? -1 : 1;\r\n      }\r\n\r\n      // Prefer moving toward the target\r\n      const aTowards = (\r\n        a.x > targetX\r\n          ? dxToTarget < 0\r\n          : a.x < targetX\r\n            ? dxToTarget > 0\r\n            : a.y > targetY\r\n              ? dyToTarget < 0\r\n              : a.y < targetY\r\n                ? dyToTarget > 0\r\n                : 0\r\n      )\r\n        ? -1\r\n        : 1;\r\n      const bTowards = (\r\n        b.x > targetX\r\n          ? dxToTarget < 0\r\n          : b.x < targetX\r\n            ? dxToTarget > 0\r\n            : b.y > targetY\r\n              ? dyToTarget < 0\r\n              : b.y < targetY\r\n                ? dyToTarget > 0\r\n                : 0\r\n      )\r\n        ? -1\r\n        : 1;\r\n      if (aTowards !== bTowards) return aTowards - bTowards;\r\n\r\n      return 0;\r\n    });\r\n    return candidates[0];\r\n  };\r\n\r\n  private attackOrMoveTo = (\r\n    destX: number,\r\n    destY: number,\r\n    oldX: number,\r\n    oldY: number,\r\n  ): void => {\r\n    const stepDist = Math.abs(destX - oldX) + Math.abs(destY - oldY);\r\n    let hitPlayer = false;\r\n    for (const i in this.game.players) {\r\n      if (\r\n        this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n        this.game.players[i].x === destX &&\r\n        this.game.players[i].y === destY\r\n      ) {\r\n        // Only allow attacks when moving 2-3 tiles in a single action\r\n        if (stepDist >= 2 && stepDist <= 3) {\r\n          this.game.players[i].hurt(this.hit(), this.name);\r\n          this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n          this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n          if (\r\n            this.game.players[i] === this.game.players[this.game.localPlayerID]\r\n          )\r\n            this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n        }\r\n        hitPlayer = true;\r\n      }\r\n    }\r\n    if (!hitPlayer) {\r\n      this.tryMove(destX, destY);\r\n      this.setDrawXY(oldX, oldY);\r\n      if (this.x > oldX) this.direction = Direction.RIGHT;\r\n      else if (this.x < oldX) this.direction = Direction.LEFT;\r\n      else if (this.y > oldY) this.direction = Direction.DOWN;\r\n      else if (this.y < oldY) this.direction = Direction.UP;\r\n    }\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          this.ticks++;\r\n          if (this.ticks % 2 === 1) {\r\n            this.rumbling = true;\r\n            let oldX = this.x;\r\n            let oldY = this.y;\r\n            let disablePositions = Array<astar.Position>();\r\n\r\n            for (const e of this.room.entities) {\r\n              if (e !== this) {\r\n                disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n              }\r\n            }\r\n\r\n            for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n              for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n                if (\r\n                  this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                  (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n                ) {\r\n                  // don't walk on active spiketraps\r\n                  disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n                }\r\n              }\r\n            }\r\n\r\n            let grid = [];\r\n            for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n              grid[x] = [];\r\n              for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n                if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                  grid[x][y] = this.room.roomArray[x][y];\r\n                else grid[x][y] = false;\r\n              }\r\n            }\r\n            this.target =\r\n              this.getAverageLuminance() > 0\r\n                ? this.targetPlayer\r\n                : this.room.getExtremeLuminanceFromPoint(this.x, this.y)\r\n                    .darkest;\r\n\r\n            // Determine target position: prioritize direct attack if player is adjacent\r\n            let targetPosition = {\r\n              x: this.targetPlayer.x,\r\n              y: this.targetPlayer.y,\r\n            };\r\n\r\n            // Check player Manhattan distance\r\n            const playerDistance =\r\n              Math.abs(this.targetPlayer.x - this.x) +\r\n              Math.abs(this.targetPlayer.y - this.y);\r\n\r\n            if (this.target === this.targetPlayer && playerDistance === 2) {\r\n              // Only consider jumping over if player is not adjacent\r\n              let dx = this.targetPlayer.lastX - this.x;\r\n              let dy = this.targetPlayer.lastY - this.y;\r\n              // constrain to orthogonal intent\r\n              if (dx !== 0 && dy !== 0) {\r\n                if (Math.abs(dx) >= Math.abs(dy)) dy = 0;\r\n                else dx = 0;\r\n              }\r\n              if (\r\n                (dx === 0 && Math.abs(dy) <= 1) ||\r\n                (dy === 0 && Math.abs(dx) <= 1)\r\n              ) {\r\n                const jumpOverX = this.targetPlayer.x + Math.sign(dx);\r\n                const jumpOverY = this.targetPlayer.y + Math.sign(dy);\r\n                if (\r\n                  this.room.roomArray[jumpOverX] &&\r\n                  this.room.roomArray[jumpOverX][jumpOverY] &&\r\n                  !this.room.roomArray[jumpOverX][jumpOverY].isSolid()\r\n                ) {\r\n                  targetPosition = { x: jumpOverX, y: jumpOverY };\r\n                }\r\n              }\r\n            } else if (this.target !== this.targetPlayer) {\r\n              targetPosition = { x: this.target.x, y: this.target.y } as any;\r\n            }\r\n\r\n            // Compute 2-tile jump plans\r\n            const dxToTarget = targetPosition.x - oldX;\r\n            const dyToTarget = targetPosition.y - oldY;\r\n            const preferXAxis = Math.abs(dxToTarget) >= Math.abs(dyToTarget);\r\n\r\n            // First, try to use A* first/second step and extend up to length 3 if possible\r\n            let finalX = this.x;\r\n            let finalY = this.y;\r\n            const moves = astar.AStar.search(\r\n              grid,\r\n              this,\r\n              targetPosition,\r\n              disablePositions,\r\n              false,\r\n              false,\r\n              false,\r\n              undefined,\r\n              undefined,\r\n              false,\r\n              this.lastPlayerPos,\r\n            );\r\n            if (moves.length > 0) {\r\n              let step = moves[0];\r\n              const candidate2 = moves[1];\r\n              const candidate3 = moves[2];\r\n              if (candidate3) {\r\n                const preservesLine3 =\r\n                  candidate3.pos.x === oldX || candidate3.pos.y === oldY;\r\n                const alignsAxis3 = preferXAxis\r\n                  ? candidate3.pos.y === oldY\r\n                  : candidate3.pos.x === oldX;\r\n                if (preservesLine3 && alignsAxis3) step = candidate3;\r\n              } else if (candidate2) {\r\n                const preservesLine2 =\r\n                  candidate2.pos.x === oldX || candidate2.pos.y === oldY;\r\n                const alignsAxis2 = preferXAxis\r\n                  ? candidate2.pos.y === oldY\r\n                  : candidate2.pos.x === oldX;\r\n                if (preservesLine2 && alignsAxis2) step = candidate2;\r\n              }\r\n              finalX = step.pos.x;\r\n              finalY = step.pos.y;\r\n              const manhattanFromStart =\r\n                Math.abs(finalX - oldX) + Math.abs(finalY - oldY);\r\n              if (manhattanFromStart === 1 || manhattanFromStart === 2) {\r\n                const dirX = finalX - oldX;\r\n                const dirY = finalY - oldY;\r\n                const stepX = dirX !== 0 ? Math.sign(dirX) : 0;\r\n                const stepY = dirY !== 0 ? Math.sign(dirY) : 0;\r\n                const extX = finalX + stepX;\r\n                const extY = finalY + stepY;\r\n                if (this.isTileFree(extX, extY)) {\r\n                  finalX = extX;\r\n                  finalY = extY;\r\n                }\r\n              }\r\n            }\r\n\r\n            // Execute movement: avoid 1-tile attack; prefer 2-3 range\r\n            if (playerDistance <= 1) {\r\n              // If too close, try to reposition using 2-tile jump plan or fallback\r\n              const finalDist =\r\n                Math.abs(finalX - oldX) + Math.abs(finalY - oldY);\r\n              if (finalDist >= 2) {\r\n                this.attackOrMoveTo(finalX, finalY, oldX, oldY);\r\n              } else {\r\n                const candidates = this.getTwoTileCandidates(oldX, oldY);\r\n                if (candidates.length > 0) {\r\n                  const best = this.pickBestCandidate(\r\n                    candidates,\r\n                    targetPosition.x,\r\n                    targetPosition.y,\r\n                    preferXAxis,\r\n                    dxToTarget,\r\n                    dyToTarget,\r\n                  );\r\n                  this.attackOrMoveTo(best.endX, best.endY, oldX, oldY);\r\n                } else {\r\n                  // last resort, move 1 tile but won't be able to attack\r\n                  const oneTileCandidates = this.getOneTileCandidates(\r\n                    oldX,\r\n                    oldY,\r\n                  );\r\n                  if (oneTileCandidates.length > 0) {\r\n                    const best = this.pickBestOneTileCandidate(\r\n                      oneTileCandidates,\r\n                      targetPosition.x,\r\n                      targetPosition.y,\r\n                      preferXAxis,\r\n                      dxToTarget,\r\n                      dyToTarget,\r\n                    );\r\n                    this.attackOrMoveTo(best.x, best.y, oldX, oldY);\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              // Player is not adjacent - use computed movement (A* + extension up to 3 tiles)\r\n              const finalDist =\r\n                Math.abs(finalX - oldX) + Math.abs(finalY - oldY);\r\n              if (finalDist >= 1) {\r\n                this.attackOrMoveTo(finalX, finalY, oldX, oldY);\r\n              } else {\r\n                // Fall back to 3-tile or 2-tile jump candidates if A* didn't find a path\r\n                const candidates3 = this.getThreeTileCandidates(oldX, oldY);\r\n                if (candidates3.length > 0) {\r\n                  const best = this.pickBestCandidate(\r\n                    candidates3,\r\n                    targetPosition.x,\r\n                    targetPosition.y,\r\n                    preferXAxis,\r\n                    dxToTarget,\r\n                    dyToTarget,\r\n                  );\r\n                  this.attackOrMoveTo(best.endX, best.endY, oldX, oldY);\r\n                } else {\r\n                  const candidates2 = this.getTwoTileCandidates(oldX, oldY);\r\n                  if (candidates2.length > 0) {\r\n                    const best = this.pickBestCandidate(\r\n                      candidates2,\r\n                      targetPosition.x,\r\n                      targetPosition.y,\r\n                      preferXAxis,\r\n                      dxToTarget,\r\n                      dyToTarget,\r\n                    );\r\n                    this.attackOrMoveTo(best.endX, best.endY, oldX, oldY);\r\n                  } else {\r\n                    // Fall back to 1-tile movement if no longer jumps available\r\n                    const oneTileCandidates = this.getOneTileCandidates(\r\n                      oldX,\r\n                      oldY,\r\n                    );\r\n                    if (oneTileCandidates.length > 0) {\r\n                      const best = this.pickBestOneTileCandidate(\r\n                        oneTileCandidates,\r\n                        targetPosition.x,\r\n                        targetPosition.y,\r\n                        preferXAxis,\r\n                        dxToTarget,\r\n                        dyToTarget,\r\n                      );\r\n                      this.attackOrMoveTo(best.x, best.y, oldX, oldY);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            this.rumbling = false;\r\n          } else {\r\n            this.rumbling = true;\r\n            /*\r\n            if (\r\n              (this.target.x === this.targetPlayer.x &&\r\n                this.target.y === this.targetPlayer.y) ||\r\n              Utils.distance(\r\n                this.targetPlayer.x,\r\n                this.targetPlayer.y,\r\n                this.x,\r\n                this.y,\r\n              ) <= 2\r\n            )\r\n              */ {\r\n              this.makeHitWarnings();\r\n            }\r\n          }\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                if (this.ticks % 2 === 0) {\r\n                  /*\r\n                  if (\r\n                    (this.target.x === this.targetPlayer.x &&\r\n                      this.target.y === this.targetPlayer.y) ||\r\n                    Utils.distance(\r\n                      this.targetPlayer.x,\r\n                      this.targetPlayer.y,\r\n                      this.x,\r\n                      this.y,\r\n                    ) <= 2\r\n                  ) */ {\r\n                    this.makeHitWarnings();\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  makeHitWarnings = () => {\r\n    const cullFactor = 0.25;\r\n    const player: Player = this.getPlayer();\r\n    const orthogonal = this.orthogonalAttack;\r\n    const diagonal = this.diagonalAttack;\r\n    const forwardOnly = this.forwardOnlyAttack;\r\n    const direction = this.direction;\r\n    const orthoRange = this.attackRange;\r\n    const diagRange = this.diagonalAttackRange;\r\n\r\n    const generateOffsets = (\r\n      isOrthogonal: boolean,\r\n      range: number,\r\n    ): number[][] => {\r\n      const baseOffsets = isOrthogonal\r\n        ? [\r\n            [-3, 0],\r\n            [3, 0],\r\n            [0, -3],\r\n            [0, 3],\r\n            [-2, 0],\r\n            [2, 0],\r\n            [0, -2],\r\n            [0, 2],\r\n          ]\r\n        : [\r\n            [-1, -1],\r\n            [1, 1],\r\n            [1, -1],\r\n            [-1, 1],\r\n          ];\r\n      return baseOffsets.flatMap(([dx, dy]) =>\r\n        Array.from({ length: range }, (_, i) => [(i + 1) * dx, (i + 1) * dy]),\r\n      );\r\n    };\r\n\r\n    const directionOffsets = {\r\n      [Direction.LEFT]: [-1, 0],\r\n      [Direction.RIGHT]: [1, 0],\r\n      [Direction.UP]: [0, -1],\r\n      [Direction.DOWN]: [0, 1],\r\n    };\r\n\r\n    let offsets: number[][] = [];\r\n    if (forwardOnly) {\r\n      const [dx, dy] = directionOffsets[direction];\r\n      offsets = Array.from({ length: orthoRange }, (_, i) => [\r\n        (i + 1) * dx,\r\n        (i + 1) * dy,\r\n      ]);\r\n    } else {\r\n      if (orthogonal) offsets.push(...generateOffsets(true, orthoRange));\r\n      if (diagonal) offsets.push(...generateOffsets(false, diagRange));\r\n    }\r\n\r\n    const warningCoordinates = offsets\r\n      .map(([dx, dy]) => ({\r\n        x: dx,\r\n        y: dy,\r\n        distance: Utils.distance(dx, dy, player.x - this.x, player.y - this.y),\r\n      }))\r\n      .sort((a, b) => a.distance - b.distance);\r\n\r\n    const keepCount = Math.ceil(warningCoordinates.length * (1 - cullFactor));\r\n    const culledWarnings = warningCoordinates.slice(0, keepCount);\r\n\r\n    culledWarnings.forEach(({ x, y }) => {\r\n      const targetX = this.x + x;\r\n      const targetY = this.y + y;\r\n      if (this.isWithinRoomBounds(targetX, targetY)) {\r\n        const hitWarning = new HitWarning(\r\n          this.game,\r\n          targetX,\r\n          targetY,\r\n          this.x,\r\n          this.y,\r\n          true,\r\n          false,\r\n          this,\r\n        );\r\n        this.room.hitwarnings.push(hitWarning);\r\n        //this.hitWarnings.push(hitWarning);\r\n      }\r\n    });\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      if (this.ticks % 2 === 0) {\r\n        this.tileX = 13;\r\n        this.tileY = 4;\r\n      } else {\r\n        this.tileX = 13;\r\n        this.tileY = 4;\r\n      }\r\n      switch (this.direction) {\r\n        case Direction.UP:\r\n          //this.tileX = 13;\r\n          break;\r\n        case Direction.LEFT:\r\n          //this.tileX = 13;\r\n          //this.tileY = 6;\r\n          break;\r\n        case Direction.RIGHT:\r\n          //this.tileY = 6;\r\n          break;\r\n      }\r\n      let rumble = Math.max(\r\n        this.rumble(this.rumbling, this.frame, this.direction).x,\r\n        Math.max(this.rumble(this.rumbling, this.frame, this.direction).y),\r\n      );\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      //only draw when visible\r\n      Game.drawMob(\r\n        this.tileX,\r\n        this.tileY, // + this.direction,\r\n        2,\r\n        2,\r\n        this.x - this.drawX + rumble - 0.5,\r\n        this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n        2 * this.crushX,\r\n        2 * this.crushY,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n\r\n      if (this.crushed) {\r\n        this.crushAnim(delta);\r\n      }\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta, 0, 0.75 * GameConstants.TILESIZE);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta, 0, 0.75 * GameConstants.TILESIZE);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Entity, EntityDirection } from \"../entity\";\r\nimport { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { HitWarning } from \"../../drawable/hitWarning\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { RedGem } from \"../../item/resource/redgem\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Spear } from \"../../item/weapon/spear\";\r\nimport { DualDagger } from \"../../item/weapon/dualdagger\";\r\nimport { GreenGem } from \"../../item/resource/greengem\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Pickaxe } from \"../../item/tool/pickaxe\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Enemy } from \"./enemy\";\r\n\r\nexport class BigZombieEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  dir: Direction;\r\n  static difficulty: number = 1;\r\n  static tileX: number = 21;\r\n  static tileY: number = 0;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.w = 2;\r\n    this.h = 2;\r\n\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 4;\r\n    this.maxHealth = 4;\r\n    this.defaultMaxHealth = 4;\r\n    this.tileX = 31;\r\n    this.tileY = 12;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.dir = Direction.DOWN;\r\n    this.name = \"bigzombie\";\r\n    this.chainPushable = false;\r\n\r\n    this.forwardOnlyAttack = true;\r\n    this.drawMoveSpeed = 0.9;\r\n    this.jumpHeight = 0.35;\r\n    this.drawYOffset = 1.5;\r\n    this.canDestroyOthers = true;\r\n\r\n    if (drop) this.drop = drop;\r\n    const dropAmount = Math.floor(Random.rand() * 3) + 2;\r\n    while (this.drops.length < dropAmount && !this.cloned) {\r\n      this.getDrop();\r\n    }\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  bleed = () => {};\r\n  poison = () => {};\r\n\r\n  behavior = () => {\r\n    // Store the current position\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    // If the enemy is not dead\r\n    if (!this.dead) {\r\n      // Skip turns if necessary\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n\r\n      // Increment the tick counter\r\n      this.ticks++;\r\n\r\n      // If the enemy has not seen the player yet\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        // If the target player has taken their turn\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          // Decrement alert ticks\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n\r\n          // Store the old position\r\n          let oldX = this.x;\r\n          let oldY = this.y;\r\n\r\n          const p = this.targetPlayer;\r\n          const sharesRow = p.y >= this.y && p.y < this.y + this.h;\r\n          const sharesColumn = p.x >= this.x && p.x < this.x + this.w;\r\n          if (sharesRow !== sharesColumn) {\r\n            let desiredDir = this.direction;\r\n            if (sharesRow) {\r\n              desiredDir = p.x < this.x ? Direction.LEFT : Direction.RIGHT;\r\n            } else if (sharesColumn) {\r\n              desiredDir = p.y < this.y ? Direction.UP : Direction.DOWN;\r\n            }\r\n            if (desiredDir !== this.direction) {\r\n              this.direction = desiredDir;\r\n              this.makeBigHitWarnings();\r\n              this.ticks++;\r\n              return;\r\n            }\r\n          }\r\n\r\n          // Create a list of positions to avoid\r\n          let disablePositions = Array<astar.Position>();\r\n          for (const e of this.room.entities) {\r\n            if (e !== this) {\r\n              // For 2x2 entity, block all positions the entity occupies\r\n              for (let dx = 0; dx < e.w; dx++) {\r\n                for (let dy = 0; dy < e.h; dy++) {\r\n                  disablePositions.push({\r\n                    x: e.x + dx,\r\n                    y: e.y + dy,\r\n                  } as astar.Position);\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          // Check spike traps in a larger area for 2x2 entity\r\n          for (let xx = this.x - 1; xx <= this.x + this.w; xx++) {\r\n            for (let yy = this.y - 1; yy <= this.y + this.h; yy++) {\r\n              if (\r\n                this.room.roomArray[xx] &&\r\n                this.room.roomArray[xx][yy] &&\r\n                this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n              ) {\r\n                disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Create a grid of the room\r\n          let grid = [];\r\n          for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n            grid[x] = [];\r\n            for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n              if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                grid[x][y] = this.room.roomArray[x][y];\r\n              else grid[x][y] = false;\r\n            }\r\n          }\r\n\r\n          // Find a path to the target player\r\n          let moves = astar.AStar.search(\r\n            grid,\r\n            this,\r\n            this.targetPlayer,\r\n            disablePositions,\r\n            false,\r\n            false,\r\n            true,\r\n            this.direction,\r\n          );\r\n\r\n          // If there are moves available\r\n          if (moves.length > 0) {\r\n            let moveX = moves[0].pos.x;\r\n            let moveY = moves[0].pos.y;\r\n            let oldDir = this.direction;\r\n            let player = this.targetPlayer;\r\n\r\n            // Face the target player\r\n            //this.facePlayer(player);\r\n\r\n            // Determine the new direction based on the move\r\n            if (moveX > oldX) this.direction = Direction.RIGHT;\r\n            else if (moveX < oldX) this.direction = Direction.LEFT;\r\n            else if (moveY > oldY) this.direction = Direction.DOWN;\r\n            else if (moveY < oldY) this.direction = Direction.UP;\r\n\r\n            // If the direction hasn't changed, attempt to move or attack\r\n            if (oldDir == this.direction) {\r\n              let hitPlayer = false;\r\n              for (const i in this.game.players) {\r\n                if (\r\n                  this.game.rooms[this.game.players[i].levelID] === this.room\r\n                ) {\r\n                  // Check if player is within any of the 2x2 positions we're moving to\r\n                  let playerHit = false;\r\n                  for (let dx = 0; dx < this.w; dx++) {\r\n                    for (let dy = 0; dy < this.h; dy++) {\r\n                      if (\r\n                        this.game.players[i].x === moveX + dx &&\r\n                        this.game.players[i].y === moveY + dy\r\n                      ) {\r\n                        playerHit = true;\r\n                        break;\r\n                      }\r\n                    }\r\n                    if (playerHit) break;\r\n                  }\r\n\r\n                  if (playerHit) {\r\n                    this.game.players[i].hurt(this.hit(), this.name);\r\n                    this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                    this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                    if (\r\n                      this.game.players[i] ===\r\n                      this.game.players[this.game.localPlayerID]\r\n                    )\r\n                      this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n                    hitPlayer = true;\r\n                  }\r\n                }\r\n              }\r\n              if (!hitPlayer) {\r\n                // Move to the new position\r\n                this.tryMove(moveX, moveY);\r\n                this.setDrawXY(oldX, oldY);\r\n\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n              }\r\n            }\r\n          } else {\r\n            this.facePlayer(this.targetPlayer);\r\n          }\r\n\r\n          // Add positions to avoid based on the current direction\r\n          if (this.direction == Direction.LEFT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.RIGHT) {\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y + 1,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x,\r\n              y: this.y - 1,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.DOWN) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          if (this.direction == Direction.UP) {\r\n            disablePositions.push({\r\n              x: this.x + 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n            disablePositions.push({\r\n              x: this.x - 1,\r\n              y: this.y,\r\n            } as astar.Position);\r\n          }\r\n          // Make hit warnings\r\n          this.makeBigHitWarnings();\r\n        }\r\n\r\n        // Check if the target player is offline\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        // If the enemy is not aggro or the target player is offline, find a new target player\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                this.makeBigHitWarnings();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n\r\n    this.healthBar.draw(\r\n      delta,\r\n      this.health,\r\n      this.maxHealth,\r\n      this.x + 0.5,\r\n      this.y,\r\n      true,\r\n    );\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    //this.updateShadeColor(delta);\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    this.updateDrawXY(delta);\r\n    this.frame += 0.1 * delta;\r\n    if (this.frame >= 4) this.frame = 0;\r\n    if (this.hasShadow) this.drawShadow(delta);\r\n    Game.drawMob(\r\n      this.tileX, // + Math.floor(this.frame),\r\n      this.tileY + this.direction * 3,\r\n      2,\r\n      3,\r\n      this.x - this.drawX,\r\n      this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n      2,\r\n      3,\r\n      this.softShadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.globalAlpha = 1;\r\n  };\r\n}\r\n","import { Item } from \"./item\";\r\nimport { Game } from \"../game\";\r\nimport { Room } from \"../room/room\";\r\nimport { Player } from \"../player/player\";\r\nimport { GameplaySettings } from \"../game/gameplaySettings\";\r\nimport { Weapon } from \"./weapon/weapon\";\r\nimport { Armor } from \"./armor\";\r\n\r\nexport class Equippable extends Item {\r\n  wielder: Player | null = null;\r\n  equipped: boolean;\r\n  equipTick: boolean = false;\r\n  useCost: number = 1;\r\n  cooldown: number = 0;\r\n  cooldownMax: number = 0;\r\n  previousWeapon: Weapon | null = null;\r\n\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.equipped = false;\r\n  }\r\n\r\n  setWielder = (wielder: Player) => {\r\n    this.wielder = wielder;\r\n  };\r\n\r\n  coEquippable = (other: Equippable): boolean => {\r\n    return true;\r\n  };\r\n\r\n  onEquip = () => {};\r\n  onUnequip = () => {};\r\n\r\n  toggleEquip = () => {\r\n    if ((!this.broken && this.cooldown <= 0) || this instanceof Armor) {\r\n      if (!this.equipped && this.wielder?.inventory?.weapon) {\r\n        this.previousWeapon = this.wielder.inventory.weapon;\r\n      }\r\n\r\n      this.equipped = !this.equipped;\r\n\r\n      if (this.equipped) {\r\n        this.onEquip();\r\n      } else {\r\n        this.onUnequip();\r\n      }\r\n\r\n      if (GameplaySettings.EQUIP_USES_TURN && this.equipped === true)\r\n        this.wielder?.stall();\r\n    } else if (this.broken) {\r\n      this.equipped = false;\r\n      let pronoun = this.name.endsWith(\"s\") ? \"them\" : \"it\";\r\n      this.level.game.pushMessage(\r\n        \"You'll have to fix your \" +\r\n          this.name +\r\n          \" before you can use \" +\r\n          pronoun +\r\n          \".\",\r\n      );\r\n    } else if (this.cooldown > 0) {\r\n      this.level.game.pushMessage(\"Cooldown: \" + this.cooldown);\r\n    }\r\n  };\r\n\r\n  drawEquipped = (delta: number, x: number, y: number) => {\r\n    Game.drawItem(this.tileX, this.tileY, 1, 2, x, y - 1, this.w, this.h);\r\n  };\r\n\r\n  degrade = (degradeAmount: number = 1) => {\r\n    if (!this.degradeable) return;\r\n    this.durability -= degradeAmount * this.useCost;\r\n    if (this.durability <= 0) this.break();\r\n  };\r\n\r\n  break = () => {\r\n    this.durability = 0;\r\n    this.broken = true;\r\n    this.toggleEquip();\r\n    //this.wielder.inventory.removeItem(this);\r\n    //this.wielder = null;\r\n  };\r\n\r\n  onDrop = () => {};\r\n\r\n  dropFromInventory = () => {\r\n    this.wielder = null;\r\n    this.equipped = false;\r\n  };\r\n}\r\n","import { Player } from \"../player/player\";\r\nimport { Game } from \"../game\";\r\nimport { Room } from \"../room/room\";\r\nimport { Tile } from \"./tile\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\nimport { EnvType } from \"../constants/environmentTypes\";\r\nimport { Lockable } from \"./lockable\";\r\n\r\nexport abstract class Passageway extends Tile {\r\n  game: Game;\r\n  frame: number;\r\n  keyID: number;\r\n  lightSource?: LightSource;\r\n  environment: EnvType;\r\n  lockable: Lockable;\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, x, y);\r\n    this.game = game;\r\n    this.frame = 0;\r\n    this.keyID = 0;\r\n  }\r\n\r\n  // Common frame animation logic\r\n  protected updateFrame(delta: number): void {\r\n    if (this.frame > 100) this.frame = 0;\r\n    this.frame += 1 * delta;\r\n  }\r\n\r\n  // Common floating animation calculation\r\n  protected getFloatingOffset(): number {\r\n    return 0.125 * Math.sin((this.frame * Math.PI) / 50);\r\n  }\r\n\r\n  addLightSource = () => {\r\n    if (this.environment === EnvType.FOREST && !this.lockable.isLocked()) {\r\n      this.lightSource = new LightSource(\r\n        this.x + 0.5,\r\n        this.y + 0.5,\r\n        6,\r\n        [0, 100, 100],\r\n      );\r\n      this.room.lightSources.push(this.lightSource);\r\n    }\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Shrooms } from \"../../item/usable/shrooms\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\n\r\nexport class Mushrooms extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 9;\r\n    this.tileY = 2;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"mushrooms\";\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 30;\r\n    this.drops.push(new Shrooms(this.room, this.x, this.y));\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX,\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { Sound } from \"../sound/sound\";\r\n\r\nexport class MuteButton {\r\n  static draw() {\r\n    const tile = GameConstants.TILESIZE;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = 0.1;\r\n    if (Sound.audioMuted) {\r\n      Game.drawFX(17, 0, 1, 1, 0, 0.5, 1, 1);\r\n    } else {\r\n      Game.drawFX(16, 0, 1, 1, 0, 0.5, 1, 1);\r\n    }\r\n    Game.ctx.restore();\r\n  }\r\n\r\n  static toggleMute() {\r\n    Sound.toggleMute();\r\n  }\r\n}\r\n","import { ChatMessage, Game } from \"../game\";\r\nimport { Room, RoomType } from \"../room/room\";\r\nimport { Door } from \"../tile/door\";\r\nimport { LevelConstants } from \"./levelConstants\";\r\nimport { Random } from \"../utility/random\";\r\nimport { DownLadder } from \"../tile/downLadder\";\r\nimport {\r\n  LevelParameterGenerator,\r\n  LevelParameters,\r\n} from \"./levelParametersGenerator\";\r\nimport { Level } from \"./level\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { EnvType } from \"../constants/environmentTypes\";\r\nimport { SkinType } from \"../tile/tile\";\r\nimport {\r\n  PartitionGenerator,\r\n  Partition,\r\n  PartialLevel,\r\n  PathType,\r\n  PathParameters,\r\n} from \"./partitionGenerator\";\r\nimport { LevelValidator, ValidationResult } from \"./levelValidator\";\r\nimport { GenerationVisualizer } from \"./generationVisualizer\";\r\nimport { PngPartitionGenerator } from \"./pngPartitionGenerator\";\r\nimport { GameplaySettings } from \"../game/gameplaySettings\";\r\nimport { SidePathOptions } from \"./sidePathManager\";\r\n\r\nexport class LevelGenerator {\r\n  game: Game;\r\n  seed: number;\r\n  depthReached = 0;\r\n  currentFloorFirstLevelID = 0;\r\n  partialLevel: PartialLevel;\r\n  levelParams: LevelParameters;\r\n  partitionGenerator: PartitionGenerator;\r\n  static ANIMATION_CONSTANT = 1;\r\n  private validator: LevelValidator;\r\n  private visualizer: GenerationVisualizer;\r\n  private pngPartitionGenerator: PngPartitionGenerator;\r\n\r\n  constructor() {\r\n    // Don't initialize partitionGenerator here yet since we need game instance\r\n    this.validator = null;\r\n    this.visualizer = null;\r\n    this.pngPartitionGenerator = new PngPartitionGenerator();\r\n  }\r\n\r\n  private setOpenWallsForPartitions = (\r\n    partitions: Array<Partition>,\r\n    mapWidth: number,\r\n    mapHeight: number,\r\n  ) => {\r\n    for (const partition of partitions) {\r\n      // Reset all walls to closed by default\r\n      partition.isTopOpen = false;\r\n      partition.isRightOpen = false;\r\n      partition.isBottomOpen = false;\r\n      partition.isLeftOpen = false;\r\n\r\n      // Check if partition touches map boundaries\r\n      if (partition.x === 0) {\r\n        partition.isLeftOpen = true;\r\n      }\r\n      if (partition.y === 0) {\r\n        partition.isTopOpen = true;\r\n      }\r\n      if (partition.x + partition.w === mapWidth) {\r\n        partition.isRightOpen = true;\r\n      }\r\n      if (partition.y + partition.h === mapHeight) {\r\n        partition.isBottomOpen = true;\r\n      }\r\n    }\r\n  };\r\n\r\n  createLevel = (\r\n    depth: number,\r\n    isMainPath: boolean = true,\r\n    mapGroup: number,\r\n    envType: EnvType,\r\n    skipPopulation: boolean = false,\r\n  ) => {\r\n    let newLevel = new Level(\r\n      this.game,\r\n      depth,\r\n      100,\r\n      100,\r\n      isMainPath,\r\n      mapGroup,\r\n      envType,\r\n      skipPopulation,\r\n    );\r\n    return newLevel;\r\n  };\r\n\r\n  getRooms = (\r\n    partitions: Array<Partition>,\r\n    depth: number,\r\n    mapGroup: number,\r\n    envType: EnvType,\r\n    pathId: string,\r\n  ): Array<Room> => {\r\n    let rooms: Array<Room> = [];\r\n\r\n    for (let i = 0; i < partitions.length; i++) {\r\n      let partition = partitions[i];\r\n\r\n      let room = new Room(\r\n        this.game,\r\n        partition.x - 1,\r\n        partition.y - 1,\r\n        partition.w + 2,\r\n        partition.h + 2,\r\n        partition.type,\r\n        depth,\r\n        mapGroup,\r\n        this.game.levels[depth],\r\n        Random.rand,\r\n        envType,\r\n      );\r\n      room.pathId = pathId || \"main\";\r\n      rooms.push(room);\r\n    }\r\n\r\n    let doors_added: Array<Door> = [];\r\n\r\n    partitions.forEach((partition, index) => {\r\n      partition.connections.forEach((connection) => {\r\n        let door = rooms[index].addDoor(connection.x, connection.y);\r\n        let existingDoor = doors_added.find(\r\n          (existing) => existing.x === door.x && existing.y === door.y,\r\n        );\r\n        if (existingDoor) {\r\n          existingDoor.link(door);\r\n          door.link(existingDoor);\r\n        }\r\n        doors_added.push(door);\r\n      });\r\n    });\r\n\r\n    return rooms;\r\n  };\r\n\r\n  setSeed = (seed: number) => {\r\n    this.seed = seed;\r\n  };\r\n\r\n  generate = async (\r\n    game: Game,\r\n    depth: number,\r\n    isSidePath = false,\r\n    callback: (linkedRoom: Room) => void,\r\n    environment: EnvType = EnvType.DUNGEON,\r\n    skipPopulation = false, // Add this parameter\r\n    pathId?: string,\r\n    opts?: SidePathOptions,\r\n  ) => {\r\n    // Initialize components with game instance\r\n    if (!this.partitionGenerator) {\r\n      this.partitionGenerator = new PartitionGenerator(game);\r\n    }\r\n    if (!this.validator) {\r\n      this.validator = new LevelValidator(game);\r\n    }\r\n    if (!this.visualizer) {\r\n      this.visualizer = this.partitionGenerator.getVisualizer();\r\n    }\r\n\r\n    this.levelParams = LevelParameterGenerator.getParameters(depth);\r\n    this.depthReached = depth;\r\n\r\n    // Set the random state based on the seed, depth, and pathId (for unique sidepaths)\r\n    const pid = pathId ?? (isSidePath ? \"side\" : \"main\");\r\n    let pathHash = 0 >>> 0;\r\n    for (let i = 0; i < pid.length; i++) {\r\n      pathHash = ((pathHash * 131) ^ pid.charCodeAt(i)) >>> 0;\r\n    }\r\n    Random.setState(((this.seed + depth) ^ pathHash) >>> 0);\r\n\r\n    this.game = game;\r\n\r\n    // Determine the map group\r\n    let mapGroup =\r\n      this.game.rooms.length > 0\r\n        ? this.game.rooms[this.game.rooms.length - 1].mapGroup + 1\r\n        : 0;\r\n\r\n    // Generate partitions based on whether it's a side path or main path\r\n    let partitions: Partition[];\r\n\r\n    const shouldUsePNG = GameConstants.USE_PNG_LEVELS && !isSidePath;\r\n    // Deterministic per-level roll that doesn't alter global RNG state\r\n    const rollPNG = this.shouldUsePngForLevel(\r\n      depth,\r\n      pid,\r\n      GameplaySettings.PNG_LEVEL_PROBABILITY,\r\n    );\r\n    if (shouldUsePNG && rollPNG) {\r\n      // Use PNG-based level generation for MAIN PATHS ONLY\r\n      const pngUrl = await this.selectRandomLevelForDepth(depth);\r\n\r\n      if (pngUrl) {\r\n        console.log(`Using PNG level generation from: ${pngUrl}`);\r\n        partitions = await this.pngPartitionGenerator.generatePartitionsFromPng(\r\n          pngUrl,\r\n          game,\r\n          depth,\r\n          isSidePath,\r\n        );\r\n      }\r\n\r\n      // Fallback to procedural generation if PNG generation fails or no PNG found\r\n      if (!pngUrl || partitions.length === 0) {\r\n        if (!pngUrl) {\r\n          console.warn(\r\n            `No PNG levels found for depth ${depth}, falling back to procedural generation`,\r\n          );\r\n        } else {\r\n          console.warn(\r\n            \"PNG generation failed, falling back to procedural generation\",\r\n          );\r\n        }\r\n        partitions = await this.partitionGenerator.generateDungeonPartitions(\r\n          game,\r\n          this.levelParams.mapWidth,\r\n          this.levelParams.mapHeight,\r\n          depth,\r\n          this.levelParams,\r\n          // Allow main-path overrides via opts when not a side path\r\n          isSidePath\r\n            ? undefined\r\n            : {\r\n                branching: (opts as any)?.branching,\r\n                loopiness: (opts as any)?.loopiness,\r\n              },\r\n        );\r\n      }\r\n    } else {\r\n      // Use procedural generation for side paths OR when PNG is disabled\r\n      if (isSidePath) {\r\n        partitions = await this.partitionGenerator.generateCavePartitions(opts);\r\n      } else {\r\n        partitions = await this.partitionGenerator.generateDungeonPartitions(\r\n          game,\r\n          this.levelParams.mapWidth,\r\n          this.levelParams.mapHeight,\r\n          depth,\r\n          this.levelParams,\r\n          isSidePath\r\n            ? undefined\r\n            : {\r\n                branching: (opts as any)?.branching,\r\n                loopiness: (opts as any)?.loopiness,\r\n              },\r\n        );\r\n      }\r\n    }\r\n\r\n    // Use validator instead of direct overlap checking\r\n    const overlapValidation = this.validator.validateNoOverlaps(partitions);\r\n    if (!overlapValidation.isValid) {\r\n      console.warn(\r\n        `Overlap validation failed: ${overlapValidation.errorMessage}`,\r\n      );\r\n    }\r\n    let mainEnvType = depth > 4 ? EnvType.DARK_DUNGEON : EnvType.DUNGEON;\r\n    let envType = !isSidePath ? mainEnvType : environment;\r\n    // if (depth > 4) {\r\n    //   envType = EnvType.MAGMA_CAVE;\r\n    // }\r\n\r\n    // Check for overlaps\r\n    // if (this.partitionGenerator.checkOverlaps(partitions)) { // This line is removed as per the new_code\r\n    //   console.warn(\"There are overlapping partitions.\");\r\n    // }\r\n\r\n    // Get the levels based on the partitions\r\n    let newLevel = this.createLevel(\r\n      depth,\r\n      !isSidePath,\r\n      mapGroup,\r\n      envType,\r\n      skipPopulation,\r\n    );\r\n\r\n    if (isSidePath) {\r\n      // create Level object ONLY to prepare rooms, but\r\n      // DO NOT push to game.levels\r\n    } else {\r\n      this.game.levels.push(newLevel);\r\n      this.game.registerLevel(newLevel);\r\n    }\r\n\r\n    let rooms = this.getRooms(partitions, depth, mapGroup, envType, pid);\r\n\r\n    newLevel.setRooms(rooms);\r\n    newLevel.populator.populateRooms();\r\n\r\n    newLevel.setRoomSkins();\r\n    //newLevel.loadRoomsIntoLevelArray();\r\n\r\n    // Only call linkExitToStart for main paths\r\n    if (newLevel.exitRoom) {\r\n      newLevel.exitRoom.linkExitToStart();\r\n    }\r\n\r\n    // Update the current floor first level ID if it's not a cave\r\n    if (!isSidePath) this.currentFloorFirstLevelID = this.game.rooms.length;\r\n\r\n    // Add the new levels to the game rooms\r\n    this.game.registerRooms(rooms);\r\n    // Keep game.level in sync for convenience lookups\r\n    this.game.level = this.game.levels[depth] || this.game.level;\r\n\r\n    // Do NOT auto-generate sidepath caves here.\r\n    // Sidepaths are generated on-demand when the player interacts with a DownLadder.\r\n\r\n    // Return the start room or the rope cave room\r\n    callback(\r\n      isSidePath\r\n        ? rooms.find((r) => r.type === RoomType.ROPECAVE)\r\n        : rooms.find((r) => r.type === RoomType.START),\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Deterministically decide if PNG-based generation should be used for this level.\r\n   * Uses a local hash seeded by (seed, depth, pathId) to avoid touching global RNG state.\r\n   */\r\n  private shouldUsePngForLevel(\r\n    depth: number,\r\n    pathId: string,\r\n    probability: number,\r\n  ): boolean {\r\n    // Mix seed, depth, and path string into a 32-bit state\r\n    let h = (this.seed ^ depth) >>> 0;\r\n    // Simple LCG/hash mix over pathId characters (deterministic)\r\n    for (let i = 0; i < pathId.length; i++) {\r\n      h = (Math.imul(h ^ pathId.charCodeAt(i), 1664525) + 1013904223) >>> 0;\r\n    }\r\n    // Map to [0,1)\r\n    const r = (h >>> 0) / 4294967296;\r\n    return r < probability;\r\n  }\r\n\r\n  generateFirstNFloors = async (game, numFloors, skipPopulation = false) => {\r\n    // Deterministically generate each main path depth from 0..numFloors\r\n    for (let depth = 0; depth <= numFloors; depth++) {\r\n      await this.generate(\r\n        game,\r\n        depth,\r\n        false,\r\n        () => {},\r\n        EnvType.DUNGEON,\r\n        skipPopulation,\r\n        undefined,\r\n        {\r\n          branching: GameplaySettings.MAIN_PATH_BRANCHING,\r\n          loopiness: GameplaySettings.MAIN_PATH_LOOPINESS,\r\n        },\r\n      );\r\n      // generate() updates game.rooms to this depth's rooms\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.visualizer) {\r\n      this.visualizer.draw(delta);\r\n    } else {\r\n      // Fallback if visualizer not initialized\r\n      Game.ctx.fillStyle = \"rgba(0, 0, 0, 1)\";\r\n      Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n      this.game.drawTextScreen(\"generating level\");\r\n    }\r\n  };\r\n\r\n  private async selectRandomLevelForDepth(\r\n    depth: number,\r\n  ): Promise<string | null> {\r\n    console.log(`Looking for PNG levels for depth ${depth}...`);\r\n\r\n    // Try to find available variations for this depth\r\n    const availableVariations: string[] = [];\r\n    const maxVariations = 10; // Check up to 10 variations per depth\r\n\r\n    for (let variation = 0; variation < maxVariations; variation++) {\r\n      const filename = `${depth}_${variation}.png`;\r\n      const fullPath = `res/levels/${filename}`;\r\n\r\n      // Check if file exists by trying to load it\r\n      if (await this.checkImageExists(fullPath)) {\r\n        availableVariations.push(fullPath);\r\n        console.log(`  ✓ Found variation: ${filename}`);\r\n      }\r\n    }\r\n\r\n    if (availableVariations.length === 0) {\r\n      console.log(`  ❌ No PNG levels found for depth ${depth}`);\r\n      return null;\r\n    }\r\n\r\n    // Randomly select one of the available variations\r\n    const selectedIndex = Math.floor(\r\n      Random.rand() * availableVariations.length,\r\n    );\r\n    const selectedPath = availableVariations[selectedIndex];\r\n\r\n    console.log(\r\n      `  🎲 Selected ${selectedPath} (${selectedIndex + 1}/${availableVariations.length} available)`,\r\n    );\r\n    return selectedPath;\r\n  }\r\n\r\n  private async checkImageExists(imagePath: string): Promise<boolean> {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        resolve(true);\r\n      };\r\n      img.onerror = () => {\r\n        resolve(false);\r\n      };\r\n      // Set a timeout to avoid hanging\r\n      setTimeout(() => {\r\n        resolve(false);\r\n      }, 1000);\r\n\r\n      img.src = imagePath;\r\n    });\r\n  }\r\n}\r\n\r\nconst getPathParameters = (\r\n  pathType: PathType,\r\n  depth: number,\r\n): PathParameters => {\r\n  const baseParams = LevelParameterGenerator.getParameters(depth);\r\n\r\n  switch (pathType) {\r\n    case PathType.MAIN_PATH:\r\n      return {\r\n        pathType: PathType.MAIN_PATH,\r\n        mapWidth: baseParams.mapWidth,\r\n        mapHeight: baseParams.mapHeight,\r\n        roomCount: {\r\n          min: baseParams.minRoomCount,\r\n          max: baseParams.maxRoomCount,\r\n        },\r\n        splitProbabilities: [0.75, 1, 0.5],\r\n        wallRemoveProbability: 0.5,\r\n        maxRoomArea: baseParams.maxRoomArea,\r\n        softMaxRoomArea: baseParams.softMaxRoomArea,\r\n        connectionStyle: \"linear\",\r\n        loopDoorCount: { min: 4, max: 8 },\r\n      };\r\n\r\n    case PathType.SIDE_PATH:\r\n      return {\r\n        pathType: PathType.SIDE_PATH,\r\n        mapWidth: 50,\r\n        mapHeight: 50,\r\n        roomCount: { min: 5, max: 5 },\r\n        splitProbabilities: [0.75, 1, 0.5],\r\n        wallRemoveProbability: 0.5,\r\n        maxRoomArea: 100,\r\n        softMaxRoomArea: 80,\r\n        connectionStyle: \"branched\",\r\n        loopDoorCount: { min: 4, max: 8 },\r\n      };\r\n\r\n    case PathType.TUTORIAL:\r\n      return {\r\n        pathType: PathType.TUTORIAL,\r\n        mapWidth: 7,\r\n        mapHeight: 7,\r\n        roomCount: { min: 1, max: 1 },\r\n        splitProbabilities: [],\r\n        wallRemoveProbability: 0,\r\n        maxRoomArea: 49,\r\n        softMaxRoomArea: 49,\r\n        connectionStyle: \"linear\",\r\n        loopDoorCount: { min: 0, max: 0 },\r\n      };\r\n\r\n    default:\r\n      throw new Error(`Unknown path type: ${pathType}`);\r\n  }\r\n};\r\n","import { Player } from \"../player/player\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Drawable } from \"../drawable/drawable\";\r\nimport { HitWarning } from \"../drawable/hitWarning\";\r\nimport { Direction } from \"../game\";\r\nimport { LightSource } from \"../lighting/lightSource\";\r\nimport { WizardEnemy } from \"../entity/enemy/wizardEnemy\";\r\nimport { IdGenerator } from \"../globalStateManager/IdGenerator\";\r\n\r\nexport class Projectile extends Drawable {\r\n  globalId: string;\r\n  x: number;\r\n  y: number;\r\n  dead: boolean;\r\n  parent: Entity | Player;\r\n  dir: Direction;\r\n  bloomOffsetY: number;\r\n  lightSource: LightSource;\r\n\r\n  constructor(parent: Entity | Player, x: number, y: number) {\r\n    super();\r\n    this.globalId = IdGenerator.generate(\"PROJ\");\r\n\r\n    this.x = x;\r\n    this.y = y;\r\n    this.dead = false;\r\n    this.parent = parent;\r\n    this.drawableY = y;\r\n    this.hasBloom = false;\r\n    this.bloomColor = \"#00BFFF\";\r\n    this.bloomOffsetY = 0;\r\n  }\r\n\r\n  get distanceToParent() {\r\n    return Math.abs(this.x - this.parent.x) + Math.abs(this.y - this.parent.y);\r\n  }\r\n\r\n  setTarget(x: number, y: number, x2: number, y2: number) {}\r\n\r\n  hitPlayer = (player: Player) => {};\r\n  hitEnemy = (enemy: Entity) => {};\r\n\r\n  tick = () => {};\r\n  draw = (delta: number) => {};\r\n  drawTopLayer = (delta: number) => {};\r\n}\r\n","import { Item } from \"../../item/item\";\r\nimport { Game } from \"../../game\";\r\nimport { Key } from \"../../item/key\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { Armor } from \"../../item/armor\";\r\nimport { GreenGem } from \"../../item/resource/greengem\";\r\nimport { Resource } from \"./resource\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Geode } from \"../../item/resource/geode\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { RedGem } from \"../../item/resource/redgem\";\r\nimport { LightSource } from \"../../lighting/lightSource\";\r\n\r\nexport class GarnetResource extends Resource {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n\r\n    this.tileX = 15;\r\n    this.tileY = 0;\r\n    this.health = 3;\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#FF0000\"; //red hex color;\r\n    this.bloomAlpha = 1;\r\n    this.softBloomAlpha = 0;\r\n    this.name = \"garnet\";\r\n    if (Random.rand() < 0.025) {\r\n      this.drops.push(new Geode(this.room, this.x, this.y));\r\n    }\r\n    this.drops.push(new RedGem(this.room, this.x, this.y));\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      7,\r\n      [150, 0, 0], //dark dim red,\r\n      2,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n  }\r\n}\r\n","import { game, Game } from \"../game\";\r\nimport { Input } from \"../game/input\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\n\r\nexport class MouseCursor {\r\n  private static instance: MouseCursor;\r\n  private cursorSize: number = 5; // Size of the cursor rectangle\r\n  private clickX: number = 0;\r\n  private clickY: number = 0;\r\n  private rawClickX: number = 0;\r\n  private rawClickY: number = 0;\r\n  private tileX: number = 6;\r\n  private lastMouseX: number = 0;\r\n  private lastMouseY: number = 0;\r\n  private posChangeTime: number = Date.now();\r\n  private cursorTimeout: number = 5000;\r\n\r\n  private constructor() {}\r\n  private frame: number = 0;\r\n\r\n  public static getInstance(): MouseCursor {\r\n    if (!MouseCursor.instance) {\r\n      MouseCursor.instance = new MouseCursor();\r\n    }\r\n    return MouseCursor.instance;\r\n  }\r\n\r\n  public drawCursor(): void {\r\n    Game.ctx.save();\r\n    const timeSinceChange = Date.now() - this.posChangeTime;\r\n    const fadeStartTime = this.cursorTimeout - 200; // Start fade 200ms before timeout\r\n\r\n    let alpha: number = 1;\r\n    if (timeSinceChange > fadeStartTime) {\r\n      // Only fade in the last 200ms\r\n      const fadeProgress = (timeSinceChange - fadeStartTime) / 200;\r\n      alpha = 1 - fadeProgress;\r\n    }\r\n\r\n    Game.ctx.globalAlpha = alpha;\r\n\r\n    //Game.ctx.fillRect(Input.mouseX, Input.mouseY, 1, 1);\r\n    Game.drawFX(\r\n      this.tileX,\r\n      0,\r\n      1,\r\n      1,\r\n      Input.mouseX / GameConstants.TILESIZE - 8 / GameConstants.TILESIZE,\r\n      Input.mouseY / GameConstants.TILESIZE - 8 / GameConstants.TILESIZE,\r\n      1,\r\n      1,\r\n    );\r\n    Game.ctx.restore();\r\n  }\r\n\r\n  public drawAnimation(delta: number): void {\r\n    if (this.frame > 5) {\r\n      //14 is max frame for animation\r\n      return;\r\n    }\r\n    Game.drawFX(\r\n      9 + Math.ceil(this.frame),\r\n      1,\r\n      1,\r\n      1,\r\n      this.clickX / GameConstants.TILESIZE - 8 / GameConstants.TILESIZE,\r\n      this.clickY / GameConstants.TILESIZE - 8 / GameConstants.TILESIZE,\r\n      1,\r\n      1,\r\n    );\r\n    this.frame = this.frame + delta / 5;\r\n  }\r\n\r\n  public startClickAnim(): void {\r\n    this.frame = 0;\r\n    this.clickX = Input.mouseX;\r\n    this.clickY = Input.mouseY;\r\n    this.rawClickX = Input.rawMouseX;\r\n    this.rawClickY = Input.rawMouseY;\r\n  }\r\n\r\n  public recalculateClickPosition(): void {\r\n    if (this.rawClickX !== undefined && this.rawClickY !== undefined) {\r\n      const canvas = document.getElementById(\"gameCanvas\") as HTMLCanvasElement;\r\n      const rect = canvas.getBoundingClientRect();\r\n\r\n      this.clickX = Math.floor(this.rawClickX / Game.scale);\r\n      this.clickY = Math.floor(this.rawClickY / Game.scale);\r\n    }\r\n  }\r\n\r\n  public setIcon = (icon: string) => {\r\n    switch (icon) {\r\n      case \"arrow\":\r\n        this.tileX = 8;\r\n        break;\r\n      case \"sword\":\r\n        this.tileX = 7;\r\n        break;\r\n      case \"hand\":\r\n        this.tileX = 6;\r\n        break;\r\n      case \"wait\":\r\n        this.tileX = 9;\r\n        break;\r\n      case \"grab\":\r\n        this.tileX = 10;\r\n        break;\r\n      case \"up\":\r\n        this.tileX = 11;\r\n        break;\r\n      case \"right\":\r\n        this.tileX = 12;\r\n        break;\r\n      case \"down\":\r\n        this.tileX = 13;\r\n        break;\r\n      case \"left\":\r\n        this.tileX = 14;\r\n        break;\r\n      case \"mine\":\r\n        this.tileX = 15;\r\n        break;\r\n    }\r\n  };\r\n\r\n  public draw = (delta: number, mobile: boolean = false) => {\r\n    if (!mobile && Date.now() - this.posChangeTime < this.cursorTimeout)\r\n      this.drawCursor();\r\n    this.drawAnimation(delta);\r\n  };\r\n\r\n  public getPosition(): { x: number; y: number } {\r\n    if (Input.mouseX !== this.lastMouseX || Input.mouseY !== this.lastMouseY) {\r\n      this.posChangeTime = Date.now();\r\n    }\r\n\r\n    this.lastMouseX = Input.mouseX;\r\n    this.lastMouseY = Input.mouseY;\r\n    return { x: Input.mouseX, y: Input.mouseY };\r\n  }\r\n\r\n  public getTilePosition(): { x: number; y: number } {\r\n    return {\r\n      x: Math.floor(Input.mouseX / GameConstants.TILESIZE),\r\n      y: Math.floor(Input.mouseY / GameConstants.TILESIZE),\r\n    };\r\n  }\r\n\r\n  public getInventoryPosition(): { x: number; y: number } {\r\n    return {\r\n      x: Input.mouseX,\r\n      y: Input.mouseY,\r\n    };\r\n  }\r\n}\r\n","import { Room } from \"../room/room\";\r\nimport { Game } from \"../game\";\r\nimport { Tile } from \"./tile\";\r\n\r\nexport class CoffinTile extends Tile {\r\n  subTileY: number; // each coffin is 1x2, this is the sub-tile coordinate\r\n\r\n  constructor(room: Room, x: number, y: number, subTileY: number) {\r\n    super(room, x, y);\r\n    this.subTileY = subTileY;\r\n  }\r\n\r\n  isSolid = (): boolean => {\r\n    return true;\r\n  };\r\n  canCrushEnemy = (): boolean => {\r\n    return true;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.subTileY === 0) {\r\n      Game.drawTile(\r\n        0,\r\n        5,\r\n        1,\r\n        1,\r\n        this.x - 1,\r\n        this.y - 1,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n      Game.drawTile(\r\n        1,\r\n        5,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y - 1,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n      Game.drawTile(\r\n        2,\r\n        5,\r\n        1,\r\n        1,\r\n        this.x + 1,\r\n        this.y - 1,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n      Game.drawTile(\r\n        0,\r\n        6,\r\n        1,\r\n        1,\r\n        this.x - 1,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n      Game.drawTile(\r\n        1,\r\n        6,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n      Game.drawTile(\r\n        2,\r\n        6,\r\n        1,\r\n        1,\r\n        this.x + 1,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    } else {\r\n      Game.drawTile(\r\n        0,\r\n        7,\r\n        1,\r\n        1,\r\n        this.x - 1,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n      Game.drawTile(\r\n        1,\r\n        7,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n      Game.drawTile(\r\n        2,\r\n        7,\r\n        1,\r\n        1,\r\n        this.x + 1,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n  };\r\n}\r\n","import { Weapon } from \"./weapon\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Direction } from \"../../game\";\r\n\r\nexport class Warhammer extends Weapon {\r\n  static itemName = \"warhammer\";\r\n  hitDelay: number;\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 22;\r\n    this.tileY = 2;\r\n    this.damage = 2;\r\n    this.name = \"warhammer\";\r\n    this.hitDelay = 225;\r\n    this.useCost = 2;\r\n    //this.cooldownMax = 10;\r\n    this.degradeable = false;\r\n  }\r\n\r\n  hitSound = () => {\r\n    Sound.swing();\r\n    Sound.playWarHammer();\r\n  };\r\n\r\n  weaponMove = (newX: number, newY: number): boolean => {\r\n    if (this.checkForPushables(newX, newY)) return true;\r\n\r\n    const hitSomething = this.executeAttack(\r\n      newX,\r\n      newY,\r\n      true,\r\n      this.damage + this.wielder.damageBonus,\r\n    );\r\n    if (hitSomething) {\r\n      this.cooldown = this.cooldownMax;\r\n    }\r\n    return !hitSomething;\r\n  };\r\n\r\n  shakeScreen = () => {\r\n    this.wielder.beginSlowMotion();\r\n\r\n    setTimeout(() => {\r\n      this.wielder.endSlowMotion();\r\n      switch (this.wielder.direction) {\r\n        case Direction.DOWN:\r\n          this.game.shakeScreen(0, -5, false);\r\n          break;\r\n        case Direction.UP:\r\n          this.game.shakeScreen(0, -5, false);\r\n          break;\r\n        case Direction.LEFT:\r\n          this.game.shakeScreen(-5, -5, false);\r\n          break;\r\n        case Direction.RIGHT:\r\n          this.game.shakeScreen(5, -5, false);\r\n          break;\r\n      }\r\n    }, this.hitDelay);\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Equippable } from \"../equippable\";\r\n\r\nexport class EmeraldRing extends Equippable {\r\n  static itemName = \"emerald ring\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 11;\r\n    this.tileY = 2;\r\n    this.name = EmeraldRing.itemName;\r\n    this.stackable = false;\r\n    this.description = \"A ring of emerald\";\r\n  }\r\n}\r\n","import { Player } from \"../player/player\";\r\nimport { Game } from \"../game\";\r\nimport { Room } from \"../room/room\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\nimport { SkinType, Tile } from \"./tile\";\r\n\r\nexport class InsideLevelDoor extends Tile {\r\n  game: Game;\r\n  opened: boolean;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, x, y);\r\n    this.game = game;\r\n    this.opened = false;\r\n  }\r\n\r\n  isSolid = (): boolean => {\r\n    return !this.opened;\r\n  };\r\n  canCrushEnemy = (): boolean => {\r\n    return !this.opened;\r\n  };\r\n  isOpaque = (): boolean => {\r\n    return !this.opened;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    Game.drawTile(\r\n      1,\r\n      0,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n    if (this.opened)\r\n      Game.drawTile(\r\n        15,\r\n        1,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    else\r\n      Game.drawTile(\r\n        3,\r\n        this.skin,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n  };\r\n\r\n  drawAbovePlayer = (delta: number) => {\r\n    if (!this.opened)\r\n      Game.drawTile(\r\n        13,\r\n        0,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y - 1,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    else\r\n      Game.drawTile(\r\n        14,\r\n        0,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y - 1,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Tile, SkinType } from \"./tile\";\r\nimport { Room } from \"../room/room\";\r\nimport { Player } from \"../player/player\";\r\nimport { InsideLevelDoor } from \"./insideLevelDoor\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Enemy } from \"../entity/enemy/enemy\";\r\n\r\nexport class Button extends Tile {\r\n  // all are in grid units\r\n  w: number;\r\n  h: number;\r\n  pressed: boolean;\r\n  turnsSincePressed: number;\r\n  linkedDoor: InsideLevelDoor;\r\n\r\n  constructor(room: Room, x: number, y: number, linkedDoor: InsideLevelDoor) {\r\n    super(room, x, y);\r\n    this.w = 1;\r\n    this.h = 1;\r\n\r\n    this.pressed = false;\r\n    this.turnsSincePressed = 1;\r\n\r\n    this.linkedDoor = linkedDoor;\r\n  }\r\n\r\n  press = () => {\r\n    this.pressed = true;\r\n    this.linkedDoor.opened = true;\r\n  };\r\n\r\n  unpress = () => {\r\n    this.pressed = false;\r\n    this.linkedDoor.opened = false;\r\n  };\r\n\r\n  onCollide = (player: Player) => {\r\n    this.press();\r\n  };\r\n\r\n  onCollideEnemy = (enemy: Enemy) => {\r\n    this.press();\r\n  };\r\n\r\n  tickEnd = () => {\r\n    this.unpress();\r\n    for (const i in this.room.game.players) {\r\n      if (\r\n        this.room.game.players[i].x === this.x &&\r\n        this.room.game.players[i].y === this.y\r\n      )\r\n        this.press();\r\n    }\r\n    for (const e of this.room.entities) {\r\n      if (e.x === this.x && e.y === this.y) this.press();\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    Game.drawTile(\r\n      1,\r\n      0,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n    if (this.pressed)\r\n      Game.drawTile(\r\n        18,\r\n        0,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y,\r\n        this.w,\r\n        this.h,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    else\r\n      Game.drawTile(\r\n        17,\r\n        0,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y,\r\n        this.w,\r\n        this.h,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n  };\r\n}\r\n","import { Direction, Game } from \"../game\";\r\nimport { Room, WallDirection } from \"../room/room\";\r\nimport { Door, DoorDir } from \"./door\";\r\nimport { Tile } from \"./tile\";\r\nimport { WallInfo } from \"../room/room\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\n\r\nexport class Wall extends Tile {\r\n  private tileXOffset: number;\r\n  wallDirections: Array<WallDirection>;\r\n  room: Room;\r\n\r\n  constructor(\r\n    room: Room,\r\n    x: number,\r\n    y: number,\r\n    wallDirections?: Array<WallDirection>,\r\n  ) {\r\n    super(room, x, y);\r\n    this.isDoor = false;\r\n    this.tileXOffset = 6;\r\n    this.wallDirections = wallDirections || [];\r\n    this.opacity = 1;\r\n    this.room = room;\r\n  }\r\n\r\n  isSolid = (): boolean => {\r\n    return true;\r\n  };\r\n  canCrushEnemy = (): boolean => {\r\n    return true;\r\n  };\r\n  isOpaque = (): boolean => {\r\n    const wallInfo = this.wallInfo();\r\n    if (!wallInfo) return false;\r\n    return (\r\n      (!wallInfo.isTopWall && !wallInfo.isInnerWall) ||\r\n      wallInfo.isLeftWall ||\r\n      wallInfo.isRightWall\r\n    );\r\n  };\r\n\r\n  isInnerWall = (): boolean => {\r\n    const wallInfo = this.wallInfo();\r\n    return wallInfo?.isInnerWall || false;\r\n  };\r\n\r\n  get direction() {\r\n    let directions = [];\r\n    if (this.room.roomArray[this.x - 1][this.y] === null)\r\n      directions.push(Direction.LEFT);\r\n    if (this.room.roomArray[this.x + 1][this.y] === null)\r\n      directions.push(Direction.RIGHT);\r\n    if (this.room.roomArray[this.x][this.y - 1] === null)\r\n      directions.push(Direction.DOWN);\r\n    if (this.room.roomArray[this.x][this.y + 1] === null)\r\n      directions.push(Direction.UP);\r\n    if (directions.length == 1) return directions[0];\r\n    if (\r\n      directions.includes(Direction.UP) &&\r\n      directions.includes(Direction.LEFT)\r\n    ) {\r\n      this.opacity = 0.5;\r\n      return Direction.UP_LEFT;\r\n    }\r\n    if (\r\n      directions.includes(Direction.UP) &&\r\n      directions.includes(Direction.RIGHT)\r\n    ) {\r\n      this.opacity = 0.5;\r\n      return Direction.UP_RIGHT;\r\n    }\r\n    if (\r\n      directions.includes(Direction.DOWN) &&\r\n      directions.includes(Direction.LEFT)\r\n    ) {\r\n      this.opacity = 0.5;\r\n      return Direction.DOWN_LEFT;\r\n    }\r\n    return Direction.DOWN_RIGHT;\r\n  }\r\n\r\n  wallInfo = () => {\r\n    return this.room.wallInfo.get(`${this.x},${this.y}`);\r\n  };\r\n\r\n  // Returns the door tile directly below this wall if present.\r\n  // Early returns undefined if this wall is not marked as below a door wall.\r\n  getDoor = (): Door | undefined => {\r\n    const info = this.wallInfo();\r\n    if (!info || !info.isBelowDoorWall) return undefined;\r\n    const below = this.room.roomArray[this.x]?.[this.y + 1];\r\n    return below instanceof Door ? (below as Door) : undefined;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    this.drawWall(delta);\r\n  };\r\n\r\n  drawWall = (delta: number) => {\r\n    const wallInfo = this.room.wallInfo.get(`${this.x},${this.y}`);\r\n    if (!wallInfo) return;\r\n\r\n    // Set tileYOffset based on inner wall type\r\n    this.tileXOffset =\r\n      wallInfo.innerWallType === \"bottomInner\" ||\r\n      wallInfo.innerWallType === \"surroundedInner\"\r\n        ? 0\r\n        : 26;\r\n\r\n    // Only draw the bottom part of the wall if it's not at the bottom edge of the room\r\n    const isDrawnFirst = this.getDoor()?.isDrawnFirst();\r\n    if (\r\n      wallInfo.isDoorWall ||\r\n      wallInfo.isBelowDoorWall ||\r\n      (wallInfo.isTopWall && !wallInfo.isLeftWall && !wallInfo.isRightWall) ||\r\n      wallInfo.isInnerWall\r\n    ) {\r\n      if (\r\n        wallInfo.isBelowDoorWall &&\r\n        !isDrawnFirst &&\r\n        GameConstants.SMOOTH_LIGHTING\r\n      )\r\n        return;\r\n      const shadeAmount = GameConstants.SMOOTH_LIGHTING\r\n        ? this.shadeAmount()\r\n        : this.room.softVis[this.x][this.y + 1];\r\n\r\n      Game.drawTile(\r\n        0,\r\n        this.skin,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        shadeAmount,\r\n      );\r\n    }\r\n\r\n    Game.drawTile(\r\n      2 + this.tileXOffset,\r\n      this.skin,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y - 1,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    const wallInfo = this.room.wallInfo.get(`${this.x},${this.y}`);\r\n    const room = this.room;\r\n    if (!wallInfo || !room) return;\r\n    if (wallInfo.isBottomWall && room.active)\r\n      Game.drawTile(\r\n        2 + this.tileXOffset,\r\n        this.skin,\r\n        1,\r\n        1,\r\n        this.x,\r\n        this.y - 1,\r\n        1,\r\n        1,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(), //this.room.softVis[this.x][this.y + 1],\r\n      );\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { Floor } from \"./floor\";\r\n\r\nexport class Bones extends Floor {\r\n  draw = (delta: number) => {\r\n    Game.drawTile(\r\n      7,\r\n      this.skin,\r\n      1,\r\n      1,\r\n      this.x,\r\n      this.y,\r\n      1,\r\n      1,\r\n      this.room.shadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n  };\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { EntityType } from \"../entity\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Candle } from \"../../item/light/candle\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { LightSource } from \"../../lighting/lightSource\";\r\nimport { WizardFireball } from \"../../projectile/wizardFireball\";\r\nimport { WizardEnemy } from \"../enemy/wizardEnemy\";\r\nimport { Lighting } from \"../../lighting/lighting\";\r\nimport { PlayerFireball } from \"../../projectile/playerFireball\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Explosion } from \"../../projectile/explosion\";\r\nimport { Utils } from \"../../utility/utils\";\r\n\r\nexport class Bomb extends Entity {\r\n  fuseLength: number = 4;\r\n  lit: boolean = false;\r\n  playerHitBy: Player | null = null;\r\n  fuseSound: HTMLAudioElement;\r\n  soundPaused: boolean = false;\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 15;\r\n    this.tileY = 4;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"bomb\";\r\n    this.frame = 0;\r\n    this.hasBloom = false;\r\n    this.bloomColor = \"yellow\";\r\n    this.bloomAlpha = 0;\r\n    this.bloomSize = 1;\r\n    this.bloomOffsetY = -1;\r\n    this.health = 1;\r\n    this.hitSound = Sound.potSmash;\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 29;\r\n    this.createLightSource();\r\n    this.playerHitBy = null;\r\n    this.fuseSound = Sound.fuseLoopSound;\r\n    this.soundPaused = false;\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  uniqueKillBehavior = () => {\r\n    if (this.cloned) return;\r\n\r\n    //this.room.addEntity(new Explosion(this.room, this.game, this.x, this.y));\r\n  };\r\n\r\n  tick = () => {\r\n    if (this.lit) {\r\n      this.fuseLength--;\r\n      //if (this.fuseLength < 3 && this.fuseLength > 0)\r\n      if (this.fuseLength <= 0) {\r\n        // Sound.playFuse();\r\n        this.fuseLength = 0;\r\n        Sound.stopSound(this.fuseSound);\r\n        this.explode();\r\n        Sound.playBomb();\r\n      }\r\n    }\r\n  };\r\n\r\n  createLightSource = () => {\r\n    if (!this.lit) return;\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      3,\r\n      [200, 200, 30],\r\n      0.75,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n    this.bloomAlpha = 1;\r\n    this.hasBloom = true;\r\n  };\r\n\r\n  hurt = (playerHitBy: Player, damage: number) => {\r\n    if (!this.lit) {\r\n      this.lit = true;\r\n      this.createLightSource();\r\n      this.playerHitBy = playerHitBy;\r\n      Sound.playFuse();\r\n    }\r\n  };\r\n\r\n  explode = () => {\r\n    Sound.stopSound(this.fuseSound);\r\n    for (let x = this.x - 2; x < this.x + 3; x++) {\r\n      for (let y = this.y - 2; y < this.y + 3; y++) {\r\n        if (\r\n          this.room.pointExists(x, y) &&\r\n          !this.room.roomArray[x][y].isSolid() &&\r\n          Utils.distance(this.x, this.y, x, y) < 2.5\r\n        ) {\r\n          const explosion = new Explosion(this, x, y, this.playerHitBy);\r\n          this.room.projectiles.push(explosion);\r\n        }\r\n      }\r\n    }\r\n    this.health = 0;\r\n    Lighting.momentaryLight(\r\n      this.room,\r\n      this.x,\r\n      this.y,\r\n      7,\r\n      [200, 200, 50],\r\n      250,\r\n      50,\r\n      0,\r\n    );\r\n\r\n    GenericParticle.spawnCluster(\r\n      this.room,\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      \"white\",\r\n    );\r\n    this.kill();\r\n\r\n    setTimeout(() => {\r\n      this.game.shakeScreen(\r\n        (Random.rand() - 0.5) * 5,\r\n        (Random.rand() - 0.5) * 0,\r\n        false,\r\n      );\r\n    }, 100);\r\n\r\n    this.game.shakeScreen(0, 20, false);\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    this.frame += delta;\r\n    if (this.health === 0) {\r\n      this.frame = 0;\r\n    }\r\n    if (this.frame > 20) this.frame = 0;\r\n    this.bloomAlpha = (this.frame / 10) % 2 === 0 ? 1 : 0.5;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      if (this.lit) {\r\n        Game.drawObj(\r\n          this.tileX +\r\n            6 -\r\n            Math.min(3, this.fuseLength) * 2 +\r\n            (Math.floor(this.frame / 10) % 2),\r\n          this.tileY,\r\n          1,\r\n          2,\r\n          this.x - this.drawX,\r\n          this.y - this.drawYOffset - this.drawY,\r\n          1,\r\n          2,\r\n          this.room.shadeColor,\r\n          this.shadeAmount(),\r\n        );\r\n      } else {\r\n        Game.drawObj(\r\n          this.tileX - 1,\r\n          this.tileY,\r\n          1,\r\n          2,\r\n          this.x - this.drawX,\r\n          this.y - this.drawYOffset - this.drawY,\r\n          1,\r\n          2,\r\n          this.room.shadeColor,\r\n          this.shadeAmount(),\r\n        );\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Entity } from \"../entity\";\r\nimport { Item } from \"../../item/item\";\r\n\r\nexport class ChestLayer extends Entity {\r\n  frame: number;\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.x = x;\r\n    this.y = y;\r\n    this.game = game;\r\n    this.room = room;\r\n\r\n    this.frame = 0;\r\n  }\r\n\r\n  setDrawableY = () => {\r\n    for (let i of this.room.items)\r\n      if (i.x === this.x && i.y === this.y)\r\n        this.drawableY ===\r\n          this.room.roomArray[this.x][this.y].drawableY + 0.001;\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    this.drawableY = this.y - 0.01;\r\n    this.setDrawableY;\r\n    if (!this.dead) {\r\n      Game.drawObj(\r\n        0,\r\n        4,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n  };\r\n}\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { HitWarning } from \"../../drawable/hitWarning\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { RedGem } from \"../../item/resource/redgem\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Spear } from \"../../item/weapon/spear\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { DeathParticle } from \"../../particle/deathParticle\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\n\r\nexport class BigKnightEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  ticksSinceFirstHit: number;\r\n  flashingFrame: number;\r\n  targetPlayer: Player;\r\n  aggro: boolean;\r\n  readonly REGEN_TICKS = 5;\r\n  drops: Array<Item>;\r\n  static difficulty: number = 4;\r\n  static tileX: number = 29;\r\n  static tileY: number = 0;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.w = 2;\r\n    this.h = 2;\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 6;\r\n    this.maxHealth = 6;\r\n    this.defaultMaxHealth = 6;\r\n    this.tileX = 29;\r\n    this.tileY = 0;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.ticksSinceFirstHit = 0;\r\n    this.flashingFrame = 0;\r\n    this.deathParticleColor = \"#ffffff\";\r\n    this.chainPushable = false;\r\n    this.name = \"giant knight\";\r\n    this.orthogonalAttack = true;\r\n\r\n    this.drops = [];\r\n    if (drop) this.drops.push(drop);\r\n    while (this.drops.length < 4) {\r\n      let dropProb = Random.rand();\r\n      if (dropProb < 0.005)\r\n        this.drops.push(new Spear(this.room, this.x, this.y));\r\n      else if (dropProb < 0.04)\r\n        this.drops.push(new RedGem(this.room, this.x, this.y));\r\n      else if (dropProb < 0.075)\r\n        this.drops.push(new RedGem(this.room, this.x, this.y));\r\n      else if (dropProb < 0.1)\r\n        this.drops.push(new RedGem(this.room, this.x, this.y));\r\n      else this.drops.push(new Coin(this.room, this.x, this.y));\r\n    }\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  bleed = () => {};\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      if (this.health === 1) {\r\n        this.ticksSinceFirstHit++;\r\n        if (this.ticksSinceFirstHit >= this.REGEN_TICKS) {\r\n          this.health++;\r\n          this.ticksSinceFirstHit = 0;\r\n        }\r\n      } else {\r\n        if (!this.seenPlayer) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (distance <= 4) {\r\n              this.targetPlayer = player;\r\n              this.facePlayer(player);\r\n              this.seenPlayer = true;\r\n              if (player === this.game.players[this.game.localPlayerID])\r\n                this.alertTicks = 1;\r\n              this.makeBigHitWarnings();\r\n            }\r\n          }\r\n        } else if (this.seenPlayer) {\r\n          if (this.room.playerTicked === this.targetPlayer) {\r\n            this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n            this.ticks++;\r\n\r\n            // Knight cadence: warn on even ticks, move on odd ticks\r\n            if (this.ticks % 2 === 0) {\r\n              this.rumbling = true;\r\n              this.makeBigHitWarnings();\r\n              return;\r\n            }\r\n\r\n            const oldX = this.x;\r\n            const oldY = this.y;\r\n\r\n            // Build disabled positions (entities and active spike traps)\r\n            let disablePositions = Array<astar.Position>();\r\n            for (const e of this.room.entities) {\r\n              if (e !== this) {\r\n                for (let dx = 0; dx < e.w; dx++) {\r\n                  for (let dy = 0; dy < e.h; dy++) {\r\n                    disablePositions.push({\r\n                      x: e.x + dx,\r\n                      y: e.y + dy,\r\n                    } as astar.Position);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            for (let xx = this.x - 1; xx <= this.x + this.w; xx++) {\r\n              for (let yy = this.y - 1; yy <= this.y + this.h; yy++) {\r\n                if (\r\n                  this.room.roomArray[xx] &&\r\n                  this.room.roomArray[xx][yy] &&\r\n                  this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                  (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n                ) {\r\n                  disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n                }\r\n              }\r\n            }\r\n\r\n            // Build grid\r\n            let grid = [] as any[];\r\n            for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n              grid[x] = [];\r\n              for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n                if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                  grid[x][y] = this.room.roomArray[x][y];\r\n                else grid[x][y] = false;\r\n              }\r\n            }\r\n\r\n            // A* pathfinding like BigZombieEnemy\r\n            let moves = astar.AStar.search(\r\n              grid,\r\n              this,\r\n              this.targetPlayer,\r\n              disablePositions,\r\n              false,\r\n              false,\r\n              true,\r\n              this.direction,\r\n            );\r\n\r\n            if (moves.length > 0) {\r\n              const moveX = moves[0].pos.x;\r\n              const moveY = moves[0].pos.y;\r\n              if (moveX > oldX) this.direction = Direction.RIGHT;\r\n              else if (moveX < oldX) this.direction = Direction.LEFT;\r\n              else if (moveY > oldY) this.direction = Direction.DOWN;\r\n              else if (moveY < oldY) this.direction = Direction.UP;\r\n              let hitPlayer = false;\r\n              if (this.health >= 3) {\r\n                for (const i in this.game.players) {\r\n                  if (\r\n                    this.game.rooms[this.game.players[i].levelID] === this.room\r\n                  ) {\r\n                    let playerHit = false;\r\n                    for (let dx = 0; dx < this.w; dx++) {\r\n                      for (let dy = 0; dy < this.h; dy++) {\r\n                        if (\r\n                          this.game.players[i].x === moveX + dx &&\r\n                          this.game.players[i].y === moveY + dy\r\n                        ) {\r\n                          playerHit = true;\r\n                          break;\r\n                        }\r\n                      }\r\n                      if (playerHit) break;\r\n                    }\r\n                    if (playerHit) {\r\n                      this.game.players[i].hurt(this.hit(), this.name);\r\n                      this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                      this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                      if (\r\n                        this.game.players[i] ===\r\n                        this.game.players[this.game.localPlayerID]\r\n                      )\r\n                        this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n                      hitPlayer = true;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              if (!hitPlayer) {\r\n                this.tryMove(moveX, moveY);\r\n                this.setDrawXY(oldX, oldY);\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n              }\r\n            } else {\r\n              this.facePlayer(this.targetPlayer);\r\n            }\r\n\r\n            // Handle regeneration while damaged\r\n            if (this.health < this.maxHealth) {\r\n              this.ticksSinceFirstHit++;\r\n              if (this.ticksSinceFirstHit >= this.REGEN_TICKS) {\r\n                this.health++;\r\n                this.ticksSinceFirstHit = 0;\r\n              }\r\n            }\r\n          }\r\n\r\n          let targetPlayerOffline =\r\n            Object.values(this.game.offlinePlayers).indexOf(\r\n              this.targetPlayer,\r\n            ) !== -1;\r\n          if (!this.aggro || targetPlayerOffline) {\r\n            let p = this.nearestPlayer();\r\n            if (p !== false) {\r\n              let [distance, player] = p;\r\n              if (\r\n                distance <= 4 &&\r\n                (targetPlayerOffline ||\r\n                  distance < this.playerDistance(this.targetPlayer))\r\n              ) {\r\n                if (player !== this.targetPlayer) {\r\n                  this.targetPlayer = player;\r\n                  this.facePlayer(player);\r\n                  if (player === this.game.players[this.game.localPlayerID])\r\n                    this.alertTicks = 1;\r\n                  if (this.health >= 3 && this.ticks % 2 === 0)\r\n                    this.rumbling = true;\r\n                  this.makeBigHitWarnings();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    if (!this.dead) {\r\n      let rumbleX = this.rumble(this.rumbling, this.frame).x;\r\n      let rumbleY = this.rumble(this.rumbling, this.frame, this.direction).y;\r\n      this.updateDrawXY(delta);\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n      const tileX =\r\n        this.ticks % 2 === 0\r\n          ? 2 * Math.floor((this.tileX + this.frame) / 2) + 1\r\n          : this.tileX;\r\n      const tileY = this.ticks % 2 === 0 ? this.tileY : this.tileY + 4;\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        tileX,\r\n        tileY,\r\n        2,\r\n        4,\r\n        this.x - this.drawX + rumbleX,\r\n        this.y - 2.5 - this.drawY,\r\n        2,\r\n        4,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n\r\n      if (!this.cloned) {\r\n        if (!this.seenPlayer) {\r\n          this.drawSleepingZs(\r\n            delta,\r\n            GameConstants.TILESIZE * 0.5,\r\n            GameConstants.TILESIZE * -1,\r\n          );\r\n        }\r\n        if (this.alertTicks > 0) {\r\n          this.drawExclamation(\r\n            delta,\r\n            GameConstants.TILESIZE * 0.5,\r\n            GameConstants.TILESIZE * -1,\r\n          );\r\n        }\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n\r\n    this.healthBar.draw(\r\n      delta,\r\n      this.health,\r\n      this.maxHealth,\r\n      this.x + 0.5,\r\n      this.y,\r\n      true,\r\n    );\r\n  };\r\n}\r\n","import { Room, RoomType } from \"../room/room\";\r\nimport { Game } from \"../game\";\r\nimport { Entity, EntityType } from \"../entity/entity\";\r\nimport { Item } from \"../item/item\";\r\nimport { DoorType } from \"../tile/door\";\r\nimport { Tile } from \"../tile/tile\";\r\nimport { Enemy } from \"../entity/enemy/enemy\";\r\nimport { LevelParameterGenerator } from \"./levelParametersGenerator\";\r\nimport { Environment } from \"./environment\";\r\nimport { EnvType } from \"../constants/environmentTypes\";\r\nimport { Populator } from \"../room/roomPopulator\";\r\nimport { GameplaySettings } from \"../game/gameplaySettings\";\r\nimport { DownLadder } from \"../tile/downLadder\";\r\nimport { Key } from \"../item/key\";\r\nimport { Lockable } from \"../tile/lockable\";\r\nimport { Random } from \"../utility/random\";\r\nimport { IdGenerator } from \"../globalStateManager/IdGenerator\";\r\n\r\nexport interface EnemyParameters {\r\n  enemyTables: Record<number, number[]>;\r\n  maxDepthTable: number;\r\n  minDepths: Record<number, number>;\r\n}\r\n\r\nconst enemyMinimumDepth: Record<number, number> = {\r\n  1: 0, // CrabEnemy\r\n  2: 1, // FrogEnemy\r\n  3: 0, // ZombieEnemy\r\n  4: 0, // SkullEnemy\r\n  5: 1, // EnergyWizardEnemy\r\n  6: 2, // ChargeEnemy\r\n  7: 1, // RookEnemy\r\n  8: 1, // BishopEnemy\r\n  9: 1, // ArmoredzombieEnemy\r\n  10: 2, // BigSkullEnemy\r\n  11: 2, // QueenEnemy\r\n  12: 1, // KnightEnemy\r\n  13: 2, // BigKnightEnemy\r\n  14: 2, // FireWizardEnemy\r\n  15: 2, // ArmoredSkullEnemy  16: 2, // ArmoredKnightEnemy\r\n  16: 2, // SpiderEnemy\r\n  17: 2, // MummyEnemy\r\n  18: 3, // WardenEnemy\r\n};\r\n/*\r\ninterface enemySpawnPoolData {\r\n  maxCount: number;\r\n  minCount: number;\r\n}\r\n\r\ninterface environmentData {\r\n  name: string;\r\n  preferredEnemies: Array<Enemy>;\r\n  preferredEntities: Array<Entity>;\r\n  entityBlacklist: Array<Entity>;\r\n  enemySpawnPoolData: enemySpawnPoolData;\r\n  roomData: roomData;\r\n}\r\n\r\ninterface entitySpawnData {\r\n  enemy: Enemy;\r\n  spawnChance: number;\r\n  maximumCount: number;\r\n}\r\n*/\r\n\r\nexport class Level {\r\n  globalId: string;\r\n  depth: number;\r\n  levelArray: (Tile | null)[][];\r\n  width: number;\r\n  height: number;\r\n  game: Game;\r\n  rooms: Room[];\r\n  roomsById: Map<string, Room>;\r\n  // Group rooms by path identifier\r\n  paths: Map<string, Room[]> = new Map();\r\n  pathsById: Map<string, Map<string, Room>> = new Map();\r\n  environment: Environment;\r\n  exitRoom: Room;\r\n  startRoom: Room;\r\n  enemyParameters: EnemyParameters;\r\n  isMainPath: boolean = true;\r\n  mapGroup: number;\r\n  populator: Populator;\r\n  skipPopulation: boolean = false;\r\n\r\n  constructor(\r\n    game: Game,\r\n    depth: number,\r\n    width: number,\r\n    height: number,\r\n    isMainPath: boolean = true,\r\n    mapGroup: number,\r\n    env: EnvType,\r\n    skipPopulation: boolean = false,\r\n  ) {\r\n    this.game = game;\r\n    this.globalId = IdGenerator.generate(\"L\");\r\n    this.depth = depth;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.rooms = [];\r\n    this.roomsById = new Map();\r\n    this.isMainPath = isMainPath;\r\n    this.initializeLevelArray();\r\n    this.mapGroup = mapGroup;\r\n    this.environment = new Environment(env);\r\n    this.populator = new Populator(this, skipPopulation);\r\n    this.skipPopulation = skipPopulation;\r\n\r\n    this.enemyParameters = this.getEnemyParameters();\r\n    //let mainPath = this.isMainPath ? \"main\" : \"side\";\r\n  }\r\n  getDownLadder(room: Room): DownLadder {\r\n    if (!room || room.type !== RoomType.ROPEHOLE) {\r\n      console.error(\"Room is not a rope hole\");\r\n      return null;\r\n    }\r\n\r\n    // Then check ROPEHOLE rooms\r\n    //let room = this.rooms.find((room) => room.type === RoomType.ROPEHOLE);\r\n\r\n    if (room) {\r\n      for (let x = room.roomX; x < room.roomX + room.width; x++) {\r\n        for (let y = room.roomY; y < room.roomY + room.height; y++) {\r\n          const tile = room.roomArray[x][y];\r\n          if (tile instanceof DownLadder) {\r\n            return tile;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    console.error(\"No down ladder found\");\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Finds the first sidepath DownLadder whose lockable.keyID matches the provided keyID\r\n   * within the same path of the provided origin room. Returns the ladder tile and its room.\r\n   */\r\n  findSidepathDownLadderByKeyID = (\r\n    origin: Room,\r\n    keyID: number,\r\n  ): { ladder: DownLadder; room: Room } | null => {\r\n    if (!origin || keyID === null || keyID === undefined) return null;\r\n    // Search rooms reachable on the same path as origin\r\n    const rooms = origin.path();\r\n    console.log(\r\n      `findSidepathDownLadderByKeyID: origin=${(origin as any).globalId} keyID=${keyID} roomsInPath=${rooms.length}`,\r\n    );\r\n    for (const r of rooms) {\r\n      for (let x = r.roomX; x < r.roomX + r.width; x++) {\r\n        for (let y = r.roomY; y < r.roomY + r.height; y++) {\r\n          const tile = r.roomArray[x][y];\r\n          if (tile instanceof DownLadder && tile.isSidePath) {\r\n            const dlKey = tile.lockable?.keyID;\r\n            if (dlKey === keyID) {\r\n              console.log(\r\n                `findSidepathDownLadderByKeyID: MATCH room=${(r as any).globalId} at (${x},${y}) keyID=${dlKey}`,\r\n              );\r\n              return { ladder: tile, room: r };\r\n            } else {\r\n              // Log near misses occasionally\r\n              if (Math.random() < 0.02)\r\n                console.log(\r\n                  `findSidepathDownLadderByKeyID: saw sidepath downladder key=${dlKey}, want=${keyID} in room ${(r as any).globalId}`,\r\n                );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    console.log(\r\n      `findSidepathDownLadderByKeyID: NO MATCH for keyID=${keyID} from origin ${(origin as any).globalId}`,\r\n    );\r\n    return null;\r\n  };\r\n\r\n  getKeyRoom(room: Room): Room | null {\r\n    const rooms = room.path();\r\n    for (const room of rooms) {\r\n      if (room.hasKey()) return room;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  distributeKey(downLadder: DownLadder) {\r\n    if (this.skipPopulation) return;\r\n\r\n    const disableCoords = {\r\n      disableX: downLadder.x,\r\n      disableY: downLadder.y,\r\n      disableRoom: downLadder.room,\r\n    };\r\n\r\n    const rooms = downLadder.room.path();\r\n\r\n    if (rooms.length === 0) {\r\n      console.error(\"No eligible rooms found for key placement\");\r\n      return;\r\n    }\r\n\r\n    const randomRoom = this.getFurthestFromLadders(downLadder.room);\r\n\r\n    let emptyTiles = randomRoom.getEmptyTiles();\r\n    if (disableCoords.disableRoom === randomRoom) {\r\n      emptyTiles = emptyTiles.filter(\r\n        (t) => t.x !== disableCoords.disableX && t.y !== disableCoords.disableY,\r\n      );\r\n    }\r\n\r\n    if (emptyTiles.length === 0) {\r\n      console.error(\r\n        `No empty tiles found in room ${randomRoom.id} for key placement, unlocking downladder ${downLadder.room.id}`,\r\n        downLadder.lockable.removeLock(),\r\n      );\r\n      return;\r\n    }\r\n\r\n    const randomIndex = Math.floor(Random.rand() * emptyTiles.length);\r\n    const randomTile = emptyTiles[randomIndex];\r\n\r\n    const key = new Key(randomRoom, randomTile.x, randomTile.y);\r\n    downLadder.lockable.setKey(key);\r\n\r\n    randomRoom.items.push(key);\r\n    //console.log(\"Key successfully distributed and linked to down ladder\");\r\n    //this.game.player.inventory.addItem(key);\r\n  }\r\n\r\n  setExitRoom(mainPath = true) {\r\n    if (mainPath) {\r\n      this.exitRoom = this.rooms.find(\r\n        (room) => room.type === RoomType.DOWNLADDER,\r\n      );\r\n    } else {\r\n      this.exitRoom = this.getLadderRoom(\r\n        this.rooms[this.rooms.length - 1],\r\n        \"down\",\r\n      );\r\n    }\r\n  }\r\n\r\n  setStartRoom(mainPath = true) {\r\n    if (mainPath) {\r\n      this.startRoom = this.rooms.find((room) => room.type === RoomType.START);\r\n    } else {\r\n      this.startRoom = this.getLadderRoom(\r\n        this.rooms[this.rooms.length - 1],\r\n        \"up\",\r\n      );\r\n    }\r\n  }\r\n\r\n  getLadderRoom = (room: Room, ladderType: \"up\" | \"down\"): Room | null => {\r\n    for (const r of room.path()) {\r\n      if (r.hasLadder(ladderType)) return r;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  setRooms(rooms: Room[]) {\r\n    this.rooms = rooms;\r\n    this.setExitRoom();\r\n    this.setStartRoom();\r\n    this.roomsById.clear();\r\n    this.paths.clear();\r\n    this.pathsById.clear();\r\n    rooms.forEach((room) => {\r\n      room.id = this.rooms.indexOf(room);\r\n      this.roomsById.set(room.globalId, room);\r\n      const pid = room.pathId || \"main\";\r\n      if (!this.paths.has(pid)) this.paths.set(pid, []);\r\n      if (!this.pathsById.has(pid)) this.pathsById.set(pid, new Map());\r\n      this.paths.get(pid)!.push(room);\r\n      this.pathsById.get(pid)!.set(room.globalId, room);\r\n    });\r\n    this.game.roomsById = new Map(rooms.map((r) => [r.globalId, r]));\r\n  }\r\n\r\n  getRoomById(id: string): Room | undefined {\r\n    return this.roomsById.get(id);\r\n  }\r\n\r\n  initializeLevelArray = () => {\r\n    // Create a 300x300 grid for depth 0\r\n    this.levelArray = [];\r\n    for (let x = 0; x < this.width; x++) {\r\n      this.levelArray[x] = [];\r\n      for (let y = 0; y < this.height; y++) {\r\n        this.levelArray[x][y] = null;\r\n      }\r\n    }\r\n  };\r\n\r\n  getFurthestFromLadder = (ladderType: \"up\" | \"down\"): Room | null => {\r\n    let furthestRoom: Room | null = null;\r\n    let furthestDistance = 0;\r\n\r\n    for (const room of this.rooms) {\r\n      const distance = room.getDistanceToNearestLadder(ladderType);\r\n      if (distance && distance > furthestDistance) {\r\n        furthestDistance = distance;\r\n        furthestRoom = room;\r\n      }\r\n    }\r\n    return furthestRoom;\r\n  };\r\n\r\n  getFurthestFromLadders = (downLadderRoom: Room): Room | null => {\r\n    let furthestRoom: Room | null = null;\r\n    let furthestMinDistance = -Infinity;\r\n\r\n    // Consider all rooms in the level. We want the room whose minimum distance\r\n    // to both ladder types is maximized. If only one ladder type exists, we\r\n    // fall back to maximizing distance to the one that exists.\r\n    const rooms = downLadderRoom.path();\r\n\r\n    let distanceToUp = 0;\r\n    let distanceToDown = 0;\r\n    for (const room of rooms) {\r\n      const upDistance = room.getDistanceToNearestLadder(\"up\");\r\n      const downDistance = room.getDistanceToNearestLadder(\"down\");\r\n\r\n      distanceToUp = upDistance;\r\n      distanceToDown = downDistance;\r\n\r\n      const distances: number[] = [];\r\n      if (upDistance !== null && upDistance !== undefined)\r\n        distances.push(upDistance);\r\n      if (downDistance !== null && downDistance !== undefined)\r\n        distances.push(downDistance);\r\n\r\n      if (distances.length === 0) continue; // no ladders present anywhere\r\n\r\n      const minDistance = Math.min(...distances);\r\n\r\n      if (minDistance > furthestMinDistance) {\r\n        furthestMinDistance = minDistance;\r\n        furthestRoom = room;\r\n      }\r\n    }\r\n    const up = furthestRoom?.getDistanceToNearestLadder(\"up\");\r\n    const down = furthestRoom?.getDistanceToNearestLadder(\"down\");\r\n    console.log(\"furthestRoom\", furthestRoom?.globalId, {\r\n      up,\r\n      down,\r\n      furthestMinDistance,\r\n    });\r\n    return furthestRoom;\r\n  };\r\n\r\n  loadRoomsIntoLevelArray = () => {\r\n    for (let room of this.rooms) {\r\n      for (let x = room.roomX; x < room.roomX + room.width; x++) {\r\n        for (let y = room.roomY; y < room.roomY + room.height; y++) {\r\n          // Add bounds checking\r\n          if (x >= 0 && x < this.width && y >= 0 && y < this.height) {\r\n            // Ensure room array has valid tiles at these coordinates\r\n            if (room.roomArray[x] && room.roomArray[x][y]) {\r\n              this.levelArray[x][y] = room.roomArray[x][y];\r\n            } else {\r\n              console.warn(\r\n                `Room array missing tile at (${x}, ${y}) for room ${room.id}`,\r\n              );\r\n            }\r\n          } else {\r\n            console.warn(\r\n              `Room coordinates (${x}, ${y}) are outside level bounds (${this.width}, ${this.height})`,\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Generates enemy parameters based on the current depth.\r\n   * @param depth The current depth level.\r\n   * @returns An object conforming to the EnemyParameters interface.\r\n   */\r\n  getEnemyParameters(): EnemyParameters {\r\n    // This can now be simplified or deprecated since Populator handles everything\r\n    return {\r\n      enemyTables: {},\r\n      maxDepthTable: this.depth,\r\n      minDepths: enemyMinimumDepth,\r\n    };\r\n  }\r\n\r\n  setRoomSkins() {\r\n    for (let room of this.rooms) {\r\n      room.skin = this.environment.skin;\r\n    }\r\n  }\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Usable } from \"./usable\";\r\nimport { Weapon } from \"../weapon/weapon\";\r\n\r\nexport class WeaponBlood extends Usable {\r\n  static itemName = \"cursed blood\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.tileX = 12;\r\n    this.tileY = 4;\r\n    this.offsetY = -0.3;\r\n    this.canUseOnOther = true;\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    player.health = Math.min(player.maxHealth, player.health + 1);\r\n    if (this.level.game.rooms[player.levelID] === this.level.game.room)\r\n      Sound.heal();\r\n\r\n    //this.level.items = this.level.items.filter((x) => x !== this); // removes itself from the level\r\n  };\r\n\r\n  useOnOther = (player: Player, other: Item) => {\r\n    if (other instanceof Weapon) {\r\n      other.applyStatus({ blood: true, poison: false });\r\n      player.inventory.removeItem(this);\r\n      this.level.game.pushMessage(\r\n        `You coat your ${other.name} in cursed blood.`,\r\n      );\r\n    }\r\n  };\r\n\r\n  getDescription = () => {\r\n    return \"WEAPON BLOOD\\nCan be applied to weapons to deal bleed damage\";\r\n  };\r\n}\r\n","import { Game } from \"../game\";\r\nimport { GameConstants } from \"../game/gameConstants\";\r\n\r\ninterface Settings {\r\n  enabled: boolean;\r\n  globalAlpha: number;\r\n  fillStyle: string;\r\n  globalCompositeOperation: GlobalCompositeOperation;\r\n}\r\n\r\nexport class PostProcessor {\r\n  static settings: Settings = {\r\n    enabled: true,\r\n    globalAlpha: 0.15,\r\n    fillStyle: \"#006A6E\",\r\n    globalCompositeOperation: \"screen\",\r\n  };\r\n\r\n  static underwater: boolean = false;\r\n\r\n  static draw = (delta: number) => {\r\n    if (!PostProcessor.settings.enabled) return;\r\n    if (PostProcessor.underwater) {\r\n      PostProcessor.settings.globalAlpha = 0.3;\r\n      PostProcessor.settings.fillStyle = \"#003B6F\"; //deep underwater blue\r\n      PostProcessor.settings.globalCompositeOperation = \"source-over\";\r\n    }\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = PostProcessor.settings.globalAlpha;\r\n    Game.ctx.globalCompositeOperation =\r\n      PostProcessor.settings.globalCompositeOperation;\r\n    // GameConstants.SHADE_LAYER_COMPOSITE_OPERATION as GlobalCompositeOperation; //\"soft-light\";\r\n\r\n    Game.ctx.fillStyle = PostProcessor.settings.fillStyle;\r\n    //Game.ctx.fillStyle = \"#003B6F\"; //deep underwater blue\r\n    //Game.ctx.fillStyle = \"#2F2F2F\"; //smoky fog prison\r\n\r\n    //Game.ctx.fillStyle = \"#4a6c4b\"; //darker muddy green\r\n    //Game.ctx.fillStyle = \"#800000\"; // lighter red for dungeon hell theme\r\n\r\n    Game.ctx.fillRect(0, 0, GameConstants.WIDTH, GameConstants.HEIGHT);\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { RedGem } from \"./redgem\";\r\nimport { BlueGem } from \"./bluegem\";\r\nimport { GreenGem } from \"./greengem\";\r\nimport { Inventory } from \"../../inventory/inventory\";\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { Random } from \"../../utility/random\";\r\nexport class Geode extends Item {\r\n  static itemName = \"geode\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 15;\r\n    this.tileY = 2;\r\n    this.name = Geode.itemName;\r\n\r\n    this.stackable = true;\r\n  }\r\n\r\n  getDescription = (): string => {\r\n    return \"GEODE\\nWhen in doubt hit it with a hammer.\";\r\n  };\r\n\r\n  split = (inventory: Inventory) => {\r\n    if (inventory.isFull()) {\r\n      this.level.game.pushMessage(\r\n        `You don't have enough space in your inventory to split the geode.`,\r\n      );\r\n    } else {\r\n      const numGems = Math.min(1, Utils.randomNormalInt(1, 3));\r\n      let gemTypes = [BlueGem, RedGem, GreenGem];\r\n      let gemType = gemTypes[Math.floor(Random.rand() * gemTypes.length)];\r\n      this.level.game.pushMessage(\r\n        `You split the geode and find ${numGems} ${gemType.itemName}.`,\r\n      );\r\n\r\n      for (let i = 0; i < numGems; i++) {\r\n        inventory.addItem(new gemType(this.level, this.x, this.y));\r\n      }\r\n      if (this.stackCount > 1) {\r\n        this.stackCount--;\r\n      } else inventory.removeItem(this);\r\n    }\r\n  };\r\n}\r\n","export class Random {\r\n  static state: number;\r\n\r\n  static setState = (state: number) => {\r\n    Random.state = state;\r\n  };\r\n\r\n  /**\r\n   * Generates a pseudorandom floating-point number using a xorshift algorithm.\r\n   *\r\n   * This method implements a 32-bit xorshift PRNG that modifies the internal state\r\n   * using three XOR operations with bit shifts (21 left, 35 right, 4 left).\r\n   * The algorithm is fast and suitable for games but should not be used for\r\n   * cryptographic purposes.\r\n   *\r\n   * @returns {number} A pseudorandom floating-point number in the range [0, 1).\r\n   *                   The value is uniformly distributed across this range.\r\n   *\r\n   * @example\r\n   * Random.setState(12345); // Set initial seed\r\n   * const randomValue = Random.rand(); // Returns something like 0.7234567891\r\n   *\r\n   * @see https://en.wikipedia.org/wiki/Xorshift for algorithm details\r\n   */\r\n  static rand = () => {\r\n    Random.state ^= Random.state << 21;\r\n    Random.state ^= Random.state >>> 35;\r\n    Random.state ^= Random.state << 4;\r\n    return (Random.state >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\n// copy and paste into browser console\r\n// let state;\r\n// let rand = () => { state ^= (state << 21); state ^= (state >>> 35); state ^= (state << 4); return (state >>> 0) / 4294967296; }\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { GoldRing } from \"../jewelry/goldRing\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class IronBar extends Item {\r\n  static itemName = \"iron bar\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 16;\r\n    this.tileY = 0;\r\n    this.name = IronBar.itemName;\r\n    this.stackable = true;\r\n    this.description = \"A bar of iron. Hit it with a hammer to make a ring.\";\r\n  }\r\n\r\n  smith = (player: Player) => {\r\n    player.inventory.subtractItem(this, 1);\r\n    //player.inventory.addItem(new GoldRing(this.level, this.x, this.y));\r\n    this.level.game.pushMessage(`You hammer the iron bar into a ring.`);\r\n\r\n    Sound.playSmith();\r\n  };\r\n}\r\n","// Minimal cookie helpers with chunking for larger payloads\r\n\r\nconst toK = (name: string) => encodeURIComponent(name);\r\nconst toV = (value: string) => encodeURIComponent(value);\r\n\r\nexport const setCookie = (name: string, value: string, maxAgeDays = 180) => {\r\n  try {\r\n    const maxAge = maxAgeDays * 24 * 60 * 60;\r\n    document.cookie = `${toK(name)}=${toV(value)}; path=/; max-age=${maxAge}`;\r\n    // Verify round-trip; if it failed (file:// or blocked), fallback to localStorage\r\n    const rt = getCookie(name);\r\n    if (rt === null) {\r\n      localStorage.setItem(name, value);\r\n    }\r\n  } catch {\r\n    try {\r\n      localStorage.setItem(name, value);\r\n    } catch {}\r\n  }\r\n};\r\n\r\nexport const getCookie = (name: string): string | null => {\r\n  try {\r\n    const key = toK(name) + \"=\";\r\n    const parts = document.cookie.split(/;\\s*/);\r\n    for (const part of parts) {\r\n      if (part.startsWith(key)) {\r\n        return decodeURIComponent(part.substring(key.length));\r\n      }\r\n    }\r\n  } catch {}\r\n  // Fallback to localStorage\r\n  try {\r\n    const v = localStorage.getItem(name);\r\n    return v === null ? null : v;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const deleteCookie = (name: string) => {\r\n  try {\r\n    document.cookie = `${toK(name)}=; path=/; max-age=0`;\r\n  } catch {}\r\n  try {\r\n    localStorage.removeItem(name);\r\n  } catch {}\r\n};\r\n\r\n// Chunk large strings across multiple cookies\r\nconst CHUNK_SIZE = 3000; // stay well under 4KB after key/attrs\r\n\r\nexport const setCookieChunks = (\r\n  prefix: string,\r\n  value: string,\r\n  maxAgeDays = 30,\r\n) => {\r\n  // Clear existing chunks first\r\n  const meta = getCookie(`${prefix}_meta`);\r\n  if (meta) {\r\n    const total = parseInt(meta, 10);\r\n    if (Number.isFinite(total)) {\r\n      for (let i = 0; i < total; i++) deleteCookie(`${prefix}_${i}`);\r\n    }\r\n    deleteCookie(`${prefix}_meta`);\r\n  }\r\n\r\n  // Write new chunks\r\n  const total = Math.ceil(value.length / CHUNK_SIZE) || 1;\r\n  for (let i = 0; i < total; i++) {\r\n    const slice = value.slice(i * CHUNK_SIZE, (i + 1) * CHUNK_SIZE);\r\n    setCookie(`${prefix}_${i}`, slice, maxAgeDays);\r\n  }\r\n  setCookie(`${prefix}_meta`, String(total), maxAgeDays);\r\n};\r\n\r\nexport const getCookieChunks = (prefix: string): string | null => {\r\n  const meta = getCookie(`${prefix}_meta`);\r\n  if (!meta) return null;\r\n  const total = parseInt(meta, 10);\r\n  if (!Number.isFinite(total) || total <= 0) return null;\r\n  let out = \"\";\r\n  for (let i = 0; i < total; i++) {\r\n    const chunk = getCookie(`${prefix}_${i}`);\r\n    if (chunk === null) return null;\r\n    out += chunk;\r\n  }\r\n  return out;\r\n};\r\n","import { Entity, EntityDirection } from \"../entity\";\r\nimport { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Player } from \"../../player/player\";\r\nimport { HitWarning } from \"../../drawable/hitWarning\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Coin } from \"../../item/coin\";\r\nimport { RedGem } from \"../../item/resource/redgem\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Spear } from \"../../item/weapon/spear\";\r\nimport { DualDagger } from \"../../item/weapon/dualdagger\";\r\nimport { GreenGem } from \"../../item/resource/greengem\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Pickaxe } from \"../../item/tool/pickaxe\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { BeamEffect } from \"../../projectile/beamEffect\";\r\nimport { ZombieEnemy } from \"./zombieEnemy\";\r\nimport { CrusherEnemy } from \"./crusherEnemy\";\r\nimport { LightSource } from \"../../lighting/lightSource\";\r\n\r\nexport class WardenEnemy extends Enemy {\r\n  frame: number;\r\n  ticks: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  dir: Direction;\r\n  static difficulty: number = 2;\r\n  static tileX: number = 21;\r\n  static tileY: number = 0;\r\n  crusherPositions: { x: number; y: number }[] = [];\r\n  crusherCount: number = 0;\r\n  crushers: CrusherEnemy[] = [];\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.w = 1;\r\n    this.h = 1;\r\n\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 6;\r\n    this.maxHealth = 6;\r\n    this.defaultMaxHealth = 6;\r\n    this.tileX = 43;\r\n    this.tileY = 10;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.dir = Direction.DOWN;\r\n    this.name = \"warden\";\r\n    this.chainPushable = false;\r\n\r\n    this.forwardOnlyAttack = false;\r\n    this.drawMoveSpeed = 0.9;\r\n    this.jumpHeight = 0.35;\r\n    this.drawYOffset = 1.5;\r\n    this.alertRange = 10;\r\n    this.orthogonalAttack = true;\r\n    this.crusherPositions = [];\r\n    this.crusherCount = 0;\r\n    this.crushers = [];\r\n    this.baseDamage = 2;\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      10,\r\n      [255, 10, 10],\r\n      1.5,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n    this.hasBloom = true;\r\n    this.bloomColor = \"#ff0a0a\";\r\n    this.bloomAlpha = 1;\r\n\r\n    this.room.updateLighting();\r\n\r\n    if (drop) this.drop = drop;\r\n    const dropAmount = Math.floor(Random.rand() * 3) + 2;\r\n    while (this.drops.length < dropAmount && !this.cloned) {\r\n      this.getDrop();\r\n    }\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  bleed = () => {};\r\n  poison = () => {};\r\n\r\n  createCrusherBlocks = (crusherPositions: { x: number; y: number }[]) => {\r\n    for (const position of crusherPositions) {\r\n      const crusher = new CrusherEnemy(\r\n        this.room,\r\n        this.game,\r\n        position.x,\r\n        position.y,\r\n      );\r\n      this.room.entities.push(crusher);\r\n      this.crusherCount++;\r\n      this.crushers.push(crusher);\r\n    }\r\n  };\r\n\r\n  createCrusherChains = () => {\r\n    for (const crusher of this.crushers) {\r\n      let beam = new BeamEffect(crusher.x, crusher.y, this.x, this.y, crusher);\r\n      beam.compositeOperation = \"source-over\";\r\n      beam.color = \"#800000\"; //dark red\r\n      beam.turbulence = 0.4;\r\n      beam.gravity = 0.5;\r\n      beam.iterations = 1;\r\n      beam.segments = 100;\r\n      beam.angleChange = 0.001;\r\n      beam.springDamping = 0.01;\r\n      beam.drawableY = this.drawableY - 0.1;\r\n      this.room.projectiles.push(beam);\r\n    }\r\n  };\r\n\r\n  getCrusherPositions = () => {\r\n    return [\r\n      { x: this.x - 1, y: this.y },\r\n      { x: this.x + 1, y: this.y },\r\n    ];\r\n  };\r\n\r\n  setCrusherDrawableY = () => {\r\n    for (const crusher of this.crushers) {\r\n      if (this.y > crusher.y) {\r\n        this.drawableY = this.drawableY - 0.1;\r\n      } else {\r\n        crusher.drawableY = this.drawableY - 0.1;\r\n      }\r\n    }\r\n  };\r\n\r\n  initializeCrushers = () => {\r\n    // Seed default positions on first run\r\n    if (this.crusherPositions.length === 0) {\r\n      this.crusherPositions = this.getCrusherPositions();\r\n    }\r\n    // Create crushers if not yet created for all positions\r\n    if (this.crusherPositions.length > this.crusherCount) {\r\n      this.createCrusherBlocks(this.crusherPositions);\r\n      this.createCrusherChains();\r\n    }\r\n  };\r\n\r\n  removeCrusherChains = () => {\r\n    for (let beam of this.room.projectiles) {\r\n      if (beam instanceof BeamEffect) {\r\n        if (\r\n          beam.parent instanceof CrusherEnemy &&\r\n          this.crushers.includes(beam.parent as CrusherEnemy) &&\r\n          beam.parent.dead\r\n        ) {\r\n          this.room.projectiles = this.room.projectiles.filter(\r\n            (b) => b !== beam,\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  uniqueKillBehavior = () => {\r\n    this.removeCrusherChains();\r\n    for (const crusher of this.crushers) {\r\n      if (!crusher.dead) {\r\n        crusher.kill();\r\n      }\r\n    }\r\n    this.removeLightSource(this.lightSource);\r\n  };\r\n\r\n  updateCrusherChains = (delta: number) => {\r\n    for (let beam of this.room.projectiles) {\r\n      if (beam instanceof BeamEffect) {\r\n        if (\r\n          beam.parent !== this.crushers[0] &&\r\n          beam.parent !== this.crushers[1]\r\n        )\r\n          continue;\r\n        beam.setTarget(\r\n          this.x - this.drawX,\r\n          this.y - this.drawY - 0.5,\r\n          beam.parent.x - beam.parent.drawX,\r\n          beam.parent.y -\r\n            beam.parent.drawY -\r\n            1.25 +\r\n            (beam.parent as CrusherEnemy).softAnimateY,\r\n        );\r\n        beam.drawableY = this.drawableY - 0.1;\r\n\r\n        switch (Math.floor(this.frame)) {\r\n          case 0:\r\n            beam.color = \"#800000\"; //dark red\r\n            break;\r\n          case 1:\r\n            beam.color = \"#ff0000\"; //medium red\r\n            break;\r\n          case 2:\r\n            beam.color = \"#ff0000\"; //light red\r\n            break;\r\n          case 3:\r\n            beam.color = \"#800000\"; //dark red\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  behavior = () => {\r\n    this.initializeCrushers();\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          this.ticks++;\r\n          if (this.ticks % 2 === 1) {\r\n            this.rumbling = true;\r\n            let oldX = this.x;\r\n            let oldY = this.y;\r\n            let disablePositions = Array<astar.Position>();\r\n\r\n            for (const e of this.room.entities) {\r\n              if (e !== this) {\r\n                disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n              }\r\n            }\r\n\r\n            for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n              for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n                if (\r\n                  this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                  (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n                ) {\r\n                  // don't walk on active spiketraps\r\n                  disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n                }\r\n              }\r\n            }\r\n\r\n            let grid = [];\r\n            for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n              grid[x] = [];\r\n              for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n                if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                  grid[x][y] = this.room.roomArray[x][y];\r\n                else grid[x][y] = false;\r\n              }\r\n            }\r\n            this.target =\r\n              this.getAverageLuminance() > 0 // 0.8\r\n                ? this.targetPlayer\r\n                : this.room.getExtremeLuminanceFromPoint(this.x, this.y)\r\n                    .darkest;\r\n            let moves = astar.AStar.search(\r\n              grid,\r\n              this,\r\n              this.target,\r\n              disablePositions,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              undefined,\r\n              this.lastPlayerPos,\r\n            );\r\n            if (moves.length > 0) {\r\n              let hitPlayer = false;\r\n              for (const i in this.game.players) {\r\n                if (\r\n                  this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n                  this.game.players[i].x === moves[0].pos.x &&\r\n                  this.game.players[i].y === moves[0].pos.y\r\n                ) {\r\n                  this.game.players[i].hurt(this.hit(), this.name);\r\n                  this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n                  this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n                  if (\r\n                    this.game.players[i] ===\r\n                    this.game.players[this.game.localPlayerID]\r\n                  )\r\n                    this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n                  hitPlayer = true;\r\n                }\r\n              }\r\n\r\n              if (!hitPlayer) {\r\n                this.tryMove(moves[0].pos.x, moves[0].pos.y);\r\n                this.setDrawXY(oldX, oldY);\r\n                if (this.x > oldX) this.direction = Direction.RIGHT;\r\n                else if (this.x < oldX) this.direction = Direction.LEFT;\r\n                else if (this.y > oldY) this.direction = Direction.DOWN;\r\n                else if (this.y < oldY) this.direction = Direction.UP;\r\n              }\r\n            }\r\n            this.rumbling = false;\r\n          } else {\r\n            this.rumbling = true;\r\n            /*\r\n            if (\r\n              (this.target.x === this.targetPlayer.x &&\r\n                this.target.y === this.targetPlayer.y) ||\r\n              Utils.distance(\r\n                this.targetPlayer.x,\r\n                this.targetPlayer.y,\r\n                this.x,\r\n                this.y,\r\n              ) <= 2\r\n            )\r\n              */ {\r\n              this.makeHitWarnings();\r\n            }\r\n          }\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                if (this.ticks % 2 === 0) {\r\n                  /*\r\n                  if (\r\n                    (this.target.x === this.targetPlayer.x &&\r\n                      this.target.y === this.targetPlayer.y) ||\r\n                    Utils.distance(\r\n                      this.targetPlayer.x,\r\n                      this.targetPlayer.y,\r\n                      this.x,\r\n                      this.y,\r\n                    ) <= 2\r\n                  ) */ {\r\n                    this.makeHitWarnings();\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.lightSource) {\r\n        this.lightSource.updatePosition(this.x + 0.5, this.y + 0.5);\r\n      }\r\n    }\r\n\r\n    this.removeCrusherChains();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n\r\n    this.healthBar.draw(\r\n      delta,\r\n      this.health,\r\n      this.maxHealth,\r\n      this.x,\r\n      this.y,\r\n      true,\r\n    );\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    //this.updateShadeColor(delta);\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    this.updateDrawXY(delta);\r\n    this.setCrusherDrawableY();\r\n    this.updateCrusherChains(delta);\r\n    this.frame += 0.1 * delta;\r\n    if (this.frame >= 4) this.frame = 0;\r\n    if (this.hasShadow) this.drawShadow(delta);\r\n    Game.drawMob(\r\n      this.tileX + 2 * Math.floor(this.frame),\r\n      this.tileY,\r\n      2,\r\n      2,\r\n      this.x - this.drawX - 0.5,\r\n      this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n      2,\r\n      2,\r\n      this.softShadeColor,\r\n      this.shadeAmount(),\r\n    );\r\n\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta);\r\n      }\r\n    }\r\n    Game.ctx.globalAlpha = 1;\r\n  };\r\n}\r\n","import { GameplaySettings } from \"../game/gameplaySettings\";\r\nimport { Item } from \"./item\";\r\n\r\nexport class ItemGroup {\r\n  items: Item[];\r\n  constructor(items: Item[]) {\r\n    this.items = items;\r\n  }\r\n\r\n  destroyOtherItems(item: Item) {\r\n    for (const i of this.items) {\r\n      if (i !== item) {\r\n        i.destroy();\r\n      }\r\n    }\r\n    item.level.game.pushMessage(`You choose to keep the ${item.name}.`);\r\n\r\n    if (GameplaySettings.UNBREAKABLE_ITEMGROUP_LOOT) {\r\n      item.degradeable = false;\r\n      item.level.game.pushMessage(`This one won't break.`);\r\n      item.description += \" Unbreakable.\";\r\n    }\r\n  }\r\n}\r\n","import { Item } from \"../../item/item\";\r\nimport { Game } from \"../../game\";\r\nimport { Key } from \"../../item/key\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { Armor } from \"../../item/armor\";\r\nimport { Resource } from \"./resource\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Sound } from \"../../sound/sound\";\r\nimport { Geode } from \"../../item/resource/geode\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { IronOre } from \"../../item/resource/ironOre\";\r\nexport class IronResource extends Resource {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n\r\n    this.tileX = 13;\r\n    this.tileY = 0;\r\n    this.health = 2;\r\n    this.name = \"iron\";\r\n    if (Random.rand() < 0.025) {\r\n      this.drops.push(new Geode(this.room, this.x, this.y));\r\n    }\r\n\r\n    this.drops.push(new IronOre(this.room, this.x, this.y));\r\n  }\r\n}\r\n","import { Entity } from \"../entity\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Game } from \"../../game\";\r\nimport { Heart } from \"../../item/usable/heart\";\r\nimport { LevelConstants } from \"../../level/levelConstants\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { Shrooms } from \"../../item/usable/shrooms\";\r\nimport { EntityType } from \"../entity\";\r\nimport { LightSource } from \"../../lighting/lightSource\";\r\nimport { Spellbook } from \"../../item/weapon/spellbook\";\r\nimport { Random } from \"../../utility/random\";\r\nimport { Candle } from \"../../item/light/candle\";\r\nimport { ImageParticle } from \"../../particle/imageParticle\";\r\nimport { Torch } from \"../../item/light/torch\";\r\n\r\nexport class Candelabra extends Entity {\r\n  constructor(room: Room, game: Game, x: number, y: number) {\r\n    super(room, game, x, y);\r\n    this.room = room;\r\n    this.health = 1;\r\n    this.tileX = 10;\r\n    this.tileY = 4;\r\n    this.hasShadow = true;\r\n    this.chainPushable = false;\r\n    this.name = \"candelabra\";\r\n    this.drops.push(new Candle(this.room, this.x, this.y));\r\n    this.imageParticleX = 0;\r\n    this.imageParticleY = 25;\r\n    this.bloomColor = \"#FFA500\";\r\n    this.hasBloom = true;\r\n    this.bloomAlpha = 1;\r\n    this.softBloomAlpha = 0;\r\n    this.lightSource = new LightSource(\r\n      this.x + 0.5,\r\n      this.y + 0.5,\r\n      7,\r\n      [200, 30, 1],\r\n      4,\r\n    );\r\n    this.addLightSource(this.lightSource);\r\n  }\r\n\r\n  get type() {\r\n    return EntityType.PROP;\r\n  }\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n    this.frame += 0.25 * delta;\r\n    if (this.frame >= 4) this.frame = 0;\r\n    if (!this.dead) {\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n\r\n      this.updateDrawXY(delta);\r\n      Game.drawObj(\r\n        this.tileX + Math.floor(this.frame),\r\n        this.tileY,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.room.shadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawTopLayer = (delta: number) => {\r\n    this.drawableY = this.y;\r\n  };\r\n}\r\n","import { Weapon } from \"../weapon/weapon\";\r\nimport { Room } from \"../../room/room\";\r\nimport { Item } from \"../item\";\r\nimport { Usable } from \"../usable/usable\";\r\nimport { WeaponFragments } from \"../usable/weaponFragments\";\r\nimport { Player } from \"../../player/player\";\r\n\r\nexport class Pickaxe extends Weapon {\r\n  static itemName = \"pickaxe\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n    this.tileX = 30;\r\n    this.tileY = 0;\r\n    this.name = Pickaxe.itemName;\r\n    this.description = \"allows mining rocks without equipping\";\r\n    this.canMine = true;\r\n  }\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Usable } from \"./usable\";\r\nimport { Sound } from \"../../sound/sound\";\r\n\r\nexport class Apple extends Usable {\r\n  static itemName = \"apple\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 6;\r\n    this.tileY = 2;\r\n\r\n    this.stackable = true;\r\n  }\r\n\r\n  onUse = (player: Player) => {\r\n    if (player.health < player.maxHealth) {\r\n      player.health = Math.min(player.maxHealth, player.health + 1);\r\n      Sound.playEat();\r\n      if (this.stackCount > 1) {\r\n        this.stackCount--;\r\n      } else player.inventory.removeItem(this);\r\n      player.game.pushMessage(\"You eat the apple and feel better.\");\r\n    }\r\n  };\r\n\r\n  getDescription = (): string => {\r\n    return \"APPLE\\nAppears nutritious.\";\r\n  };\r\n}\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { HitWarning } from \"../../drawable/hitWarning\";\r\nimport { Door } from \"../../tile/door\";\r\nimport { GenericParticle } from \"../../particle/genericParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Item } from \"../../item/item\";\r\nimport { Enemy } from \"./enemy\";\r\n\r\nexport enum ChargeEnemyState {\r\n  IDLE,\r\n  ALERTED,\r\n  CHARGING,\r\n}\r\n\r\nexport class ChargeEnemy extends Enemy {\r\n  startX: number;\r\n  startY: number;\r\n  targetX: number;\r\n  targetY: number;\r\n  visualTargetX: number;\r\n  visualTargetY: number;\r\n  ticks: number;\r\n  frame: number;\r\n  state: ChargeEnemyState;\r\n  trailFrame: number;\r\n  drop: Item;\r\n  maxChargeDistance: number = 3;\r\n  static difficulty: number = 5;\r\n  static tileX: number = 13;\r\n  static tileY: number = 8;\r\n  trailAlpha: number = 1;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 13;\r\n    this.tileY = 8;\r\n    this.trailFrame = 0;\r\n    this.alertTicks = 0;\r\n    this.deathParticleColor = \"#ffffff\";\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    this.name = \"charge knight\";\r\n\r\n    this.state = ChargeEnemyState.IDLE;\r\n    if (drop) this.drop = drop;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  canMoveOver = (x: number, y: number): boolean => {\r\n    for (const e of this.room.entities) {\r\n      if (e !== this && x === e.x && y === e.y) return false;\r\n    }\r\n    let t = this.room.roomArray[x][y];\r\n    return !(t.isSolid() || t instanceof Door);\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n      this.ticks++;\r\n      if (this.state === ChargeEnemyState.IDLE) {\r\n        let blocked = false;\r\n        let dx = 0;\r\n        let dy = 0;\r\n        for (const i in this.game.players) {\r\n          // Check if player is within detection range (maxChargeDistance)\r\n          const playerX = this.game.players[i].x;\r\n          const playerY = this.game.players[i].y;\r\n          const distanceX = Math.abs(this.x - playerX);\r\n          const distanceY = Math.abs(this.y - playerY);\r\n\r\n          // Only detect players in straight lines and within maxChargeDistance\r\n          if (\r\n            (this.x === playerX && distanceY <= this.maxChargeDistance) ||\r\n            (this.y === playerY && distanceX <= this.maxChargeDistance)\r\n          ) {\r\n            if (this.x === playerX) {\r\n              if (this.y < playerY) dy = 1;\r\n              else dy = -1;\r\n              for (let yy = this.y; yy !== playerY; yy += dy) {\r\n                if (!this.canMoveOver(this.x, yy)) blocked = true;\r\n              }\r\n            } else if (this.y === playerY) {\r\n              if (this.x < playerX) dx = 1;\r\n              else dx = -1;\r\n              for (let xx = this.x; xx !== playerX; xx += dx) {\r\n                if (!this.canMoveOver(xx, this.y)) blocked = true;\r\n              }\r\n            }\r\n\r\n            if ((dx !== 0 || dy !== 0) && !blocked) {\r\n              this.state = ChargeEnemyState.ALERTED;\r\n              this.targetX = this.x;\r\n              this.targetY = this.y;\r\n              let distanceMoved = 0;\r\n              while (\r\n                this.canMoveOver(this.targetX + dx, this.targetY + dy) &&\r\n                distanceMoved < this.maxChargeDistance\r\n              ) {\r\n                this.targetX += dx;\r\n                this.targetY += dy;\r\n                distanceMoved++;\r\n                if (\r\n                  (this.targetX === playerX && this.targetY === playerY) ||\r\n                  (this.targetX === playerX - 1 && this.targetY === playerY) ||\r\n                  (this.targetX === playerX + 1 && this.targetY === playerY) ||\r\n                  (this.targetX === playerX && this.targetY === playerY - 1) ||\r\n                  (this.targetX === playerX && this.targetY === playerY + 1)\r\n                )\r\n                  this.room.hitwarnings.push(\r\n                    new HitWarning(\r\n                      this.game,\r\n                      this.targetX,\r\n                      this.targetY,\r\n                      this.x,\r\n                      this.y,\r\n                    ),\r\n                  );\r\n              }\r\n              this.visualTargetX = this.targetX + 0.5 * dx;\r\n              this.visualTargetY = this.targetY + 0.5 * dy;\r\n              if (dy === 1) this.visualTargetY += 0.65;\r\n              if (dx > 0) this.direction = Direction.RIGHT;\r\n              else if (dx < 0) this.direction = Direction.LEFT;\r\n              else if (dy < 0) this.direction = Direction.UP;\r\n              else if (dy > 0) this.direction = Direction.DOWN;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      } else if (this.state === ChargeEnemyState.ALERTED) {\r\n        this.state = ChargeEnemyState.CHARGING;\r\n        this.trailFrame = 0;\r\n\r\n        for (const i in this.game.players) {\r\n          if (\r\n            (this.y === this.game.players[i].y &&\r\n              ((this.x < this.game.players[i].x &&\r\n                this.game.players[i].x <= this.targetX) ||\r\n                (this.targetX <= this.game.players[i].x &&\r\n                  this.game.players[i].x < this.x))) ||\r\n            (this.x === this.game.players[i].x &&\r\n              ((this.y < this.game.players[i].y &&\r\n                this.game.players[i].y <= this.targetY) ||\r\n                (this.targetY <= this.game.players[i].y &&\r\n                  this.game.players[i].y < this.y)))\r\n          ) {\r\n            this.game.players[i].hurt(this.hit(), this.name);\r\n          }\r\n        }\r\n\r\n        this.startX = this.x;\r\n        this.startY = this.y;\r\n        this.drawX = this.targetX - this.x;\r\n        this.drawY = this.targetY - this.y;\r\n        this.x = this.targetX;\r\n        this.y = this.targetY;\r\n      } else if (this.state === ChargeEnemyState.CHARGING) {\r\n        this.state = ChargeEnemyState.IDLE;\r\n      }\r\n    }\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n\r\n      if (\r\n        (this.state === ChargeEnemyState.CHARGING &&\r\n          Math.abs(this.drawX) > 0.1) ||\r\n        Math.abs(this.drawY) > 0.1\r\n      ) {\r\n        GenericParticle.spawnCluster(\r\n          this.room,\r\n          this.x - this.drawX + 0.5,\r\n          this.y - this.drawY + 0.5,\r\n          \"black\",\r\n        );\r\n        GenericParticle.spawnCluster(\r\n          this.room,\r\n          this.x - this.drawX + 0.5,\r\n          this.y - this.drawY + 0.5,\r\n          \"white\",\r\n        );\r\n      }\r\n\r\n      if (this.state === ChargeEnemyState.CHARGING || this.trailAlpha < 1) {\r\n        this.trailFrame += 0.03 * delta;\r\n        let t = this.trailFrame;\r\n\r\n        if (t >= 0 && t <= 1) {\r\n          Game.ctx.strokeStyle = \"white\";\r\n          if (GameConstants.ALPHA_ENABLED) {\r\n            this.trailAlpha = 1 - t;\r\n            Game.ctx.globalAlpha = this.trailAlpha;\r\n          }\r\n\r\n          Game.ctx.lineWidth = GameConstants.TILESIZE * 0.25;\r\n          Game.ctx.beginPath();\r\n          Game.ctx.moveTo(\r\n            (this.startX + 0.5) * GameConstants.TILESIZE,\r\n            (this.startY + 0.5) * GameConstants.TILESIZE,\r\n          );\r\n          Game.ctx.lineCap = \"round\";\r\n          Game.ctx.lineTo(\r\n            (this.x - this.drawX + 0.5) * GameConstants.TILESIZE,\r\n            (this.y - this.drawY + 0.5) * GameConstants.TILESIZE,\r\n          );\r\n          Game.ctx.stroke();\r\n          Game.ctx.globalAlpha = 1;\r\n        }\r\n        if (this.trailAlpha <= 0) this.trailAlpha = 1;\r\n      }\r\n\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      Game.drawMob(\r\n        this.tileX + Math.floor(this.frame),\r\n        this.tileY + this.direction * 2,\r\n        1,\r\n        2,\r\n        this.x - this.drawX,\r\n        this.y - this.drawYOffset - this.drawY,\r\n        1,\r\n        2,\r\n        this.softShadeColor,\r\n        this.shadeAmount(),\r\n      );\r\n      if (!this.cloned) {\r\n        if (this.state === ChargeEnemyState.IDLE) {\r\n          this.drawSleepingZs(delta);\r\n        } else if (this.state === ChargeEnemyState.ALERTED) {\r\n          this.drawExclamation(delta);\r\n        }\r\n      }\r\n    }\r\n    this.drawChargeBeam(delta);\r\n    Game.ctx.restore();\r\n  };\r\n\r\n  drawChargeBeam = (delta: number) => {\r\n    if (this.dying) return;\r\n    this.drawableY = this.y;\r\n\r\n    this.healthBar.draw(\r\n      delta,\r\n      this.health,\r\n      this.maxHealth,\r\n      this.x,\r\n      this.y,\r\n      true,\r\n    );\r\n    this.drawX += -0.1 * this.drawX;\r\n    this.drawY += -0.1 * this.drawY;\r\n\r\n    if (this.state === ChargeEnemyState.ALERTED) {\r\n      this.trailFrame += 0.2 * delta;\r\n\r\n      if (Math.floor(this.trailFrame) % 2 === 0) {\r\n        let startX = (this.x + 0.5) * GameConstants.TILESIZE;\r\n        let startY = (this.y - 0.25) * GameConstants.TILESIZE;\r\n        if (this.direction === Direction.LEFT) startX -= 3;\r\n        else if (this.direction === Direction.RIGHT) startX += 3;\r\n        else if (this.direction === Direction.DOWN) startY += 2;\r\n        else if (this.direction === Direction.UP) startY -= 8;\r\n\r\n        // Calculate end coordinates based on direction and max distance\r\n        let endX = this.visualTargetX;\r\n        let endY = this.visualTargetY;\r\n\r\n        // Cap the beam length to maxChargeDistance\r\n        const dx =\r\n          this.direction === Direction.LEFT\r\n            ? -1\r\n            : this.direction === Direction.RIGHT\r\n              ? 1\r\n              : 0;\r\n        const dy =\r\n          this.direction === Direction.UP\r\n            ? -1\r\n            : this.direction === Direction.DOWN\r\n              ? 1\r\n              : 0;\r\n\r\n        const distance = Math.max(\r\n          Math.abs(this.visualTargetX - this.x),\r\n          Math.abs(this.visualTargetY - this.y),\r\n        );\r\n\r\n        if (distance > this.maxChargeDistance) {\r\n          endX = this.x + dx * this.maxChargeDistance;\r\n          endY = this.y + dy * this.maxChargeDistance;\r\n          if (dy === 1) endY += 0.65;\r\n          if (dx > 0) endX += 0.5;\r\n          else if (dx < 0) endX -= 0.5;\r\n        }\r\n\r\n        Game.ctx.strokeStyle = \"white\";\r\n        Game.ctx.lineWidth = GameConstants.TILESIZE * 0.1;\r\n        Game.ctx.beginPath();\r\n        Game.ctx.moveTo(Math.round(startX), Math.round(startY));\r\n        Game.ctx.lineCap = \"round\";\r\n        Game.ctx.lineTo(\r\n          Math.round((endX + 0.5) * GameConstants.TILESIZE),\r\n          Math.round((endY - 0.25) * GameConstants.TILESIZE),\r\n        );\r\n        Game.ctx.stroke();\r\n        Game.ctx.globalAlpha = 1;\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { Item } from \"../item\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { TextParticle } from \"../../particle/textParticle\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\n\r\nexport class Stone extends Item {\r\n  static itemName = \"stones\";\r\n  constructor(level: Room, x: number, y: number) {\r\n    super(level, x, y);\r\n\r\n    this.tileX = 15;\r\n    this.tileY = 0;\r\n\r\n    this.stackable = true;\r\n  }\r\n\r\n  getDescription = (): string => {\r\n    return \"STONE\\nSome fragments of stone.\";\r\n  };\r\n}\r\n","import { Direction, Game } from \"../../game\";\r\nimport { Room } from \"../../room/room\";\r\nimport { astar } from \"../../utility/astarclass\";\r\nimport { SpikeTrap } from \"../../tile/spiketrap\";\r\nimport { Player } from \"../../player/player\";\r\nimport { Item } from \"../../item/item\";\r\nimport { GameConstants } from \"../../game/gameConstants\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Utils } from \"../../utility/utils\";\r\nimport { HitWarning } from \"../../drawable/hitWarning\";\r\n\r\nenum SpiderState {\r\n  VISIBLE,\r\n  HIDING,\r\n  HIDDEN,\r\n}\r\n\r\nexport class SpiderEnemy extends Enemy {\r\n  ticks: number;\r\n  frame: number;\r\n  seenPlayer: boolean;\r\n  aggro: boolean;\r\n  targetPlayer: Player;\r\n  drop: Item;\r\n  static difficulty: number = 1;\r\n  static tileX: number = 8;\r\n  static tileY: number = 4;\r\n  state: SpiderState;\r\n  revealTick: number;\r\n  jumpDistance: number;\r\n\r\n  constructor(room: Room, game: Game, x: number, y: number, drop?: Item) {\r\n    super(room, game, x, y);\r\n    this.ticks = 0;\r\n    this.frame = 0;\r\n    this.health = 1;\r\n    this.maxHealth = 1;\r\n    this.defaultMaxHealth = 1;\r\n    this.tileX = 11;\r\n    this.tileY = 4;\r\n    this.seenPlayer = false;\r\n    this.aggro = false;\r\n    this.name = \"spider\";\r\n    this.orthogonalAttack = true;\r\n    this.diagonalAttack = false;\r\n    this.imageParticleX = 3;\r\n    this.imageParticleY = 24;\r\n    this.state = SpiderState.VISIBLE;\r\n    //if (drop) this.drop = drop;\r\n    this.drawYOffset = 1.2;\r\n    this.revealTick = 0;\r\n    this.hasShadow = true;\r\n    this.jumpHeight = 1;\r\n    this.jumpDistance = 1;\r\n    this.getDrop([\"weapon\", \"equipment\", \"consumable\", \"tool\", \"coin\"]);\r\n  }\r\n\r\n  get alertText() {\r\n    return `New Enemy Spotted: Spider \r\n    Health: ${this.health}\r\n    Attack Pattern: Omnidirectional\r\n    Moves every other turn`;\r\n  }\r\n\r\n  hit = (): number => {\r\n    return this.damage;\r\n  };\r\n\r\n  toggleReveal = () => {\r\n    let ticksSince = this.ticks - this.revealTick;\r\n    if (this.state === SpiderState.HIDDEN && ticksSince > 8)\r\n      this.state = SpiderState.HIDING;\r\n    this.revealTick = this.ticks;\r\n  };\r\n\r\n  jump = (delta: number) => {\r\n    //console.log(`this.drawX, this.drawY: ${this.drawX}, ${this.drawY}`);\r\n    let j = Math.max(Math.abs(this.drawX), Math.abs(this.drawY));\r\n    if (j > 1) {\r\n      this.jumpDistance = 2;\r\n    }\r\n    this.jumpY = Math.sin((j / this.jumpDistance) * Math.PI) * this.jumpHeight;\r\n    if (this.jumpY < 0.01 && this.jumpY > -0.01) {\r\n      this.jumpY = 0;\r\n      this.jumpDistance = 1;\r\n    }\r\n    if (this.jumpY > this.jumpHeight) this.jumpY = this.jumpHeight;\r\n  };\r\n\r\n  // Helpers to keep movement logic concise\r\n  private isTileFree = (x: number, y: number): boolean => {\r\n    if (!this.room.roomArray[x] || !this.room.roomArray[x][y]) return false;\r\n    const t = this.room.roomArray[x][y];\r\n    if (t.isSolid()) return false;\r\n    if (t instanceof SpikeTrap && (t as SpikeTrap).on) return false;\r\n    for (const e of this.room.entities) {\r\n      if (e !== this && e.x === x && e.y === y) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  private getTwoTileCandidates = (\r\n    startX: number,\r\n    startY: number,\r\n  ): Array<{\r\n    endX: number;\r\n    endY: number;\r\n    axis: \"x\" | \"y\";\r\n    dx: number;\r\n    dy: number;\r\n  }> => {\r\n    const directions = [\r\n      { dx: 1, dy: 0, axis: \"x\" as const },\r\n      { dx: -1, dy: 0, axis: \"x\" as const },\r\n      { dx: 0, dy: 1, axis: \"y\" as const },\r\n      { dx: 0, dy: -1, axis: \"y\" as const },\r\n    ];\r\n    const candidates = [] as Array<{\r\n      endX: number;\r\n      endY: number;\r\n      axis: \"x\" | \"y\";\r\n      dx: number;\r\n      dy: number;\r\n    }>;\r\n    for (const d of directions) {\r\n      const midX = startX + d.dx;\r\n      const midY = startY + d.dy;\r\n      const endX = startX + 2 * d.dx;\r\n      const endY = startY + 2 * d.dy;\r\n      if (this.isTileFree(midX, midY) && this.isTileFree(endX, endY)) {\r\n        candidates.push({ endX, endY, axis: d.axis, dx: d.dx, dy: d.dy });\r\n      }\r\n    }\r\n    return candidates;\r\n  };\r\n\r\n  private pickBestCandidate = (\r\n    candidates: Array<{\r\n      endX: number;\r\n      endY: number;\r\n      axis: \"x\" | \"y\";\r\n      dx: number;\r\n      dy: number;\r\n    }>,\r\n    targetX: number,\r\n    targetY: number,\r\n    preferXAxis: boolean,\r\n    dxToTarget: number,\r\n    dyToTarget: number,\r\n  ) => {\r\n    const signX = dxToTarget === 0 ? 0 : dxToTarget > 0 ? 1 : -1;\r\n    const signY = dyToTarget === 0 ? 0 : dyToTarget > 0 ? 1 : -1;\r\n    candidates.sort((a, b) => {\r\n      const da = Math.abs(a.endX - targetX) + Math.abs(a.endY - targetY);\r\n      const db = Math.abs(b.endX - targetX) + Math.abs(b.endY - targetY);\r\n      if (da !== db) return da - db;\r\n      if (preferXAxis) {\r\n        if (a.axis !== b.axis) return a.axis === \"x\" ? -1 : 1;\r\n      } else {\r\n        if (a.axis !== b.axis) return a.axis === \"y\" ? -1 : 1;\r\n      }\r\n      const aTowards = (a.dx !== 0 ? a.dx === signX : a.dy === signY) ? -1 : 1;\r\n      const bTowards = (b.dx !== 0 ? b.dx === signX : b.dy === signY) ? -1 : 1;\r\n      if (aTowards !== bTowards) return aTowards - bTowards;\r\n      return 0;\r\n    });\r\n    return candidates[0];\r\n  };\r\n\r\n  private getOneTileCandidates = (\r\n    startX: number,\r\n    startY: number,\r\n  ): Array<{ x: number; y: number }> => {\r\n    const directions = [\r\n      { dx: 1, dy: 0 },\r\n      { dx: -1, dy: 0 },\r\n      { dx: 0, dy: 1 },\r\n      { dx: 0, dy: -1 },\r\n    ];\r\n    const candidates: Array<{ x: number; y: number }> = [];\r\n\r\n    for (const d of directions) {\r\n      const newX = startX + d.dx;\r\n      const newY = startY + d.dy;\r\n      if (this.isTileFree(newX, newY)) {\r\n        candidates.push({ x: newX, y: newY });\r\n      }\r\n    }\r\n    return candidates;\r\n  };\r\n\r\n  private pickBestOneTileCandidate = (\r\n    candidates: Array<{ x: number; y: number }>,\r\n    targetX: number,\r\n    targetY: number,\r\n    preferXAxis: boolean,\r\n    dxToTarget: number,\r\n    dyToTarget: number,\r\n  ) => {\r\n    const signX = dxToTarget === 0 ? 0 : dxToTarget > 0 ? 1 : -1;\r\n    const signY = dyToTarget === 0 ? 0 : dyToTarget > 0 ? 1 : -1;\r\n\r\n    candidates.sort((a, b) => {\r\n      const da = Math.abs(a.x - targetX) + Math.abs(a.y - targetY);\r\n      const db = Math.abs(b.x - targetX) + Math.abs(b.y - targetY);\r\n      if (da !== db) return da - db;\r\n\r\n      // Prefer movement along the preferred axis\r\n      const aAxis =\r\n        Math.abs(a.x - targetX) > Math.abs(a.y - targetY) ? \"x\" : \"y\";\r\n      const bAxis =\r\n        Math.abs(b.x - targetX) > Math.abs(b.y - targetY) ? \"x\" : \"y\";\r\n\r\n      if (preferXAxis) {\r\n        if (aAxis !== bAxis) return aAxis === \"x\" ? -1 : 1;\r\n      } else {\r\n        if (aAxis !== bAxis) return aAxis === \"y\" ? -1 : 1;\r\n      }\r\n\r\n      // Prefer moving toward the target\r\n      const aTowards = (\r\n        a.x > targetX\r\n          ? dxToTarget < 0\r\n          : a.x < targetX\r\n            ? dxToTarget > 0\r\n            : a.y > targetY\r\n              ? dyToTarget < 0\r\n              : a.y < targetY\r\n                ? dyToTarget > 0\r\n                : 0\r\n      )\r\n        ? -1\r\n        : 1;\r\n      const bTowards = (\r\n        b.x > targetX\r\n          ? dxToTarget < 0\r\n          : b.x < targetX\r\n            ? dxToTarget > 0\r\n            : b.y > targetY\r\n              ? dyToTarget < 0\r\n              : b.y < targetY\r\n                ? dyToTarget > 0\r\n                : 0\r\n      )\r\n        ? -1\r\n        : 1;\r\n      if (aTowards !== bTowards) return aTowards - bTowards;\r\n\r\n      return 0;\r\n    });\r\n    return candidates[0];\r\n  };\r\n\r\n  private attackOrMoveTo = (\r\n    destX: number,\r\n    destY: number,\r\n    oldX: number,\r\n    oldY: number,\r\n  ): void => {\r\n    let hitPlayer = false;\r\n    for (const i in this.game.players) {\r\n      if (\r\n        this.game.rooms[this.game.players[i].levelID] === this.room &&\r\n        this.game.players[i].x === destX &&\r\n        this.game.players[i].y === destY\r\n      ) {\r\n        this.game.players[i].hurt(this.hit(), this.name);\r\n        this.drawX = 0.5 * (this.x - this.game.players[i].x);\r\n        this.drawY = 0.5 * (this.y - this.game.players[i].y);\r\n        if (this.game.players[i] === this.game.players[this.game.localPlayerID])\r\n          this.game.shakeScreen(10 * this.drawX, 10 * this.drawY);\r\n        hitPlayer = true;\r\n      }\r\n    }\r\n    if (!hitPlayer) {\r\n      this.tryMove(destX, destY);\r\n      this.setDrawXY(oldX, oldY);\r\n      if (this.x > oldX) this.direction = Direction.RIGHT;\r\n      else if (this.x < oldX) this.direction = Direction.LEFT;\r\n      else if (this.y > oldY) this.direction = Direction.DOWN;\r\n      else if (this.y < oldY) this.direction = Direction.UP;\r\n    }\r\n  };\r\n\r\n  behavior = () => {\r\n    this.lastX = this.x;\r\n    this.lastY = this.y;\r\n\r\n    if (!this.dead) {\r\n      if (this.skipNextTurns > 0) {\r\n        this.skipNextTurns--;\r\n        return;\r\n      }\r\n\r\n      this.rumbling = this.ticks % 2 === 1;\r\n      if (!this.seenPlayer) this.lookForPlayer();\r\n      else if (this.seenPlayer) {\r\n        if (this.room.playerTicked === this.targetPlayer) {\r\n          this.alertTicks = Math.max(0, this.alertTicks - 1);\r\n          this.ticks++;\r\n          if (this.ticks % 2 === 1) {\r\n            this.rumbling = true;\r\n            let oldX = this.x;\r\n            let oldY = this.y;\r\n            let disablePositions = Array<astar.Position>();\r\n\r\n            for (const e of this.room.entities) {\r\n              if (e !== this) {\r\n                disablePositions.push({ x: e.x, y: e.y } as astar.Position);\r\n              }\r\n            }\r\n\r\n            for (let xx = this.x - 1; xx <= this.x + 1; xx++) {\r\n              for (let yy = this.y - 1; yy <= this.y + 1; yy++) {\r\n                if (\r\n                  this.room.roomArray[xx][yy] instanceof SpikeTrap &&\r\n                  (this.room.roomArray[xx][yy] as SpikeTrap).on\r\n                ) {\r\n                  // don't walk on active spiketraps\r\n                  disablePositions.push({ x: xx, y: yy } as astar.Position);\r\n                }\r\n              }\r\n            }\r\n\r\n            let grid = [];\r\n            for (let x = 0; x < this.room.roomX + this.room.width; x++) {\r\n              grid[x] = [];\r\n              for (let y = 0; y < this.room.roomY + this.room.height; y++) {\r\n                if (this.room.roomArray[x] && this.room.roomArray[x][y])\r\n                  grid[x][y] = this.room.roomArray[x][y];\r\n                else grid[x][y] = false;\r\n              }\r\n            }\r\n            this.target =\r\n              this.getAverageLuminance() > 0\r\n                ? this.targetPlayer\r\n                : this.room.getExtremeLuminanceFromPoint(this.x, this.y)\r\n                    .darkest;\r\n\r\n            // Determine target position: prioritize direct attack if player is adjacent\r\n            let targetPosition = {\r\n              x: this.targetPlayer.x,\r\n              y: this.targetPlayer.y,\r\n            };\r\n\r\n            // Check if player is adjacent (Manhattan distance 1)\r\n            const playerDistance =\r\n              Math.abs(this.targetPlayer.x - this.x) +\r\n              Math.abs(this.targetPlayer.y - this.y);\r\n\r\n            if (this.target === this.targetPlayer && playerDistance === 2) {\r\n              // Only consider jumping over if player is not adjacent\r\n              let dx = this.targetPlayer.lastX - this.x;\r\n              let dy = this.targetPlayer.lastY - this.y;\r\n              // constrain to orthogonal intent\r\n              if (dx !== 0 && dy !== 0) {\r\n                if (Math.abs(dx) >= Math.abs(dy)) dy = 0;\r\n                else dx = 0;\r\n              }\r\n              if (\r\n                (dx === 0 && Math.abs(dy) <= 1) ||\r\n                (dy === 0 && Math.abs(dx) <= 1)\r\n              ) {\r\n                const jumpOverX = this.targetPlayer.x + Math.sign(dx);\r\n                const jumpOverY = this.targetPlayer.y + Math.sign(dy);\r\n                if (\r\n                  this.room.roomArray[jumpOverX] &&\r\n                  this.room.roomArray[jumpOverX][jumpOverY] &&\r\n                  !this.room.roomArray[jumpOverX][jumpOverY].isSolid()\r\n                ) {\r\n                  targetPosition = { x: jumpOverX, y: jumpOverY };\r\n                }\r\n              }\r\n            } else if (this.target !== this.targetPlayer) {\r\n              targetPosition = { x: this.target.x, y: this.target.y } as any;\r\n            }\r\n\r\n            // Compute 2-tile jump plans\r\n            const dxToTarget = targetPosition.x - oldX;\r\n            const dyToTarget = targetPosition.y - oldY;\r\n            const preferXAxis = Math.abs(dxToTarget) >= Math.abs(dyToTarget);\r\n\r\n            // First, try to use A* first/second step and extend to length 2 if possible\r\n            let finalX = this.x;\r\n            let finalY = this.y;\r\n            const moves = astar.AStar.search(\r\n              grid,\r\n              this,\r\n              targetPosition,\r\n              disablePositions,\r\n              false,\r\n              false,\r\n              false,\r\n              undefined,\r\n              undefined,\r\n              false,\r\n              this.lastPlayerPos,\r\n            );\r\n            if (moves.length > 0) {\r\n              let step = moves[0];\r\n              const candidate2 = moves[1];\r\n              if (candidate2) {\r\n                const preservesLine =\r\n                  candidate2.pos.x === oldX || candidate2.pos.y === oldY;\r\n                const alignsAxis = preferXAxis\r\n                  ? candidate2.pos.y === oldY\r\n                  : candidate2.pos.x === oldX;\r\n                if (preservesLine && alignsAxis) step = candidate2;\r\n              }\r\n              finalX = step.pos.x;\r\n              finalY = step.pos.y;\r\n              const manhattanFromStart =\r\n                Math.abs(finalX - oldX) + Math.abs(finalY - oldY);\r\n              if (manhattanFromStart === 1) {\r\n                const dirX = finalX - oldX;\r\n                const dirY = finalY - oldY;\r\n                const extX = finalX + (dirX !== 0 ? Math.sign(dirX) : 0);\r\n                const extY = finalY + (dirY !== 0 ? Math.sign(dirY) : 0);\r\n                if (this.isTileFree(extX, extY)) {\r\n                  finalX = extX;\r\n                  finalY = extY;\r\n                }\r\n              }\r\n            }\r\n\r\n            // Execute movement: prioritize attacking when adjacent, otherwise prefer 2-tile jumps\r\n            if (playerDistance === 1) {\r\n              // Player is adjacent - prioritize 1-tile movement for direct attack\r\n              const oneTileCandidates = this.getOneTileCandidates(oldX, oldY);\r\n              if (oneTileCandidates.length > 0) {\r\n                const best = this.pickBestOneTileCandidate(\r\n                  oneTileCandidates,\r\n                  targetPosition.x,\r\n                  targetPosition.y,\r\n                  preferXAxis,\r\n                  dxToTarget,\r\n                  dyToTarget,\r\n                );\r\n                this.attackOrMoveTo(best.x, best.y, oldX, oldY);\r\n              }\r\n            } else {\r\n              // Player is not adjacent - use computed movement (A* + 2-tile extension)\r\n              const finalDist =\r\n                Math.abs(finalX - oldX) + Math.abs(finalY - oldY);\r\n              if (finalDist >= 1) {\r\n                this.attackOrMoveTo(finalX, finalY, oldX, oldY);\r\n              } else {\r\n                // Fall back to 2-tile jump candidates if A* didn't find a path\r\n                const candidates = this.getTwoTileCandidates(oldX, oldY);\r\n                if (candidates.length > 0) {\r\n                  const best = this.pickBestCandidate(\r\n                    candidates,\r\n                    targetPosition.x,\r\n                    targetPosition.y,\r\n                    preferXAxis,\r\n                    dxToTarget,\r\n                    dyToTarget,\r\n                  );\r\n                  this.attackOrMoveTo(best.endX, best.endY, oldX, oldY);\r\n                } else {\r\n                  // Fall back to 1-tile movement if no 2-tile options available\r\n                  const oneTileCandidates = this.getOneTileCandidates(\r\n                    oldX,\r\n                    oldY,\r\n                  );\r\n                  if (oneTileCandidates.length > 0) {\r\n                    const best = this.pickBestOneTileCandidate(\r\n                      oneTileCandidates,\r\n                      targetPosition.x,\r\n                      targetPosition.y,\r\n                      preferXAxis,\r\n                      dxToTarget,\r\n                      dyToTarget,\r\n                    );\r\n                    this.attackOrMoveTo(best.x, best.y, oldX, oldY);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            this.rumbling = false;\r\n          } else {\r\n            this.rumbling = true;\r\n\r\n            this.makeHitWarnings();\r\n          }\r\n        }\r\n\r\n        let targetPlayerOffline =\r\n          Object.values(this.game.offlinePlayers).indexOf(this.targetPlayer) !==\r\n          -1;\r\n        if (!this.aggro || targetPlayerOffline) {\r\n          let p = this.nearestPlayer();\r\n          if (p !== false) {\r\n            let [distance, player] = p;\r\n            if (\r\n              distance <= 4 &&\r\n              (targetPlayerOffline ||\r\n                distance < this.playerDistance(this.targetPlayer))\r\n            ) {\r\n              if (player !== this.targetPlayer) {\r\n                this.targetPlayer = player;\r\n                this.facePlayer(player);\r\n                if (player === this.game.players[this.game.localPlayerID])\r\n                  this.alertTicks = 1;\r\n                if (this.ticks % 2 === 0) {\r\n                  this.rumbling = true;\r\n                  this.makeHitWarnings();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  makeHitWarnings = () => {\r\n    const cullFactor = 0.25;\r\n    const player: Player = this.getPlayer();\r\n    const orthogonal = this.orthogonalAttack;\r\n    const diagonal = this.diagonalAttack;\r\n    const forwardOnly = this.forwardOnlyAttack;\r\n    const direction = this.direction;\r\n    const orthoRange = this.attackRange;\r\n    const diagRange = this.diagonalAttackRange;\r\n\r\n    const generateOffsets = (\r\n      isOrthogonal: boolean,\r\n      range: number,\r\n    ): number[][] => {\r\n      const baseOffsets = isOrthogonal\r\n        ? [\r\n            [-2, 0],\r\n            [2, 0],\r\n            [0, -2],\r\n            [0, 2],\r\n            [-1, 0],\r\n            [1, 0],\r\n            [0, -1],\r\n            [0, 1],\r\n          ]\r\n        : [\r\n            [-1, -1],\r\n            [1, 1],\r\n            [1, -1],\r\n            [-1, 1],\r\n          ];\r\n      return baseOffsets.flatMap(([dx, dy]) =>\r\n        Array.from({ length: range }, (_, i) => [(i + 1) * dx, (i + 1) * dy]),\r\n      );\r\n    };\r\n\r\n    const directionOffsets = {\r\n      [Direction.LEFT]: [-1, 0],\r\n      [Direction.RIGHT]: [1, 0],\r\n      [Direction.UP]: [0, -1],\r\n      [Direction.DOWN]: [0, 1],\r\n    };\r\n\r\n    let offsets: number[][] = [];\r\n    if (forwardOnly) {\r\n      const [dx, dy] = directionOffsets[direction];\r\n      offsets = Array.from({ length: orthoRange }, (_, i) => [\r\n        (i + 1) * dx,\r\n        (i + 1) * dy,\r\n      ]);\r\n    } else {\r\n      if (orthogonal) offsets.push(...generateOffsets(true, orthoRange));\r\n      if (diagonal) offsets.push(...generateOffsets(false, diagRange));\r\n    }\r\n\r\n    const warningCoordinates = offsets\r\n      .map(([dx, dy]) => ({\r\n        x: dx,\r\n        y: dy,\r\n        distance: Utils.distance(dx, dy, player.x - this.x, player.y - this.y),\r\n      }))\r\n      .sort((a, b) => a.distance - b.distance);\r\n\r\n    const keepCount = Math.ceil(warningCoordinates.length * (1 - cullFactor));\r\n    const culledWarnings = warningCoordinates.slice(0, keepCount);\r\n\r\n    culledWarnings.forEach(({ x, y }) => {\r\n      const targetX = this.x + x;\r\n      const targetY = this.y + y;\r\n      if (this.isWithinRoomBounds(targetX, targetY)) {\r\n        const hitWarning = new HitWarning(\r\n          this.game,\r\n          targetX,\r\n          targetY,\r\n          this.x,\r\n          this.y,\r\n          true,\r\n          false,\r\n          this,\r\n        );\r\n        this.room.hitwarnings.push(hitWarning);\r\n        //this.hitWarnings.push(hitWarning);\r\n      }\r\n    });\r\n  };\r\n\r\n  draw = (delta: number) => {\r\n    if (this.dead) return;\r\n    Game.ctx.save();\r\n    Game.ctx.globalAlpha = this.alpha;\r\n\r\n    if (!this.dead) {\r\n      this.updateDrawXY(delta);\r\n      if (this.ticks % 2 === 0) {\r\n        this.tileX = 11;\r\n        this.tileY = 4;\r\n      } else {\r\n        this.tileX = 11;\r\n        this.tileY = 4;\r\n      }\r\n      switch (this.direction) {\r\n        case Direction.UP:\r\n          //this.tileX = 13;\r\n          break;\r\n        case Direction.LEFT:\r\n          //this.tileX = 13;\r\n          //this.tileY = 6;\r\n          break;\r\n        case Direction.RIGHT:\r\n          //this.tileY = 6;\r\n          break;\r\n      }\r\n      let rumble = Math.max(\r\n        this.rumble(this.rumbling, this.frame, this.direction).x,\r\n        Math.max(this.rumble(this.rumbling, this.frame, this.direction).y),\r\n      );\r\n      this.frame += 0.1 * delta;\r\n      if (this.frame >= 4) this.frame = 0;\r\n      if (this.hasShadow) this.drawShadow(delta);\r\n      if (this.state === SpiderState.VISIBLE) {\r\n        //only draw when visible\r\n        Game.drawMob(\r\n          this.tileX,\r\n          this.tileY, // + this.direction,\r\n          2,\r\n          2,\r\n          this.x - this.drawX + rumble - 0.5,\r\n          this.y - this.drawYOffset - this.drawY - this.jumpY,\r\n          2 * this.crushX,\r\n          2 * this.crushY,\r\n          this.softShadeColor,\r\n          this.shadeAmount(),\r\n        );\r\n      }\r\n      if (this.crushed) {\r\n        this.crushAnim(delta);\r\n      }\r\n    }\r\n    if (!this.cloned) {\r\n      if (!this.seenPlayer) {\r\n        this.drawSleepingZs(delta, 0, 0.75 * GameConstants.TILESIZE);\r\n      }\r\n      if (this.alertTicks > 0) {\r\n        this.drawExclamation(delta, 0, 0.75 * GameConstants.TILESIZE);\r\n      }\r\n    }\r\n    Game.ctx.restore();\r\n  };\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/dist/\";","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(7851);\n"],"names":["Chest","Entity","constructor","room","game","x","y","super","interact","playerHitBy","this","health","opening","open","pickedUpDrop","drops","find","drop","onPickup","pickedUp","filter","d","full","inventory","isFull","length","destroyable","uniqueKillBehavior","tileX","tileY","Sound","chest","getDrop","forEach","name","stack","Game","randTable","Random","rand","Math","ceil","stackCount","dropLoot","animateFromChest","draw","delta","dead","ctx","save","globalAlpha","alpha","updateDrawXY","hasShadow","drawShadow","drawObj","floor","drawX","drawYOffset","drawY","shadeColor","shadeAmount","restore","drawTopLayer","drawableY","frame","dropX","dropY","pushable","chainPushable","interactable","imageParticleX","imageParticleY","type","EntityType","CHEST","Lantern","Light","level","getDescription","round","fuel","fuelCap","canRefuel","maxBrightness","minBrightness","radius","broken","itemName","hurt","hurtTimer","Date","now","hearts","maxHearts","flashing","t","min","LevelConstants","HEALTH_BAR_TOTALTIME","max","fullHearts","halfHearts","drawWidth","drawHeight","xxStart","i","xx","drawFX","j","Spawner","Enemy","enemyTable","hit","setSpawnFrequency","maxHealth","GameplaySettings","UNLIMITED_SPAWNERS","spawnFrequency","currentSpawnerCount","THROTTLE_SPAWNERS","spawners","entities","e","spawnOffset","indexOf","bleed","poison","behavior","lastX","lastY","skipNextTurns","ticks","nextSpawnTick","positions","getEmptyTiles","abs","enemySpawnType","offLimits","some","o","position","spawned","spawnPos","mutatePositionForBigEnemy","PawnEnemy","CrabEnemy","FrogEnemy","ZombieEnemy","SkullEnemy","EnergyWizardEnemy","ChargeEnemy","RookEnemy","BishopEnemy","ArmoredzombieEnemy","BigSkullEnemy","clearSpaceForBigEnemy","QueenEnemy","KnightEnemy","BigKnightEnemy","FireWizardEnemy","ArmoredSkullEnemy","MummyEnemy","SpiderEnemy","BigFrogEnemy","BeetleEnemy","KingEnemy","console","warn","projectiles","push","EnemySpawnAnimation","hitwarnings","HitWarning","tiles","p","roomArray","Wall","nx","ny","leftEdge","roomX","rightEdge","width","topEdge","roomY","bottomEdge","height","anyLeftWall","wallInfo","isLeftWall","anyRightWall","isRightWall","anyTopWall","isTopWall","anyBottomWall","isBottomWall","topLeft","isSolid","yy","tile","isInnerWall","Floor","drawMob","softShadeColor","dying","seenPlayer","drawSleepingZs","alertTicks","drawExclamation","defaultMaxHealth","randSpawnType","dropChance","destroyableByOthers","log","player","mapData","oldMapData","offsetX","offsetY","softOffsetX","softOffsetY","seenTilesByMapGroup","globalThis","Map","visibilityRadius","getDownLaddersFromRoom","downLadders","saveMapData","clearMap","currentMapGroup","mapGroup","toString","levels","depth","rooms","entered","GameConstants","DEVELOPER_MODE","walls","innerWalls","doors","items","players","seenTiles","get","Set","enteredRooms","map","data","sortedByX","sort","a","b","sortedByY","maxX","minY","saveOldMap","renderMap","setInitialCanvasSettings","translateCanvas","drawRoom","resetCanvasTransform","updateOffsetXY","diffX","diffY","updateSeenTiles","playerX","playerY","has","set","dx","dy","sqrt","tileKey","add","isTileSeen","globalCompositeOperation","offset","translate","WIDTH","scale","HEIGHT","drawRoomOutline","drawRoomWalls","drawRoomDoors","drawRoomEntities","drawRoomItems","drawRoomPlayers","drawRoomDownLadders","drawFogOfWar","s","fillStyle","fillRect","RoomType","UPLADDER","DOWNLADDER","wall","door","opened","levelID","drawUnderRoomPlayers","enemy","setEntityColor","downLadder","ENEMY","PROP","RESOURCE","FRIENDLY","item","setTransform","Furnace","Torch","bloomColor","hasBloom","bloomAlpha","softBloomAlpha","lightSource","LightSource","addLightSource","WizardState","WizardEnemy","ATTACK_RADIUS","newLightSource","color","brightness","lightSources","removeLightSource","ls","withinAttackingRangeOfPlayer","withinRange","shuffle","state","attack","nearestPlayerInfo","nearestPlayer","distance","targetPlayer","calculateProjectileOffsets","attemptProjectilePlacement","WizardFireball","justAttacked","idle","teleport","bestPos","oldX","oldY","emptyTiles","projectile","optimalDist","player_ids","target_player_id","newPos","dist","tryMove","particles","WizardTeleportParticle","lookForPlayer","difficulty","FallenPillar","w","getDeviceInfo","result","UAParser","navigator","userAgent","getResult","browser","device","os","orientation","screen","HitWarningDirection","Drawable","eX","eY","isEnemy","dirOnly","parent","_pointerDir","_pointerOffset","tickedForDeath","tick","removeOverlapping","entity","fadeHitwarnings","localPlayerID","Utils","pointerOffset","getPointerDir","North","undefined","getPointerOffset","Center","South","East","West","SouthEast","NorthEast","SouthWest","NorthWest","offsets","updateFrame","generateFor","linkedRoom","targetDepth","isSidePath","pathId","getDeterministicPathId","levelgen","generate","handleLinkedRoom","environment","opts","statsTracker","recordSidePathEntered","currentDepth","sidePath","envType","switchToPathBeforeTransition","currentPathId","coordPid","legacyGid","globalId","handleSidePathRooms","linkUpLadders","sidePathRooms","startingId","index","id","groupId","groupRooms","r","UpLadder","setUpLadderLink","entryUpLadderPos","upLadder","isRope","exitDownLadderPos","exitRoom","damage","playerTicked","disablePositions","Array","SpikeTrap","on","grid","moves","astar","AStar","search","direction","moveX","pos","moveY","oldDir","facePlayer","Direction","RIGHT","LEFT","DOWN","UP","hitPlayer","shakeScreen","setDrawXY","makeHitWarnings","targetPlayerOffline","Object","values","offlinePlayers","aggro","playerDistance","cloned","deathParticleColor","forwardOnlyAttack","armored","enemyClassMap","OccultistEnemy","isOpen","openTime","activeEntryIndex","seenEnemies","size","tutorialListener","close","entryUp","entries","entryDown","toggleOpen","addEntry","enemyClass","description","prototype","startX","startY","fillText","entry","drawEnemySprite","drawLogbookButton","buttonX","SCREEN_W","buttonY","SCREEN_H","handleMouseDown","button","isPointInLogbookButton","handleMouseUp","onHoldDetected","tX","TILESIZE","tY","BlueGem","Usable","useOnOther","other","embed","canUseOnOther","stackable","AmberRing","Equippable","EntityDirection","sleepingZFrame","shadeMultiplier","bloomSize","bloomOffsetY","opaque","opacity","hasHitParticles","hasDamageNumbers","justHurt","stunned","collidable","canDestroyOthers","canCrushOthers","beamIds","hoverText","applyShield","shieldHealth","loading","shieldedBefore","shield","EnemyShield","shielded","removeShield","remove","applyBuff","buffed","buffedBefore","Lighting","updateLighting","removeBuff","beams","BeamEffect","beam","useCategory","force","dropTable","DropTable","Weapon","durability","durabilityMax","addBeamId","beamId","removeBeamId","hurtCallback","pointIn","h","createDamageNumber","outlineColor","OUTLINE","DamageNumber","updateHurtFrame","animateDying","updateShadeColor","doneMoving","drawMoveSpeed","collide","pointWouldBeIn","someX","someY","entityCollide","flag","closestTile","Door","DownLadder","onCollideEnemy","bigEnemyShake","setTimeout","getPlayer","maxDistance","closestDistance","closestPlayer","onHurt","handleEnemyCase","hitShield","playParry","startHurting","playHitSound","healthBar","globalEventBus","emit","EVENTS","DAMAGE_DONE","amount","createHitParticles","kill","wander","attempts","directions","randomDirection","targetX","targetY","runAway","newPositions","chosenPosition","hurting","hurtFrame","stopHurting","hitSound","delayPlay","particleX","particleY","ImageParticle","spawnCluster","coordX","coordY","crushed","Coin","candidates","tx","ty","used","startIndex","onDrop","autoPickup","coin","emitEnemyKilled","deadEntity","clone","deadEntities","SMOOTH_LIGHTING","SHADE_INLINE_IN_ENTITY_LAYER","softVis","updated","hexToRgb","hex","bigint","parseInt","slice","softR","softG","softB","targetR","targetG","targetB","diffR","diffG","diffB","flagR","flagG","flagB","softShadeRgb","clamp","rgb","g","toUpperCase","rgbToHex","depthMultiplier","multiplier","xp","ENEMY_KILLED","enemyId","XP_POPUP_ENABLED","XPPopup","entityCenterX","entityCenterY","sharesRow","sharesColumn","dyingFrame","clearDeadStuff","Shadow","updateLightSourcePos","emitEntityData","location","off","numZs","yoff","xoff","measureText","ALPHA_ENABLED","fillTextOutline","exclamationFrame","yoffs","WARNING_RED","crush","crushVertical","crushAnim","crushY","crushX","rumble","rumbling","rumbleOffset","animationSpeed","projectileClass","clearPath","targetingPlayer","isValidProjectilePosition","placeProjectile","isWithinRoomBounds","isPathClear","isEntityColliding","targetTile","isDoor","endX","endY","sign","getLuminance","vis","getAverageLuminance","total","count","getOpenTile","makeBigHitWarnings","hx","hy","arrowsOnly","directionOverride","unconscious","cullFactor","orthogonal","orthogonalAttack","diagonal","diagonalAttack","forwardOnly","orthoRange","attackRange","diagRange","diagonalAttackRange","generateOffsets","isOrthogonal","range","flatMap","from","_","directionOffsets","warningCoordinates","keepCount","hitWarning","xInBounds","yInBounds","tileExists","IdGenerator","isCloning","__isCloning","HealthBar","hitBy","hitWarnings","_imageParticleTiles","moving","rest","cloneEntity","original","assign","imageParticleTiles","attackLength","stepX","stepY","ReverbEngine","isMobile","unlockMobileAudio","mobileUnlockAttempted","buffer","audioContext","createBuffer","source","createBufferSource","connect","destination","start","noteOn","resume","error","getSoundName","sound","src","_src","isArray","split","pop","logStep","step","soundName","message","soundId","initialize","initialized","canInitialize","inputReceived","Promise","resolve","checkInput","requestAnimationFrame","Howler","window","AudioContext","webkitAudioContext","convolver","createConvolver","loadReverbBuffer","setDefaultReverb","originalRefreshBuffer","Howl","_refreshBuffer","_id","then","call","_node","bufferSource","disconnect","gainNode","gainNodes","createGain","volume","_volume","gain","setValueAtTime","currentTime","audioMuted","filePath","response","fetch","ok","Error","status","arrayBuffer","reverbBuffer","decodeAudioData","setReverbImpulse","applyReverb","catch","play","removeReverb","delete","cleanup","clear","REGEN_TICKS","ticksSinceFirstHit","desiredDir","ex","ey","wouldHit","flashingFrame","jumpY","dropAmount","Pool","Tile","pushMessage","canCrushEnemy","drawTile","skin","FishingSpot","element","allowedCharacters","currentMessageIndex","MAX_HISTORY","handleKeyPress","key","fontHas","toLowerCase","includes","text","substring","cursor","updateElement","updateCursorPosition","sentMessages","sendMessage","escapeCallback","handleTouchStart","focus","preventDefault","enterCallback","input","tagName","handleInputEventBound","handleDomInput","handleKeydownEventBound","handleDomKeydown","addEventListener","setEnterCallback","callback","setEscapeCallback","value","prev","style","left","right","top","bottom","zIndex","pointerEvents","setSelectionRange","len","removeEventListener","blur","target","val","trim","shift","startsWith","textContent","Backpack","onUse","playBackpack","removeItem","expansion","FountainTile","subTileX","subTileY","Particle","GreenPotion","heal","Scythe","swing","playSlice","weaponMove","newX","newY","wielder","checkForPushables","hitSomething","executeAttack","damageBonus","getRoom","hitEntitiesAt","hitDelay","useCost","iconOffset","degradeable","twoHanded","Greataxe","playWarHammer","adjustedDamage","hp","statusEffect","beginSlowMotion","endSlowMotion","face","alertRange","enemyType","enemyName","conditionalHitWarnings","dxToPlayer","dyToPlayer","lastPlayerPos","stepIsPlayer","isActiveSpike","jumpHeight","EnvType","getEnvTypeName","DUNGEON","CAVE","FOREST","CASTLE","GLACIER","DARK_CASTLE","PLACEHOLDER","DESERT","MAGMA_CAVE","DARK_DUNGEON","GraphNodeType","getTileCost","Graph","elements","row","rowLength","nodes","GraphNode","rowDebug","l","graphString","isWall","WALL","BinaryHeap","scoreFunction","content","node","sinkDown","end","bubbleUp","rescoreElement","n","parentN","elemScore","child2N","child1N","swap","child1","child1Score","child2","disablePoints","lastPlayerPosition","enableCost","xl","yl","cost","org","f","visited","closed","heap","_find","_search","diagonalsOnly","turnCostsExtra","turnDirection","heuristic","diagonalsOmni","manhattan","_start","_end","openHeap","NO_CHECK_START_POINT","currentNode","curr","ret","reverse","neighbors","il","neighbor","gScore","isTurn","beenVisited","pos0","pos1","diagonals","randomBool","FULL_OUTLINE","VendingMachine","isInf","quantity","buyAnimAmount","setCost","costItems","counts","randCount","costItem","possibleItems","GreenGem","RedGem","playerOpened","openVendingMachine","space","hasItemCount","numOfItem","coinCount","difference","pluralLetter","newItem","addItem","subtractItemCount","ob","cx","cy","drawXScaled","drawYScaled","drawIcon","Shotgun","Heart","Spear","Armor","DualDagger","Warhammer","Spellbook","Candle","Pickaxe","randomNormalInt","FishingRod","Hammer","isPointInVendingMachineBounds","shop","screenCenterX","screenCenterY","shopScreenX","shopScreenY","leftBound","rightBound","topBound","bottomBound","momentaryLight","duration","delay","updateLightSources","Spike","onCollide","Coal","hasItem","amountToRefuel","Item","coinList","otherCoin","COIN_AUTO_PICKUP","pickupSound","COIN_ANIMATION","pickupCoin","distanceToBottomRight","innerWidth","innerHeight","LIGHTING_ANGLE_BRIGHTNESS_COMPENSATION","LIGHTING_ANGLE_STEP","COMPUTER_TURN_DELAY","TURN_TIME","LEVEL_TRANSITION_TIME","LEVEL_TRANSITION_TIME_LADDER","ROOM_COUNT","HEALTH_BAR_FADEIN","HEALTH_BAR_FADEOUT","SHADED_TILE_CUTOFF","MIN_VISIBILITY","LIGHTING_MAX_DISTANCE","LEVEL_TEXT_COLOR","AMBIENT_LIGHT_COLOR","TORCH_LIGHT_COLOR","AttackAnimation","drawAnimation","tileYOffset","xOffset","yOffset","frames","Projectile","setMarkerFrame","dir","projectileColor","baseDamage","ItemTypeMap","dualdagger","warhammer","spear","spellbook","greataxe","scythe","hourglass","Hourglass","fishingrod","scytheblade","ScytheBlade","scythehandle","ScytheHandle","shieldleftfragment","ShieldLeftFragment","shieldrightfragment","ShieldRightFragment","armor","woodenshield","WoodenShield","pickaxe","hammer","heart","weaponpoison","WeaponPoison","weaponblood","WeaponBlood","weaponfragments","WeaponFragments","spellbookPage","SpellbookPage","backpack","candle","torch","lantern","redgem","bluegem","greengem","geode","Geode","gold","GoldOre","stone","Stone","coal","bomb","BombItem","itemType","dropRate","category","unique","increaseDepth","maxDrops","eligibleDrops","minDepth","cat","droppedCount","droppedItems","addNewItem","mostCommonDrop","reduce","ItemClass","disassemble","smith","smelt","inventoryX","inventoryY","numFragments","TombStone","skinType","breakRock","skeleSpawn","getEnvironmentApiUrl","hostname","protocol","BestiaryBook","bestiary","Bestiary","isIgnited","equipped","dropFromInventory","toggleEquip","setRadius","sightRadius","fuelPercentage","setBrightness","lightBrightness","lightEquipped","lightColor","resetBrightness","coEquippable","resetRadius","defaultSightRadius","burn","roomCleared","drawDurability","durabilityRatio","hsvToHex","barWidth","barHeight","barX","barY","imageSmoothingEnabled","tickInInventory","GenericParticle","z","dz","expirationTimer","targetZ","render","halfS","oldFillStyle","beginPath","arc","PI","fill","shotgun","apiClient","create","baseURL","recordGameStats","async","gameStats","post","getOrCreateUserId","userId","localStorage","getItem","newUserId","setItem","safeRecordGameStats","fetchGameStats","SETTINGS_KEY","saveSettings","muted","softScale","SOFT_SCALE","SCALE","shade","SHADE_ENABLED","smoothLighting","HOVER_TEXT_ENABLED","screenShake","SCREEN_SHAKE_ENABLED","setCookie","JSON","stringify","loadSettings","raw","getCookie","parse","toggleMute","moveQueue","isProcessingQueue","animationFrameId","moveRange","lastMoveTime","lastChangeDirectionTime","adjustedCooldown","moveRangeCheck","queueHandler","cooldown","MOVEMENT_COOLDOWN","nextMove","handleMoveLoop","stopQueueProcessing","move","coords","getTargetCoords","canMove","inputHandler","setMostRecentMoveInput","lastDirection","queueMove","moveMouse","inventoryClosedRecently","timeSinceDragEnd","dragEndTime","timeSinceClose","closeTime","busyAnimating","SLOW_INPUTS_NEAR_ENEMIES","turn","TurnState","computerTurn","hasEnemyInRadius","canQueue","MOVEMENT_QUEUE_COOLDOWN","startQueueProcessing","mostRecentMoveInput","cancelAnimationFrame","adjustedTileX","pow","getXp","RookStatue","CoalResource","Resource","hurtAlpha","hurtShield","hurtingShield","flash","disableFlash","slowMotionEnabled","setNewDrawXY","enableSlowMotion","motionSpeed","updateSlowMotion","slowMotionTickDuration","drawPlayerSprite","drawSmear","setSmearFrame","hitX","hitY","mouseDiagonal","angle","mouseAngle","diagonalTile","getArmor","lastDir","movement","timeSince","FPS","drawSpellBeam","getWeapon","drawBeams","CUSTOM_SHADER_COLOR_ENABLED","col","doneHitting","jump","updateHitXY","ANIMATION_SPEED","snapDrawStuff","setHitXY","drawGUI","transitioning","getStats","enemies","enemyCounts","acc","lines","lastHitBy","diedInRoom","enemyLines","restartButton","lineHeight","letter_height","feedbackButtonHeight","reservedBottomHeight","topMargin","availableHeight","headerHeight","remainingForEnemies","enemiesPerPageBase","enemiesPerPage","totalEnemyLines","totalPages","deathScreenPageCount","currentPage","deathScreenPageIndex","startIdx","endIdx","pageEnemyLines","line","textWidth","spacing","indicator","restartTextWidth","restartY","feedbackButton","feedbackY","buttonWidth","centeredX","hint","hintWidth","hintY","hasRecordedStats","gameDurationMs","gameStartTimeMs","inventoryItems","stackSize","createGameState","killedBy","enemiesKilled","damageDone","damageTaken","depthReached","turnsPassed","coinsCollected","itemsCollected","deviceType","sidePathsEntered","weaponChoice","gameState","gameVersion","version","loadedFromSaveFile","guiHeartFrame","quickbarStartX","getQuickbarStartX","heartStartX","shake","shakeY","sin","inventoryOpen","quickbarOpen","isPointInQuickbarBounds","MouseCursor","getInstance","getPosition","inBounds","inVendingMachine","inInventoryBounds","isPointInInventoryBounds","drawFor","IN_GAME_HOVER_TEXT_ENABLED","INVENTORY_HOVER_TEXT_ENABLED","VENDING_MACHINE_HOVER_TEXT_ENABLED","HoverText","PostProcessor","drawHurt","mapToggled","drawTileCursor","setCursorIcon","menu","drawCooldownBar","cooldownRemaining","drawLowHealth","lowHealthAlpha","lowHealthFrame","gradientBottom","createLinearGradient","gradient","addColorStop","heartbeat","mouseInLine","isMouseAboveFloor","isMouseOnPlayerTile","tileCursor","Passageway","lockType","LockType","NONE","lockable","isLocked","canUnlock","unlock","linkRoom","exitPos","changeLevelThroughLadder","__entryPositionFromLadder","forestMusic","pause","caveMusic","getName","candidate","anyRoom","roomsById","next","startRoom","drawAboveShading","update","drawAbovePlayer","Lockable","isTopDoor","Decoration","isOpaque","tickEnd","drawUnderPlayer","applySkin","c","updatePosition","shouldUpdate","oldR","oldC","oldB","hasChanged","props","USER_AGENT","EMPTY","FUNC_TYPE","UNDEF_TYPE","OBJ_TYPE","STR_TYPE","UA_BROWSER","UA_CPU","UA_DEVICE","UA_ENGINE","UA_OS","UA_RESULT","NAME","TYPE","VENDOR","VERSION","ARCHITECTURE","MAJOR","MODEL","CONSOLE","MOBILE","TABLET","SMARTTV","WEARABLE","XR","EMBEDDED","INAPP","BRANDS","FORMFACTORS","FULLVERLIST","PLATFORM","PLATFORMVER","BITNESS","CH_HEADER","CH_HEADER_FULL_VER_LIST","CH_HEADER_ARCH","CH_HEADER_BITNESS","CH_HEADER_FORM_FACTORS","CH_HEADER_MOBILE","CH_HEADER_MODEL","CH_HEADER_PLATFORM","CH_HEADER_PLATFORM_VER","CH_ALL_VALUES","AMAZON","APPLE","ASUS","BLACKBERRY","GOOGLE","HUAWEI","LENOVO","HONOR","LG","MICROSOFT","MOTOROLA","NVIDIA","ONEPLUS","OPPO","SAMSUNG","SHARP","SONY","XIAOMI","ZEBRA","CHROME","CHROMIUM","CHROMECAST","EDGE","FIREFOX","OPERA","FACEBOOK","SOGOU","PREFIX_MOBILE","SUFFIX_BROWSER","WINDOWS","isWindow","NAVIGATOR","NAVIGATOR_UADATA","userAgentData","enumerize","arr","enums","str1","str2","lowerize","isString","isExtensions","obj","deep","prop","test","itemListToArray","header","tokens","strip","token","brand","str","majorize","setProps","propName","pattern","replace","stripQuotes","rgxMapper","ua","arrays","k","q","matches","match","regex","exec","apply","concat","strMapper","hasOwnProperty","windowsVersionMap","formFactorsMap","browserHintsMap","defaultRegexes","cpu","engine","defaultProps","init","isIgnore","isIgnoreRgx","createIData","init_props","is_ignoreProps","is_ignoreRgx","toString_props","IData","withClientHints","getHighEntropyValues","res","setCH","UACHData","parseCH","withFeatureCheck","detectFeature","is","strToCheck","cb","that","IDataResolve","resolveData","uach","isHttpUACH","UAItem","rgxMap","uaCH","ch","brave","isBrave","standalone","maxTouchPoints","detect","parseUA","prevName","brands","brandName","brandVersion","archName","reParse","vendor","ff","idx","osName","osVersion","extensions","headers","append","kv","v","httpUACH","regexMap","defaultRgx","mergedRgx","extraRgx","extend","createItemFunc","getBrowser","getCPU","getDevice","getEngine","getOS","setUA","BROWSER","CPU","DEVICE","ENGINE","OS","exports","module","$","jQuery","Zepto","parser","getUA","FeedbackButton","LinkButton","linkUrl","Succulent","StatsTracker","stats","initialStats","handleEnemyKilled","payload","handleDamageDone","handleDamageTaken","handleTurnPassed","handleCoinCollected","handleItemCollected","initializeListeners","DAMAGE_TAKEN","TURN_PASSED","COIN_COLLECTED","ITEM_COLLECTED","increaseXp","recordWeaponChoice","resetStats","setStats","subtractItem","GoldBar","playSmith","StunAnimation","Chasm","ts","tilesHigh","_buffer","document","createElement","offCtx","getContext","clearRect","mainCtx","prevComp","drawImage","playShortSlice","firstAttack","getEntitiesAt","tickHitWarnings","degrade","RECHARGE_TURNS","rechargeTurnCounter","playerMaxHealth","shieldX","lastDroppedShieldPiece","GarnetRing","onEquip","onUnequip","OrangeGem","WebGLBlurRenderer","textureWidth","textureHeight","tempTextureWidth","tempTextureHeight","resultCanvasCache","maxCacheSize","vertexShaderSource","highQualityFragmentShaderSource","performanceFragmentShaderSource","canvas","downsampleCanvas","downsampleCtx","context","antialias","stencil","premultipliedAlpha","preserveDrawingBuffer","powerPreference","experimentalContext","gl","disable","DEPTH_TEST","CULL_FACE","BLEND","initShaders","initBuffers","initTextures","instance","vertexShader","createShader","VERTEX_SHADER","highQualityFragmentShader","FRAGMENT_SHADER","highQualityShaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","performanceFragmentShader","performanceShaderProgram","currentShaderProgram","updateShaderProgram","targetProgram","HIGH_QUALITY_BLUR","useProgram","positionLocation","getAttribLocation","texCoordLocation","resolutionLocation","getUniformLocation","textureLocation","directionLocation","radiusLocation","uniform1i","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","positionBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","texCoordBuffer","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","tempTexture","framebuffer","createFramebuffer","tempFramebuffer","updateTexture","currentWidth","currentHeight","texImage2D","RGBA","UNSIGNED_BYTE","texSubImage2D","getCachedCanvas","firstKey","keys","applyBlur","sourceCanvas","blurRadius","originalWidth","originalHeight","downsampleFactor","BLUR_DOWNSAMPLE_FACTOR","downsampledWidth","downsampledHeight","blurredDownsampledCanvas","applyBlurToCanvas","resultCanvas","resultCtx","imageSmoothingQuality","enhancedRadius","expectedShader","viewport","updatedTexture","updatedTempTexture","enableVertexAttribArray","vertexAttribPointer","FLOAT","uniform2f","uniform1f","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","drawArrays","TRIANGLES","clearCache","dispose","deleteProgram","deleteBuffer","deleteTexture","deleteFramebuffer","CrusherEnemy","animateY","softAnimateY","tryCrush","getExtremeLuminanceFromPoint","darkest","animateCrush","makeHitWarning","playCrush","updateAnimateY","diff","rumbleX","rumbleY","shouldDrawAbovePlayer","alertText","EventBus","eventEmitter","EventEmitter","event","fishCount","active","startFrame","fish","canFish","playFishingCast","playFishingReel","tryFish","Fish","playFishingCatch","onClick","toggleable","toggleMuteText","MuteButton","toggled","noFill","textColor","isPointInButton","DarkPillar","playEat","lastDroppedScythePiece","mouseHoldInitialDirection","handleNumKey","num","setMostRecentInput","actionProcessor","process","SET_SHADE_LAYER_COMPOSITE_OPERATION","ignoreDirectionInput","levelState","LevelState","IN_LEVEL","Input","mouseX","mouseY","mostRecentInput","mousePosition","playerPixelPosition","atan2","faceMouse","MOVE_WITH_MOUSE","moveStartTime","isLocalPlayer","setupListeners","mouseRightClickListeners","mouseLeftClickListeners","leftSwipeListener","handleInput","InputEnum","rightSwipeListener","upSwipeListener","downSwipeListener","commaListener","COMMA","periodListener","PERIOD","tapListener","handleTap","mouseMoveListener","MOUSE_MOVE","RIGHT_CLICK","mouseDownListeners","numKeyListener","NUMBER_1","equalsListener","EQUALS","minusListener","MINUS","escapeListener","ESCAPE","fListener","F","wheelListener","deltaY","handleMouseWheel","cameraAnimation","SPACE","LEFT_CLICK","fast","TRANSITIONING","TRANSITIONING_LADDER","started","I","inv","Q","navigateDeathScreen","chatOpen","restart","handleMouseLeftClick","handleMouseRightClick","mouseMove","mouseDown","mouseDownHandled","shouldCancelHold","lastMouseDownX","lastMouseDownY","lastMouseDownTime","setTileCursorPosition","NUMBER_2","NUMBER_3","NUMBER_4","NUMBER_5","NUMBER_6","NUMBER_7","NUMBER_8","NUMBER_9","increaseScale","decreaseScale","startMenuActive","startedFadeOut","cols","selX","selY","MOBILE_KEYBOARD_SUPPORT","isPointInChatHotspot","chatTextBox","startMenu","mouseInputHandler","handleDeathScreenInput","isPointInInventoryButton","isPointInMenuButtonBounds","handleMenuButtonClick","moveWithMouse","isInInventory","isInQuickbar","isInVMUI","handleKeyboardKey","isPointInMuteButtonBounds","handleMuteButtonClick","isInteractingWithFeedbackButton","enemyCollide","retreat","offsetTileY","config","locked","unlocking","iconAlpha","iconYOffset","keyID","iconTileX","iconXOffset","initializeLockState","LOCKED","lock","GUARDED","guard","TUNNEL","removeLock","isUnlocking","removeLockIcon","hasKeyWithID","doorID","Key","unGuard","tutorialActive","iconY","setKey","generateID","DarkPot","potSmash","arg","showCloseButton","selectionTimeoutId","lastButtonClickTime","lastButtonClickIndex","BUTTON_CLICK_DEBOUNCE_TIME","startGame","exitGame","openSettings","scaleUp","scaleDown","buttons","selectedButton","Player","initializeCloseButton","initializeMainMenu","drawOpenMenuButton","buttonHeight","closeButton","guiButton","addButton","muteButton","smoothButton","enabled","getScreenShakeLabel","screenShakeButton","hoverTextButton","saveToCookies","loadFromCookies","newGameBtn","newGame","clearCookieSave","positionButtons","buildStartMenu","SAVING_ENABLED","continueBtn","newBtn","drawButton","drawCloseButton","strokeStyle","lineWidth","textX","textY","strokeRect","up","down","select","isPointInCloseButton","bounds","isPointInMenuBounds","buttonIndex","clearTimeout","openMenu","screenWidth","screenHeight","buttonCount","maxButtonWidth","rows","getScaleButtonIndices","totalSpacing","verticalMargin","computedHeight","totalButtonsHeight","availableRectHeight","currentY","plusIdx","plusBtn","minusTextW","plusTextW","minusW","plusW","pairWidth","minus","plus","textW","indices","Trapdoor","PawnStatue","debugMode","cookie","animationConfig","partitionSplitDelay","pathfindingDelay","largeStepDelay","animationConstant","visualizationState","currentStep","progress","partitions","centerX","centerY","updateAnimationConfig","setVisualizationState","drawGenerationProgress","drawSimpleLoadingScreen","partition","drawPartition","drawProgressInfo","drawTextScreen","levelCenterX","levelCenterY","drawPartitionConnections","drawPartitionInfo","connection","connections","font","createAnimationDelay","delayType","updatePartitionStyles","sortedPartitions","area","minArea","maxArea","visualizePartitionsInConsole","mapWidth","mapHeight","padLength","paddedIndex","padStart","join","logGenerationStep","details","createVisualEffect","effectType","originalStyle","updateProgress","reset","getAnimationConfig","getVisualizationState","Barrel","DarkCrate","ObsidianBlock","COLOR_TO_ROOM_TYPE","START","BOSS","TREASURE","SHOP","FOUNTAIN","COFFIN","KEYROOM","PUZZLE","CHESSBOARD","MAZE","SPAWNER","GRASS","GRAVEYARD","CORRIDOR","SPIKECORRIDOR","BIGCAVE","ROPECAVE","ROPEHOLE","ROPEUP","TUTORIAL","BIGDUNGEON","generatePartitionsFromPng","imageUrl","imageData","loadImageData","rectangles","findRectangles","rawPartitions","createPartitionsFromRectangles","partialLevel","PartialLevel","processPartitionsForGameplay","reject","image","Image","crossOrigin","onload","getImageData","onerror","err","pixelIndex","rectW","isSameColor","rectH","isRowSolid","rectangle","index1","index2","rect","Partition","caveRoomType","getCaveRoomTypeFromColor","roomType","processCavePartitions","processMainPathPartitions","roomTypeCounts","spawn","updatePartitionVisualStyles","splice","unshift","connectCavePartitions","addLoopConnections","calculateDistances","addSpecialRooms","boss","connectPartitions","addStairRoom","connected","frontier","adjacentRooms","arePartitionsAdjacent","adjacencyInfo","connectionPoint","PartitionConnection","setOpenWall","unconnected","connectIsolatedRoom","isolatedRoom","connectedRooms","closestRoom","Infinity","connectionX","connectionY","maxRooms","maxConnections","p1","p2","overlapStart","overlapEnd","adjacencyMap","adjacent","maxLoops","roomIndex","unconnectedAdjacent","hasBoss","hasStairs","found_stair","stair_tries","stairX","stairY","stair","overlaps","seen","newDistance","getColorGuide","GoldRing","repairAmount","ZirconRing","variation","SkinType","Slingshot","nextX","nextY","tileInside","enemyHitCandidates","firstPushable","firstNonPushable","firstNonDestroyable","minEnemy","currentEnemy","gp","lockStateOverride","sidePathManager","allPlayersHere","pl","LEVEL_GENERATION_STARTED","LEVEL_GENERATION_COMPLETED","SidePathManager","effectiveLockType","xoffset","getXoffset","damageNumbers","KeyPathParticle","frameOffset","sinFrame","cosFrame","cos","GoldenKey","actions","startMs","recording","replaying","seed","timer","baseState","beginRecording","tryCapture","local","isReplaying","isRecording","clearRecording","stopRecording","recordAction","action","replay","stepMs","REPLAY_STEP_MS","startPlayback","beforeX","beforeY","canMoveNow","before","afterX","afterY","moved","after","minDelay","recordedDelay","nextDelay","REPLAY_COMPUTER_TURN_DELAY","snapshot","activeUsernames","loadGameState","expectedSeed","randomState","expectedRandom","onReady","_pressed","isTapHold","tapStartTime","IS_TAP_HOLD_THRESH","keyDownListener","iListener","mListener","mUpListener","qListener","leftListener","rightListener","upListener","downListener","aListener","dListener","wListener","sListener","spaceListener","mouseMoveListeners","mouseUpListeners","touchStartListeners","touchEndListeners","lastPressTime","lastPressKey","W","A","S","D","M","N","rawMouseX","rawMouseY","isDown","keyCode","onKeydown","repeat","cancelable","code","onKeyup","mouseLeftClickListener","mouseRightClickListener","mouseDownListener","mouseUpListener","mouseClickListener","getElementById","getBoundingClientRect","clientX","clientY","scaledX","scaledY","updateMousePos","recalculateMousePosition","recalculateClickPosition","startClickAnim","_holdCheckInterval","setInterval","checkIsMouseHold","clearInterval","mouseDownStartTime","HOLD_THRESH","isMouseHold","holdCallback","getTouches","evt","touches","originalEvent","xDown","yDown","currentX","swiped","firstTouch","handleTouchMove","xDiff","yDiff","SWIPE_THRESH","handleTouchEnd","checkIsTapHold","_isMouseHold","lastSwipeTime","lastSwipeDirection","swipeHoldActive","swipeHoldRepeating","passive","AmberResource","events","listener","removeAllListeners","getTargets","targets","isTargeting","actuallyHitTargets","PlayerFireball","playMagic","cooldownMax","playerDrawX","playerDrawY","beamEffects","addBeamEffect","canMine","offsetFrame","Pumpkin","break","weapon","blood","clearStatus","applyStatus","statusApplicationCount","checkForCollidables","attackAnimation","drawStatus","updateCooldown","previousWeapon","applyHitDelay","equipTick","behindX","behindY","hasUnpushablesBehind","behindTile","hasSpaceToPush","animated","mainAttack","shouldTick","maximumStackCount","EnemyType","WallDirection","EnemyTypeMap","crab","frog","zombie","skull","energyWizard","charge","rook","bishop","armoredzombie","bigskull","queen","knight","bigknight","firewizard","spawner","occultist","Bomb","armoredskull","mummy","spider","bigzombie","BigZombieEnemy","glowbug","GlowBugEnemy","tree","Tree","tombStone","warden","WardenEnemy","crusher","pawn","beetle","bigfrog","exalter","ExalterEnemy","king","shadeSliceBorderTiles","tunnelDoor","blurOffsetX","blurOffsetY","lastDraw","drawTimestamp","drawInterval","maskCanvases","blurCache","color6px","color12px","shade5px","bloom8px","color8px","isValid","lastLightingUpdate","isUpdatingLighting","estimatedLightingTiles","playMusic","playForestMusic","playCaveMusic","stopMusic","removeWall","addDoor","DoorType","DOOR","GUARDEDDOOR","LOCKEDDOOR","TUNNELDOOR","SpawnFloor","addNewEnemy","EnemyClass","getRandomEmptyPosition","getBigRandomEmptyPosition","addNewSpawner","linkExitToStart","addDoorWithOffset","linkedDoor","exitLevel","shade_canvases","text_rendering_canvases","ld","disableFuseSounds","stopSound","fuseSound","enableFuseSounds","lit","playWithReverb","onEnterRoom","roomOnScreen","calculateWallInfo","resetDoorLightSources","syncKeyPathParticles","alertEnemiesOnEntry","setReverb","enterLevel","updateLevel","ladderEntry","roomCenter","getRoomCenter","moveSnap","enterLevelThroughDoor","side","doorDir","moveNoSmooth","lastEnemyCount","playerTurnTime","hitEnemy","finishTick","checkForNoEnemies","playerTurn","replayManager","hasKey","showPath","updatePathToDoor","path","keyPathDots","had","hasParticleAt","particle","random","catchUp","fadeLighting","visDiff","fadeRgb","softCol","tileValuesToLightSource","updateDoorLightSources","linkedDoors","srcDoor","dirOff","sampleX","sampleY","vals","setLightingAngleStep","roomTiles","playersInRoom","raysPerEmitter","totalRayDistance","tilesToCompute","onScreen","invalidateBlurCache","oldVis","oldCol","renderBuffer","lx","ly","castTintAtAngle","lightingAngleStep","blendColorsArray","rgbToLuminance","unCastTintAtAngle","revertLightSources","processTintAtAngle","px","py","linearColor","sRGBToLinear","isPositionInRoom","intensity","E","ENEMIES_BLOCK_LIGHT","weightedLinearColor","colorEntry","normalized","linearToSRGB","colors","sum","accumulator","scalingFactor","scaledSum","clampedSum","drawColorLayer","colorOffscreenCtx","colorOffscreenCanvas","lastFillStyle","USE_WEBGL_BLUR","blurRenderer","shouldUseBlurCache","blurred8px","cacheBlurResult","blurred12px","COLOR_LAYER_COMPOSITE_OPERATION","ctxBlurEnabled","drawShadeLayer","isIOS","SHADE_LAYER_COMPOSITE_OPERATION","shadeOffscreenCtx","shadeOffscreenCanvas","WallTorch","computedAlpha","fillX","fillY","fillWidth","fillHeight","DOWN_LEFT","DOWN_RIGHT","UP_LEFT","UP_RIGHT","blurred5px","blurAmount","buildShadeOffscreenForSlicing","getBlurredShadeSourceForSlicing","shadeBlurTempCanvas","shadeBlurTempCtx","tctx","drawShadeSliceForTile","shadeSrc","fadeDir","sx","sy","shadeSliceTempCanvas","shadeSliceTempCtx","grad","drawBloomLayer","bloomOffscreenCtx","bloomOffscreenCanvas","updateBloom","drawEntities","skipLocalPlayer","useInlineShade","drawables","decorations","aAbove","bAbove","prevOp","prevAlpha","fade","info","isBelowDoorWall","below","drawShade","bestSightRadius","shadeOpacity","drawOverShade","old","SCRIPT_FONT_SIZE","createWallMask","maskCanvas","getExtremeLuminance","visValues","lightest","pointInside","returnVal","getTile","getBossDoor","queue","current","gid","linked","nextRoom","nextGid","hasLadder","ladderType","getDistanceToNearestLadder","currentRoom","hasNoEnemies","hasHitwarning","hasEnemy","isTileEmpty","checkX","checkY","bossFlag","startCameraAnimation","removeDoorObstructions","obstacles","otherDoor","pathObstacles","findPath","obstacle","startTile","additionalBlockedPositions","obstacleCandidates","Rock","Crate","Block","PottedPlant","startGridPos","targetGridPos","gridDisabledPositions","wouldBlockDoor","door1","door2","additionalBlockedPos","getEmptyTilesNotBlockingDoors","findShortestDoorPathTo","samePathOnly","startPathId","setIfUnset","getRoomGID","allowRoom","startGid","prevRoomGID","viaDoor","currentGid","cursorGid","buildTilePathPositions","m","hasVendingMachineAt","offsetOptions","shuffledOffsets","findPathToDoor","pointExists","cachedCanvas","colorCtx","shadeCtx","bloomCtx","builder","RoomBuilder","addDoorTorches","leftWallInfo","rightWallInfo","leftOpen","rightOpen","addTorches","numTorches","placeX","placeY","bottomWalls","wallTorches","bottomWallTorches","randomIndex","addChasms","xmin","xmax","ymin","ymax","addSpikeTraps","numSpikes","addEnemies","numEnemies","NO_ENEMIES","excludedCoords","tables","enemyParameters","enemyTables","max_depth_table","maxDepthTable","addEnemy","tt","spawnerAmounts","spawnerAmount","addSpawners","occultistAmounts","occultistAmount","addOccultists","addRandomEnemies","numEmptyTiles","factor","numSpawners","spawnTable","populator","getEnemyPoolForDepth","numOccultists","addBosses","bosses","bigZombie","addChests","numChests","addBombs","numBombs","addResources","numResources","GoldResource","EmeraldResource","addVendingMachine","table","applyGaussianBlur","BLUR_ENABLED","isAboveDoorWall","isDoorWall","innerWallType","hasWallAbove","hasWallBelow","shouldDrawBottom","rX","rY","rW","rH","ignore","tileSet","bigTilePositions","selectedTile","getEmptyAreaPosition","pick","pathIsBlockedBy","otherTile","x1","y1","x2","y2","changeReverb","newImpulsePath","roomArea","openTiles","tileSize","roomLeft","roomRight","roomTop","roomBottom","playerPosX","playerPosY","cameraX","screenShakeX","cameraY","screenShakeY","cameraWidth","cameraHeight","isOverlapping","getEmptyWall","emptyWalls","adjTile","removeEmptyWall","placeVendingMachineInWall","selectedWall","removedWallInfo","mine","HowlerGlobal","self","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_canPlayEvent","_navigator","masterGain","noAudio","usingWebAudio","autoSuspend","autoUnlock","_setup","vol","parseFloat","setupAudioContext","_webAudio","ids","_getSoundIds","_soundById","mute","stop","unload","codecs","ext","_autoSuspend","Audio","oncanplaythrough","_setupCodecs","audioTest","canPlayType","mpegTest","checkOpera","isOldOpera","checkSafari","safariVersion","isOldSafari","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","onended","_emit","_obtainHtml5Audio","testPlay","audio","suspend","_sounds","_paused","_suspendTimer","handleSuspension","_resumeAfterSuspend","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_xhr","method","xhr","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","url","loadBuffer","internal","_ended","_inactiveSound","_loadQueue","seek","_seek","timeout","setParams","_stop","playWebAudio","_playStart","noteGrainOn","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","to","linearRampToValueAtTime","_startFadeInterval","isGroup","steps","stepLen","lastTick","_fadeTo","cancelScheduledValues","loopStart","loopEnd","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","_endFn","remCache","cache","isId","msg","task","ended","_drain","limit","cnt","_panner","howl","_parent","createGainNode","_errorListener","_loadListener","_endListener","__default","loadSound","atob","dataView","Uint8Array","charCodeAt","XMLHttpRequest","responseType","setRequestHeader","safeXhrSend","send","arraybuffer","success","iOS","platform","appVersion","safari","_super","_pos","_orientation","stereo","pan","positionX","setTargetAtTime","positionY","positionZ","setPosition","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","createPanner","stall","Shrooms","DrawDirection","PlayerDirection","drawMoveQueue","byId","getRoomById","roomGID","renderer","mouseToTile","mouseTile","LEVEL_GENERATION","canMoveWithMouse","isFloorNormal","isFloorOffset","offsetMouseTile","hasEntityAtOffset","checkTileForEntity","sameX","sameY","moveData","tileOffsetX","tileOffsetY","tileToMouse","cursorX","cursorY","enemyInRange","getDirectionFromCoords","inputX","inputY","isDragging","setIcon","mousePos","cursorState","getCursorState","isMouseInUI","isEntityAttackable","isInventoryItemInteraction","hasSelectedItem","itemAtSelectedSlot","tryCollide","hasWeapon","foundEnd","enemyEnd","pushedEnemies","pushedEnemy","playSquish","moveDistance","hitShake","playLocked","updateLastPosition","playGrunt","enemyHurtMessage","playerStoneFootstep","turnCount","totalHealthDiff","lastTickHealth","otherX","otherY","shakeStrength","shakeX","Menu","Inventory","triedMove","tutorialRoom","justMoved","Y","PlayerInputHandler","PlayerActionProcessor","PlayerMovement","PlayerRenderer","minSightRadius","tips","getRandomTip","autoRegister","damageOverShield","autoRegistered","unshieldEnemies","enemiesToShield","enemyShieldCandidates","shieldEnemies","updateShieldedEnemies","shieldedEnemies","targetEnemy","farthest","dF","lastHealth","applyShieldTo","MAX_OCCULTIST_SHIELDS","compositeOperation","turbulence","gravity","iterations","segments","angleChange","springDamping","updateBeam","setTarget","DownladderMaker","createDownladder","newTile","distributeKey","Window","drawWall","EntitySpawner","spawnEntity","commandHandler","command","setupEventListeners","BishopStatue","DoorDir","doorType","openTunnelXOffset","link","isDrawnFirst","sorted","thisIdx","otherIdx","doorOpen","enteredFrom","changeLevelThroughDoor","tileXOffset","drawTopOf","lightOffsetX","lightOffsetY","frameLength","targetPosition","sharesCol","isRightAdjacent","isLeftAdjacent","isBelowAdjacent","isAboveAdjacent","triedAdjacentJump","performedJump","isAreaClear","ax","ay","jumping","jumpDistance","ox","oy","allowed","tickCount","halfJumped","HitWarningState","hw","loadHitWarning","hws","ProjectileType","ProjectileState","SPAWN","roomID","enemySpawn","EnemyState","WIZARD","wizardState","wizardParentID","wizardParentGID","loadProjectile","ps","loadEnemy","wizardRoom","wizardCandidate","byGid","byIndex","isShielded","hasDrop","ItemState","targetPlayerID","BARREL","BIGSKULL","CHARGE","chargeEnemyState","visualTargetX","visualTargetY","chestOpened","COAL","CRATE","EMERALD","GOLD","IronResource","IRON","KNIGHT","PLANT","Pot","POT","SKULL","CRAB","VENDINGMACHINE","isPlayerOpened","playerOpenedID","ZOMBIE","ARMOREDSKULL","ARMOREDZOMBIE","BIGKNIGHT","BIGZOMBIE","BISHOP","ENERGYWIZARD","FIREWIZARD","FROG","GLOWBUG","MUMMY","OCCULTIST","QUEEN","ROOK","SPIDER","Bush","BUSH","FISHING_SPOT","FURNACE","PUMPKIN","Sprout","SPROUT","TOMBSTONE","DecoBlock","DECO_BLOCK","TREE","ChestLayer","CHEST_LAYER","BOMB","BLOCK","DOWNLADDER_MAKER","ROCK","Mushrooms","MUSHROOMS","WARDEN","ObsidianResource","OBSIDIAN","CRUSHER","PAWN","BEETLE","BIGFROG","EXALTER","KING","GarnetResource","GARNET","ZirconResource","ZIRCON","AMBER","BIG_BLOCK","SmallBush","SMALL_BUSH","SUCCULENT","FALLEN_PILLAR","Candelabra","CANDELABRA","PAWN_STATUE","ROOK_STATUE","BISHOP_STATUE","es","loadItem","isBuffed","sh","RoomState","shouldSaveTile","TileState","MagmaPool","InsideLevelDoor","Button","CoffinTile","loadRoom","roomState","tileState","loadedTile","loadTile","gidToDoor","gidToInsideDoor","TileType","properties","INSIDE_LEVEL_DOOR","linkedGid","linkedDoorGID","BUTTON","doorsInRoom","nonOccultists","occultists","byChestKey","it","sourceChestX","sourceChestY","tagged","loaded","exalters","buffedEnemies","applyBuffTo","oc","assignments","nearest","best","Number","POSITIVE_INFINITY","allies","createBeam","buffedTargets","ItemType","ARMOR","BLUEGEM","CANDLE","COIN","GOLDENKEY","GREENGEM","HEART","KEY","LANTERN","REDGEM","TORCH","Dagger","DAGGER","DUALDAGGER","SHOTGUN","SPEAR","PICKAXE","BACKPACK","Apple","BESTIARY_BOOK","BOMB_ITEM","ENTITY_SPAWNER","FISH","FISHING_ROD","GEODE","GlowBugs","GLOW_BUGS","GodStone","GOD_STONE","GOLD_BAR","GOLD_RING","GARNET_RING","ZIRCON_RING","EmeraldRing","EMERALD_RING","AMBER_RING","GREEN_POTION","GREATAXE","HOURGLASS","ORANGE_GEM","SCYTHE","SCYTHE_HANDLE","SCYTHE_BLADE","SLINGSHOT","SPELLBOOK","SPELLBOOK_PAGE","STONE","Sword","SWORD","WARHAMMER","WEAPON_BLOOD","WEAPON_POISON","WEAPON_FRAGMENTS","BluePotion","BLUE_POTION","HAMMER","SHIELD_LEFT_FRAGMENT","SHIELD_RIGHT_FRAGMENT","IronOre","IRON_ORE","IronBar","IRON_BAR","levelRoom","candidateChest","targetRoom","savedLocal","fallbackRoom","setWielder","InventoryState","equipAnimAmount","isWeaponEquipped","weaponI","coins","PlayerState","resolvedRoom","playerRoom","roomIndexInGroup","findIndex","hasOpenVendingMachine","openVendingMachineRoomID","openVendingMachineRoomGID","openVendingMachineID","openVendingMachineGID","loadPlayer","coord","itemState","loadedItem","loadInventory","vmRoom","isMainPath","levelGID","GameState","gs","pr","groupCounts","roomGIDs","byPid","rs","pid","sidepathMeta","newWorld","levelsById","InputMod","LevelGenerator","setSeed","tempLevel","Level","setState","generateFirstNFloors","roomStates","pathIdToMinGroup","mg","sidepaths","collectedSideRooms","sp","caveRooms","added","activeLevel","existingGids","newRooms","pb","merged","startId","byPath","byGroup","reserve","playerId","offlinePlayer","resolvedBy","wantedPid","r0","r1","r2","r3","roomRef","prevRoom","allDoorsByGid","pending","byCoord","_pendingLinkedDoorGID","targetGid","localPlayer","gidRoom","groupAndIdRoom","coordRoom","indexRoom","center","chat","FLOOR","WALL_TORCH","WINDOW","DOWN_LADDER","linkedRoomGID","UP_LADDER","POOL","baseTileX","baseTileY","MAGMA_POOL","CHASM","SPAWN_FLOOR","SPIKE_TRAP","triggered","SPIKE","TRAP_DOOR","Bones","BONES","_doorType","tempDoor","unbuffEnemies","enemiesToBuff","enemyBuffCandidates","buffEnemies","updateBuffedEnemies","MAX_EXALTER_BUFFS","ValidationErrorType","enableDebugMessages","validateDungeonPartitions","params","emptyCheck","validateNotEmpty","roomCountCheck","validateMinimumRoomCount","minRoomCount","bossExistenceCheck","validateBossRoomExists","bossDistanceCheck","validateBossRoomDistance","overlapCheck","validateNoOverlaps","stairCheck","validateStairRoomExists","validateCavePartitions","requiredRoomCount","errorMessage","errorType","INSUFFICIENT_CAVE_ROOMS","ropeCaveCheck","validateRopeCaveExists","validateTutorialPartitions","INSUFFICIENT_ROOMS","logValidationError","EMPTY_PARTITIONS","BOSS_ROOM_MISSING","minDistance","bossRoom","BOSS_TOO_CLOSE","OVERLAPPING_PARTITIONS","STAIR_ROOM_MISSING","validateConnectivity","unconnectedRooms","validateRequiredRoomTypes","requiredTypes","presentTypes","missingTypes","validatePartitionQuality","tooSmallPartitions","invalidPartitions","validateWithDetailedReport","maxRoomCount","group","animStartX","animStartY","animTargetX","animTargetY","animT","animStartDistance","stackText","chestOffsetY","inChest","sineAnimateFactor","setDrawOffset","ITEM_AUTO_PICKUP","animateToInventory","genericPickup","canPickup","isNewItem","pickupMessage","foundItems","itemId","grouped","destroyOtherItems","drawBrokenSymbol","scaleFactor","drawItem","drawOffset","itemsOnTile","speed","posX","posY","fadeStart","pickupOffsetY","countToUse","countText","countX","drawCooldown","iconWidth","randomOffset","AUTO_PICKUP_ITEMS","destroy","enemyClasses","getParameters","maxRoomArea","splitProbabilities","wallRemoveProbability","numLoopDoorsRange","numberOfRooms","softMaxRoomArea","playBush","playWood","Explosion","fuseLength","keyPickup","findSidepathDownLadderByKeyID","ladder","ladderRoom","doorPath","firstDoor","prefix","_next","_registry","existingId","isReserved","resetForTest","BigInt","uuid","TypeError","of","byteToHex","unsafeStringify","getRandomValues","rnds8","rng","crypto","v1Bytes","rnds","msecs","nsecs","clockseq","buf","RangeError","tl","tmh","options","bytes","isV6","_v6","optionsKeys","updateV1State","v1ToV6","v6Bytes","_v1ToV6","getOutputLength","inputLength8","safeAdd","lsw","md5cmn","md5ff","md5gg","md5hh","md5ii","uint32ToUint8","xpad","Uint32Array","olda","oldb","oldc","oldd","wordsToMd5","output","uint8ToUint32","DNS","URL","v35","hash","namespace","valueBytes","unescape","encodeURIComponent","stringToBytes","namespaceBytes","v3","randomUUID","_v4","ROTL","K","H","newBytes","T","v5","v6ToV1","v7Bytes","seq","updateV7State","torchOffset","LevelImageGenerator","settled","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","generateRoomSize","median","calculateMass","generateRooms","numRooms","startingPattern","mass","vx","vy","roomsCollide","room1","room2","shouldSnap","horizontalGap","verticalGap","overlapsHorizontally","overlapsVertically","snapRooms","resolveCollision","overlapX","overlapY","totalMass","separation","simulatePhysics","iter","hasMovement","generatePNG","savePNG","filename","timestamp","toISOString","finalFilename","download","href","toDataURL","body","appendChild","click","removeChild","moveTo","lineTo","stroke","aspectRatio","hue","textAlign","generateRandomLevel","generator","getRooms","areRoomsAccessible","currentId","otherRoom","horizontallyAdjacent","verticallyAdjacent","calculateExponentialFalloff","falloffRate","exp","rFinal","gFinal","bFinal","toHex","randomSineInt","roundedMax","roundedMin","clampedMedian","medianPosition","skewedValue","boundedValue","randTableWeighted","weight","totalWeight","randomValue","standardDeviation","u1","u2","normalValue","clampedValue","KEY_DOWN","KEY_UP","MOUSE_LEFT_CLICK","MOUSE_RIGHT_CLICK","TOUCH_START","TOUCH_MOVE","TOUCH_END","TAP","TAP_HOLD","MOUSE_DOWN","MOUSE_UP","CHAT_MESSAGE","ENEMY_SEEN_PLAYER","CAMERA_SPEED","SHADE_LEVELS","ENTITY_SHADE_LEVELS","MAX_SCALE","MIN_SCALE","smoothScaling","KEY_REPEAT_TIME","SWIPE_HOLD_REPEAT_TIME","SWIPE_HOLD_INITIAL_DELAY","CHAT_APPEAR_TIME","CHAT_FADE_TIME","REPLAY_DEBUG","DEFAULTWIDTH","DEFAULTHEIGHT","drawOtherRooms","FONT_SIZE","BIG_FONT_SIZE","RED","GREEN","ARMOR_GREY","HIT_ENEMY_TEXT_COLOR","HEALTH_BUFF_COLOR","MISS_COLOR","PERSISTENT_HEALTH_BAR","HOVER_TEXT_FOLLOWS_MOUSE","INVENTORY_HOVER_TEXT_FOLLOWS_MOUSE","IN_GAME_HOVER_TEXT_FOLLOWS_MOUSE","VENDING_MACHINE_HOVER_TEXT_FOLLOWS_MOUSE","USE_OPTIMIZED_SHADING","USE_PNG_LEVELS","SHADE_LAYER_COMPOSITE_OPERATIONS","COLOR_LAYER_COMPOSITE_OPERATIONS","SET_COLOR_LAYER_COMPOSITE_OPERATION","back","currentIndex","nextIndex","TOGGLE_USE_OPTIMIZED_SHADING","TOGGLE_ENEMIES_BLOCK_LIGHT","TOGGLE_USE_WEBGL_BLUR","TOGGLE_HIGH_QUALITY_BLUR","SET_SCALE","INCREASE_SCALE","DECREASE_SCALE","FIND_SCALE","bestScale","bestDifference","dimension","devicePixelRatio","tileMeasure","STARTING_INVENTORY","STARTING_DEV_INVENTORY","DarkVase","thisArg","getPrototypeOf","iterator","toStringTag","Symbol","kindOf","thing","kindOfTest","typeOfTest","isUndefined","isBuffer","isFunction$1","isArrayBuffer","isNumber","isObject","isPlainObject","isDate","isFile","isBlob","isFileList","isURLSearchParams","isReadableStream","isRequest","isResponse","isHeaders","allOwnKeys","getOwnPropertyNames","findKey","_key","_global","isContextDefined","isTypedArray","TypedArray","isHTMLForm","isRegExp","reduceDescriptors","reducer","descriptors","getOwnPropertyDescriptors","reducedDescriptors","descriptor","defineProperties","isAsyncFn","_setImmediate","setImmediateSupported","setImmediate","postMessageSupported","postMessage","callbacks","asap","queueMicrotask","nextTick","utils$1","isFormData","kind","FormData","isArrayBufferView","ArrayBuffer","isView","isBoolean","isEmptyObject","isFunction","isStream","pipe","merge","caseless","skipUndefined","assignValue","targetKey","stripBOM","inherits","superConstructor","defineProperty","toFlatObject","sourceObj","destObj","propFilter","endsWith","searchString","String","lastIndex","toArray","forEachEntry","_iterator","done","pair","matchAll","regExp","hasOwnProp","freezeMethods","enumerable","writable","toObjectSet","arrayOrString","delimiter","define","toCamelCase","noop","toFiniteNumber","defaultValue","isFinite","global","isSpecCompliantForm","toJSONObject","visit","reducedValue","isThenable","isIterable","AxiosError","request","captureStackTrace","toJSON","number","fileName","lineNumber","columnNumber","prototype$1","isVisitable","removeBrackets","renderKey","dots","customProps","axiosError","errCode","cause","configurable","predicates","toFormData","formData","metaTokens","indexes","option","visitor","defaultVisitor","useBlob","Blob","convertValue","Buffer","isFlatArray","el","exposedHelpers","build","encode$1","charMap","AxiosURLSearchParams","_pairs","encode","buildURL","_encode","serialize","serializeFn","serializedParams","hashmarkIndex","encoder","InterceptorManager$1","handlers","use","fulfilled","rejected","synchronous","runWhen","eject","transitionalDefaults","silentJSONParsing","forcedJSONParsing","clarifyTimeoutError","platform$1","isBrowser","classes","URLSearchParams","protocols","hasBrowserEnv","hasStandardBrowserEnv","product","hasStandardBrowserWebWorkerEnv","WorkerGlobalScope","importScripts","origin","freeze","__proto__","formDataToJSON","buildPath","isNumericKey","isLast","arrayToObject","parsePropPath","defaults","transitional","adapter","transformRequest","contentType","getContentType","hasJSONContentType","isObjectPayload","setContentType","helpers","isNode","toURLEncodedForm","formSerializer","_FormData","env","rawValue","stringifySafely","transformResponse","JSONRequested","strictJSONParsing","parseReviver","ERR_BAD_RESPONSE","xsrfCookieName","xsrfHeaderName","maxContentLength","maxBodyLength","validateStatus","common","defaults$1","ignoreDuplicateOf","$internals","normalizeHeader","normalizeValue","matchHeaderValue","isHeaderNameFilter","AxiosHeaders","valueOrRewrite","rewrite","setHeader","_value","_header","_rewrite","lHeader","setHeaders","rawHeaders","parsed","parseHeaders","dest","tokensRE","parseTokens","matcher","deleted","deleteHeader","normalize","char","formatHeader","asStrings","getSetCookie","first","computed","accessor","accessors","defineAccessor","accessorName","methodName","arg1","arg2","arg3","buildAccessors","mapped","headerValue","AxiosHeaders$1","transformData","fns","isCancel","__CANCEL__","CanceledError","ERR_CANCELED","settle","ERR_BAD_REQUEST","progressEventReducer","isDownloadStream","freq","bytesNotified","_speedometer","samplesCount","timestamps","firstSampleTS","head","tail","chunkLength","startedAt","bytesCount","passed","speedometer","lastArgs","threshold","invoke","lengthComputable","progressBytes","estimated","throttle","progressEventDecorator","throttled","asyncDecorator","isURLSameOrigin","isMSIE","host","port","cookies","write","expires","domain","secure","toGMTString","read","RegExp","decodeURIComponent","buildFullPath","requestedURL","allowAbsoluteUrls","isRelativeUrl","relativeURL","combineURLs","headersToObject","mergeConfig","config1","config2","getMergedValue","mergeDeepProperties","valueFromConfig2","defaultToConfig2","mergeDirectKeys","mergeMap","paramsSerializer","timeoutMessage","withXSRFToken","onUploadProgress","onDownloadProgress","decompress","beforeRedirect","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding","configValue","resolveConfig","newConfig","auth","btoa","username","password","getHeaders","formHeaders","allowedHeaders","xsrfValue","xhrAdapter","_config","requestData","requestHeaders","onCanceled","uploadThrottled","downloadThrottled","flushUpload","flushDownload","unsubscribe","signal","onloadend","responseHeaders","getAllResponseHeaders","responseText","statusText","onreadystatechange","responseURL","onabort","ECONNABORTED","ERR_NETWORK","ontimeout","timeoutErrorMessage","ETIMEDOUT","upload","cancel","abort","subscribe","aborted","parseProtocol","composeSignals$1","signals","Boolean","controller","AbortController","reason","streamChunk","chunk","chunkSize","byteLength","trackStream","stream","onProgress","onFinish","iterable","asyncIterator","reader","getReader","readStream","readBytes","_onFinish","ReadableStream","pull","loadedBytes","enqueue","return","highWaterMark","globalFetchAPI","Request","Response","ReadableStream$1","TextEncoder","factory","envFetch","isFetchSupported","isRequestSupported","isResponseSupported","isReadableStreamSupported","encodeText","supportsRequestStream","duplexAccessed","hasContentType","duplex","supportsResponseStream","resolvers","ERR_NOT_SUPPORT","fetchOptions","_fetch","composedSignal","toAbortSignal","requestContentLength","getContentLength","_request","getBodyLength","resolveBodyLength","contentTypeHeader","flush","isCredentialsSupported","resolvedOptions","credentials","isStreamResponse","responseContentLength","responseData","seedCache","getFetch","seeds","knownAdapters","http","renderReason","isResolvedHandle","adapters","nameOrAdapter","rejectedReasons","reasons","throwIfCancellationRequested","throwIfRequested","dispatchRequest","validators$1","deprecatedWarnings","validator","formatMessage","opt","desc","ERR_DEPRECATED","spelling","correctSpelling","assertOptions","schema","allowUnknown","ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","validators","Axios","instanceConfig","interceptors","configOrUrl","dummy","boolean","function","baseUrl","withXsrfToken","contextHeaders","requestInterceptorChain","synchronousRequestInterceptors","interceptor","responseInterceptorChain","promise","chain","onFulfilled","onRejected","getUri","generateHTTPMethod","isForm","Axios$1","CancelToken","executor","resolvePromise","_listeners","onfulfilled","_resolve","CancelToken$1","HttpStatusCode","Continue","SwitchingProtocols","Processing","EarlyHints","Ok","Created","Accepted","NonAuthoritativeInformation","NoContent","ResetContent","PartialContent","MultiStatus","AlreadyReported","ImUsed","MultipleChoices","MovedPermanently","Found","SeeOther","NotModified","UseProxy","Unused","TemporaryRedirect","PermanentRedirect","BadRequest","Unauthorized","PaymentRequired","Forbidden","NotFound","MethodNotAllowed","NotAcceptable","ProxyAuthenticationRequired","RequestTimeout","Conflict","Gone","LengthRequired","PreconditionFailed","PayloadTooLarge","UriTooLong","UnsupportedMediaType","RangeNotSatisfiable","ExpectationFailed","ImATeapot","MisdirectedRequest","UnprocessableEntity","Locked","FailedDependency","TooEarly","UpgradeRequired","PreconditionRequired","TooManyRequests","RequestHeaderFieldsTooLarge","UnavailableForLegalReasons","InternalServerError","NotImplemented","BadGateway","ServiceUnavailable","GatewayTimeout","HttpVersionNotSupported","VariantAlsoNegotiates","InsufficientStorage","LoopDetected","NotExtended","NetworkAuthenticationRequired","HttpStatusCode$1","axios","createInstance","defaultConfig","Cancel","all","promises","spread","isAxiosError","formToJSON","getAdapter","default","leftCorner","rightCorner","SAVE_PREFIX","json","setCookieChunks","getCookieChunks","meta","NaN","deleteCookie","leftQuickbar","rightQuickbar","spaceQuickbar","fromIndex","toIndex","existing","alertNearbyEnemies","BASE_ENEMY_ALERT_NEARBY_RANGE","handleSeenPlayer","hitCount","startTick","effectTick","tickPoison","tickBleed","getDisablePositions","stun","retreatX","retreatY","foundValidRetreat","diagonal1X","diagonal1Y","diagonal2X","diagonal2Y","checkFirst","firstX","firstY","secondX","secondY","findFarTile","tilesWithDistances","farTiles","heardPlayer","BASE_ENEMY_ALERT_RANGE","effectStartTick","poisonHitCount","bleedHitCount","PathType","isTopOpen","isRightOpen","isBottomOpen","isLeftOpen","rand_mid","w1","w2","h1","h2","point_in","point_next_to","get_branch_point","points","pathIndex","LevelValidator","visualizer","GenerationVisualizer","generateDungeonPartitions","controls","validationResult","generateDungeonCandidate","generateCavePartitions","hasLinearity","linearity","branching","loopiness","generateCaveCandidate","generateTutorialPartitions","map_w","map_h","splitPartitions","splitPartition","removeWallRooms","num_rooms","addCaveLoops","prob","getWallRooms","wallRooms","wallRoom","found_boss","doors_found","num_doors","tries","max_tries","point","pSecondDoor","num_loop_doors","found_door","not_already_connected","getVisualizer","getWallType","pointX","pointY","rectX","rectY","NORTH","SOUTH","WEST","EAST","countWallNeighbors","buildEmptyRoom","addWallBlocks","addWallBlocksStandard","numBlocks","blockW","blockH","addWallBlocksVariant","baseW","holes","enemyIdToName","enemyClassToId","skipPopulation","addedDownladder","populateRooms","addEnvironmentalFeatures","populate","populateByEnvironment","furthestFromUpLadder","getFurthestFromLadder","populateBoss","addDownladder","populateCaveEnvironment","populateForestEnvironment","populateMagmaCaveEnvironment","populateCastleEnvironment","populateDefaultEnvironment","setExitRoom","setStartRoom","addTrainingDownladder","validTiles","dl","downLadderRoom","lockOverride","populateByType","roomDiff","populateEmpty","populateTreasure","populateDungeon","populateBigDungeon","populateSpawner","populatePuzzle","crateTiles","numCrates","populateSpikeCorridor","populateCave","populateUpLadder","populateDownLadder","populateWeaponGroup","topY","minInteriorX","maxInteriorX","topRowTiles","xs","midX","leftCandidates","rightCandidates","availableX","preferredLeft","preferredRight","leftX","rightX","weapons","ItemGroup","populateRopeHole","populateRopeCave","populateShop","addTorchesByArea","chance","addWindowsByArea","numWindows","medianDensity","MEDIAN_ROOM_DENSITY","levelEnemyPoolIds","generateEnemyPoolIds","addProps","numProps","envData","environmentData","selectedProp","class","additionalParams","addPropsWithClustering","clusteringOptions","PropClusterer","generateClusteredPositions","neighborhood","populateDungeonEnvironment","getNumProps","falloffExponent","baseScore","maxInfluenceDistance","useSeedPosition","bottomWall","addDoorWindows","addWindows","wallWindows","bottomWallWindows","addRectangularTileArea","TileClass","addMagmaPools","addPools","addEnemiesUnified","availableEnemies","getAvailableEnemiesForRoom","spawnEnemiesFromPool","addSpecialEnemies","allowedEnemyIds","enemyPool","selectedEnemy","specialSpawnLogic","canPlaceBigEnemy","clearFloorForBigEnemy","removeTilesForEnemy","SPAWNER_MIN_DEPTH","OCCULTIST_MIN_DEPTH","newEnemies","encounteredEnemies","newEnemiesToAddCount","LIMIT_ENEMY_TYPES","NEW_ENEMIES_PER_LEVEL","newEnemiesToAdd","getRandomElements","enemyPoolIds","numberOfTypes","getNumberOfEnemyTypes","selectedEnemyIds","DEPTH_ZERO_ENEMY_TYPES","ENEMY_TYPES_BASE_COUNT","array","shuffled","meanValue","ENEMY_DENSITY_DEPTH_OFFSET","ENEMY_DENSITY_DEPTH_MULTIPLIER","MAX_ENEMY_DENSITY","baseEnemyCount","lastSpawner","maxPossibleSpawners","SPAWNER_AREA_THRESHOLD","SPAWNER_SPAWN_CHANCE","lastOccultist","maxPossibleOccultists","OCCULTIST_AREA_THRESHOLD","OCCULTIST_SPAWN_CHANCE","PRESET_BOSSES","bigZombie2","bigZombie3","addRandomTorches","randTorches","none","low","medium","high","addRandomWindows","bossDoor","detectMobile","opera","enableAudioForMobile","audioContextResumed","addMobileAudioHandlers","handler","enableAudio","priority","PRIORITY","INTERACTIONS","currentlyPlaying","COMBAT","stopSoundWithReverb","AMBIENT","FOOTSTEPS","CRITICAL","forestMusicId","caveMusicId","ambientSoundId","loadSounds","createHowlArray","basePath","maxConcurrent","createHowl","magicSound","warHammerSound","healSound","eatSounds","playerStoneFootsteps","playerGrassFootsteps","playerDirtFootsteps","enemyFootsteps","swingSounds","hitSounds","hurtSounds","sliceSound","shortSliceSound","parrySounds","gruntSounds","enemySpawnSound","wooshSounds","chestSounds","coinPickupSounds","genericPickupSound","keyPickupSound","backpackSound","smithSound","lockedSound","woodSound","squishSound","crushSounds","miningSounds","breakRockSound","unlockSounds","doorOpenSounds","potSmashSounds","bushSounds","pushSounds","fishingCastSounds","fishingReelSound","fishingCatchSounds","bombSounds","fuseBurnSound","fuseLoopSound","fuseStartSound","graveSound","ambientSound","goreSound","enemyFootstep","hard","playAmbient","stopAmbient","playFuse","stopFuse","playGore","playBomb","teleportToExit","NullProp","rumbleOffsetX","gem","newX2","newY2","newX3","newY3","jumpOverX","jumpOverY","ChatMessage","cachedLines","cachedWidth","getWrappedLines","maxWidth","wrapText","words","currentLine","word","testLine","times","fps","_replayManager","ReplayManager","keyboardHeightPx","loginMessage","startScreenAlpha","ellipsisFrame","ellipsisStartTime","justTransitioned","tip","Tips","currentLevelGenerator","focusTimeout","FOCUS_TIMEOUT_DURATION","wasMuted","wasStarted","lastChatWidth","savedGameState","updateDepth","getLevelById","registerLevel","registerRooms","setCurrentRoomById","setPlayer","startFreshWorld","ANIMATION_CONSTANT","newRoom","entryPosition","prevLevel","transitionStartTime","transitioningLadder","hasDir","transitionX","transitionY","upwardTransition","sideTransition","sideTransitionDirection","run","previousFrameTimestamp","refreshDimensions","timeSinceSwipe","lerp","convertSeedToNumber","seedInput","seedNumber","keyRoom","getKeyRoom","downladder","onResize","EQUIP_USES_TURN","generateAndShowRoomLayout","settings","originalHealth","originalX","originalY","maxScale","updateScale","setAttribute","maxWidthScale","maxHeightScale","integerScale","newChatWidth","finalX","finalY","screenShakeActive","shakeAmountX","shakeAmountY","shakeFrame","screenShakeCutoff","drawRooms","sortedRooms","drawRoomShadeAndColor","drawStartScreen","startString","drawTipScreen","levelOffsetX","levelOffsetY","playerOffsetX","playerOffsetY","playerCX","playerCY","extraTileLerp","newLevelOffsetX","newLevelOffsetY","deadFrames","ditherFrame","drawScreenShake","applyCamera","drawChat","keyboardOffset","CHAT_BOTTOM_Y","CHAT_OPACITY","CHAT_MAX_WIDTH","LINE_HEIGHT","linesRemaining","totalHeight","messageHeights","messageHeight","age","linesDrawnThisMessage","lineY","lineIndex","drawCount","targetCamera","cameraTargetX","cameraTargetY","updateCamera","updateCameraAnimation","resetScreenShake","skipCameraAnimation","skipMsg","bg","ellipsis","animateEllipsis","dimensions","handleWindowBlur","handleWindowFocus","usernameElement","autocomplete","autocapitalize","chatElement","autocorrect","spellcheck","inputMode","TextBox","worldCodes","selectedWorldCode","resourcesLoaded","tileset","tilesetUrl","objset","objsetUrl","mobset","mobsetUrl","itemset","itemsetUrl","fxset","fxsetUrl","fontsheet","fontUrl","checkResourcesLoaded","vv","visualViewport","updateKeyboard","layoutH","visualH","offsetTop","baseline","CameraAnimation","saveOnExit","visibilityState","patterns","accessible","accessibilityText","inputLineHeight","CHAT_X","letters","letter_widths","letter_positions","letter","bx","letter_x","fillColor","drawHelper","sX","sY","sW","sH","dX","dY","dW","dH","shadeLevel","getShadeCanvasKey","shCtx","getHoverText","strings","string","placedPositions","availableTiles","seedPosition","getAvailableTiles","isValidPosition","placePosition","randomPosition","selectNextPosition","scoredTiles","score","calculateTileScore","totalScore","cumulativeScore","placed","calculateDistance","pos2","OPEN_TIME","FILL_COLOR","OUTLINE_COLOR","EQUIP_COLOR","_expansion","grabbedItem","_mouseDownStartX","_mouseDownStartY","_mouseDownItem","_wasHoldDetected","_isDragging","_dragStartItem","_dragStartSlot","itemEquipAnimations","usingItem","usingItemIndex","itemUse","getIndexOfItem","oldSelX","moveItemToSlot","otherItem","otherIndex","grabItem","releaseItem","targetIndex","drawDraggedItem","dropItem","subtractCoins","addCoins","checkForDragStart","textWrap","drawCoins","coinTileX","coinX","coinY","maxCoinX","checkHeight","drawQuickbar","isActive","xIdx","yOff","selStartX","selStartY","hg2","clearSize","selOffset","drawUsingItem","highlightStartX","highlightStartY","updateEquipAnimAmount","targetAmount","currentAmount","isInBounds","invRows","mainBgX","mainBgY","drawInventoryButton","XPCounter","hg","highlightX","highlightY","yIdx","slotX","slotY","selectedIdx","topPhrase","actionTextWidth","selectedItem","initiateDrag","invBounds","quickbarBounds","targetSlot","placeItemInSlot","existingItem","fromIdx","toIdx","oldTotalSlots","newTotalSlots","expandInventory","additionalRows","time","GRAVITY","motionInfluence","MOTION_INFLUENCE","TURBULENCE","velocityDecay","VELOCITY_DECAY","ANGLE_CHANGE","maxVelocity","MAX_VELOCITY","damping","DAMPING","springStiffness","SPRING_STIFFNESS","SPRING_DAMPING","ITERATIONS","SEGMENTS","initializePoints","prevStartX","prevStartY","prevEndX","prevEndY","setPhysics","startForceX","startForceY","endForceX","endForceY","influence","simulateRope","xIncrement","yIncrement","velocityX","velocityY","applyTurbulence","turbulenceX","turbulenceY","iterationsThisFrame","iteration","prevPoint","nextPoint","springForceXPrev","springForceYPrev","springForceXNext","springForceYNext","relativeVXPrev","relativeVYPrev","relativeVXNext","relativeVYNext","segmentLength","constraintIteration","percent","renderBeam","hasPlayer","hitEnemies","entitiesAtFirstTile","entitiesAtSecondTile","nonEnemiesAtFirstTile","enemiesAtFirstTile","enemiesAtSecondTile","UNBREAKABLE_ITEMGROUP_LOOT","PNG_LEVEL_PROBABILITY","MAIN_PATH_BRANCHING","MAIN_PATH_LOOPINESS","FOREST_ENEMY_REDUCTION","ANIM_COUNT","toggleReveal","revealTick","isTileFree","getTwoTileCandidates","axis","midY","getThreeTileCandidates","mid1X","mid1Y","mid2X","mid2Y","pickBestCandidate","preferXAxis","dxToTarget","dyToTarget","signX","signY","da","db","aTowards","bTowards","getOneTileCandidates","pickBestOneTileCandidate","aAxis","bAxis","attackOrMoveTo","destX","destY","stepDist","candidate2","candidate3","preservesLine3","alignsAxis3","preservesLine2","alignsAxis2","manhattanFromStart","dirX","dirY","extX","extY","oneTileCandidates","candidates3","candidates2","playerHit","pronoun","drawEquipped","degradeAmount","getFloatingOffset","currentFloorFirstLevelID","setOpenWallsForPartitions","createLevel","Room","doors_added","existingDoor","partitionGenerator","PartitionGenerator","levelParams","LevelParameterGenerator","pathHash","shouldUsePNG","rollPNG","shouldUsePngForLevel","pngUrl","selectRandomLevelForDepth","pngPartitionGenerator","overlapValidation","mainEnvType","newLevel","setRooms","setRoomSkins","numFloors","PngPartitionGenerator","probability","imul","availableVariations","fullPath","checkImageExists","selectedIndex","selectedPath","imagePath","img","distanceToParent","cursorSize","clickX","clickY","rawClickX","rawClickY","lastMouseX","lastMouseY","posChangeTime","cursorTimeout","icon","mobile","drawCursor","timeSinceChange","fadeStartTime","getTilePosition","getInventoryPosition","press","pressed","unpress","turnsSincePressed","wallDirections","getDoor","soundPaused","explode","createLightSource","explosion","setDrawableY","dropProb","enemyMinimumDepth","paths","pathsById","dlKey","getLadderRoom","initializeLevelArray","levelArray","furthestRoom","furthestDistance","getFurthestFromLadders","furthestMinDistance","distanceToUp","distanceToDown","upDistance","downDistance","distances","loadRoomsIntoLevelArray","Environment","Populator","getEnemyParameters","getDownLadder","disableCoords","randomRoom","randomTile","mainPath","minDepths","underwater","numGems","gemTypes","gemType","toK","maxAgeDays","maxAge","toV","parts","part","CHUNK_SIZE","out","crusherPositions","crusherCount","crushers","createCrusherBlocks","createCrusherChains","getCrusherPositions","setCrusherDrawableY","initializeCrushers","removeCrusherChains","updateCrusherChains","ChargeEnemyState","maxChargeDistance","trailAlpha","canMoveOver","IDLE","blocked","distanceX","distanceY","ALERTED","distanceMoved","CHARGING","trailFrame","lineCap","drawChargeBeam","SpiderState","ticksSince","HIDDEN","HIDING","preservesLine","alignsAxis","VISIBLE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","amdO","definition","Function"],"sourceRoot":""}
